unit Access_2007;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// PASTLWTR : 1.2
// File generated on 2010-09-02 11:27:54 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\Microsoft Office\Office12\MSACC.OLB (1)
// LIBID: {4AFFC9A0-5F99-101B-AF4E-00AA003F0F07}
// LCID: 0
// Helpfile: C:\Program Files\Microsoft Office\Office12\vbaac10.chm
// HelpString: Microsoft Access 12.0 Object Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
//   (2) v5.0 DAO, (C:\Program Files\Common Files\Microsoft Shared\DAO\dao360.dll)
//   (3) v2.4 Office, (C:\Program Files\Common Files\Microsoft Shared\OFFICE12\MSO.DLL)
//   (4) v2.5 ADODB, (C:\Program Files\Common Files\System\ado\msado25.tlb)
//   (5) v5.3 VBIDE, (C:\Program Files\Common Files\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB)
// Errors:
//   Hint: Symbol 'Hyperlink' renamed to 'AccessHyperlink'
//   Hint: Symbol 'Page' renamed to 'AccessPage'
//   Hint: Symbol 'Control' renamed to 'AccessControl'
//   Hint: Symbol 'Label' renamed to 'AccessLabel'
//   Hint: Symbol 'Rectangle' renamed to 'AccessRectangle'
//   Hint: Symbol 'Line' renamed to 'AccessLine'
//   Hint: Symbol 'Image' renamed to 'AccessImage'
//   Hint: Symbol 'CommandButton' renamed to 'AccessCommandButton'
//   Hint: Symbol 'OptionButton' renamed to 'AccessOptionButton'
//   Hint: Symbol 'CheckBox' renamed to 'AccessCheckBox'
//   Hint: Symbol 'OptionGroup' renamed to 'AccessOptionGroup'
//   Hint: Symbol 'BoundObjectFrame' renamed to 'AccessBoundObjectFrame'
//   Hint: Symbol 'TextBox' renamed to 'AccessTextBox'
//   Hint: Symbol 'ListBox' renamed to 'AccessListBox'
//   Hint: Symbol 'ComboBox' renamed to 'AccessComboBox'
//   Hint: Symbol 'ObjectFrame' renamed to 'AccessObjectFrame'
//   Hint: Symbol 'PageBreak' renamed to 'AccessPageBreak'
//   Hint: Symbol 'ToggleButton' renamed to 'AccessToggleButton'
//   Hint: Symbol 'PaletteButton' renamed to 'AccessPaletteButton'
//   Hint: Symbol 'SubForm' renamed to 'AccessSubForm'
//   Hint: Symbol 'SubReport' renamed to 'AccessSubReport'
//   Hint: Symbol 'CustomControl' renamed to 'AccessCustomControl'
//   Hint: Symbol 'TabControl' renamed to 'AccessTabControl'
//   Hint: Symbol 'Section' renamed to 'AccessSection'
//   Hint: Symbol 'GroupLevel' renamed to 'AccessGroupLevel'
//   Hint: Symbol 'Application' renamed to 'AccessApplication'
//   Hint: Symbol 'References' renamed to 'AccessReferences'
//   Hint: Symbol 'WebOptions' renamed to 'AccessWebOptions'
//   Hint: TypeInfo 'Class' changed to 'Class_'
//   Hint: Symbol 'Form' renamed to 'AccessForm'
//   Hint: Symbol 'Report' renamed to 'AccessReport'
//   Hint: Parameter 'Record' of DoCmd.GoToRecord changed to 'Record_'
//   Hint: Parameter 'To' of DoCmd.SendObject changed to 'To_'
//   Hint: Parameter 'Record' of DoCmd.SearchForRecord changed to 'Record_'
//   Hint: Parameter 'Property' of DoCmd.SetProperty changed to 'Property_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of _FormatCondition.Modify changed to 'Type_'
//   Hint: Parameter 'Type' of FormatConditions.Add changed to 'Type_'
//   Hint: Member 'Object' of '_Control' changed to 'Object_'
//   Hint: Member 'Goto' of '_Control' changed to 'Goto_'
//   Hint: Member 'Goto' of '_Image' changed to 'Goto_'
//   Hint: Member 'Goto' of '_CommandButton' changed to 'Goto_'
//   Hint: Member 'Goto' of '_OptionButton' changed to 'Goto_'
//   Hint: Member 'Goto' of '_Checkbox' changed to 'Goto_'
//   Hint: Member 'Goto' of '_OptionGroup' changed to 'Goto_'
//   Hint: Member 'Object' of '_BoundObjectFrame' changed to 'Object_'
//   Hint: Member 'Goto' of '_BoundObjectFrame' changed to 'Goto_'
//   Hint: Member 'Class' of '_BoundObjectFrame' changed to 'Class_'
//   Hint: Member 'Goto' of '_Textbox' changed to 'Goto_'
//   Hint: Member 'Goto' of '_ListBox' changed to 'Goto_'
//   Hint: Member 'Goto' of '_Combobox' changed to 'Goto_'
//   Hint: Member 'Object' of '_ObjectFrame' changed to 'Object_'
//   Hint: Member 'Goto' of '_ObjectFrame' changed to 'Goto_'
//   Hint: Member 'Class' of '_ObjectFrame' changed to 'Class_'
//   Hint: Member 'Goto' of '_ToggleButton' changed to 'Goto_'
//   Hint: Member 'Goto' of '_PaletteButton' changed to 'Goto_'
//   Hint: Member 'Goto' of '_SubForm' changed to 'Goto_'
//   Hint: Member 'Object' of '_CustomControl' changed to 'Object_'
//   Hint: Member 'Goto' of '_CustomControl' changed to 'Goto_'
//   Hint: Member 'Class' of '_CustomControl' changed to 'Class_'
//   Hint: Member 'Goto' of '_Page' changed to 'Goto_'
//   Hint: Enum Member 'Set' of 'ProcKind' changed to 'Set_'
//   Hint: Parameter 'String' of Module.AddFromString changed to 'String_'
//   Hint: Parameter 'String' of Module.Lines changed to 'String_'
//   Hint: Parameter 'String' of Module.InsertLines changed to 'String_'
//   Hint: Parameter 'String' of Module.ReplaceLine changed to 'String_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'end' of _Report.Circle changed to 'end_'
//   Hint: Parameter 'Procedure' of _Application.Run changed to 'Procedure_'
//   Hint: Parameter 'String' of _Application.GUIDFromString changed to 'String_'
//   Hint: Parameter 'var' of _References.Item changed to 'var_'
//   Hint: Parameter 'var' of DataAccessPages.Item changed to 'var_'
//   Hint: Parameter 'var' of AllObjects.Item changed to 'var_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Label' of _WizHook.OpenScript changed to 'Label_'
//   Hint: Parameter 'String' of _WizHook.BracketString changed to 'String_'
//   Hint: Parameter 'File' of _WizHook.OpenPictureFile changed to 'File_'
//   Hint: Parameter 'In' of _WizHook.EnglishPictToLocal changed to 'In_'
//   Hint: Parameter 'In' of _WizHook.TranslateExpression changed to 'In_'
//   Hint: Parameter 'File' of _WizHook.FileExists changed to 'File_'
//   Hint: Parameter 'File' of _WizHook.SplitPath changed to 'File_'
//   Hint: Parameter 'Array' of _WizHook.SortStringArray changed to 'Array_'
//   Hint: Parameter 'File' of _WizHook.GetFileName changed to 'File_'
//   Hint: Parameter 'File' of _WizHook.GetFileName2 changed to 'File_'
//   Hint: Parameter 'end' of _Report2.Circle changed to 'end_'
//   Hint: Parameter 'var' of _AdditionalData.Add changed to 'var_'
//   Hint: Parameter 'end' of _Report3.Circle changed to 'end_'
//   Hint: Member 'Goto' of '_Attachment' changed to 'Goto_'
//   Hint: Parameter 'var' of _Attachment.FileName changed to 'var_'
//   Hint: Parameter 'var' of _Attachment.FileType changed to 'var_'
//   Hint: Parameter 'var' of _Attachment.FileURL changed to 'var_'
//   Hint: Parameter 'var' of _Attachment.FileData changed to 'var_'
//   Hint: Parameter 'var' of _Attachment.PictureDisp changed to 'var_'
//   Hint: Parameter 'var' of _TempVars.Remove changed to 'var_'
//   Error creating palette bitmap of (TFormatCondition) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAccessHyperlink) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAccessPage) : Registry key CLSID\{3B06E973-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessControl) : Registry key CLSID\{02F92C80-8F8E-101B-AF4E-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessLabel) : Registry key CLSID\{3B06E947-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessRectangle) : Registry key CLSID\{3B06E949-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessLine) : Registry key CLSID\{3B06E94B-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessImage) : Registry key CLSID\{3B06E94D-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessCommandButton) : Registry key CLSID\{3B06E94F-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessOptionButton) : Registry key CLSID\{3B06E951-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessCheckBox) : Registry key CLSID\{3B06E953-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessOptionGroup) : Registry key CLSID\{3B06E955-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessBoundObjectFrame) : Registry key CLSID\{3B06E957-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessTextBox) : Registry key CLSID\{3B06E945-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessListBox) : Registry key CLSID\{3B06E959-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessComboBox) : Registry key CLSID\{3B06E95B-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessObjectFrame) : Registry key CLSID\{3B06E95D-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessPageBreak) : Registry key CLSID\{3B06E95F-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessToggleButton) : Registry key CLSID\{3B06E961-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessSubForm) : Registry key CLSID\{3B06E963-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessCustomControl) : Registry key CLSID\{3B06E967-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessTabControl) : Registry key CLSID\{3B06E970-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessSection) : Registry key CLSID\{BC9E4355-F037-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessGroupLevel) : Registry key CLSID\{BC9E4356-F037-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TAccessReferences) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAllForms) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAllReports) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAllMacros) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAllModules) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAllTables) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAllQueries) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAllViews) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAllStoredProcedures) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAllDatabaseDiagrams) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TCurrentProject) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TCurrentData) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TCodeProject) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TCodeData) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TPrinter) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAllFunctions) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAdditionalData) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAutoCorrect) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TDependencyObjects) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TDependencyInfo) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TSmartTags) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TSmartTagAction) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TSmartTagActions) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TSmartTagProperty) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TSmartTagProperties) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TSmartTag) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAccessForm) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAccessReport) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TAttachment) : Registry key CLSID\{3B06E979-E47C-11CD-8701-00AA003F0F07}\ToolboxBitmap32 not found
//   Error creating palette bitmap of (TMacroError) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TTempVar) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
//   Error creating palette bitmap of (TTempVars) : Access violation at address 00A65353 in module 'tlib70.bpl'. Read of address 00000000
// ************************************************************************ //
// *************************************************************************//
// NOTE:                                                                      
// Items guarded by $IFDEF_LIVE_SERVER_AT_DESIGN_TIME are used by properties  
// which return objects that may need to be explicitly created via a function 
// call prior to any access via the property. These items have been disabled  
// in order to prevent accidental use from within the object inspector. You   
// may enable them by defining LIVE_SERVER_AT_DESIGN_TIME or by selectively   
// removing them from the $IFDEF blocks. However, such items must still be    
// programmatically created via a method of the appropriate CoClass before    
// they can be used.                                                          
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
interface

uses Windows, ActiveX, ADODB_TLB, Classes, DAO_TLB, Graphics, Office_TLB, OleCtrls, 
OleServer, StdVCL, Variants, VBIDE_TLB;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  AccessMajorVersion = 9;
  AccessMinorVersion = 0;

  LIBID_Access: TGUID = '{4AFFC9A0-5F99-101B-AF4E-00AA003F0F07}';

  IID_DoCmd: TGUID = '{C547E760-9658-101B-81EE-00AA004750E2}';
  IID__RecordsetEvents: TGUID = '{45165490-EF32-11D0-86FB-006097C9818C}';
  IID__AccessProperty: TGUID = '{331FDD00-CF31-11CD-8701-00AA003F0F07}';
  IID_Properties: TGUID = '{331FDD02-CF31-11CD-8701-00AA003F0F07}';
  IID__FormatCondition: TGUID = '{E27A992C-A330-11D0-81DD-00C04FC2F51B}';
  CLASS_FormatCondition: TGUID = '{E27A992D-A330-11D0-81DD-00C04FC2F51B}';
  IID_FormatConditions: TGUID = '{E27A992E-A330-11D0-81DD-00C04FC2F51B}';
  IID__ItemsSelected: TGUID = '{31B09710-EADC-11CD-B9F7-00AA004753B5}';
  IID_Children: TGUID = '{3B06E977-E47C-11CD-8701-00AA003F0F07}';
  IID__AccessField: TGUID = '{B1C1EAC1-486F-11CE-A65D-00AA003F0F07}';
  CLASS_AccessField: TGUID = '{044E54C5-B19B-11CE-A689-00AA003F0F07}';
  IID___Help: TGUID = '{9CD4A761-A6A9-11CE-A686-00AA003F0F07}';
  IID__Hyperlink: TGUID = '{50D56611-60AC-11CF-82C9-00AA004B9FE6}';
  CLASS_AccessHyperlink: TGUID = '{50D56610-60AC-11CF-82C9-00AA004B9FE6}';
  IID__Page: TGUID = '{3B06E974-E47C-11CD-8701-00AA003F0F07}';
  IID_Pages: TGUID = '{3B06E978-E47C-11CD-8701-00AA003F0F07}';
  IID__Control: TGUID = '{26B96540-8F8E-101B-AF4E-00AA003F0F07}';
  CLASS_AccessControl: TGUID = '{02F92C80-8F8E-101B-AF4E-00AA003F0F07}';
  IID___ControlInReportEvents: TGUID = '{90B322A5-F1D9-11CD-8701-00AA003F0F07}';
  DIID__DispControlInReportEvents: TGUID = '{2E70527D-92D1-43CC-A57B-ED48BCCC711D}';
  IID_Controls: TGUID = '{5970C574-EB8C-11CD-8701-00AA003F0F07}';
  IID__Label: TGUID = '{3B06E948-E47C-11CD-8701-00AA003F0F07}';
  IID__LabelEvents: TGUID = '{BC9E4341-F037-11CD-8701-00AA003F0F07}';
  DIID_DispLabelEvents: TGUID = '{3B06E982-E47C-11CD-8701-00AA003F0F07}';
  IID__ChildLabelEvents: TGUID = '{BC9E4358-F037-11CD-8701-00AA003F0F07}';
  DIID_DispChildLabelEvents: TGUID = '{2E705270-92D1-43CC-A57B-ED48BCCC711D}';
  IID__Rectangle: TGUID = '{3B06E94A-E47C-11CD-8701-00AA003F0F07}';
  IID__RectangleEvents: TGUID = '{BC9E4342-F037-11CD-8701-00AA003F0F07}';
  DIID_DispRectangleEvents: TGUID = '{2E705271-92D1-43CC-A57B-ED48BCCC711D}';
  IID__Line: TGUID = '{3B06E94C-E47C-11CD-8701-00AA003F0F07}';
  IID__LineEvents: TGUID = '{BC9E4343-F037-11CD-8701-00AA003F0F07}';
  DIID_DispLineEvents: TGUID = '{2E705279-92D1-43CC-A57B-ED48BCCC711D}';
  IID__Image: TGUID = '{3B06E94E-E47C-11CD-8701-00AA003F0F07}';
  IID__ImageEvents: TGUID = '{BC9E4344-F037-11CD-8701-00AA003F0F07}';
  DIID_DispImageEvents: TGUID = '{2E705272-92D1-43CC-A57B-ED48BCCC711D}';
  IID__CommandButton: TGUID = '{3B06E950-E47C-11CD-8701-00AA003F0F07}';
  IID__CommandButtonEvents: TGUID = '{BC9E4345-F037-11CD-8701-00AA003F0F07}';
  DIID_DispCommandButtonEvents: TGUID = '{2E70526B-92D1-43CC-A57B-ED48BCCC711D}';
  IID__OptionButton: TGUID = '{3B06E952-E47C-11CD-8701-00AA003F0F07}';
  IID__OptionButtonEvents: TGUID = '{BC9E4346-F037-11CD-8701-00AA003F0F07}';
  DIID_DispOptionButtonEvents: TGUID = '{2E705268-92D1-43CC-A57B-ED48BCCC711D}';
  IID__OptionButtonInOptionEvents: TGUID = '{BC9E435B-F037-11CD-8701-00AA003F0F07}';
  CLASS__OptionButtonInOption: TGUID = '{BC9E435A-F037-11CD-8701-00AA003F0F07}';
  IID__Checkbox: TGUID = '{3B06E954-E47C-11CD-8701-00AA003F0F07}';
  IID__CheckBoxEvents: TGUID = '{BC9E4347-F037-11CD-8701-00AA003F0F07}';
  DIID_DispCheckBoxEvents: TGUID = '{2E70526A-92D1-43CC-A57B-ED48BCCC711D}';
  IID__CheckBoxInOptionEvents: TGUID = '{BC9E435D-F037-11CD-8701-00AA003F0F07}';
  CLASS__CheckBoxInOption: TGUID = '{BC9E435C-F037-11CD-8701-00AA003F0F07}';
  IID__OptionGroup: TGUID = '{3B06E956-E47C-11CD-8701-00AA003F0F07}';
  IID__OptionGroupEvents: TGUID = '{BC9E4348-F037-11CD-8701-00AA003F0F07}';
  DIID_DispOptionGroupEvents: TGUID = '{2E705274-92D1-43CC-A57B-ED48BCCC711D}';
  IID__BoundObjectFrame: TGUID = '{3B06E958-E47C-11CD-8701-00AA003F0F07}';
  IID__BoundObjectFrameEvents: TGUID = '{BC9E4349-F037-11CD-8701-00AA003F0F07}';
  DIID_DispBoundObjectFrameEvents: TGUID = '{2E70526C-92D1-43CC-A57B-ED48BCCC711D}';
  IID__Textbox: TGUID = '{3B06E946-E47C-11CD-8701-00AA003F0F07}';
  IID__TextBoxEvents: TGUID = '{BC9E4340-F037-11CD-8701-00AA003F0F07}';
  DIID_DispTextBoxEvents: TGUID = '{2E705275-92D1-43CC-A57B-ED48BCCC711D}';
  IID__ListBox: TGUID = '{3B06E95A-E47C-11CD-8701-00AA003F0F07}';
  IID__ListBoxEvents: TGUID = '{BC9E434B-F037-11CD-8701-00AA003F0F07}';
  DIID_DispListBoxEvents: TGUID = '{2E705273-92D1-43CC-A57B-ED48BCCC711D}';
  IID__Combobox: TGUID = '{3B06E95C-E47C-11CD-8701-00AA003F0F07}';
  IID__ComboBoxEvents: TGUID = '{BC9E434C-F037-11CD-8701-00AA003F0F07}';
  DIID_DispComboBoxEvents: TGUID = '{2E705276-92D1-43CC-A57B-ED48BCCC711D}';
  IID__ObjectFrame: TGUID = '{3B06E95E-E47C-11CD-8701-00AA003F0F07}';
  IID__ObjectFrameEvents: TGUID = '{BC9E434D-F037-11CD-8701-00AA003F0F07}';
  DIID_DispObjectFrameEvents: TGUID = '{2E70526D-92D1-43CC-A57B-ED48BCCC711D}';
  IID__PageBreak: TGUID = '{3B06E960-E47C-11CD-8701-00AA003F0F07}';
  IID__PageBreakEvents: TGUID = '{BC9E434E-F037-11CD-8701-00AA003F0F07}';
  DIID_DispPageBreakEvents: TGUID = '{2E70527A-92D1-43CC-A57B-ED48BCCC711D}';
  IID__ToggleButton: TGUID = '{3B06E962-E47C-11CD-8701-00AA003F0F07}';
  IID__ToggleButtonEvents: TGUID = '{BC9E434F-F037-11CD-8701-00AA003F0F07}';
  DIID_DispToggleButtonEvents: TGUID = '{2E705266-92D1-43CC-A57B-ED48BCCC711D}';
  IID__ToggleButtonInOptionEvents: TGUID = '{BC9E435F-F037-11CD-8701-00AA003F0F07}';
  CLASS__ToggleButtonInOption: TGUID = '{BC9E435E-F037-11CD-8701-00AA003F0F07}';
  IID__PaletteButton: TGUID = '{9CD4A760-A6A9-11CE-A686-00AA003F0F07}';
  IID__PaletteButtonEvents: TGUID = '{A843CCD0-6E2C-11CF-A219-00A0C90542FF}';
  DIID_DispPaletteButtonEvents: TGUID = '{2E70527F-92D1-43CC-A57B-ED48BCCC711D}';
  IID__SubForm: TGUID = '{3B06E964-E47C-11CD-8701-00AA003F0F07}';
  IID__SubFormEvents: TGUID = '{BC9E4350-F037-11CD-8701-00AA003F0F07}';
  DIID_DispSubFormEvents: TGUID = '{2E705277-92D1-43CC-A57B-ED48BCCC711D}';
  IID__SubReport: TGUID = '{3B06E966-E47C-11CD-8701-00AA003F0F07}';
  IID__SubReportEvents: TGUID = '{BC9E4351-F037-11CD-8701-00AA003F0F07}';
  DIID_DispSubReportEvents: TGUID = '{2E705278-92D1-43CC-A57B-ED48BCCC711D}';
  IID__CustomControl: TGUID = '{3B06E968-E47C-11CD-8701-00AA003F0F07}';
  IID__CustomControlEvents: TGUID = '{BC9E4352-F037-11CD-8701-00AA003F0F07}';
  DIID_DispCustomControlEvents: TGUID = '{2E70526E-92D1-43CC-A57B-ED48BCCC711D}';
  IID__CustomControlInReportEvents: TGUID = '{300471E2-7426-11CE-AB64-00AA0042B7CE}';
  DIID_DispCustomControlInReportEvents: TGUID = '{2E70527E-92D1-43CC-A57B-ED48BCCC711D}';
  IID__TabControl: TGUID = '{3B06E971-E47C-11CD-8701-00AA003F0F07}';
  IID__TabControlEvents: TGUID = '{3B06E972-E47C-11CD-8701-00AA003F0F07}';
  DIID_DispTabControlEvents: TGUID = '{2E705281-92D1-43CC-A57B-ED48BCCC711D}';
  IID__PageEvents: TGUID = '{3B06E975-E47C-11CD-8701-00AA003F0F07}';
  DIID_DispPageEvents: TGUID = '{2E705282-92D1-43CC-A57B-ED48BCCC711D}';
  IID__Section: TGUID = '{331FDCFC-CF31-11CD-8701-00AA003F0F07}';
  IID__SectionEvents: TGUID = '{BC9E4353-F037-11CD-8701-00AA003F0F07}';
  DIID_DispSectionEvents: TGUID = '{2E70527B-92D1-43CC-A57B-ED48BCCC711D}';
  IID__GroupLevel: TGUID = '{331FDD27-CF31-11CD-8701-00AA003F0F07}';
  CLASS_AccessGroupLevel: TGUID = '{BC9E4356-F037-11CD-8701-00AA003F0F07}';
  IID__SectionInReportEvents: TGUID = '{BC9E4361-F037-11CD-8701-00AA003F0F07}';
  DIID_DispSectionInReportEvents: TGUID = '{2E70527C-92D1-43CC-A57B-ED48BCCC711D}';
  IID__PageHdrFtrInReportEvents: TGUID = '{7AD9E905-BAF8-11CE-A68A-00AA003F0F07}';
  DIID_DispPageHdrFtrInReportEvents: TGUID = '{2E705280-92D1-43CC-A57B-ED48BCCC711D}';
  IID_Module: TGUID = '{331FDCFE-CF31-11CD-8701-00AA003F0F07}';
  IID_Modules: TGUID = '{9DD0AF42-6E28-11CF-9008-00AA0042B7CE}';
  IID__Form: TGUID = '{E5135D80-8F8D-101B-AF4E-00AA003F0F07}';
  IID__FormEvents: TGUID = '{331FDCFB-CF31-11CD-8701-00AA003F0F07}';
  CLASS_FormOld: TGUID = '{483615A0-74BE-101B-AF4E-00AA003F0F07}';
  IID_Forms: TGUID = '{B1BB0E80-6128-101B-AF4E-00AA003F0F07}';
  IID__Report: TGUID = '{3E8B6B00-91FF-101B-AF4E-00AA003F0F07}';
  IID__ReportEvents: TGUID = '{BC9E4357-F037-11CD-8701-00AA003F0F07}';
  CLASS_ReportOld: TGUID = '{27CE30A0-91FF-101B-AF4E-00AA003F0F07}';
  IID_Reports: TGUID = '{D1523700-6128-101B-AF4E-00AA003F0F07}';
  IID_Screen: TGUID = '{DC6B66C0-6128-101B-AF4E-00AA003F0F07}';
  IID__Application: TGUID = '{68CCE6C0-6129-101B-AF4E-00AA003F0F07}';
  CLASS_AccessApplication: TGUID = '{73A4C9C1-D68D-11D0-98BF-00A0C90DC8D9}';
  IID_Reference: TGUID = '{EB106212-9C89-11CF-A2B3-00A0C90542FF}';
  IID__References: TGUID = '{EB106213-9C89-11CF-A2B3-00A0C90542FF}';
  DIID__References_Events: TGUID = '{F163F201-ADA2-11CF-89A9-00A0C9054129}';
  CLASS_AccessReferences: TGUID = '{EB106214-9C89-11CF-A2B3-00A0C90542FF}';
  IID__Dummy: TGUID = '{8B06E320-B23C-11CF-89A8-00A0C9054129}';
  IID__DataAccessPage: TGUID = '{493D8A72-1DB1-11D1-98A2-006008197D41}';
  CLASS_DataAccessPage: TGUID = '{493D8A73-1DB1-11D1-98A2-006008197D41}';
  IID_DataAccessPages: TGUID = '{493D8A71-1DB1-11D1-98A2-006008197D41}';
  IID_AllObjects: TGUID = '{DDBD4001-44D5-11D1-98C0-006008197D41}';
  CLASS_AllForms: TGUID = '{08F6C813-3CFD-11D1-98BC-006008197D41}';
  CLASS_AllReports: TGUID = '{08F6C814-3CFD-11D1-98BC-006008197D41}';
  CLASS_AllMacros: TGUID = '{08F6C815-3CFD-11D1-98BC-006008197D41}';
  CLASS_AllModules: TGUID = '{08F6C816-3CFD-11D1-98BC-006008197D41}';
  CLASS_AllDataAccessPages: TGUID = '{08F6C818-3CFD-11D1-98BC-006008197D41}';
  CLASS_AllTables: TGUID = '{08F6C81B-3CFD-11D1-98BC-006008197D41}';
  CLASS_AllQueries: TGUID = '{08F6C81C-3CFD-11D1-98BC-006008197D41}';
  CLASS_AllViews: TGUID = '{08F6C81E-3CFD-11D1-98BC-006008197D41}';
  CLASS_AllStoredProcedures: TGUID = '{08F6C820-3CFD-11D1-98BC-006008197D41}';
  CLASS_AllDatabaseDiagrams: TGUID = '{08F6C821-3CFD-11D1-98BC-006008197D41}';
  IID_AccessObjectProperty: TGUID = '{1FE3E471-A7D0-11D1-9944-006008197D41}';
  IID_AccessObjectProperties: TGUID = '{0921F331-A7C9-11D1-9944-006008197D41}';
  IID__CurrentProject: TGUID = '{9212BA71-3E79-11D1-98BD-006008197D41}';
  IID__CurrentData: TGUID = '{9212BA73-3E79-11D1-98BD-006008197D41}';
  CLASS_CurrentProject: TGUID = '{08F6C811-3CFD-11D1-98BC-006008197D41}';
  CLASS_CurrentData: TGUID = '{08F6C819-3CFD-11D1-98BC-006008197D41}';
  CLASS_CodeProject: TGUID = '{9212BA72-3E79-11D1-98BD-006008197D41}';
  CLASS_CodeData: TGUID = '{08F6C81A-3CFD-11D1-98BC-006008197D41}';
  IID_AccessObject: TGUID = '{ABE316B1-3FF6-11D1-98BD-006008197D41}';
  IID__WizHook: TGUID = '{CB9D3171-4728-11D1-8334-006008197CC8}';
  CLASS_WizHook: TGUID = '{CB9D3172-4728-11D1-8334-006008197CC8}';
  IID__DefaultWebOptions: TGUID = '{416ED4F0-AB31-11D1-BF72-0060083E43CF}';
  CLASS_DefaultWebOptions: TGUID = '{416ED4F1-AB31-11D1-BF72-0060083E43CF}';
  IID__WebOptions: TGUID = '{416ED4F6-AB31-11D1-BF72-0060083E43CF}';
  CLASS_AccessWebOptions: TGUID = '{416ED4F7-AB31-11D1-BF72-0060083E43CF}';
  IID__DummyEvents: TGUID = '{58BF3100-B580-11CF-89A8-00A0C9054129}';
  CLASS_Class_: TGUID = '{8B06E321-B23C-11CF-89A8-00A0C9054129}';
  IID__Printer: TGUID = '{DBC5175F-A8ED-11D3-A0DD-00C04F68712B}';
  CLASS_Printer: TGUID = '{DBC5175E-A8ED-11D3-A0DD-00C04F68712B}';
  IID_Printers: TGUID = '{DBC51760-A8ED-11D3-A0DD-00C04F68712B}';
  IID__Form2: TGUID = '{3F4A878E-C395-11D3-8D1F-0050048383FB}';
  CLASS_FormOldV10: TGUID = '{483615A0-74BE-101B-AF4E-00AA003F0F08}';
  IID__Report2: TGUID = '{32A1C62A-D374-11D3-8D21-0050048383FB}';
  CLASS_ReportOldV10: TGUID = '{ECD1EADA-D373-11D3-8D21-0050048383FB}';
  CLASS_AllFunctions: TGUID = '{08F6C822-3CFD-11D1-98BC-006008197D41}';
  IID__AdditionalData: TGUID = '{DBC51762-A8ED-11D3-A0DD-00C04F68712B}';
  CLASS_AdditionalData: TGUID = '{DBC51761-A8ED-11D3-A0DD-00C04F68712B}';
  IID__AutoCorrect: TGUID = '{063A8DE5-E2C5-44EA-A90E-6D42207D25C8}';
  CLASS_AutoCorrect: TGUID = '{4375351E-7052-40DF-B4D3-6095E7F8811B}';
  IID__DependencyObjects: TGUID = '{79F41340-18C4-4AA1-86EE-5CDE9D2CE600}';
  CLASS_DependencyObjects: TGUID = '{1C4367A8-EAEE-4C23-9582-4A229DF2403E}';
  IID__DependencyInfo: TGUID = '{D05819C6-8859-418B-A82F-18B6CB743C8E}';
  CLASS_DependencyInfo: TGUID = '{F8C9DCB3-4063-490E-A73C-3533207CBC26}';
  IID__SmartTags: TGUID = '{B1F7DE76-AE97-48D9-A4FD-2C172B2BD7A9}';
  CLASS_SmartTags: TGUID = '{73778F0A-9743-4DF3-BBFA-941712488FEA}';
  IID__SmartTagAction: TGUID = '{1560BE9F-0718-42BE-BB2B-D6706593AC40}';
  CLASS_SmartTagAction: TGUID = '{0D944D89-82BC-43DE-9659-699DD3FBCD72}';
  IID__SmartTagActions: TGUID = '{3836C9EC-E9CB-4817-A738-50B4DD3DDD8D}';
  CLASS_SmartTagActions: TGUID = '{AA533187-6399-4E6C-B6EC-6FC999E1C855}';
  IID__SmartTagProperty: TGUID = '{6A3308EA-73DF-436A-A826-41A1F02186C4}';
  CLASS_SmartTagProperty: TGUID = '{6E03AD86-431E-4879-A572-EF0EBA2FA729}';
  IID__SmartTagProperties: TGUID = '{3A6A13FF-1162-461D-899C-768D025119FB}';
  CLASS_SmartTagProperties: TGUID = '{4215CC2C-15B5-47A5-9B60-119BD269CB7E}';
  IID__SmartTag: TGUID = '{9D2AB5D3-CD72-4A9A-A72E-2B3492CBD0AE}';
  CLASS_SmartTag: TGUID = '{EF1A0B1D-AD6D-48E6-9905-BEE2A5D38DF9}';
  IID_ImportExportSpecification: TGUID = '{55B0E0C9-C75D-4F42-AD20-6939C1D05B70}';
  IID_ImportExportSpecifications: TGUID = '{77DC8648-F725-4371-88C3-6EB6C4894CA4}';
  IID__Form3: TGUID = '{66B22FB4-F70E-4F03-A00A-F76E9ADBBF10}';
  DIID__FormEvents2: TGUID = '{0EA530DD-5B30-4278-BD28-47C4D11619BD}';
  CLASS_AccessForm: TGUID = '{7398AAFD-6527-48C7-95B7-BEABACD1CA3F}';
  IID__Report3: TGUID = '{B0E35B78-55B0-47FB-8951-CA616F25CEAF}';
  DIID__ReportEvents2: TGUID = '{D7281A87-4B30-41C5-AB7B-FABF9A35442A}';
  CLASS_AccessReport: TGUID = '{FF240263-AF0A-432D-A544-A721E75738F8}';
  IID__Attachment: TGUID = '{3B06E980-E47C-11CD-8701-00AA003F0F07}';
  DIID_DispAttachmentEvents: TGUID = '{3B06E981-E47C-11CD-8701-00AA003F0F07}';
  CLASS_Attachment: TGUID = '{3B06E979-E47C-11CD-8701-00AA003F0F07}';
  IID__MacroError: TGUID = '{22585BA1-7BD1-40AF-8095-E688176CDEB0}';
  CLASS_MacroError: TGUID = '{3F1B1773-65CB-4DB9-9FC6-ACED47DB285A}';
  IID__TempVar: TGUID = '{FB74F43A-9732-4552-B1C2-269ABF082492}';
  CLASS_TempVar: TGUID = '{12DCE806-EA8A-46AA-88DF-C4486EDB78E3}';
  IID__TempVars: TGUID = '{9E3F602F-BA36-4865-B3CD-F2EB008F62DE}';
  CLASS_TempVars: TGUID = '{6D40D9DE-2821-44A8-BAF3-8011E362CF59}';
  CLASS_AccessCommandButton: TGUID = '{3B06E94F-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessBoundObjectFrame: TGUID = '{3B06E957-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessObjectFrame: TGUID = '{3B06E95D-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessCustomControl: TGUID = '{3B06E967-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessCheckBox: TGUID = '{3B06E953-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessOptionButton: TGUID = '{3B06E951-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessToggleButton: TGUID = '{3B06E961-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessRectangle: TGUID = '{3B06E949-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessImage: TGUID = '{3B06E94D-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessListBox: TGUID = '{3B06E959-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessOptionGroup: TGUID = '{3B06E955-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessTextBox: TGUID = '{3B06E945-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessComboBox: TGUID = '{3B06E95B-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessSubForm: TGUID = '{3B06E963-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessSubReport: TGUID = '{3B06E965-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessLine: TGUID = '{3B06E94B-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessPageBreak: TGUID = '{3B06E95F-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessSection: TGUID = '{BC9E4355-F037-11CD-8701-00AA003F0F07}';
  CLASS__SectionInReport: TGUID = '{BC9E4360-F037-11CD-8701-00AA003F0F07}';
  CLASS__ControlInReportEvents: TGUID = '{90B322A4-F1D9-11CD-8701-00AA003F0F07}';
  CLASS__CustomControlInReport: TGUID = '{300471E0-7426-11CE-AB63-00AA0042B7CE}';
  CLASS_AccessPaletteButton: TGUID = '{9CD4A762-A6A9-11CE-A686-00AA003F0F07}';
  CLASS__PageHdrFtrInReport: TGUID = '{7AD9E906-BAF8-11CE-A68A-00AA003F0F07}';
  CLASS_AccessTabControl: TGUID = '{3B06E970-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessPage: TGUID = '{3B06E973-E47C-11CD-8701-00AA003F0F07}';
  CLASS_AccessLabel: TGUID = '{3B06E947-E47C-11CD-8701-00AA003F0F07}';
  CLASS__ChildLabel: TGUID = '{BC9E4359-F037-11CD-8701-00AA003F0F07}';

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
// Constants for enum AcModuleType
type
  AcModuleType = TOleEnum;
const
  acStandardModule = $00000000;
  acClassModule = $00000001;

// Constants for enum AcCloseSave
type
  AcCloseSave = TOleEnum;
const
  acSavePrompt = $00000000;
  acSaveYes = $00000001;
  acSaveNo = $00000002;

// Constants for enum AcQuitOption
type
  AcQuitOption = TOleEnum;
const
  acQuitPrompt = $00000000;
  acQuitSaveAll = $00000001;
  acQuitSaveNone = $00000002;

// Constants for enum AcSection
type
  AcSection = TOleEnum;
const
  acDetail = $00000000;
  acHeader = $00000001;
  acFooter = $00000002;
  acPageHeader = $00000003;
  acPageFooter = $00000004;
  acGroupLevel1Header = $00000005;
  acGroupLevel1Footer = $00000006;
  acGroupLevel2Header = $00000007;
  acGroupLevel2Footer = $00000008;

// Constants for enum AcControlType
type
  AcControlType = TOleEnum;
const
  acLabel = $00000064;
  acRectangle = $00000065;
  acLine = $00000066;
  acImage = $00000067;
  acCommandButton = $00000068;
  acOptionButton = $00000069;
  acCheckBox = $0000006A;
  acOptionGroup = $0000006B;
  acBoundObjectFrame = $0000006C;
  acTextBox = $0000006D;
  acListBox = $0000006E;
  acComboBox = $0000006F;
  acSubform = $00000070;
  acObjectFrame = $00000072;
  acPageBreak = $00000076;
  acCustomControl = $00000077;
  acToggleButton = $0000007A;
  acTabCtl = $0000007B;
  acPage = $0000007C;
  acAttachment = $0000007E;

// Constants for enum AcDataObjectType
type
  AcDataObjectType = TOleEnum;
const
  acActiveDataObject = $FFFFFFFF;
  acDataTable = $00000000;
  acDataQuery = $00000001;
  acDataForm = $00000002;
  acDataReport = $00000003;
  acDataServerView = $00000007;
  acDataStoredProcedure = $00000009;
  acDataFunction = $0000000A;

// Constants for enum AcDataTransferType
type
  AcDataTransferType = TOleEnum;
const
  acImport = $00000000;
  acExport = $00000001;
  acLink = $00000002;

// Constants for enum AcSendObjectType
type
  AcSendObjectType = TOleEnum;
const
  acSendNoObject = $FFFFFFFF;
  acSendTable = $00000000;
  acSendQuery = $00000001;
  acSendForm = $00000002;
  acSendReport = $00000003;
  acSendModule = $00000005;
  acSendDataAccessPage = $00000006;

// Constants for enum AcObjectType
type
  AcObjectType = TOleEnum;
const
  acDefault = $FFFFFFFF;
  acTable = $00000000;
  acQuery = $00000001;
  acForm = $00000002;
  acReport = $00000003;
  acMacro = $00000004;
  acModule = $00000005;
  acDataAccessPage = $00000006;
  acServerView = $00000007;
  acDiagram = $00000008;
  acStoredProcedure = $00000009;
  acFunction = $0000000A;

// Constants for enum AcFindField
type
  AcFindField = TOleEnum;
const
  acCurrent = $FFFFFFFF;
  acAll = $00000000;

// Constants for enum AcFindMatch
type
  AcFindMatch = TOleEnum;
const
  acAnywhere = $00000000;
  acEntire = $00000001;
  acStart = $00000002;

// Constants for enum AcFormView
type
  AcFormView = TOleEnum;
const
  acNormal = $00000000;
  acDesign = $00000001;
  acPreview = $00000002;
  acFormDS = $00000003;
  acFormPivotTable = $00000004;
  acFormPivotChart = $00000005;
  acLayout = $00000006;

// Constants for enum AcDataAccessPageView
type
  AcDataAccessPageView = TOleEnum;
const
  acDataAccessPageBrowse = $00000000;
  acDataAccessPageDesign = $00000001;

// Constants for enum AcOpenDataMode
type
  AcOpenDataMode = TOleEnum;
const
  acAdd = $00000000;
  acEdit = $00000001;
  acReadOnly = $00000002;

// Constants for enum AcFormOpenDataMode
type
  AcFormOpenDataMode = TOleEnum;
const
  acFormPropertySettings = $FFFFFFFF;
  acFormAdd = $00000000;
  acFormEdit = $00000001;
  acFormReadOnly = $00000002;

// Constants for enum AcOutputObjectType
type
  AcOutputObjectType = TOleEnum;
const
  acOutputTable = $00000000;
  acOutputQuery = $00000001;
  acOutputForm = $00000002;
  acOutputReport = $00000003;
  acOutputModule = $00000005;
  acOutputDataAccessPage = $00000006;
  acOutputServerView = $00000007;
  acOutputStoredProcedure = $00000009;
  acOutputFunction = $0000000A;

// Constants for enum AcPrintQuality
type
  AcPrintQuality = TOleEnum;
const
  acHigh = $00000000;
  acMedium = $00000001;
  acLow = $00000002;
  acDraft = $00000003;

// Constants for enum AcPrintRange
type
  AcPrintRange = TOleEnum;
const
  acPrintAll = $00000000;
  acSelection = $00000001;
  acPages = $00000002;

// Constants for enum AcRecord
type
  AcRecord = TOleEnum;
const
  acPrevious = $00000000;
  acNext = $00000001;
  acFirst = $00000002;
  acLast = $00000003;
  acGoTo = $00000004;
  acNewRec = $00000005;

// Constants for enum AcSearchDirection
type
  AcSearchDirection = TOleEnum;
const
  acUp = $00000000;
  acDown = $00000001;
  acSearchAll = $00000002;

// Constants for enum AcSysCmdAction
type
  AcSysCmdAction = TOleEnum;
const
  acSysCmdInitMeter = $00000001;
  acSysCmdUpdateMeter = $00000002;
  acSysCmdRemoveMeter = $00000003;
  acSysCmdSetStatus = $00000004;
  acSysCmdClearStatus = $00000005;
  acSysCmdRuntime = $00000006;
  acSysCmdAccessVer = $00000007;
  acSysCmdIniFile = $00000008;
  acSysCmdAccessDir = $00000009;
  acSysCmdGetObjectState = $0000000A;
  acSysCmdClearHelpTopic = $0000000B;
  acSysCmdProfile = $0000000C;
  acSysCmdGetWorkgroupFile = $0000000D;

// Constants for enum AcTextTransferType
type
  AcTextTransferType = TOleEnum;
const
  acImportDelim = $00000000;
  acImportFixed = $00000001;
  acExportDelim = $00000002;
  acExportFixed = $00000003;
  acExportMerge = $00000004;
  acLinkDelim = $00000005;
  acLinkFixed = $00000006;
  acImportHTML = $00000007;
  acExportHTML = $00000008;
  acLinkHTML = $00000009;

// Constants for enum AcView
type
  AcView = TOleEnum;
const
  acViewNormal = $00000000;
  acViewDesign = $00000001;
  acViewPreview = $00000002;
  acViewPivotTable = $00000003;
  acViewPivotChart = $00000004;
  acViewReport = $00000005;
  acViewLayout = $00000006;

// Constants for enum AcWindowMode
type
  AcWindowMode = TOleEnum;
const
  acWindowNormal = $00000000;
  acHidden = $00000001;
  acIcon = $00000002;
  acDialog = $00000003;

// Constants for enum AcFilterType
type
  AcFilterType = TOleEnum;
const
  acFilterNormal = $00000000;
  acServerFilter = $00000001;

// Constants for enum AcSpreadSheetType
type
  AcSpreadSheetType = TOleEnum;
const
  acSpreadsheetTypeExcel3 = $00000000;
  acSpreadsheetTypeLotusWK1 = $00000002;
  acSpreadsheetTypeLotusWK3 = $00000003;
  acSpreadsheetTypeLotusWJ2 = $00000004;
  acSpreadsheetTypeExcel5 = $00000005;
  acSpreadsheetTypeExcel7 = $00000005;
  acSpreadsheetTypeExcel4 = $00000006;
  acSpreadsheetTypeLotusWK4 = $00000007;
  acSpreadsheetTypeExcel97 = $00000008;
  acSpreadsheetTypeExcel8 = $00000008;
  acSpreadsheetTypeExcel9 = $00000008;
  acSpreadsheetTypeExcel12 = $00000009;
  acSpreadsheetTypeExcel12Xml = $0000000A;

// Constants for enum AcImeMode
type
  AcImeMode = TOleEnum;
const
  acImeModeNoControl = $00000000;
  acImeModeOn = $00000001;
  acImeModeOff = $00000002;
  acImeModeDisable = $00000003;
  acImeModeHiragana = $00000004;
  acImeModeKatakana = $00000005;
  acImeModeKatakanaHalf = $00000006;
  acImeModeAlphaFull = $00000007;
  acImeModeAlpha = $00000008;
  acImeModeHangulFull = $00000009;
  acImeModeHangul = $0000000A;

// Constants for enum AcImeSentenceMode
type
  AcImeSentenceMode = TOleEnum;
const
  acImeSentenceModePhrasePredict = $00000000;
  acImeSentenceModePluralClause = $00000001;
  acImeSentenceModeConversation = $00000002;
  acImeSentenceModeNone = $00000003;

// Constants for enum AcHyperlinkPart
type
  AcHyperlinkPart = TOleEnum;
const
  acDisplayedValue = $00000000;
  acDisplayText = $00000001;
  acAddress = $00000002;
  acSubAddress = $00000003;
  acScreenTip = $00000004;
  acFullAddress = $00000005;

// Constants for enum AcProjectType
type
  AcProjectType = TOleEnum;
const
  acNull = $00000000;
  acADP = $00000001;
  acMDB = $00000002;

// Constants for enum AcCommand
type
  AcCommand = TOleEnum;
const
  acCmdWindowUnhide = $00000001;
  acCmdWindowHide = $00000002;
  acCmdExit = $00000003;
  acCmdCompactDatabase = $00000004;
  acCmdEncryptDecryptDatabase = $00000005;
  acCmdRepairDatabase = $00000006;
  acCmdMakeMDEFile = $00000007;
  acCmdMoreWindows = $00000008;
  acCmdAppRestore = $00000009;
  acCmdAppMaximize = $0000000A;
  acCmdAppMinimize = $0000000B;
  acCmdAppMove = $0000000C;
  acCmdAppSize = $0000000D;
  acCmdDocRestore = $0000000E;
  acCmdDocMaximize = $0000000F;
  acCmdDocMove = $00000010;
  acCmdDocSize = $00000011;
  acCmdRefresh = $00000012;
  acCmdFont = $00000013;
  acCmdSave = $00000014;
  acCmdSaveAs = $00000015;
  acCmdWindowCascade = $00000016;
  acCmdTileVertically = $00000017;
  acCmdWindowArrangeIcons = $00000018;
  acCmdOpenDatabase = $00000019;
  acCmdNewDatabase = $0000001A;
  acCmdOLEDDELinks = $0000001B;
  acCmdRecordsGoToNew = $0000001C;
  acCmdReplace = $0000001D;
  acCmdFind = $0000001E;
  acCmdRunMacro = $0000001F;
  acCmdPageSetup = $00000020;
  acCmdInsertObject = $00000021;
  acCmdDuplicate = $00000022;
  acCmdAboutMicrosoftAccess = $00000023;
  acCmdFormHdrFtr = $00000024;
  acCmdReportHdrFtr = $00000025;
  acCmdPasteAppend = $00000026;
  acCmdInsertFile = $00000027;
  acCmdSelectForm = $00000028;
  acCmdTabOrder = $00000029;
  acCmdFieldList = $0000002A;
  acCmdAlignLeft = $0000002B;
  acCmdAlignRight = $0000002C;
  acCmdAlignTop = $0000002D;
  acCmdAlignBottom = $0000002E;
  acCmdAlignToGrid = $0000002F;
  acCmdSizeToGrid = $00000030;
  acCmdOptions = $00000031;
  acCmdSelectRecord = $00000032;
  acCmdSortingAndGrouping = $00000033;
  acCmdBringToFront = $00000034;
  acCmdSendToBack = $00000035;
  acCmdPrintPreview = $00000036;
  acCmdApplyDefault = $00000037;
  acCmdSetControlDefaults = $00000038;
  acCmdOLEObjectDefaultVerb = $00000039;
  acCmdClose = $0000003A;
  acCmdSizeToFit = $0000003B;
  acCmdDocMinimize = $0000003C;
  acCmdViewRuler = $0000003D;
  acCmdSnapToGrid = $0000003E;
  acCmdViewGrid = $0000003F;
  acCmdPasteSpecial = $00000040;
  acCmdRecordsGoToNext = $00000041;
  acCmdRecordsGoToPrevious = $00000042;
  acCmdRecordsGoToFirst = $00000043;
  acCmdRecordsGoToLast = $00000044;
  acCmdSizeToFitForm = $00000045;
  acCmdEditingAllowed = $00000046;
  acCmdClearGrid = $00000047;
  acCmdJoinProperties = $00000048;
  acCmdQueryTotals = $00000049;
  acCmdQueryTypeCrosstab = $0000004A;
  acCmdTableNames = $0000004B;
  acCmdQueryParameters = $0000004C;
  acCmdFormatCells = $0000004D;
  acCmdDataEntry = $0000004E;
  acCmdHideColumns = $0000004F;
  acCmdUnhideColumns = $00000050;
  acCmdDeleteQueryColumn = $00000051;
  acCmdInsertQueryColumn = $00000052;
  acCmdRemoveTable = $00000054;
  acCmdViewToolbox = $00000055;
  acCmdMacroNames = $00000056;
  acCmdMacroConditions = $00000057;
  acCmdSingleStep = $00000058;
  acCmdQueryTypeSelect = $00000059;
  acCmdQueryTypeUpdate = $0000005A;
  acCmdQueryTypeAppend = $0000005B;
  acCmdQueryTypeDelete = $0000005C;
  acCmdApplyFilterSort = $0000005D;
  acCmdQueryTypeMakeTable = $0000005E;
  acCmdLoadFromQuery = $0000005F;
  acCmdSaveAsQuery = $00000060;
  acCmdSaveRecord = $00000061;
  acCmdAdvancedFilterSort = $00000063;
  acCmdMicrosoftAccessHelpTopics = $00000064;
  acCmdLinkTables = $00000066;
  acCmdUserAndGroupPermissions = $00000067;
  acCmdUserAndGroupAccounts = $00000068;
  acCmdFreezeColumn = $00000069;
  acCmdUnfreezeAllColumns = $0000006A;
  acCmdPrimaryKey = $0000006B;
  acCmdSubformDatasheet = $0000006C;
  acCmdSelectAllRecords = $0000006D;
  acCmdViewTables = $0000006E;
  acCmdViewQueries = $0000006F;
  acCmdViewForms = $00000070;
  acCmdViewReports = $00000071;
  acCmdViewMacros = $00000072;
  acCmdViewModules = $00000073;
  acCmdRowHeight = $00000074;
  acCmdColumnWidth = $00000075;
  acCmdInsertFileIntoModule = $00000076;
  acCmdSaveModuleAsText = $00000077;
  acCmdFindPrevious = $00000078;
  acCmdWindowSplit = $00000079;
  acCmdProcedureDefinition = $0000007A;
  acCmdDebugWindow = $0000007B;
  acCmdReset = $0000007C;
  acCmdCompileAllModules = $0000007D;
  acCmdCompileAndSaveAllModules = $0000007E;
  acCmdGoContinue = $0000007F;
  acCmdStepOver = $00000080;
  acCmdSetNextStatement = $00000081;
  acCmdShowNextStatement = $00000082;
  acCmdToggleBreakpoint = $00000083;
  acCmdClearAllBreakpoints = $00000084;
  acCmdRelationships = $00000085;
  acCmdNewObjectTable = $00000086;
  acCmdNewObjectQuery = $00000087;
  acCmdNewObjectForm = $00000088;
  acCmdNewObjectReport = $00000089;
  acCmdNewObjectMacro = $0000008A;
  acCmdNewObjectModule = $0000008B;
  acCmdNewObjectClassModule = $0000008C;
  acCmdLayoutPreview = $0000008D;
  acCmdSaveAsReport = $0000008E;
  acCmdRename = $0000008F;
  acCmdRemoveFilterSort = $00000090;
  acCmdSaveLayout = $00000091;
  acCmdClearAll = $00000092;
  acCmdHideTable = $00000093;
  acCmdShowDirectRelationships = $00000094;
  acCmdShowAllRelationships = $00000095;
  acCmdCreateRelationship = $00000096;
  acCmdEditRelationship = $00000097;
  acCmdIndexes = $00000098;
  acCmdAlignToShortest = $00000099;
  acCmdAlignToTallest = $0000009A;
  acCmdSizeToNarrowest = $0000009B;
  acCmdSizeToWidest = $0000009C;
  acCmdHorizontalSpacingMakeEqual = $0000009D;
  acCmdHorizontalSpacingDecrease = $0000009E;
  acCmdHorizontalSpacingIncrease = $0000009F;
  acCmdVerticalSpacingMakeEqual = $000000A0;
  acCmdVerticalSpacingDecrease = $000000A1;
  acCmdVerticalSpacingIncrease = $000000A2;
  acCmdSortAscending = $000000A3;
  acCmdSortDescending = $000000A4;
  acCmdToolbarsCustomize = $000000A5;
  acCmdOLEObjectConvert = $000000A7;
  acCmdQueryTypeSQLDataDefinition = $000000A8;
  acCmdQueryTypeSQLPassThrough = $000000A9;
  acCmdViewCode = $000000AA;
  acCmdConvertDatabase = $000000AB;
  acCmdCallStack = $000000AC;
  acCmdSend = $000000AD;
  acCmdOutputToExcel = $000000AF;
  acCmdOutputToRTF = $000000B0;
  acCmdOutputToText = $000000B1;
  acCmdInvokeBuilder = $000000B2;
  acCmdZoomBox = $000000B3;
  acCmdQueryTypeSQLUnion = $000000B4;
  acCmdRun = $000000B5;
  acCmdPageHdrFtr = $000000B6;
  acCmdDesignView = $000000B7;
  acCmdSQLView = $000000B8;
  acCmdShowTable = $000000B9;
  acCmdCloseWindow = $000000BA;
  acCmdInsertRows = $000000BB;
  acCmdDeleteRows = $000000BC;
  acCmdCut = $000000BD;
  acCmdCopy = $000000BE;
  acCmdPaste = $000000BF;
  acCmdAutoDial = $000000C0;
  acCmdNewObjectAutoForm = $000000C1;
  acCmdNewObjectAutoReport = $000000C2;
  acCmdWordMailMerge = $000000C3;
  acCmdTestValidationRules = $000000C4;
  acCmdControlWizardsToggle = $000000C5;
  acCmdEnd = $000000C6;
  acCmdRedo = $000000C7;
  acCmdObjectBrowser = $000000C8;
  acCmdAddWatch = $000000C9;
  acCmdEditWatch = $000000CA;
  acCmdQuickWatch = $000000CB;
  acCmdStepToCursor = $000000CC;
  acCmdIndent = $000000CD;
  acCmdOutdent = $000000CE;
  acCmdFilterByForm = $000000CF;
  acCmdFilterBySelection = $000000D0;
  acCmdViewLargeIcons = $000000D1;
  acCmdViewDetails = $000000D2;
  acCmdViewSmallIcons = $000000D3;
  acCmdViewList = $000000D4;
  acCmdLineUpIcons = $000000D5;
  acCmdArrangeIconsByName = $000000D6;
  acCmdArrangeIconsByType = $000000D7;
  acCmdArrangeIconsByCreated = $000000D8;
  acCmdArrangeIconsByModified = $000000D9;
  acCmdArrangeIconsAuto = $000000DA;
  acCmdCreateShortcut = $000000DB;
  acCmdToggleFilter = $000000DC;
  acCmdOpenTable = $000000DD;
  acCmdInsertPicture = $000000DE;
  acCmdDeleteRecord = $000000DF;
  acCmdStartupProperties = $000000E0;
  acCmdPageNumber = $000000E1;
  acCmdDateAndTime = $000000E2;
  acCmdChangeToTextBox = $000000E3;
  acCmdChangeToLabel = $000000E4;
  acCmdChangeToListBox = $000000E5;
  acCmdChangeToComboBox = $000000E6;
  acCmdChangeToCheckBox = $000000E7;
  acCmdChangeToToggleButton = $000000E8;
  acCmdChangeToOptionButton = $000000E9;
  acCmdChangeToImage = $000000EA;
  acCmdAnswerWizard = $000000EB;
  acCmdMicrosoftOnTheWeb = $000000EC;
  acCmdClearItemDefaults = $000000ED;
  acCmdZoom200 = $000000EE;
  acCmdZoom150 = $000000EF;
  acCmdZoom100 = $000000F0;
  acCmdZoom75 = $000000F1;
  acCmdZoom50 = $000000F2;
  acCmdZoom25 = $000000F3;
  acCmdZoom10 = $000000F4;
  acCmdFitToWindow = $000000F5;
  acCmdPreviewOnePage = $000000F6;
  acCmdPreviewTwoPages = $000000F7;
  acCmdPreviewFourPages = $000000F8;
  acCmdPreviewEightPages = $000000F9;
  acCmdPreviewTwelvePages = $000000FA;
  acCmdOpenURL = $000000FB;
  acCmdOpenStartPage = $000000FC;
  acCmdOpenSearchPage = $000000FD;
  acCmdRegisterActiveXControls = $000000FE;
  acCmdDeleteTab = $000000FF;
  acCmdDatabaseProperties = $00000100;
  acCmdImport = $00000101;
  acCmdInsertActiveXControl = $00000102;
  acCmdInsertHyperlink = $00000103;
  acCmdReferences = $00000104;
  acCmdAutoCorrect = $00000105;
  acCmdInsertProcedure = $00000106;
  acCmdCreateReplica = $00000107;
  acCmdSynchronizeNow = $00000108;
  acCmdRecoverDesignMaster = $00000109;
  acCmdResolveConflicts = $0000010A;
  acCmdDeleteWatch = $0000010B;
  acCmdSpelling = $0000010D;
  acCmdAutoFormat = $0000010E;
  acCmdDeleteTableColumn = $0000010F;
  acCmdInsertTableColumn = $00000110;
  acCmdInsertLookupColumn = $00000111;
  acCmdRenameColumn = $00000112;
  acCmdSetDatabasePassword = $00000113;
  acCmdUserLevelSecurityWizard = $00000114;
  acCmdFilterExcludingSelection = $00000115;
  acCmdQuickPrint = $00000116;
  acCmdConvertMacrosToVisualBasic = $00000117;
  acCmdSaveAllModules = $00000118;
  acCmdFormView = $00000119;
  acCmdDatasheetView = $0000011A;
  acCmdAnalyzePerformance = $0000011B;
  acCmdAnalyzeTable = $0000011C;
  acCmdDocumenter = $0000011D;
  acCmdTileHorizontally = $0000011E;
  acCmdProperties = $0000011F;
  acCmdTransparentBackground = $00000120;
  acCmdTransparentBorder = $00000121;
  acCmdCompileLoadedModules = $00000122;
  acCmdInsertLookupField = $00000123;
  acCmdUndo = $00000124;
  acCmdInsertChart = $00000125;
  acCmdGoBack = $00000126;
  acCmdGoForward = $00000127;
  acCmdStopLoadingPage = $00000128;
  acCmdRefreshPage = $00000129;
  acCmdFavoritesOpen = $0000012A;
  acCmdFavoritesAddTo = $0000012B;
  acCmdShowOnlyWebToolbar = $0000012C;
  acCmdToolbarControlProperties = $0000012D;
  acCmdShowMembers = $0000012E;
  acCmdListConstants = $0000012F;
  acCmdQuickInfo = $00000130;
  acCmdParameterInfo = $00000131;
  acCmdCompleteWord = $00000132;
  acCmdBookmarksToggle = $00000133;
  acCmdBookmarksNext = $00000134;
  acCmdBookmarksPrevious = $00000135;
  acCmdBookmarksClearAll = $00000136;
  acCmdStepOut = $00000137;
  acCmdFindPrevWordUnderCursor = $00000138;
  acCmdFindNextWordUnderCursor = $00000139;
  acCmdObjBrwFindWholeWordOnly = $0000013A;
  acCmdObjBrwShowHiddenMembers = $0000013B;
  acCmdObjBrwHelp = $0000013C;
  acCmdObjBrwViewDefinition = $0000013D;
  acCmdObjBrwGroupMembers = $0000013E;
  acCmdSelectReport = $0000013F;
  acCmdSaveAsHTML = $00000141;
  acCmdSaveAsIDC = $00000142;
  acCmdSaveAsASP = $00000143;
  acCmdPublishDefaults = $00000144;
  acCmdEditHyperlink = $00000145;
  acCmdOpenHyperlink = $00000146;
  acCmdOpenNewHyperlink = $00000147;
  acCmdCopyHyperlink = $00000148;
  acCmdHyperlinkDisplayText = $00000149;
  acCmdTabControlPageOrder = $0000014A;
  acCmdInsertPage = $0000014B;
  acCmdDeletePage = $0000014C;
  acCmdSelectAll = $0000014D;
  acCmdCreateMenuFromMacro = $0000014E;
  acCmdCreateToolbarFromMacro = $0000014F;
  acCmdCreateShortcutMenuFromMacro = $00000150;
  acCmdDelete = $00000151;
  acCmdRunOpenMacro = $00000152;
  acCmdLastPosition = $00000153;
  acCmdPrint = $00000154;
  acCmdFindNext = $00000155;
  acCmdStepInto = $00000156;
  acCmdClearHyperlink = $00000157;
  acCmdDataAccessPageBrowse = $00000158;
  acCmdNewObjectDataAccessPage = $0000015A;
  acCmdSelectDataAccessPage = $0000015B;
  acCmdViewDataAccessPages = $0000015D;
  acCmdNewObjectView = $0000015E;
  acCmdNewObjectStoredProcedure = $0000015F;
  acCmdNewObjectDiagram = $00000160;
  acCmdViewFieldList = $00000161;
  acCmdViewDiagrams = $00000162;
  acCmdViewStoredProcedures = $00000163;
  acCmdViewViews = $00000164;
  acCmdViewShowPaneSQL = $00000165;
  acCmdViewShowPaneDiagram = $00000166;
  acCmdViewShowPaneGrid = $00000167;
  acCmdViewVerifySQL = $00000168;
  acCmdQueryGroupBy = $00000169;
  acCmdQueryAddToOutput = $0000016A;
  acCmdViewTableColumnNames = $0000016B;
  acCmdViewTableNameOnly = $0000016C;
  acCmdHidePane = $0000016D;
  acCmdRemove = $0000016E;
  acCmdViewTableColumnProperties = $00000170;
  acCmdViewTableKeys = $00000171;
  acCmdViewTableUserView = $00000172;
  acCmdZoomSelection = $00000173;
  acCmdDiagramNewLabel = $00000174;
  acCmdDiagramAddRelatedTables = $00000175;
  acCmdDiagramShowRelationshipLabels = $00000176;
  acCmdDiagramModifyUserDefinedView = $00000177;
  acCmdDiagramViewPageBreaks = $00000178;
  acCmdDiagramRecalculatePageBreaks = $00000179;
  acCmdDiagramAutosizeSelectedTables = $0000017A;
  acCmdDiagramLayoutSelection = $0000017B;
  acCmdDiagramLayoutDiagram = $0000017C;
  acCmdDiagramNewTable = $0000017D;
  acCmdDiagramDeleteRelationship = $0000017E;
  acCmdConnection = $0000017F;
  acCmdEditTriggers = $00000180;
  acCmdDataAccessPageDesignView = $00000181;
  acCmdPromote = $00000182;
  acCmdGroupByTable = $00000183;
  acCmdDemote = $00000184;
  acCmdSaveAsDataAccessPage = $00000185;
  acCmdMicrosoftScriptEditor = $00000186;
  acCmdWorkgroupAdministrator = $00000187;
  acCmdNewObjectFunction = $0000018A;
  acCmdViewFunctions = $0000018B;
  acCmdPivotTableView = $0000018C;
  acCmdPivotChartView = $0000018D;
  acCmdPivotAutoFilter = $0000018E;
  acCmdPivotTableSubtotal = $0000018F;
  acCmdPivotCollapse = $00000190;
  acCmdPivotExpand = $00000191;
  acCmdPivotTableHideDetails = $00000192;
  acCmdPivotTableShowDetails = $00000193;
  acCmdPivotRefresh = $00000194;
  acCmdPivotTableExportToExcel = $00000195;
  acCmdPivotTableMoveToRowArea = $00000196;
  acCmdPivotTableMoveToColumnArea = $00000197;
  acCmdPivotTableMoveToFilterArea = $00000198;
  acCmdPivotTableMoveToDetailArea = $00000199;
  acCmdPivotTablePromote = $0000019A;
  acCmdPivotTableDemote = $0000019B;
  acCmdPivotAutoSum = $0000019C;
  acCmdPivotAutoCount = $0000019D;
  acCmdPivotAutoMin = $0000019E;
  acCmdPivotAutoMax = $0000019F;
  acCmdPivotAutoAverage = $000001A0;
  acCmdPivotAutoStdDev = $000001A1;
  acCmdPivotAutoVar = $000001A2;
  acCmdPivotAutoStdDevP = $000001A3;
  acCmdPivotAutoVarP = $000001A4;
  acCmdPivotShowTop1 = $000001A5;
  acCmdPivotShowTop2 = $000001A6;
  acCmdPivotShowTop5 = $000001A7;
  acCmdPivotShowTop10 = $000001A8;
  acCmdPivotShowTop25 = $000001A9;
  acCmdPivotShowTop1Percent = $000001AA;
  acCmdPivotShowTop2Percent = $000001AB;
  acCmdPivotShowTop5Percent = $000001AC;
  acCmdPivotShowTop10Percent = $000001AD;
  acCmdPivotShowTop25Percent = $000001AE;
  acCmdPivotShowTopOther = $000001AF;
  acCmdPivotShowBottom1 = $000001B0;
  acCmdPivotShowBottom2 = $000001B1;
  acCmdPivotShowBottom5 = $000001B2;
  acCmdPivotShowBottom10 = $000001B3;
  acCmdPivotShowBottom25 = $000001B4;
  acCmdPivotShowBottom1Percent = $000001B5;
  acCmdPivotShowBottom2Percent = $000001B6;
  acCmdPivotShowBottom5Percent = $000001B7;
  acCmdPivotShowBottom10Percent = $000001B8;
  acCmdPivotShowBottom25Percent = $000001B9;
  acCmdPivotShowBottomOther = $000001BA;
  acCmdPivotTableCreateCalcTotal = $000001BB;
  acCmdPivotTableCreateCalcField = $000001BC;
  acCmdPivotTableShowAsNormal = $000001BD;
  acCmdPivotTablePercentRowTotal = $000001BE;
  acCmdPivotTablePercentColumnTotal = $000001BF;
  acCmdPivotTablePercentParentRowItem = $000001C0;
  acCmdPivotTablePercentParentColumnItem = $000001C1;
  acCmdPivotTablePercentGrandTotal = $000001C2;
  acCmdPivotTableExpandIndicators = $000001C3;
  acCmdPivotDropAreas = $000001C4;
  acCmdPivotChartType = $000001C5;
  acCmdPivotDelete = $000001C6;
  acCmdPivotChartShowLegend = $000001C7;
  acCmdPivotChartByRowByColumn = $000001C8;
  acCmdPivotChartDrillInto = $000001C9;
  acCmdPivotChartMultiplePlots = $000001CA;
  acCmdPivotChartMultiplePlotsUnifiedScale = $000001CB;
  acCmdPivotChartUndo = $000001CC;
  acCmdPivotShowAll = $000001CD;
  acCmdSubformFormView = $000001CE;
  acCmdSubformDatasheetView = $000001CF;
  acCmdSubformPivotTableView = $000001D0;
  acCmdSubformPivotChartView = $000001D1;
  acCmdWebPagePreview = $000001D2;
  acCmdPageProperties = $000001D3;
  acCmdDataOutline = $000001D4;
  acCmdInsertMovieFromFile = $000001D5;
  acCmdInsertPivotTable = $000001D6;
  acCmdInsertSpreadsheet = $000001D7;
  acCmdInsertUnboundSection = $000001D8;
  acCmdWebTheme = $000001D9;
  acCmdBackgroundPicture = $000001DA;
  acCmdBackgroundSound = $000001DB;
  acCmdAlignMiddle = $000001DC;
  acCmdAlignCenter = $000001DD;
  acCmdAlignmentAndSizing = $000001DE;
  acCmdDataAccessPageFieldListRefresh = $000001DF;
  acCmdDataAccessPageAddToPage = $000001E0;
  acCmdZoom500 = $000001E1;
  acCmdZoom1000 = $000001E2;
  acCmdPrintRelationships = $000001E3;
  acCmdGroupControls = $000001E4;
  acCmdUngroupControls = $000001E5;
  acCmdWebPageProperties = $000001E6;
  acCmdExport = $000001E7;
  acCmdOfficeClipboard = $000001E8;
  acCmdDeleteTable = $000001E9;
  acCmdPasteAsHyperlink = $000001EA;
  acCmdNewGroup = $000001EB;
  acCmdRenameGroup = $000001EC;
  acCmdDeleteGroup = $000001ED;
  acCmdAddToNewGroup = $000001EE;
  acCmdSubformInNewWindow = $000001EF;
  acCmdServerProperties = $000001F0;
  acCmdTableCustomView = $000001F1;
  acCmdTableAddTable = $000001F2;
  acCmdInsertSubdatasheet = $000001F3;
  acCmdConditionalFormatting = $000001F4;
  acCmdChangeToCommandButton = $000001F5;
  acCmdSubdatasheetExpandAll = $000001F8;
  acCmdSubdatasheetCollapseAll = $000001F9;
  acCmdSubdatasheetRemove = $000001FA;
  acCmdServerFilterByForm = $000001FB;
  acCmdMaximiumRecords = $000001FC;
  acCmdSpeech = $000001FF;
  acCmdBackup = $00000201;
  acCmdRestore = $00000202;
  acCmdTransferSQLDatabase = $00000203;
  acCmdCopyDatabaseFile = $00000204;
  acCmdDropSQLDatabase = $00000205;
  acCmdLinkedTableManager = $00000207;
  acCmdDatabaseSplitter = $00000208;
  acCmdSwitchboardManager = $00000209;
  acCmdUpsizingWizard = $0000020A;
  acCmdPartialReplicaWizard = $0000020C;
  acCmdVisualBasicEditor = $0000020D;
  acCmdAddInManager = $0000020E;
  acCmdPivotTableClearCustomOrdering = $0000020F;
  acCmdPivotTableFilterBySelection = $00000210;
  acCmdPivotTableRemove = $00000211;
  acCmdPivotTableGroupItems = $00000212;
  acCmdPivotTableUngroupItems = $00000213;
  acCmdPivotChartDrillOut = $00000214;
  acCmdShowEnvelope = $00000215;
  acCmdPivotChartSortAscByTotal = $00000216;
  acCmdPivotChartSortDescByTotal = $00000217;
  acCmdViewObjectDependencies = $00000218;
  acCmdPublishDatabase = $00000219;
  acCmdCloseDatabase = $0000021A;
  acCmdReportView = $0000021B;
  acCmdToggleOffline = $0000021C;
  acCmdRefreshData = $0000021D;
  acCmdShareOnSharePoint = $0000021E;
  acCmdSavedImports = $0000021F;
  acCmdImportAttachAccess = $00000220;
  acCmdImportAttachExcel = $00000221;
  acCmdImportAttachText = $00000222;
  acCmdImportAttachSharePointList = $00000223;
  acCmdImportAttachXML = $00000224;
  acCmdImportAttachODBC = $00000225;
  acCmdImportAttachHTML = $00000226;
  acCmdImportAttachOutlook = $00000227;
  acCmdImportAttachdBase = $00000228;
  acCmdImportAttachParadox = $00000229;
  acCmdImportAttachLotus = $0000022A;
  acCmdSavedExports = $0000022B;
  acCmdExportExcel = $0000022C;
  acCmdExportSharePointList = $0000022D;
  acCmdExportRTF = $0000022E;
  acCmdExportAccess = $0000022F;
  acCmdExportText = $00000230;
  acCmdExportXML = $00000231;
  acCmdExportODBC = $00000232;
  acCmdExportSnapShot = $00000233;
  acCmdExportHTML = $00000234;
  acCmdExportdBase = $00000235;
  acCmdExportParadox = $00000236;
  acCmdExportLotus = $00000237;
  acCmdStackedLayout = $00000238;
  acCmdTabularLayout = $00000239;
  acCmdSelectEntireRow = $0000023A;
  acCmdSelectEntireColumn = $0000023B;
  acCmdMoveColumnCellUp = $0000023C;
  acCmdMoveColumnCellDown = $0000023D;
  acCmdLayoutGridlinesBoth = $0000023E;
  acCmdLayoutGridlinesVertical = $0000023F;
  acCmdLayoutGridlinesHorizontal = $00000240;
  acCmdLayoutGridlinesNone = $00000241;
  acCmdLayoutGridlinesCrossHatch = $00000242;
  acCmdLayoutGridlinesTop = $00000243;
  acCmdLayoutGridlinesBottom = $00000244;
  acCmdLayoutGridlinesOutline = $00000245;
  acCmdRemoveFromLayout = $00000246;
  acCmdAddFromOutlook = $00000247;
  acCmdSaveAsOutlookContact = $00000248;
  acCmdInsertLogo = $00000249;
  acCmdInsertTitle = $0000024A;
  acCmdPasteFormatting = $0000024B;
  acCmdMacroArguments = $0000024C;
  acCmdMacroAllActions = $0000024D;
  acCmdPrintSelection = $0000024E;
  acCmdPublishFixedFormat = $0000024F;
  acCmdExportFixedFormat = $00000250;
  acCmdLayoutView = $00000251;
  acCmdNewObjectContinuousForm = $00000252;
  acCmdNewObjectSplitForm = $00000253;
  acCmdNewObjectPivotChart = $00000254;
  acCmdNewObjectPivotTable = $00000255;
  acCmdNewObjectDatasheetForm = $00000256;
  acCmdNewObjectModalForm = $00000257;
  acCmdNewObjectBlankForm = $00000258;
  acCmdNewObjectLabelsReport = $00000259;
  acCmdNewObjectBlankReport = $0000025A;
  acCmdNewObjectDesignQuery = $0000025B;
  acCmdNewObjectDesignForm = $0000025C;
  acCmdNewObjectDesignReport = $0000025D;
  acCmdNewObjectDesignTable = $0000025E;
  acCmdEditListItems = $0000025F;
  acCmdCollectDataViaEmail = $00000260;
  acCmdManageReplies = $00000261;
  acCmdAnchorTopLeft = $00000262;
  acCmdAnchorStretchAcross = $00000263;
  acCmdAnchorTopRight = $00000264;
  acCmdAnchorStretchDown = $00000265;
  acCmdAnchorStretchDownAcross = $00000266;
  acCmdAnchorStretchDownRight = $00000267;
  acCmdAnchorBottomLeft = $00000268;
  acCmdAnchorBottomStretchAcross = $00000269;
  acCmdAnchorBottomRight = $0000026A;
  acCmdFilterMenu = $0000026B;
  acCmdShowColumnHistory = $0000026C;
  acCmdBrowseSharePointList = $0000026D;
  acCmdModifySharePointList = $0000026E;
  acCmdModifySharePointListAlerts = $0000026F;
  acCmdModifySharePointListWorkflow = $00000270;
  acCmdModifySharePointListPermissions = $00000271;
  acCmdRefreshSharePointList = $00000272;
  acCmdDeleteSharePointList = $00000273;
  acCmdControlMarginsNone = $00000274;
  acCmdControlMarginsNarrow = $00000275;
  acCmdControlMarginsMedium = $00000276;
  acCmdControlMarginsWide = $00000277;
  acCmdControlPaddingNone = $00000278;
  acCmdControlPaddingNarrow = $00000279;
  acCmdControlPaddingMedium = $0000027A;
  acCmdControlPaddingWide = $0000027B;
  acCmdShowDatePicker = $0000027C;
  acCmdSetCaption = $0000027D;
  acCmdSynchronize = $0000027E;
  acCmdDiscardChanges = $0000027F;
  acCmdDiscardChangesAndRefresh = $00000280;
  acCmdSharePointSiteRecycleBin = $00000281;
  acCmdToggleCacheListData = $00000282;
  acCmdRemoveFilterFromCurrentColumn = $00000283;
  acCmdRemoveAllFilters = $00000284;
  acCmdRemoveAllSorts = $00000285;
  acCmdCloseAll = $00000286;
  acCmdFieldTemplates = $00000287;
  acCmdApplyAutoFormat1 = $00000288;
  acCmdApplyAutoFormat2 = $00000289;
  acCmdApplyAutoFormat3 = $0000028A;
  acCmdApplyAutoFormat4 = $0000028B;
  acCmdApplyAutoFormat5 = $0000028C;
  acCmdApplyAutoFormat6 = $0000028D;
  acCmdApplyAutoFormat7 = $0000028E;
  acCmdApplyAutoFormat8 = $0000028F;
  acCmdApplyAutoFormat9 = $00000290;
  acCmdApplyAutoFormat10 = $00000291;
  acCmdApplyAutoFormat11 = $00000292;
  acCmdApplyAutoFormat12 = $00000293;
  acCmdApplyAutoFormat13 = $00000294;
  acCmdApplyAutoFormat14 = $00000295;
  acCmdApplyAutoFormat15 = $00000296;
  acCmdApplyAutoFormat16 = $00000297;
  acCmdApplyAutoFormat17 = $00000298;
  acCmdApplyAutoFormat18 = $00000299;
  acCmdApplyAutoFormat19 = $0000029A;
  acCmdApplyAutoFormat20 = $0000029B;
  acCmdApplyAutoFormat21 = $0000029C;
  acCmdApplyAutoFormat22 = $0000029D;
  acCmdApplyAutoFormat23 = $0000029E;
  acCmdApplyAutoFormat24 = $0000029F;
  acCmdApplyAutoFormat25 = $000002A0;
  acCmdManageAttachments = $000002A1;
  acCmdWorkflowTasks = $000002A2;
  acCmdStartNewWorkflow = $000002A3;
  acCmdShowMessageBar = $000002A4;
  acCmdHideMessageBar = $000002A5;

// Constants for enum AcShowToolbar
type
  AcShowToolbar = TOleEnum;
const
  acToolbarYes = $00000000;
  acToolbarWhereApprop = $00000001;
  acToolbarNo = $00000002;

// Constants for enum AcFormatConditionType
type
  AcFormatConditionType = TOleEnum;
const
  acFieldValue = $00000000;
  acExpression = $00000001;
  acFieldHasFocus = $00000002;

// Constants for enum AcFormatConditionOperator
type
  AcFormatConditionOperator = TOleEnum;
const
  acBetween = $00000000;
  acNotBetween = $00000001;
  acEqual = $00000002;
  acNotEqual = $00000003;
  acGreaterThan = $00000004;
  acLessThan = $00000005;
  acGreaterThanOrEqual = $00000006;
  acLessThanOrEqual = $00000007;

// Constants for enum AcColorIndex
type
  AcColorIndex = TOleEnum;
const
  acColorIndexBlack = $00000000;
  acColorIndexMaroon = $00000001;
  acColorIndexGreen = $00000002;
  acColorIndexOlive = $00000003;
  acColorIndexDarkBlue = $00000004;
  acColorIndexViolet = $00000005;
  acColorIndexTeal = $00000006;
  acColorIndexGray = $00000007;
  acColorIndexSilver = $00000008;
  acColorIndexRed = $00000009;
  acColorIndexBrightGreen = $0000000A;
  acColorIndexYellow = $0000000B;
  acColorIndexBlue = $0000000C;
  acColorIndexFuschia = $0000000D;
  acColorIndexAqua = $0000000E;
  acColorIndexWhite = $0000000F;

// Constants for enum RefKind
type
  RefKind = TOleEnum;
const
  TypeLib = $00000000;
  Project = $00000001;

// Constants for enum ProcKind
type
  ProcKind = TOleEnum;
const
  Proc = $00000000;
  Let = $00000001;
  Set_ = $00000002;
  Get = $00000003;

// Constants for enum AcDefView
type
  AcDefView = TOleEnum;
const
  acDefViewSingle = $00000000;
  acDefViewContinuous = $00000001;
  acDefViewDatasheet = $00000002;
  acDefViewPivotTable = $00000003;
  acDefViewPivotChart = $00000004;
  acDefViewSplitForm = $00000005;

// Constants for enum AcCurrentView
type
  AcCurrentView = TOleEnum;
const
  acCurViewDesign = $00000000;
  acCurViewFormBrowse = $00000001;
  acCurViewDatasheet = $00000002;
  acCurViewPivotTable = $00000003;
  acCurViewPivotChart = $00000004;
  acCurViewPreview = $00000005;
  acCurViewReportBrowse = $00000006;
  acCurViewLayout = $00000007;

// Constants for enum AcFileFormat
type
  AcFileFormat = TOleEnum;
const
  acFileFormatAccess2 = $00000002;
  acFileFormatAccess95 = $00000007;
  acFileFormatAccess97 = $00000008;
  acFileFormatAccess2000 = $00000009;
  acFileFormatAccess2002 = $0000000A;
  acFileFormatAccess2007 = $0000000C;

// Constants for enum AcExportXMLObjectType
type
  AcExportXMLObjectType = TOleEnum;
const
  acExportTable = $00000000;
  acExportQuery = $00000001;
  acExportForm = $00000002;
  acExportReport = $00000003;
  acExportServerView = $00000007;
  acExportStoredProcedure = $00000009;
  acExportFunction = $0000000A;

// Constants for enum AcExportXMLSchemaFormat
type
  AcExportXMLSchemaFormat = TOleEnum;
const
  acSchemaNone = $00000000;
  acSchemaXSD = $00000001;

// Constants for enum AcExportXMLEncoding
type
  AcExportXMLEncoding = TOleEnum;
const
  acUTF8 = $00000000;
  acUTF16 = $00000001;

// Constants for enum AcPrintColor
type
  AcPrintColor = TOleEnum;
const
  acPRCMMonochrome = $00000001;
  acPRCMColor = $00000002;

// Constants for enum AcPrintDuplex
type
  AcPrintDuplex = TOleEnum;
const
  acPRDPSimplex = $00000001;
  acPRDPHorizontal = $00000002;
  acPRDPVertical = $00000003;

// Constants for enum AcPrintOrientation
type
  AcPrintOrientation = TOleEnum;
const
  acPRORPortrait = $00000001;
  acPRORLandscape = $00000002;

// Constants for enum AcPrintObjQuality
type
  AcPrintObjQuality = TOleEnum;
const
  acPRPQDraft = $FFFFFFFF;
  acPRPQLow = $FFFFFFFE;
  acPRPQMedium = $FFFFFFFD;
  acPRPQHigh = $FFFFFFFC;

// Constants for enum AcPrintPaperBin
type
  AcPrintPaperBin = TOleEnum;
const
  acPRBNUpper = $00000001;
  acPRBNLower = $00000002;
  acPRBNMiddle = $00000003;
  acPRBNManual = $00000004;
  acPRBNEnvelope = $00000005;
  acPRBNEnvManual = $00000006;
  acPRBNAuto = $00000007;
  acPRBNTractor = $00000008;
  acPRBNSmallFmt = $00000009;
  acPRBNLargeFmt = $0000000A;
  acPRBNLargeCapacity = $0000000B;
  acPRBNCassette = $0000000E;
  acPRBNFormSource = $0000000F;

// Constants for enum AcPrintPaperSize
type
  AcPrintPaperSize = TOleEnum;
const
  acPRPSLetter = $00000001;
  acPRPSLetterSmall = $00000002;
  acPRPSTabloid = $00000003;
  acPRPSLedger = $00000004;
  acPRPSLegal = $00000005;
  acPRPSStatement = $00000006;
  acPRPSExecutive = $00000007;
  acPRPSA3 = $00000008;
  acPRPSA4 = $00000009;
  acPRPSA4Small = $0000000A;
  acPRPSA5 = $0000000B;
  acPRPSB4 = $0000000C;
  acPRPSB5 = $0000000D;
  acPRPSFolio = $0000000E;
  acPRPSQuarto = $0000000F;
  acPRPS10x14 = $00000010;
  acPRPS11x17 = $00000011;
  acPRPSNote = $00000012;
  acPRPSEnv9 = $00000013;
  acPRPSEnv10 = $00000014;
  acPRPSEnv11 = $00000015;
  acPRPSEnv12 = $00000016;
  acPRPSEnv14 = $00000017;
  acPRPSCSheet = $00000018;
  acPRPSDSheet = $00000019;
  acPRPSESheet = $0000001A;
  acPRPSEnvDL = $0000001B;
  acPRPSEnvC3 = $0000001D;
  acPRPSEnvC4 = $0000001E;
  acPRPSEnvC5 = $0000001C;
  acPRPSEnvC6 = $0000001F;
  acPRPSEnvC65 = $00000020;
  acPRPSEnvB4 = $00000021;
  acPRPSEnvB5 = $00000022;
  acPRPSEnvB6 = $00000023;
  acPRPSEnvItaly = $00000024;
  acPRPSEnvMonarch = $00000025;
  acPRPSEnvPersonal = $00000026;
  acPRPSFanfoldUS = $00000027;
  acPRPSFanfoldStdGerman = $00000028;
  acPRPSFanfoldLglGerman = $00000029;
  acPRPSUser = $00000100;

// Constants for enum AcPrintItemLayout
type
  AcPrintItemLayout = TOleEnum;
const
  acPRHorizontalColumnLayout = $000007A1;
  acPRVerticalColumnLayout = $000007A2;

// Constants for enum AcImportXMLOption
type
  AcImportXMLOption = TOleEnum;
const
  acStructureOnly = $00000000;
  acStructureAndData = $00000001;
  acAppendData = $00000002;

// Constants for enum AcExportXMLOtherFlags
type
  AcExportXMLOtherFlags = TOleEnum;
const
  acEmbedSchema = $00000001;
  acExcludePrimaryKeyAndIndexes = $00000002;
  acRunFromServer = $00000004;
  acLiveReportSource = $00000008;
  acPersistReportML = $00000010;
  acExportAllTableAndFieldProperties = $00000020;

// Constants for enum AcTransformXMLScriptOption
type
  AcTransformXMLScriptOption = TOleEnum;
const
  acEnableScript = $00000000;
  acPromptScript = $00000001;
  acDisableScript = $00000002;

// Constants for enum AcSplitFormPrinting
type
  AcSplitFormPrinting = TOleEnum;
const
  acFormOnly = $00000000;
  acGridOnly = $00000001;

// Constants for enum AcSplitFormOrientation
type
  AcSplitFormOrientation = TOleEnum;
const
  acDatasheetOnTop = $00000000;
  acDatasheetOnBottom = $00000001;
  acDatasheetOnLeft = $00000002;
  acDatasheetOnRight = $00000003;

// Constants for enum AcSplitFormDatasheet
type
  AcSplitFormDatasheet = TOleEnum;
const
  acDatasheetAllowEdits = $00000000;
  acDatasheetReadOnly = $00000001;

// Constants for enum AcLayoutType
type
  AcLayoutType = TOleEnum;
const
  acLayoutNone = $00000000;
  acLayoutTabular = $00000001;
  acLayoutStacked = $00000002;

// Constants for enum AcTextFormat
type
  AcTextFormat = TOleEnum;
const
  acTextFormatPlain = $00000000;
  acTextFormatHTMLRichText = $00000001;

// Constants for enum AcSeparatorCharacters
type
  AcSeparatorCharacters = TOleEnum;
const
  acSeparatorCharactersSystemSeparator = $00000000;
  acSeparatorCharactersNewLine = $00000001;
  acSeparatorCharactersSemiColon = $00000002;
  acSeparatorCharactersComma = $00000003;

// Constants for enum AcHorizontalAnchor
type
  AcHorizontalAnchor = TOleEnum;
const
  acHorizontalAnchorLeft = $00000000;
  acHorizontalAnchorRight = $00000001;
  acHorizontalAnchorBoth = $00000002;

// Constants for enum AcVerticalAnchor
type
  AcVerticalAnchor = TOleEnum;
const
  acVerticalAnchorTop = $00000000;
  acVerticalAnchorBottom = $00000001;
  acVerticalAnchorBoth = $00000002;

// Constants for enum AcDisplayAs
type
  AcDisplayAs = TOleEnum;
const
  acDisplayAsImageIcon = $00000000;
  acDisplayAsIcon = $00000001;
  acDisplayAsPaperclip = $00000002;

// Constants for enum AcExportQuality
type
  AcExportQuality = TOleEnum;
const
  acExportQualityPrint = $00000000;
  acExportQualityScreen = $00000001;

// Constants for enum AcDefReportView
type
  AcDefReportView = TOleEnum;
const
  acDefViewPreview = $00000000;
  acDefViewReportBrowse = $00000001;

// Constants for enum AcSharePointListTransferType
type
  AcSharePointListTransferType = TOleEnum;
const
  acImportSharePointList = $00000000;
  acLinkSharePointList = $00000001;

// Constants for enum AcProperty
type
  AcProperty = TOleEnum;
const
  acPropertyEnabled = $00000000;
  acPropertyVisible = $00000001;
  acPropertyLocked = $00000002;
  acPropertyLeft = $00000003;
  acPropertyTop = $00000004;
  acPropertyWidth = $00000005;
  acPropertyHeight = $00000006;
  acPropertyForeColor = $00000007;
  acPropertyBackColor = $00000008;
  acPropertyCaption = $00000009;

// Constants for enum AcNewDatabaseFormat
type
  AcNewDatabaseFormat = TOleEnum;
const
  acNewDatabaseFormatUserDefault = $00000000;
  acNewDatabaseFormatAccess2000 = $00000009;
  acNewDatabaseFormatAccess2002 = $0000000A;
  acNewDatabaseFormatAccess2007 = $0000000C;

// Constants for enum AcCursorOnHover
type
  AcCursorOnHover = TOleEnum;
const
  acCursorOnHoverDefault = $00000000;
  acCursorOnHoverHyperlinkHand = $00000001;

// Constants for enum AcDisplayAsHyperlink
type
  AcDisplayAsHyperlink = TOleEnum;
const
  acDisplayAsHyperlinkIfHyperlink = $00000000;
  acDisplayAsHyperlinkAlways = $00000001;
  acDisplayAsHyperlinkOnScreenOnly = $00000002;

// Constants for enum AcPictureCaptionArrangement
type
  AcPictureCaptionArrangement = TOleEnum;
const
  acNoPictureCaption = $00000000;
  acGeneral = $00000001;
  acTop = $00000002;
  acBottom = $00000003;
  acLeft = $00000004;
  acRight = $00000005;

type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  DoCmd = interface;
  DoCmdDisp = dispinterface;
  _RecordsetEvents = interface;
  _RecordsetEventsDisp = dispinterface;
  _AccessProperty = interface;
  _AccessPropertyDisp = dispinterface;
  Properties = interface;
  PropertiesDisp = dispinterface;
  _FormatCondition = interface;
  _FormatConditionDisp = dispinterface;
  FormatConditions = interface;
  FormatConditionsDisp = dispinterface;
  _ItemsSelected = interface;
  _ItemsSelectedDisp = dispinterface;
  Children = interface;
  ChildrenDisp = dispinterface;
  _AccessField = interface;
  _AccessFieldDisp = dispinterface;
  __Help = interface;
  _Hyperlink = interface;
  _HyperlinkDisp = dispinterface;
  _Page = interface;
  _PageDisp = dispinterface;
  Pages = interface;
  PagesDisp = dispinterface;
  _Control = interface;
  _ControlDisp = dispinterface;
  __ControlInReportEvents = interface;
  _DispControlInReportEvents = dispinterface;
  Controls = interface;
  ControlsDisp = dispinterface;
  _Label = interface;
  _LabelDisp = dispinterface;
  _LabelEvents = interface;
  DispLabelEvents = dispinterface;
  _ChildLabelEvents = interface;
  DispChildLabelEvents = dispinterface;
  _Rectangle = interface;
  _RectangleDisp = dispinterface;
  _RectangleEvents = interface;
  DispRectangleEvents = dispinterface;
  _Line = interface;
  _LineDisp = dispinterface;
  _LineEvents = interface;
  DispLineEvents = dispinterface;
  _Image = interface;
  _ImageDisp = dispinterface;
  _ImageEvents = interface;
  DispImageEvents = dispinterface;
  _CommandButton = interface;
  _CommandButtonDisp = dispinterface;
  _CommandButtonEvents = interface;
  DispCommandButtonEvents = dispinterface;
  _OptionButton = interface;
  _OptionButtonDisp = dispinterface;
  _OptionButtonEvents = interface;
  DispOptionButtonEvents = dispinterface;
  _OptionButtonInOptionEvents = interface;
  _Checkbox = interface;
  _CheckboxDisp = dispinterface;
  _CheckBoxEvents = interface;
  DispCheckBoxEvents = dispinterface;
  _CheckBoxInOptionEvents = interface;
  _OptionGroup = interface;
  _OptionGroupDisp = dispinterface;
  _OptionGroupEvents = interface;
  DispOptionGroupEvents = dispinterface;
  _BoundObjectFrame = interface;
  _BoundObjectFrameDisp = dispinterface;
  _BoundObjectFrameEvents = interface;
  DispBoundObjectFrameEvents = dispinterface;
  _Textbox = interface;
  _TextboxDisp = dispinterface;
  _TextBoxEvents = interface;
  DispTextBoxEvents = dispinterface;
  _ListBox = interface;
  _ListBoxDisp = dispinterface;
  _ListBoxEvents = interface;
  DispListBoxEvents = dispinterface;
  _Combobox = interface;
  _ComboboxDisp = dispinterface;
  _ComboBoxEvents = interface;
  DispComboBoxEvents = dispinterface;
  _ObjectFrame = interface;
  _ObjectFrameDisp = dispinterface;
  _ObjectFrameEvents = interface;
  DispObjectFrameEvents = dispinterface;
  _PageBreak = interface;
  _PageBreakDisp = dispinterface;
  _PageBreakEvents = interface;
  DispPageBreakEvents = dispinterface;
  _ToggleButton = interface;
  _ToggleButtonDisp = dispinterface;
  _ToggleButtonEvents = interface;
  DispToggleButtonEvents = dispinterface;
  _ToggleButtonInOptionEvents = interface;
  _PaletteButton = interface;
  _PaletteButtonDisp = dispinterface;
  _PaletteButtonEvents = interface;
  DispPaletteButtonEvents = dispinterface;
  _SubForm = interface;
  _SubFormDisp = dispinterface;
  _SubFormEvents = interface;
  DispSubFormEvents = dispinterface;
  _SubReport = interface;
  _SubReportDisp = dispinterface;
  _SubReportEvents = interface;
  DispSubReportEvents = dispinterface;
  _CustomControl = interface;
  _CustomControlDisp = dispinterface;
  _CustomControlEvents = interface;
  DispCustomControlEvents = dispinterface;
  _CustomControlInReportEvents = interface;
  DispCustomControlInReportEvents = dispinterface;
  _TabControl = interface;
  _TabControlDisp = dispinterface;
  _TabControlEvents = interface;
  DispTabControlEvents = dispinterface;
  _PageEvents = interface;
  DispPageEvents = dispinterface;
  _Section = interface;
  _SectionDisp = dispinterface;
  _SectionEvents = interface;
  DispSectionEvents = dispinterface;
  _GroupLevel = interface;
  _GroupLevelDisp = dispinterface;
  _SectionInReportEvents = interface;
  DispSectionInReportEvents = dispinterface;
  _PageHdrFtrInReportEvents = interface;
  DispPageHdrFtrInReportEvents = dispinterface;
  Module = interface;
  ModuleDisp = dispinterface;
  Modules = interface;
  ModulesDisp = dispinterface;
  _Form = interface;
  _FormDisp = dispinterface;
  _FormEvents = interface;
  Forms = interface;
  FormsDisp = dispinterface;
  _Report = interface;
  _ReportDisp = dispinterface;
  _ReportEvents = interface;
  Reports = interface;
  ReportsDisp = dispinterface;
  Screen = interface;
  ScreenDisp = dispinterface;
  _Application = interface;
  _ApplicationDisp = dispinterface;
  Reference = interface;
  ReferenceDisp = dispinterface;
  _References = interface;
  _ReferencesDisp = dispinterface;
  _References_Events = dispinterface;
  _Dummy = interface;
  _DummyDisp = dispinterface;
  _DataAccessPage = interface;
  _DataAccessPageDisp = dispinterface;
  DataAccessPages = interface;
  DataAccessPagesDisp = dispinterface;
  AllObjects = interface;
  AllObjectsDisp = dispinterface;
  AccessObjectProperty = interface;
  AccessObjectPropertyDisp = dispinterface;
  AccessObjectProperties = interface;
  AccessObjectPropertiesDisp = dispinterface;
  _CurrentProject = interface;
  _CurrentProjectDisp = dispinterface;
  _CurrentData = interface;
  _CurrentDataDisp = dispinterface;
  AccessObject = interface;
  AccessObjectDisp = dispinterface;
  _WizHook = interface;
  _WizHookDisp = dispinterface;
  _DefaultWebOptions = interface;
  _DefaultWebOptionsDisp = dispinterface;
  _WebOptions = interface;
  _WebOptionsDisp = dispinterface;
  _DummyEvents = interface;
  _Printer = interface;
  _PrinterDisp = dispinterface;
  Printers = interface;
  PrintersDisp = dispinterface;
  _Form2 = interface;
  _Form2Disp = dispinterface;
  _Report2 = interface;
  _Report2Disp = dispinterface;
  _AdditionalData = interface;
  _AdditionalDataDisp = dispinterface;
  _AutoCorrect = interface;
  _AutoCorrectDisp = dispinterface;
  _DependencyObjects = interface;
  _DependencyObjectsDisp = dispinterface;
  _DependencyInfo = interface;
  _DependencyInfoDisp = dispinterface;
  _SmartTags = interface;
  _SmartTagsDisp = dispinterface;
  _SmartTagAction = interface;
  _SmartTagActionDisp = dispinterface;
  _SmartTagActions = interface;
  _SmartTagActionsDisp = dispinterface;
  _SmartTagProperty = interface;
  _SmartTagPropertyDisp = dispinterface;
  _SmartTagProperties = interface;
  _SmartTagPropertiesDisp = dispinterface;
  _SmartTag = interface;
  _SmartTagDisp = dispinterface;
  ImportExportSpecification = interface;
  ImportExportSpecificationDisp = dispinterface;
  ImportExportSpecifications = interface;
  ImportExportSpecificationsDisp = dispinterface;
  _Form3 = interface;
  _Form3Disp = dispinterface;
  _FormEvents2 = dispinterface;
  _Report3 = interface;
  _Report3Disp = dispinterface;
  _ReportEvents2 = dispinterface;
  _Attachment = interface;
  _AttachmentDisp = dispinterface;
  DispAttachmentEvents = dispinterface;
  _MacroError = interface;
  _MacroErrorDisp = dispinterface;
  _TempVar = interface;
  _TempVarDisp = dispinterface;
  _TempVars = interface;
  _TempVarsDisp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  FormatCondition = _FormatCondition;
  AccessField = _AccessField;
  AccessHyperlink = _Hyperlink;
  AccessControl = _Control;
  _OptionButtonInOption = _OptionButton;
  _CheckBoxInOption = _Checkbox;
  _ToggleButtonInOption = _ToggleButton;
  AccessGroupLevel = _GroupLevel;
  FormOld = _Form;
  ReportOld = _Report;
  AccessApplication = _Application;
  AccessReferences = _References;
  DataAccessPage = _DataAccessPage;
  AllForms = AllObjects;
  AllReports = AllObjects;
  AllMacros = AllObjects;
  AllModules = AllObjects;
  AllDataAccessPages = AllObjects;
  AllTables = AllObjects;
  AllQueries = AllObjects;
  AllViews = AllObjects;
  AllStoredProcedures = AllObjects;
  AllDatabaseDiagrams = AllObjects;
  CurrentProject = _CurrentProject;
  CurrentData = _CurrentData;
  CodeProject = _CurrentProject;
  CodeData = _CurrentData;
  WizHook = _WizHook;
  DefaultWebOptions = _DefaultWebOptions;
  AccessWebOptions = _WebOptions;
  Class_ = _Dummy;
  Printer = _Printer;
  FormOldV10 = _Form2;
  ReportOldV10 = _Report2;
  AllFunctions = AllObjects;
  AdditionalData = _AdditionalData;
  AutoCorrect = _AutoCorrect;
  DependencyObjects = _DependencyObjects;
  DependencyInfo = _DependencyInfo;
  SmartTags = _SmartTags;
  SmartTagAction = _SmartTagAction;
  SmartTagActions = _SmartTagActions;
  SmartTagProperty = _SmartTagProperty;
  SmartTagProperties = _SmartTagProperties;
  SmartTag = _SmartTag;
  AccessForm = _Form3;
  AccessReport = _Report3;
  Attachment = _Attachment;
  MacroError = _MacroError;
  TempVar = _TempVar;
  TempVars = _TempVars;
  AccessCommandButton = _CommandButton;
  AccessBoundObjectFrame = _BoundObjectFrame;
  AccessObjectFrame = _ObjectFrame;
  AccessCustomControl = _CustomControl;
  AccessCheckBox = _Checkbox;
  AccessOptionButton = _OptionButton;
  AccessToggleButton = _ToggleButton;
  AccessRectangle = _Rectangle;
  AccessImage = _Image;
  AccessListBox = _ListBox;
  AccessOptionGroup = _OptionGroup;
  AccessTextBox = _Textbox;
  AccessComboBox = _Combobox;
  AccessSubForm = _SubForm;
  AccessSubReport = _SubReport;
  AccessLine = _Line;
  AccessPageBreak = _PageBreak;
  AccessSection = _Section;
  _SectionInReport = _Section;
  _ControlInReportEvents = _Control;
  _CustomControlInReport = _CustomControl;
  AccessPaletteButton = _PaletteButton;
  _PageHdrFtrInReport = _Section;
  AccessTabControl = _TabControl;
  AccessPage = _Page;
  AccessLabel = _Label;
  _ChildLabel = _Label;


// *********************************************************************//
// Declaration of structures, unions and aliases.                         
// *********************************************************************//
  POleVariant1 = ^OleVariant; {*}
  PPSafeArray1 = ^PSafeArray; {*}
  PPUserType1 = ^Connection; {*}


// *********************************************************************//
// Interface: DoCmd
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C547E760-9658-101B-81EE-00AA004750E2}
// *********************************************************************//
  DoCmd = interface(IDispatch)
    ['{C547E760-9658-101B-81EE-00AA004750E2}']
    procedure AddMenu(MenuName: OleVariant; MenuMacroName: OleVariant; StatusBarText: OleVariant); safecall;
    procedure ApplyFilterOld0(FilterName: OleVariant; WhereCondition: OleVariant); safecall;
    procedure Beep; safecall;
    procedure CancelEvent; safecall;
    procedure Close(ObjectType: AcObjectType; ObjectName: OleVariant; Save: AcCloseSave); safecall;
    procedure CopyObject(DestinationDatabase: OleVariant; NewName: OleVariant; 
                         SourceObjectType: AcObjectType; SourceObjectName: OleVariant); safecall;
    procedure DoMenuItem(MenuBar: OleVariant; MenuName: OleVariant; Command: OleVariant; 
                         Subcommand: OleVariant; Version: OleVariant); safecall;
    procedure Echo(EchoOn: OleVariant; StatusBarText: OleVariant); safecall;
    procedure FindNext; safecall;
    procedure FindRecord(FindWhat: OleVariant; Match: AcFindMatch; MatchCase: OleVariant; 
                         Search: AcSearchDirection; SearchAsFormatted: OleVariant; 
                         OnlyCurrentField: AcFindField; FindFirst: OleVariant); safecall;
    procedure GoToControl(ControlName: OleVariant); safecall;
    procedure GoToPage(PageNumber: OleVariant; Right: OleVariant; Down: OleVariant); safecall;
    procedure GoToRecord(ObjectType: AcDataObjectType; ObjectName: OleVariant; Record_: AcRecord; 
                         Offset: OleVariant); safecall;
    procedure Hourglass(HourglassOn: OleVariant); safecall;
    procedure Maximize; safecall;
    procedure Minimize; safecall;
    procedure MoveSize(Right: OleVariant; Down: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    procedure OpenForm(FormName: OleVariant; View: AcFormView; FilterName: OleVariant; 
                       WhereCondition: OleVariant; DataMode: AcFormOpenDataMode; 
                       WindowMode: AcWindowMode; OpenArgs: OleVariant); safecall;
    procedure OpenQuery(QueryName: OleVariant; View: AcView; DataMode: AcOpenDataMode); safecall;
    procedure OpenTable(TableName: OleVariant; View: AcView; DataMode: AcOpenDataMode); safecall;
    procedure PrintOut(PrintRange: AcPrintRange; PageFrom: OleVariant; PageTo: OleVariant; 
                       PrintQuality: AcPrintQuality; Copies: OleVariant; CollateCopies: OleVariant); safecall;
    procedure Quit(Options: AcQuitOption); safecall;
    procedure Requery(ControlName: OleVariant); safecall;
    procedure RepaintObject(ObjectType: AcObjectType; ObjectName: OleVariant); safecall;
    procedure Rename(NewName: OleVariant; ObjectType: AcObjectType; OldName: OleVariant); safecall;
    procedure Restore; safecall;
    procedure RunMacro(MacroName: OleVariant; RepeatCount: OleVariant; RepeatExpression: OleVariant); safecall;
    procedure RunSQL(SQLStatement: OleVariant; UseTransaction: OleVariant); safecall;
    procedure SelectObject(ObjectType: AcObjectType; ObjectName: OleVariant; 
                           InDatabaseWindow: OleVariant); safecall;
    procedure SetWarnings(WarningsOn: OleVariant); safecall;
    procedure ShowAllRecords; safecall;
    procedure OpenReportOld0(ReportName: OleVariant; View: AcView; FilterName: OleVariant; 
                             WhereCondition: OleVariant); safecall;
    procedure TransferDatabase(TransferType: AcDataTransferType; DatabaseType: OleVariant; 
                               DatabaseName: OleVariant; ObjectType: AcObjectType; 
                               Source: OleVariant; Destination: OleVariant; 
                               StructureOnly: OleVariant; StoreLogin: OleVariant); safecall;
    procedure TransferSpreadsheet(TransferType: AcDataTransferType; 
                                  SpreadsheetType: AcSpreadSheetType; TableName: OleVariant; 
                                  FileName: OleVariant; HasFieldNames: OleVariant; 
                                  Range: OleVariant; UseOA: OleVariant); safecall;
    procedure TransferText(TransferType: AcTextTransferType; SpecificationName: OleVariant; 
                           TableName: OleVariant; FileName: OleVariant; HasFieldNames: OleVariant; 
                           HTMLTableName: OleVariant; CodePage: OleVariant); safecall;
    procedure OutputToOld0(ObjectType: AcOutputObjectType; ObjectName: OleVariant; 
                           OutputFormat: OleVariant; OutputFile: OleVariant; AutoStart: OleVariant; 
                           TemplateFile: OleVariant); safecall;
    procedure DeleteObject(ObjectType: AcObjectType; ObjectName: OleVariant); safecall;
    procedure OpenModule(ModuleName: OleVariant; ProcedureName: OleVariant); safecall;
    procedure SendObject(ObjectType: AcSendObjectType; ObjectName: OleVariant; 
                         OutputFormat: OleVariant; To_: OleVariant; Cc: OleVariant; 
                         Bcc: OleVariant; Subject: OleVariant; MessageText: OleVariant; 
                         EditMessage: OleVariant; TemplateFile: OleVariant); safecall;
    procedure ShowToolbar(ToolbarName: OleVariant; Show: AcShowToolbar); safecall;
    procedure Save(ObjectType: AcObjectType; ObjectName: OleVariant); safecall;
    procedure SetMenuItem(MenuIndex: OleVariant; CommandIndex: OleVariant; 
                          SubcommandIndex: OleVariant; Flag: OleVariant); safecall;
    procedure RunCommand(Command: AcCommand); safecall;
    procedure OpenDataAccessPage(DataAccessPageName: OleVariant; View: AcDataAccessPageView); safecall;
    procedure OpenView(ViewName: OleVariant; View: AcView; DataMode: AcOpenDataMode); safecall;
    procedure OpenDiagram(DiagramName: OleVariant); safecall;
    procedure OpenStoredProcedure(ProcedureName: OleVariant; View: AcView; DataMode: AcOpenDataMode); safecall;
    procedure OpenReport(ReportName: OleVariant; View: AcView; FilterName: OleVariant; 
                         WhereCondition: OleVariant; WindowMode: AcWindowMode; OpenArgs: OleVariant); safecall;
    procedure OutputToOld1(ObjectType: AcOutputObjectType; ObjectName: OleVariant; 
                           OutputFormat: OleVariant; OutputFile: OleVariant; AutoStart: OleVariant; 
                           TemplateFile: OleVariant; Encoding: OleVariant); safecall;
    procedure TransferSQLDatabase(Server: OleVariant; Database: OleVariant; 
                                  UseTrustedConnection: OleVariant; Login: OleVariant; 
                                  Password: OleVariant; TransferCopyData: OleVariant); safecall;
    procedure CopyDatabaseFile(DatabaseFileName: OleVariant; OverwriteExistingFile: OleVariant; 
                               DisconnectAllUsers: OleVariant); safecall;
    procedure OpenFunction(FunctionName: OleVariant; View: AcView; DataMode: AcOpenDataMode); safecall;
    procedure ApplyFilter(FilterName: OleVariant; WhereCondition: OleVariant; 
                          ControlName: OleVariant); safecall;
    procedure OutputTo(ObjectType: AcOutputObjectType; ObjectName: OleVariant; 
                       OutputFormat: OleVariant; OutputFile: OleVariant; AutoStart: OleVariant; 
                       TemplateFile: OleVariant; Encoding: OleVariant; 
                       OutputQuality: AcExportQuality); safecall;
    procedure TransferSharePointList(TransferType: AcSharePointListTransferType; 
                                     SiteAddress: OleVariant; ListID: OleVariant; 
                                     ViewID: OleVariant; TableName: OleVariant; 
                                     GetLookupDisplayValues: OleVariant); safecall;
    procedure CloseDatabase; safecall;
    procedure NavigateTo(Category: OleVariant; Group: OleVariant); safecall;
    procedure SearchForRecord(ObjectType: AcDataObjectType; ObjectName: OleVariant; 
                              Record_: AcRecord; WhereCondition: OleVariant); safecall;
    procedure SetProperty(ControlName: OleVariant; Property_: AcProperty; Value: OleVariant); safecall;
    procedure SingleStep; safecall;
    procedure ClearMacroError; safecall;
    procedure SetDisplayedCategories(Show: OleVariant; Category: OleVariant); safecall;
    procedure LockNavigationPane(Lock: OleVariant); safecall;
    procedure RunSavedImportExport(SavedImportExportName: OleVariant); safecall;
  end;

// *********************************************************************//
// DispIntf:  DoCmdDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C547E760-9658-101B-81EE-00AA004750E2}
// *********************************************************************//
  DoCmdDisp = dispinterface
    ['{C547E760-9658-101B-81EE-00AA004750E2}']
    procedure AddMenu(MenuName: OleVariant; MenuMacroName: OleVariant; StatusBarText: OleVariant); dispid 1001;
    procedure ApplyFilterOld0(FilterName: OleVariant; WhereCondition: OleVariant); dispid 1002;
    procedure Beep; dispid 1003;
    procedure CancelEvent; dispid 1004;
    procedure Close(ObjectType: AcObjectType; ObjectName: OleVariant; Save: AcCloseSave); dispid 1005;
    procedure CopyObject(DestinationDatabase: OleVariant; NewName: OleVariant; 
                         SourceObjectType: AcObjectType; SourceObjectName: OleVariant); dispid 1006;
    procedure DoMenuItem(MenuBar: OleVariant; MenuName: OleVariant; Command: OleVariant; 
                         Subcommand: OleVariant; Version: OleVariant); dispid 1007;
    procedure Echo(EchoOn: OleVariant; StatusBarText: OleVariant); dispid 1008;
    procedure FindNext; dispid 1009;
    procedure FindRecord(FindWhat: OleVariant; Match: AcFindMatch; MatchCase: OleVariant; 
                         Search: AcSearchDirection; SearchAsFormatted: OleVariant; 
                         OnlyCurrentField: AcFindField; FindFirst: OleVariant); dispid 1010;
    procedure GoToControl(ControlName: OleVariant); dispid 1011;
    procedure GoToPage(PageNumber: OleVariant; Right: OleVariant; Down: OleVariant); dispid 1012;
    procedure GoToRecord(ObjectType: AcDataObjectType; ObjectName: OleVariant; Record_: AcRecord; 
                         Offset: OleVariant); dispid 1013;
    procedure Hourglass(HourglassOn: OleVariant); dispid 1014;
    procedure Maximize; dispid 1015;
    procedure Minimize; dispid 1016;
    procedure MoveSize(Right: OleVariant; Down: OleVariant; Width: OleVariant; Height: OleVariant); dispid 1017;
    procedure OpenForm(FormName: OleVariant; View: AcFormView; FilterName: OleVariant; 
                       WhereCondition: OleVariant; DataMode: AcFormOpenDataMode; 
                       WindowMode: AcWindowMode; OpenArgs: OleVariant); dispid 1019;
    procedure OpenQuery(QueryName: OleVariant; View: AcView; DataMode: AcOpenDataMode); dispid 1020;
    procedure OpenTable(TableName: OleVariant; View: AcView; DataMode: AcOpenDataMode); dispid 1021;
    procedure PrintOut(PrintRange: AcPrintRange; PageFrom: OleVariant; PageTo: OleVariant; 
                       PrintQuality: AcPrintQuality; Copies: OleVariant; CollateCopies: OleVariant); dispid 1022;
    procedure Quit(Options: AcQuitOption); dispid 1023;
    procedure Requery(ControlName: OleVariant); dispid 1024;
    procedure RepaintObject(ObjectType: AcObjectType; ObjectName: OleVariant); dispid 1025;
    procedure Rename(NewName: OleVariant; ObjectType: AcObjectType; OldName: OleVariant); dispid 1026;
    procedure Restore; dispid 1027;
    procedure RunMacro(MacroName: OleVariant; RepeatCount: OleVariant; RepeatExpression: OleVariant); dispid 1030;
    procedure RunSQL(SQLStatement: OleVariant; UseTransaction: OleVariant); dispid 1031;
    procedure SelectObject(ObjectType: AcObjectType; ObjectName: OleVariant; 
                           InDatabaseWindow: OleVariant); dispid 1032;
    procedure SetWarnings(WarningsOn: OleVariant); dispid 1035;
    procedure ShowAllRecords; dispid 1036;
    procedure OpenReportOld0(ReportName: OleVariant; View: AcView; FilterName: OleVariant; 
                             WhereCondition: OleVariant); dispid 1039;
    procedure TransferDatabase(TransferType: AcDataTransferType; DatabaseType: OleVariant; 
                               DatabaseName: OleVariant; ObjectType: AcObjectType; 
                               Source: OleVariant; Destination: OleVariant; 
                               StructureOnly: OleVariant; StoreLogin: OleVariant); dispid 1040;
    procedure TransferSpreadsheet(TransferType: AcDataTransferType; 
                                  SpreadsheetType: AcSpreadSheetType; TableName: OleVariant; 
                                  FileName: OleVariant; HasFieldNames: OleVariant; 
                                  Range: OleVariant; UseOA: OleVariant); dispid 1041;
    procedure TransferText(TransferType: AcTextTransferType; SpecificationName: OleVariant; 
                           TableName: OleVariant; FileName: OleVariant; HasFieldNames: OleVariant; 
                           HTMLTableName: OleVariant; CodePage: OleVariant); dispid 1042;
    procedure OutputToOld0(ObjectType: AcOutputObjectType; ObjectName: OleVariant; 
                           OutputFormat: OleVariant; OutputFile: OleVariant; AutoStart: OleVariant; 
                           TemplateFile: OleVariant); dispid 1341;
    procedure DeleteObject(ObjectType: AcObjectType; ObjectName: OleVariant); dispid 1372;
    procedure OpenModule(ModuleName: OleVariant; ProcedureName: OleVariant); dispid 1374;
    procedure SendObject(ObjectType: AcSendObjectType; ObjectName: OleVariant; 
                         OutputFormat: OleVariant; To_: OleVariant; Cc: OleVariant; 
                         Bcc: OleVariant; Subject: OleVariant; MessageText: OleVariant; 
                         EditMessage: OleVariant; TemplateFile: OleVariant); dispid 1377;
    procedure ShowToolbar(ToolbarName: OleVariant; Show: AcShowToolbar); dispid 1394;
    procedure Save(ObjectType: AcObjectType; ObjectName: OleVariant); dispid 1453;
    procedure SetMenuItem(MenuIndex: OleVariant; CommandIndex: OleVariant; 
                          SubcommandIndex: OleVariant; Flag: OleVariant); dispid 1454;
    procedure RunCommand(Command: AcCommand); dispid 1602;
    procedure OpenDataAccessPage(DataAccessPageName: OleVariant; View: AcDataAccessPageView); dispid 1771;
    procedure OpenView(ViewName: OleVariant; View: AcView; DataMode: AcOpenDataMode); dispid 1793;
    procedure OpenDiagram(DiagramName: OleVariant); dispid 1794;
    procedure OpenStoredProcedure(ProcedureName: OleVariant; View: AcView; DataMode: AcOpenDataMode); dispid 1795;
    procedure OpenReport(ReportName: OleVariant; View: AcView; FilterName: OleVariant; 
                         WhereCondition: OleVariant; WindowMode: AcWindowMode; OpenArgs: OleVariant); dispid 2391;
    procedure OutputToOld1(ObjectType: AcOutputObjectType; ObjectName: OleVariant; 
                           OutputFormat: OleVariant; OutputFile: OleVariant; AutoStart: OleVariant; 
                           TemplateFile: OleVariant; Encoding: OleVariant); dispid 5411;
    procedure TransferSQLDatabase(Server: OleVariant; Database: OleVariant; 
                                  UseTrustedConnection: OleVariant; Login: OleVariant; 
                                  Password: OleVariant; TransferCopyData: OleVariant); dispid 1867;
    procedure CopyDatabaseFile(DatabaseFileName: OleVariant; OverwriteExistingFile: OleVariant; 
                               DisconnectAllUsers: OleVariant); dispid 1868;
    procedure OpenFunction(FunctionName: OleVariant; View: AcView; DataMode: AcOpenDataMode); dispid 1869;
    procedure ApplyFilter(FilterName: OleVariant; WhereCondition: OleVariant; 
                          ControlName: OleVariant); dispid 2023;
    procedure OutputTo(ObjectType: AcOutputObjectType; ObjectName: OleVariant; 
                       OutputFormat: OleVariant; OutputFile: OleVariant; AutoStart: OleVariant; 
                       TemplateFile: OleVariant; Encoding: OleVariant; 
                       OutputQuality: AcExportQuality); dispid 5413;
    procedure TransferSharePointList(TransferType: AcSharePointListTransferType; 
                                     SiteAddress: OleVariant; ListID: OleVariant; 
                                     ViewID: OleVariant; TableName: OleVariant; 
                                     GetLookupDisplayValues: OleVariant); dispid 1880;
    procedure CloseDatabase; dispid 1891;
    procedure NavigateTo(Category: OleVariant; Group: OleVariant); dispid 1901;
    procedure SearchForRecord(ObjectType: AcDataObjectType; ObjectName: OleVariant; 
                              Record_: AcRecord; WhereCondition: OleVariant); dispid 1902;
    procedure SetProperty(ControlName: OleVariant; Property_: AcProperty; Value: OleVariant); dispid 1903;
    procedure SingleStep; dispid 1904;
    procedure ClearMacroError; dispid 1905;
    procedure SetDisplayedCategories(Show: OleVariant; Category: OleVariant); dispid 1913;
    procedure LockNavigationPane(Lock: OleVariant); dispid 1914;
    procedure RunSavedImportExport(SavedImportExportName: OleVariant); dispid 1918;
  end;

// *********************************************************************//
// Interface: _RecordsetEvents
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {45165490-EF32-11D0-86FB-006097C9818C}
// *********************************************************************//
  _RecordsetEvents = interface(IDispatch)
    ['{45165490-EF32-11D0-86FB-006097C9818C}']
    procedure WillChangeField(cFields: Integer; Fields: OleVariant; var adStatus: EventStatusEnum; 
                              const pRecordset: IUnknown); safecall;
    procedure FieldChangeComplete(cFields: Integer; Fields: OleVariant; const pError: IUnknown; 
                                  var adStatus: EventStatusEnum; const pRecordset: IUnknown); safecall;
    procedure WillChangeRecord(adReason: EventReasonEnum; cRecords: Integer; 
                               var adStatus: EventStatusEnum; const pRecordset: IUnknown); safecall;
    procedure RecordChangeComplete(adReason: EventReasonEnum; cRecords: Integer; 
                                   const pError: IUnknown; var adStatus: EventStatusEnum; 
                                   const pRecordset: IUnknown); safecall;
    procedure WillChangeRecordset(adReason: EventReasonEnum; var adStatus: EventStatusEnum; 
                                  const pRecordset: IUnknown); safecall;
    procedure RecordsetChangeComplete(adReason: EventReasonEnum; const pError: IUnknown; 
                                      var adStatus: EventStatusEnum; const pRecordset: IUnknown); safecall;
    procedure WillMove(adReason: EventReasonEnum; var adStatus: EventStatusEnum; 
                       const pRecordset: IUnknown); safecall;
    procedure MoveComplete(adReason: EventReasonEnum; const pError: IUnknown; 
                           var adStatus: EventStatusEnum; const pRecordset: IUnknown); safecall;
    procedure EndOfRecordset(var fMoreData: Smallint; var adStatus: EventStatusEnum; 
                             const pRecordset: IUnknown); safecall;
    procedure FetchProgress(Progress: Integer; MaxProgress: Integer; var adStatus: EventStatusEnum; 
                            const pRecordset: IUnknown); safecall;
    procedure FetchComplete(const pError: IUnknown; var adStatus: EventStatusEnum; 
                            const pRecordset: IUnknown); safecall;
  end;

// *********************************************************************//
// DispIntf:  _RecordsetEventsDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {45165490-EF32-11D0-86FB-006097C9818C}
// *********************************************************************//
  _RecordsetEventsDisp = dispinterface
    ['{45165490-EF32-11D0-86FB-006097C9818C}']
    procedure WillChangeField(cFields: Integer; Fields: OleVariant; var adStatus: EventStatusEnum; 
                              const pRecordset: IUnknown); dispid 9;
    procedure FieldChangeComplete(cFields: Integer; Fields: OleVariant; const pError: IUnknown; 
                                  var adStatus: EventStatusEnum; const pRecordset: IUnknown); dispid 10;
    procedure WillChangeRecord(adReason: EventReasonEnum; cRecords: Integer; 
                               var adStatus: EventStatusEnum; const pRecordset: IUnknown); dispid 11;
    procedure RecordChangeComplete(adReason: EventReasonEnum; cRecords: Integer; 
                                   const pError: IUnknown; var adStatus: EventStatusEnum; 
                                   const pRecordset: IUnknown); dispid 12;
    procedure WillChangeRecordset(adReason: EventReasonEnum; var adStatus: EventStatusEnum; 
                                  const pRecordset: IUnknown); dispid 13;
    procedure RecordsetChangeComplete(adReason: EventReasonEnum; const pError: IUnknown; 
                                      var adStatus: EventStatusEnum; const pRecordset: IUnknown); dispid 14;
    procedure WillMove(adReason: EventReasonEnum; var adStatus: EventStatusEnum; 
                       const pRecordset: IUnknown); dispid 15;
    procedure MoveComplete(adReason: EventReasonEnum; const pError: IUnknown; 
                           var adStatus: EventStatusEnum; const pRecordset: IUnknown); dispid 16;
    procedure EndOfRecordset(var fMoreData: Smallint; var adStatus: EventStatusEnum; 
                             const pRecordset: IUnknown); dispid 17;
    procedure FetchProgress(Progress: Integer; MaxProgress: Integer; var adStatus: EventStatusEnum; 
                            const pRecordset: IUnknown); dispid 18;
    procedure FetchComplete(const pError: IUnknown; var adStatus: EventStatusEnum; 
                            const pRecordset: IUnknown); dispid 19;
  end;

// *********************************************************************//
// Interface: _AccessProperty
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDD00-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _AccessProperty = interface(Property_)
    ['{331FDD00-CF31-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Category: Smallint; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Category: Smallint read Get_Category;
  end;

// *********************************************************************//
// DispIntf:  _AccessPropertyDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDD00-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _AccessPropertyDisp = dispinterface
    ['{331FDD00-CF31-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Category: Smallint readonly dispid 2096;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property Value: OleVariant dispid 0;
    property Name: WideString dispid 1610809346;
    property type_: Smallint dispid 1610809348;
    property Inherited_: WordBool readonly dispid 1610809350;
    property Properties: Properties readonly dispid 10;
  end;

// *********************************************************************//
// Interface: Properties
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDD02-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
  Properties = interface(IDispatch)
    ['{331FDD02-CF31-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Item(Index: OleVariant): IDispatch; safecall;
    function Get_Count: Integer; safecall;
    function _NewEnum: IUnknown; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: IDispatch read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  PropertiesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDD02-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
  PropertiesDisp = dispinterface
    ['{331FDD02-CF31-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Item[Index: OleVariant]: IDispatch readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function _NewEnum: IUnknown; dispid -4;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _FormatCondition
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E27A992C-A330-11D0-81DD-00C04FC2F51B}
// *********************************************************************//
  _FormatCondition = interface(IDispatch)
    ['{E27A992C-A330-11D0-81DD-00C04FC2F51B}']
    function Get_ForeColor: Integer; safecall;
    procedure Set_ForeColor(plResult: Integer); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(plResult: Integer); safecall;
    function Get_FontBold: WordBool; safecall;
    procedure Set_FontBold(pfResult: WordBool); safecall;
    function Get_FontItalic: WordBool; safecall;
    procedure Set_FontItalic(pfResult: WordBool); safecall;
    function Get_FontUnderline: WordBool; safecall;
    procedure Set_FontUnderline(pfResult: WordBool); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pfResult: WordBool); safecall;
    function Get_type_: AcFormatConditionType; safecall;
    function Get_Operator: AcFormatConditionOperator; safecall;
    function Get_Expression1: WideString; safecall;
    function Get_Expression2: WideString; safecall;
    procedure Modify(Type_: AcFormatConditionType; Operator: AcFormatConditionOperator; 
                     Expression1: OleVariant; Expression2: OleVariant); safecall;
    procedure Delete; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property FontBold: WordBool read Get_FontBold write Set_FontBold;
    property FontItalic: WordBool read Get_FontItalic write Set_FontItalic;
    property FontUnderline: WordBool read Get_FontUnderline write Set_FontUnderline;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property type_: AcFormatConditionType read Get_type_;
    property Operator: AcFormatConditionOperator read Get_Operator;
    property Expression1: WideString read Get_Expression1;
    property Expression2: WideString read Get_Expression2;
  end;

// *********************************************************************//
// DispIntf:  _FormatConditionDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E27A992C-A330-11D0-81DD-00C04FC2F51B}
// *********************************************************************//
  _FormatConditionDisp = dispinterface
    ['{E27A992C-A330-11D0-81DD-00C04FC2F51B}']
    property ForeColor: Integer dispid -513;
    property BackColor: Integer dispid -501;
    property FontBold: WordBool dispid 2127;
    property FontItalic: WordBool dispid 2128;
    property FontUnderline: WordBool dispid 2131;
    property Enabled: WordBool dispid -514;
    property type_: AcFormatConditionType readonly dispid 2095;
    property Operator: AcFormatConditionOperator readonly dispid 2199;
    property Expression1: WideString readonly dispid 2200;
    property Expression2: WideString readonly dispid 2201;
    procedure Modify(Type_: AcFormatConditionType; Operator: AcFormatConditionOperator; 
                     Expression1: OleVariant; Expression2: OleVariant); dispid 2202;
    procedure Delete; dispid 2063;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: FormatConditions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E27A992E-A330-11D0-81DD-00C04FC2F51B}
// *********************************************************************//
  FormatConditions = interface(IDispatch)
    ['{E27A992E-A330-11D0-81DD-00C04FC2F51B}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Item(Index: OleVariant): _FormatCondition; safecall;
    function Get_Count: Integer; safecall;
    function Add(Type_: AcFormatConditionType; Operator: AcFormatConditionOperator; 
                 Expression1: OleVariant; Expression2: OleVariant): _FormatCondition; safecall;
    procedure Delete; safecall;
    function _NewEnum: IUnknown; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: _FormatCondition read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  FormatConditionsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E27A992E-A330-11D0-81DD-00C04FC2F51B}
// *********************************************************************//
  FormatConditionsDisp = dispinterface
    ['{E27A992E-A330-11D0-81DD-00C04FC2F51B}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Item[Index: OleVariant]: _FormatCondition readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function Add(Type_: AcFormatConditionType; Operator: AcFormatConditionOperator; 
                 Expression1: OleVariant; Expression2: OleVariant): _FormatCondition; dispid 2191;
    procedure Delete; dispid 2063;
    function _NewEnum: IUnknown; dispid -4;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _ItemsSelected
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {31B09710-EADC-11CD-B9F7-00AA004753B5}
// *********************************************************************//
  _ItemsSelected = interface(IDispatch)
    ['{31B09710-EADC-11CD-B9F7-00AA004753B5}']
    function Get_Item(Index: OleVariant): Integer; safecall;
    function Get_Count: Integer; safecall;
    function _NewEnum: IUnknown; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Item[Index: OleVariant]: Integer read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _ItemsSelectedDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {31B09710-EADC-11CD-B9F7-00AA004753B5}
// *********************************************************************//
  _ItemsSelectedDisp = dispinterface
    ['{31B09710-EADC-11CD-B9F7-00AA004753B5}']
    property Item[Index: OleVariant]: Integer readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function _NewEnum: IUnknown; dispid -4;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: Children
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E977-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  Children = interface(IDispatch)
    ['{3B06E977-E47C-11CD-8701-00AA003F0F07}']
    function Get_Item(Index: OleVariant): IDispatch; safecall;
    function Get_Count: Integer; safecall;
    function _NewEnum: IUnknown; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Item[Index: OleVariant]: IDispatch read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ChildrenDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E977-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  ChildrenDisp = dispinterface
    ['{3B06E977-E47C-11CD-8701-00AA003F0F07}']
    property Item[Index: OleVariant]: IDispatch readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function _NewEnum: IUnknown; dispid -4;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _AccessField
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B1C1EAC1-486F-11CE-A65D-00AA003F0F07}
// *********************************************************************//
  _AccessField = interface(IDispatch)
    ['{B1C1EAC1-486F-11CE-A65D-00AA003F0F07}']
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(pRet: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Value: OleVariant read Get_Value write Set_Value;
  end;

// *********************************************************************//
// DispIntf:  _AccessFieldDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B1C1EAC1-486F-11CE-A65D-00AA003F0F07}
// *********************************************************************//
  _AccessFieldDisp = dispinterface
    ['{B1C1EAC1-486F-11CE-A65D-00AA003F0F07}']
    property Value: OleVariant dispid 0;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: __Help
// Flags:     (16) Hidden
// GUID:      {9CD4A761-A6A9-11CE-A686-00AA003F0F07}
// *********************************************************************//
  __Help = interface(IUnknown)
    ['{9CD4A761-A6A9-11CE-A686-00AA003F0F07}']
    function Get_FieldName(out pRet: OleVariant): HResult; stdcall;
    function Set_FieldName(pRet: OleVariant): HResult; stdcall;
    function Get_DataType(out pRet: OleVariant): HResult; stdcall;
    function Set_DataType(pRet: OleVariant): HResult; stdcall;
    function Get_Description(out pRet: OleVariant): HResult; stdcall;
    function Set_Description(pRet: OleVariant): HResult; stdcall;
    function Get_FieldSize(out pRet: OleVariant): HResult; stdcall;
    function Set_FieldSize(pRet: OleVariant): HResult; stdcall;
    function Get_NewValues(out pRet: OleVariant): HResult; stdcall;
    function Set_NewValues(pRet: OleVariant): HResult; stdcall;
    function Get_Required(out pRet: OleVariant): HResult; stdcall;
    function Set_Required(pRet: OleVariant): HResult; stdcall;
    function Get_AllowZeroLength(out pRet: OleVariant): HResult; stdcall;
    function Set_AllowZeroLength(pRet: OleVariant): HResult; stdcall;
    function Get_Indexed(out pRet: OleVariant): HResult; stdcall;
    function Set_Indexed(pRet: OleVariant): HResult; stdcall;
    function Get_DisplayControl(out pRet: OleVariant): HResult; stdcall;
    function Set_DisplayControl(pRet: OleVariant): HResult; stdcall;
    function Get_ReplicationConflictFunction(out pRet: OleVariant): HResult; stdcall;
    function Set_ReplicationConflictFunction(var pRet: OleVariant): HResult; stdcall;
    function Get_ProjectName(out pRet: OleVariant): HResult; stdcall;
    function Set_ProjectName(var pRet: OleVariant): HResult; stdcall;
    function Get_MDE(out pRet: OleVariant): HResult; stdcall;
    function Set_MDE(var pRet: OleVariant): HResult; stdcall;
    function Get_AllowBreakIntoCode(out pRet: OleVariant): HResult; stdcall;
    function Set_AllowBreakIntoCode(pRet: OleVariant): HResult; stdcall;
    function Get_AllowBuiltInToolbars(out pRet: OleVariant): HResult; stdcall;
    function Set_AllowBuiltInToolbars(pRet: OleVariant): HResult; stdcall;
    function Get_AllowBypassKey(out pRet: OleVariant): HResult; stdcall;
    function Set_AllowBypassKey(pRet: OleVariant): HResult; stdcall;
    function Get_AllowFullMenus(out pRet: OleVariant): HResult; stdcall;
    function Set_AllowFullMenus(pRet: OleVariant): HResult; stdcall;
    function Get_AllowSpecialKeys(out pRet: OleVariant): HResult; stdcall;
    function Set_AllowSpecialKeys(pRet: OleVariant): HResult; stdcall;
    function Get_AllowToolbarChanges(out pRet: OleVariant): HResult; stdcall;
    function Set_AllowToolbarChanges(pRet: OleVariant): HResult; stdcall;
    function Get_StartUpForm(out pRet: OleVariant): HResult; stdcall;
    function Set_StartUpForm(pRet: OleVariant): HResult; stdcall;
    function Get_StartUpMenuBar(out pRet: OleVariant): HResult; stdcall;
    function Set_StartUpMenuBar(pRet: OleVariant): HResult; stdcall;
    function Get_StartUpShortcutMenuBar(out pRet: OleVariant): HResult; stdcall;
    function Set_StartUpShortcutMenuBar(pRet: OleVariant): HResult; stdcall;
    function Get_StartUpShowDBWindow(out pRet: OleVariant): HResult; stdcall;
    function Set_StartUpShowDBWindow(pRet: OleVariant): HResult; stdcall;
    function Get_StartUpShowStatusBar(out pRet: OleVariant): HResult; stdcall;
    function Set_StartUpShowStatusBar(pRet: OleVariant): HResult; stdcall;
    function Get_AppIcon(out pRet: OleVariant): HResult; stdcall;
    function Set_AppIcon(pRet: OleVariant): HResult; stdcall;
    function Get_AppTitle(out pRet: OleVariant): HResult; stdcall;
    function Set_AppTitle(pRet: OleVariant): HResult; stdcall;
    function Get_ODBCConnectStr(out pRet: OleVariant): HResult; stdcall;
    function Set_ODBCConnectStr(pRet: OleVariant): HResult; stdcall;
    function Get_LogMessages(out pRet: OleVariant): HResult; stdcall;
    function Set_LogMessages(var pRet: OleVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: _Hyperlink
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {50D56611-60AC-11CF-82C9-00AA004B9FE6}
// *********************************************************************//
  _Hyperlink = interface(IDispatch)
    ['{50D56611-60AC-11CF-82C9-00AA004B9FE6}']
    function Get_SubAddress: WideString; safecall;
    procedure Set_SubAddress(pbstrResult: OleVariant); safecall;
    function Get_Address: WideString; safecall;
    procedure Set_Address(pbstrResult: OleVariant); safecall;
    procedure AddToFavorites; safecall;
    procedure Follow(NewWindow: WordBool; AddHistory: WordBool; ExtraInfo: OleVariant; 
                     Method: MsoExtraInfoMethod; const HeaderInfo: WideString); safecall;
    function Get_EmailSubject: WideString; safecall;
    procedure Set_EmailSubject(pbstrResult: OleVariant); safecall;
    function Get_ScreenTip: WideString; safecall;
    procedure Set_ScreenTip(pbstrResult: OleVariant); safecall;
    function Get_TextToDisplay: WideString; safecall;
    procedure Set_TextToDisplay(pbstrResult: OleVariant); safecall;
    procedure CreateNewDocument(const FileName: WideString; EditNow: WordBool; Overwrite: WordBool); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  _HyperlinkDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {50D56611-60AC-11CF-82C9-00AA004B9FE6}
// *********************************************************************//
  _HyperlinkDisp = dispinterface
    ['{50D56611-60AC-11CF-82C9-00AA004B9FE6}']
    function SubAddress: WideString; dispid 2182;
    function Address: WideString; dispid 2183;
    procedure AddToFavorites; dispid 2184;
    procedure Follow(NewWindow: WordBool; AddHistory: WordBool; ExtraInfo: OleVariant; 
                     Method: MsoExtraInfoMethod; const HeaderInfo: WideString); dispid 2185;
    function EmailSubject: WideString; dispid 2209;
    function ScreenTip: WideString; dispid 2211;
    function TextToDisplay: WideString; dispid 2231;
    procedure CreateNewDocument(const FileName: WideString; EditNow: WordBool; Overwrite: WordBool); dispid 2232;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _Page
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E974-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _Page = interface(IAccessible)
    ['{3B06E974-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    procedure Requery; safecall;
    procedure Goto_; safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Children; safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const pRet: WideString); safecall;
    function Get_Picture: WideString; safecall;
    procedure Set_Picture(const pRet: WideString); safecall;
    function Get_PictureType: Byte; safecall;
    procedure Set_PictureType(pRet: Byte); safecall;
    function Get_PageIndex: Smallint; safecall;
    procedure Set_PageIndex(pRet: Smallint); safecall;
    function Get_StatusBarText: WideString; safecall;
    procedure Set_StatusBarText(const pRet: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRet: WordBool); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_ControlTipText: WideString; safecall;
    procedure Set_ControlTipText(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_PictureData: OleVariant; safecall;
    procedure Set_PictureData(pRet: OleVariant); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    procedure SetTabOrder; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property Caption: WideString read Get_Caption write Set_Caption;
    property Picture: WideString read Get_Picture write Set_Picture;
    property PictureType: Byte read Get_PictureType write Set_PictureType;
    property PageIndex: Smallint read Get_PageIndex write Set_PageIndex;
    property StatusBarText: WideString read Get_StatusBarText write Set_StatusBarText;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property ControlTipText: WideString read Get_ControlTipText write Set_ControlTipText;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property PictureData: OleVariant read Get_PictureData write Set_PictureData;
    property Name: WideString read Get_Name write Set_Name;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
  end;

// *********************************************************************//
// DispIntf:  _PageDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E974-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _PageDisp = dispinterface
    ['{3B06E974-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    procedure Requery; dispid 2018;
    procedure Goto_; dispid 2023;
    procedure SetFocus; dispid 2022;
    property Controls: Children readonly dispid 2190;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property Caption: WideString dispid 17;
    property Picture: WideString dispid 7;
    property PictureType: Byte dispid 341;
    property PageIndex: Smallint dispid 352;
    property StatusBarText: WideString dispid 135;
    property Visible: WordBool dispid 148;
    property Enabled: WordBool dispid 25;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property ShortcutMenuBar: WideString dispid 304;
    property ControlTipText: WideString dispid 317;
    property HelpContextId: Integer dispid 219;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property PictureData: OleVariant dispid 188;
    property Name: WideString dispid -2147418112;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    procedure SetTabOrder; dispid 2503;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: Pages
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E978-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  Pages = interface(IDispatch)
    ['{3B06E978-E47C-11CD-8701-00AA003F0F07}']
    function Get_Item(Index: OleVariant): AccessPage; safecall;
    function Get_Count: Integer; safecall;
    function _NewEnum: IUnknown; safecall;
    function Add(Before: OleVariant): AccessPage; safecall;
    procedure Remove(Item: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Item[Index: OleVariant]: AccessPage read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  PagesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E978-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  PagesDisp = dispinterface
    ['{3B06E978-E47C-11CD-8701-00AA003F0F07}']
    property Item[Index: OleVariant]: AccessPage readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function _NewEnum: IUnknown; dispid -4;
    function Add(Before: OleVariant): AccessPage; dispid 2191;
    procedure Remove(Item: OleVariant); dispid 2192;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _Control
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {26B96540-8F8E-101B-AF4E-00AA003F0F07}
// *********************************************************************//
  _Control = interface(IDispatch)
    ['{26B96540-8F8E-101B-AF4E-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    procedure Undo; safecall;
    procedure Dropdown; safecall;
    function Get_Column(Index: Integer; Row: OleVariant): OleVariant; safecall;
    function Get_Selected(lRow: Integer): Integer; safecall;
    procedure Set_Selected(lRow: Integer; pRet: Integer); safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_Form: AccessForm; safecall;
    function Get_Report: AccessReport; safecall;
    function Get_ItemData(Index: Integer): OleVariant; safecall;
    function Get_Object_: IDispatch; safecall;
    function Get_ObjectVerbs(Index: Integer): WideString; safecall;
    function Get_Properties: Properties; safecall;
    procedure Requery; safecall;
    procedure SizeToFit; safecall;
    procedure Goto_; safecall;
    function Get_ItemsSelected: _ItemsSelected; safecall;
    procedure SetFocus; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Pages: Pages; safecall;
    function Get_Controls: Children; safecall;
    function Get_Hyperlink: _Hyperlink; safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function Get_SmartTags: _SmartTags; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_Layout: AcLayoutType; safecall;
    function Get_LeftPadding: Smallint; safecall;
    procedure Set_LeftPadding(pRet: Smallint); safecall;
    function Get_TopPadding: Smallint; safecall;
    procedure Set_TopPadding(pRet: Smallint); safecall;
    function Get_RightPadding: Smallint; safecall;
    procedure Set_RightPadding(pRet: Smallint); safecall;
    function Get_BottomPadding: Smallint; safecall;
    procedure Set_BottomPadding(pRet: Smallint); safecall;
    function Get_GridlineStyleLeft: Byte; safecall;
    procedure Set_GridlineStyleLeft(pRet: Byte); safecall;
    function Get_GridlineStyleTop: Byte; safecall;
    procedure Set_GridlineStyleTop(pRet: Byte); safecall;
    function Get_GridlineStyleRight: Byte; safecall;
    procedure Set_GridlineStyleRight(pRet: Byte); safecall;
    function Get_GridlineStyleBottom: Byte; safecall;
    procedure Set_GridlineStyleBottom(pRet: Byte); safecall;
    function Get_GridlineWidthLeft: Byte; safecall;
    procedure Set_GridlineWidthLeft(pRet: Byte); safecall;
    function Get_GridlineWidthTop: Byte; safecall;
    procedure Set_GridlineWidthTop(pRet: Byte); safecall;
    function Get_GridlineWidthRight: Byte; safecall;
    procedure Set_GridlineWidthRight(pRet: Byte); safecall;
    function Get_GridlineWidthBottom: Byte; safecall;
    procedure Set_GridlineWidthBottom(pRet: Byte); safecall;
    function Get_GridlineColor: Integer; safecall;
    procedure Set_GridlineColor(pRet: Integer); safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    function Get_LayoutID: Integer; safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Column[Index: Integer; Row: OleVariant]: OleVariant read Get_Column;
    property Selected[lRow: Integer]: Integer read Get_Selected write Set_Selected;
    property OldValue: OleVariant read Get_OldValue;
    property Form: AccessForm read Get_Form;
    property Report: AccessReport read Get_Report;
    property ItemData[Index: Integer]: OleVariant read Get_ItemData;
    property Object_: IDispatch read Get_Object_;
    property ObjectVerbs[Index: Integer]: WideString read Get_ObjectVerbs;
    property Properties: Properties read Get_Properties;
    property ItemsSelected: _ItemsSelected read Get_ItemsSelected;
    property Pages: Pages read Get_Pages;
    property Controls: Children read Get_Controls;
    property Hyperlink: _Hyperlink read Get_Hyperlink;
    property SmartTags: _SmartTags read Get_SmartTags;
    property Layout: AcLayoutType read Get_Layout;
    property LeftPadding: Smallint read Get_LeftPadding write Set_LeftPadding;
    property TopPadding: Smallint read Get_TopPadding write Set_TopPadding;
    property RightPadding: Smallint read Get_RightPadding write Set_RightPadding;
    property BottomPadding: Smallint read Get_BottomPadding write Set_BottomPadding;
    property GridlineStyleLeft: Byte read Get_GridlineStyleLeft write Set_GridlineStyleLeft;
    property GridlineStyleTop: Byte read Get_GridlineStyleTop write Set_GridlineStyleTop;
    property GridlineStyleRight: Byte read Get_GridlineStyleRight write Set_GridlineStyleRight;
    property GridlineStyleBottom: Byte read Get_GridlineStyleBottom write Set_GridlineStyleBottom;
    property GridlineWidthLeft: Byte read Get_GridlineWidthLeft write Set_GridlineWidthLeft;
    property GridlineWidthTop: Byte read Get_GridlineWidthTop write Set_GridlineWidthTop;
    property GridlineWidthRight: Byte read Get_GridlineWidthRight write Set_GridlineWidthRight;
    property GridlineWidthBottom: Byte read Get_GridlineWidthBottom write Set_GridlineWidthBottom;
    property GridlineColor: Integer read Get_GridlineColor write Set_GridlineColor;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
    property LayoutID: Integer read Get_LayoutID;
    property _Name: WideString read Get__Name write Set__Name;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  _ControlDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {26B96540-8F8E-101B-AF4E-00AA003F0F07}
// *********************************************************************//
  _ControlDisp = dispinterface
    ['{26B96540-8F8E-101B-AF4E-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    procedure Undo; dispid 2144;
    procedure Dropdown; dispid 2143;
    property Column[Index: Integer; Row: OleVariant]: OleVariant readonly dispid 2101;
    property Selected[lRow: Integer]: Integer dispid 2113;
    property OldValue: OleVariant readonly dispid 2102;
    property Form: AccessForm readonly dispid 2089;
    property Report: AccessReport readonly dispid 2097;
    property ItemData[Index: Integer]: OleVariant readonly dispid 2103;
    property Object_: IDispatch readonly dispid 2104;
    property ObjectVerbs[Index: Integer]: WideString readonly dispid 2105;
    property Properties: Properties readonly dispid 2091;
    procedure Requery; dispid 2018;
    procedure SizeToFit; dispid 2151;
    procedure Goto_; dispid 2023;
    property ItemsSelected: _ItemsSelected readonly dispid 2137;
    procedure SetFocus; dispid 2022;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Pages: Pages readonly dispid 2180;
    property Controls: Children readonly dispid 2190;
    property Hyperlink: _Hyperlink readonly dispid 2181;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    property SmartTags: _SmartTags readonly dispid 2445;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property Layout: AcLayoutType readonly dispid 2460;
    property LeftPadding: Smallint dispid 454;
    property TopPadding: Smallint dispid 455;
    property RightPadding: Smallint dispid 456;
    property BottomPadding: Smallint dispid 457;
    property GridlineStyleLeft: Byte dispid 458;
    property GridlineStyleTop: Byte dispid 459;
    property GridlineStyleRight: Byte dispid 460;
    property GridlineStyleBottom: Byte dispid 461;
    property GridlineWidthLeft: Byte dispid 463;
    property GridlineWidthTop: Byte dispid 464;
    property GridlineWidthRight: Byte dispid 465;
    property GridlineWidthBottom: Byte dispid 466;
    property GridlineColor: Integer dispid 462;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
    property LayoutID: Integer readonly dispid 2492;
    property _Name: WideString dispid 20;
    property Name: WideString dispid -2147418112;
  end;

// *********************************************************************//
// Interface: __ControlInReportEvents
// Flags:     (16) Hidden
// GUID:      {90B322A5-F1D9-11CD-8701-00AA003F0F07}
// *********************************************************************//
  __ControlInReportEvents = interface(IUnknown)
    ['{90B322A5-F1D9-11CD-8701-00AA003F0F07}']
  end;

// *********************************************************************//
// DispIntf:  _DispControlInReportEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E70527D-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  _DispControlInReportEvents = dispinterface
    ['{2E70527D-92D1-43CC-A57B-ED48BCCC711D}']
  end;

// *********************************************************************//
// Interface: Controls
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5970C574-EB8C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  Controls = interface(IDispatch)
    ['{5970C574-EB8C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Item(Index: OleVariant): IDispatch; safecall;
    function Get_Count: Integer; safecall;
    function _NewEnum: IUnknown; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: IDispatch read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ControlsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5970C574-EB8C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  ControlsDisp = dispinterface
    ['{5970C574-EB8C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Item[Index: OleVariant]: IDispatch readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function _NewEnum: IUnknown; dispid -4;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _Label
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E948-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _Label = interface(IAccessible)
    ['{3B06E948-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Hyperlink: _Hyperlink; safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const pRet: WideString); safecall;
    function Get_HyperlinkAddress: WideString; safecall;
    procedure Set_HyperlinkAddress(const pRet: WideString); safecall;
    function Get_HyperlinkSubAddress: WideString; safecall;
    procedure Set_HyperlinkSubAddress(const pRet: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Vertical: WordBool; safecall;
    procedure Set_Vertical(pRet: WordBool); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_BackStyle: Byte; safecall;
    procedure Set_BackStyle(pRet: Byte); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(pRet: Integer); safecall;
    function Get_SpecialEffect: Byte; safecall;
    procedure Set_SpecialEffect(pRet: Byte); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_OldBorderStyle: Byte; safecall;
    procedure Set_OldBorderStyle(pRet: Byte); safecall;
    function Get_BorderColor: Integer; safecall;
    procedure Set_BorderColor(pRet: Integer); safecall;
    function Get_BorderWidth: Byte; safecall;
    procedure Set_BorderWidth(pRet: Byte); safecall;
    function Get_BorderLineStyle: Byte; safecall;
    procedure Set_BorderLineStyle(pRet: Byte); safecall;
    function Get_ForeColor: Integer; safecall;
    procedure Set_ForeColor(pRet: Integer); safecall;
    function Get_FontName: WideString; safecall;
    procedure Set_FontName(const pRet: WideString); safecall;
    function Get_FontSize: Smallint; safecall;
    procedure Set_FontSize(pRet: Smallint); safecall;
    function Get_FontWeight: Smallint; safecall;
    procedure Set_FontWeight(pRet: Smallint); safecall;
    function Get_FontItalic: WordBool; safecall;
    procedure Set_FontItalic(pRet: WordBool); safecall;
    function Get_FontUnderline: WordBool; safecall;
    procedure Set_FontUnderline(pRet: WordBool); safecall;
    function Get_TextFontCharSet: Byte; safecall;
    procedure Set_TextFontCharSet(pRet: Byte); safecall;
    function Get_TextAlign: Byte; safecall;
    procedure Set_TextAlign(pRet: Byte); safecall;
    function Get_FontBold: Smallint; safecall;
    procedure Set_FontBold(pRet: Smallint); safecall;
    function Get_ControlTipText: WideString; safecall;
    procedure Set_ControlTipText(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_ReadingOrder: Byte; safecall;
    procedure Set_ReadingOrder(pRet: Byte); safecall;
    function Get_NumeralShapes: Byte; safecall;
    procedure Set_NumeralShapes(pRet: Byte); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    function Get_LeftMargin: Smallint; safecall;
    procedure Set_LeftMargin(pRet: Smallint); safecall;
    function Get_TopMargin: Smallint; safecall;
    procedure Set_TopMargin(pRet: Smallint); safecall;
    function Get_LineSpacing: Smallint; safecall;
    procedure Set_LineSpacing(pRet: Smallint); safecall;
    function Get_RightMargin: Smallint; safecall;
    procedure Set_RightMargin(pRet: Smallint); safecall;
    function Get_BottomMargin: Smallint; safecall;
    procedure Set_BottomMargin(pRet: Smallint); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function Get_SmartTags: _SmartTags; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_Layout: AcLayoutType; safecall;
    function Get_LeftPadding: Smallint; safecall;
    procedure Set_LeftPadding(pRet: Smallint); safecall;
    function Get_TopPadding: Smallint; safecall;
    procedure Set_TopPadding(pRet: Smallint); safecall;
    function Get_RightPadding: Smallint; safecall;
    procedure Set_RightPadding(pRet: Smallint); safecall;
    function Get_BottomPadding: Smallint; safecall;
    procedure Set_BottomPadding(pRet: Smallint); safecall;
    function Get_GridlineStyleLeft: Byte; safecall;
    procedure Set_GridlineStyleLeft(pRet: Byte); safecall;
    function Get_GridlineStyleTop: Byte; safecall;
    procedure Set_GridlineStyleTop(pRet: Byte); safecall;
    function Get_GridlineStyleRight: Byte; safecall;
    procedure Set_GridlineStyleRight(pRet: Byte); safecall;
    function Get_GridlineStyleBottom: Byte; safecall;
    procedure Set_GridlineStyleBottom(pRet: Byte); safecall;
    function Get_GridlineWidthLeft: Byte; safecall;
    procedure Set_GridlineWidthLeft(pRet: Byte); safecall;
    function Get_GridlineWidthTop: Byte; safecall;
    procedure Set_GridlineWidthTop(pRet: Byte); safecall;
    function Get_GridlineWidthRight: Byte; safecall;
    procedure Set_GridlineWidthRight(pRet: Byte); safecall;
    function Get_GridlineWidthBottom: Byte; safecall;
    procedure Set_GridlineWidthBottom(pRet: Byte); safecall;
    function Get_GridlineColor: Integer; safecall;
    procedure Set_GridlineColor(pRet: Integer); safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_LayoutID: Integer; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Properties: Properties read Get_Properties;
    property Hyperlink: _Hyperlink read Get_Hyperlink;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property Caption: WideString read Get_Caption write Set_Caption;
    property HyperlinkAddress: WideString read Get_HyperlinkAddress write Set_HyperlinkAddress;
    property HyperlinkSubAddress: WideString read Get_HyperlinkSubAddress write Set_HyperlinkSubAddress;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Vertical: WordBool read Get_Vertical write Set_Vertical;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property BackStyle: Byte read Get_BackStyle write Set_BackStyle;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property SpecialEffect: Byte read Get_SpecialEffect write Set_SpecialEffect;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property OldBorderStyle: Byte read Get_OldBorderStyle write Set_OldBorderStyle;
    property BorderColor: Integer read Get_BorderColor write Set_BorderColor;
    property BorderWidth: Byte read Get_BorderWidth write Set_BorderWidth;
    property BorderLineStyle: Byte read Get_BorderLineStyle write Set_BorderLineStyle;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property FontName: WideString read Get_FontName write Set_FontName;
    property FontSize: Smallint read Get_FontSize write Set_FontSize;
    property FontWeight: Smallint read Get_FontWeight write Set_FontWeight;
    property FontItalic: WordBool read Get_FontItalic write Set_FontItalic;
    property FontUnderline: WordBool read Get_FontUnderline write Set_FontUnderline;
    property TextFontCharSet: Byte read Get_TextFontCharSet write Set_TextFontCharSet;
    property TextAlign: Byte read Get_TextAlign write Set_TextAlign;
    property FontBold: Smallint read Get_FontBold write Set_FontBold;
    property ControlTipText: WideString read Get_ControlTipText write Set_ControlTipText;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property Tag: WideString read Get_Tag write Set_Tag;
    property ReadingOrder: Byte read Get_ReadingOrder write Set_ReadingOrder;
    property NumeralShapes: Byte read Get_NumeralShapes write Set_NumeralShapes;
    property Name: WideString read Get_Name write Set_Name;
    property LeftMargin: Smallint read Get_LeftMargin write Set_LeftMargin;
    property TopMargin: Smallint read Get_TopMargin write Set_TopMargin;
    property LineSpacing: Smallint read Get_LineSpacing write Set_LineSpacing;
    property RightMargin: Smallint read Get_RightMargin write Set_RightMargin;
    property BottomMargin: Smallint read Get_BottomMargin write Set_BottomMargin;
    property SmartTags: _SmartTags read Get_SmartTags;
    property Layout: AcLayoutType read Get_Layout;
    property LeftPadding: Smallint read Get_LeftPadding write Set_LeftPadding;
    property TopPadding: Smallint read Get_TopPadding write Set_TopPadding;
    property RightPadding: Smallint read Get_RightPadding write Set_RightPadding;
    property BottomPadding: Smallint read Get_BottomPadding write Set_BottomPadding;
    property GridlineStyleLeft: Byte read Get_GridlineStyleLeft write Set_GridlineStyleLeft;
    property GridlineStyleTop: Byte read Get_GridlineStyleTop write Set_GridlineStyleTop;
    property GridlineStyleRight: Byte read Get_GridlineStyleRight write Set_GridlineStyleRight;
    property GridlineStyleBottom: Byte read Get_GridlineStyleBottom write Set_GridlineStyleBottom;
    property GridlineWidthLeft: Byte read Get_GridlineWidthLeft write Set_GridlineWidthLeft;
    property GridlineWidthTop: Byte read Get_GridlineWidthTop write Set_GridlineWidthTop;
    property GridlineWidthRight: Byte read Get_GridlineWidthRight write Set_GridlineWidthRight;
    property GridlineWidthBottom: Byte read Get_GridlineWidthBottom write Set_GridlineWidthBottom;
    property GridlineColor: Integer read Get_GridlineColor write Set_GridlineColor;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property LayoutID: Integer read Get_LayoutID;
  end;

// *********************************************************************//
// DispIntf:  _LabelDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E948-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _LabelDisp = dispinterface
    ['{3B06E948-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Hyperlink: _Hyperlink readonly dispid 2181;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property Caption: WideString dispid 17;
    property HyperlinkAddress: WideString dispid 343;
    property HyperlinkSubAddress: WideString dispid 347;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Vertical: WordBool dispid 355;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property BackStyle: Byte dispid 29;
    property BackColor: Integer dispid 28;
    property SpecialEffect: Byte dispid 4;
    property BorderStyle: Byte dispid 9;
    property OldBorderStyle: Byte dispid 329;
    property BorderColor: Integer dispid 8;
    property BorderWidth: Byte dispid 10;
    property BorderLineStyle: Byte dispid 11;
    property ForeColor: Integer dispid 204;
    property FontName: WideString dispid 34;
    property FontSize: Smallint dispid 35;
    property FontWeight: Smallint dispid 37;
    property FontItalic: WordBool dispid 33;
    property FontUnderline: WordBool dispid 36;
    property TextFontCharSet: Byte dispid 193;
    property TextAlign: Byte dispid 136;
    property FontBold: Smallint dispid 32;
    property ControlTipText: WideString dispid 317;
    property HelpContextId: Integer dispid 219;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property ShortcutMenuBar: WideString dispid 304;
    property Tag: WideString dispid 266;
    property ReadingOrder: Byte dispid 367;
    property NumeralShapes: Byte dispid 372;
    property Name: WideString dispid -2147418112;
    property LeftMargin: Smallint dispid 384;
    property TopMargin: Smallint dispid 385;
    property LineSpacing: Smallint dispid 386;
    property RightMargin: Smallint dispid 388;
    property BottomMargin: Smallint dispid 389;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    property SmartTags: _SmartTags readonly dispid 2445;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property Layout: AcLayoutType readonly dispid 2460;
    property LeftPadding: Smallint dispid 454;
    property TopPadding: Smallint dispid 455;
    property RightPadding: Smallint dispid 456;
    property BottomPadding: Smallint dispid 457;
    property GridlineStyleLeft: Byte dispid 458;
    property GridlineStyleTop: Byte dispid 459;
    property GridlineStyleRight: Byte dispid 460;
    property GridlineStyleBottom: Byte dispid 461;
    property GridlineWidthLeft: Byte dispid 463;
    property GridlineWidthTop: Byte dispid 464;
    property GridlineWidthRight: Byte dispid 465;
    property GridlineWidthBottom: Byte dispid 466;
    property GridlineColor: Integer dispid 462;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property LayoutID: Integer readonly dispid 2492;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: _LabelEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4341-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _LabelEvents = interface(IUnknown)
    ['{BC9E4341-F037-11CD-8701-00AA003F0F07}']
    function Click: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispLabelEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {3B06E982-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  DispLabelEvents = dispinterface
    ['{3B06E982-E47C-11CD-8701-00AA003F0F07}']
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
  end;

// *********************************************************************//
// Interface: _ChildLabelEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4358-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _ChildLabelEvents = interface(IUnknown)
    ['{BC9E4358-F037-11CD-8701-00AA003F0F07}']
  end;

// *********************************************************************//
// DispIntf:  DispChildLabelEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E705270-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispChildLabelEvents = dispinterface
    ['{2E705270-92D1-43CC-A57B-ED48BCCC711D}']
  end;

// *********************************************************************//
// Interface: _Rectangle
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E94A-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _Rectangle = interface(IDispatch)
    ['{3B06E94A-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_BackStyle: Byte; safecall;
    procedure Set_BackStyle(pRet: Byte); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(pRet: Integer); safecall;
    function Get_SpecialEffect: Byte; safecall;
    procedure Set_SpecialEffect(pRet: Byte); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_OldBorderStyle: Byte; safecall;
    procedure Set_OldBorderStyle(pRet: Byte); safecall;
    function Get_BorderColor: Integer; safecall;
    procedure Set_BorderColor(pRet: Integer); safecall;
    function Get_BorderWidth: Byte; safecall;
    procedure Set_BorderWidth(pRet: Byte); safecall;
    function Get_BorderLineStyle: Byte; safecall;
    procedure Set_BorderLineStyle(pRet: Byte); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Properties: Properties read Get_Properties;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property BackStyle: Byte read Get_BackStyle write Set_BackStyle;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property SpecialEffect: Byte read Get_SpecialEffect write Set_SpecialEffect;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property OldBorderStyle: Byte read Get_OldBorderStyle write Set_OldBorderStyle;
    property BorderColor: Integer read Get_BorderColor write Set_BorderColor;
    property BorderWidth: Byte read Get_BorderWidth write Set_BorderWidth;
    property BorderLineStyle: Byte read Get_BorderLineStyle write Set_BorderLineStyle;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property Name: WideString read Get_Name write Set_Name;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
  end;

// *********************************************************************//
// DispIntf:  _RectangleDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E94A-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _RectangleDisp = dispinterface
    ['{3B06E94A-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property BackStyle: Byte dispid 29;
    property BackColor: Integer dispid 28;
    property SpecialEffect: Byte dispid 4;
    property BorderStyle: Byte dispid 9;
    property OldBorderStyle: Byte dispid 329;
    property BorderColor: Integer dispid 8;
    property BorderWidth: Byte dispid 10;
    property BorderLineStyle: Byte dispid 11;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property Name: WideString dispid -2147418112;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
  end;

// *********************************************************************//
// Interface: _RectangleEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4342-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _RectangleEvents = interface(IUnknown)
    ['{BC9E4342-F037-11CD-8701-00AA003F0F07}']
    function Click: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispRectangleEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E705271-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispRectangleEvents = dispinterface
    ['{2E705271-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
  end;

// *********************************************************************//
// Interface: _Line
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E94C-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _Line = interface(IDispatch)
    ['{3B06E94C-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_LineSlant: WordBool; safecall;
    procedure Set_LineSlant(pRet: WordBool); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_SpecialEffect: Byte; safecall;
    procedure Set_SpecialEffect(pRet: Byte); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_OldBorderStyle: Byte; safecall;
    procedure Set_OldBorderStyle(pRet: Byte); safecall;
    function Get_BorderColor: Integer; safecall;
    procedure Set_BorderColor(pRet: Integer); safecall;
    function Get_BorderWidth: Byte; safecall;
    procedure Set_BorderWidth(pRet: Byte); safecall;
    function Get_BorderLineStyle: Byte; safecall;
    procedure Set_BorderLineStyle(pRet: Byte); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Properties: Properties read Get_Properties;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property LineSlant: WordBool read Get_LineSlant write Set_LineSlant;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property SpecialEffect: Byte read Get_SpecialEffect write Set_SpecialEffect;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property OldBorderStyle: Byte read Get_OldBorderStyle write Set_OldBorderStyle;
    property BorderColor: Integer read Get_BorderColor write Set_BorderColor;
    property BorderWidth: Byte read Get_BorderWidth write Set_BorderWidth;
    property BorderLineStyle: Byte read Get_BorderLineStyle write Set_BorderLineStyle;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property Name: WideString read Get_Name write Set_Name;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
  end;

// *********************************************************************//
// DispIntf:  _LineDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E94C-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _LineDisp = dispinterface
    ['{3B06E94C-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property LineSlant: WordBool dispid 55;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property SpecialEffect: Byte dispid 4;
    property BorderStyle: Byte dispid 9;
    property OldBorderStyle: Byte dispid 329;
    property BorderColor: Integer dispid 8;
    property BorderWidth: Byte dispid 10;
    property BorderLineStyle: Byte dispid 11;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property Name: WideString dispid -2147418112;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
  end;

// *********************************************************************//
// Interface: _LineEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4343-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _LineEvents = interface(IUnknown)
    ['{BC9E4343-F037-11CD-8701-00AA003F0F07}']
  end;

// *********************************************************************//
// DispIntf:  DispLineEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E705279-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispLineEvents = dispinterface
    ['{2E705279-92D1-43CC-A57B-ED48BCCC711D}']
  end;

// *********************************************************************//
// Interface: _Image
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E94E-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _Image = interface(IDispatch)
    ['{3B06E94E-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    procedure Requery; safecall;
    procedure Goto_; safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Children; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Hyperlink: _Hyperlink; safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_Picture: WideString; safecall;
    procedure Set_Picture(const pRet: WideString); safecall;
    function Get_PictureType: Byte; safecall;
    procedure Set_PictureType(pRet: Byte); safecall;
    function Get_PictureData: OleVariant; safecall;
    procedure Set_PictureData(pRet: OleVariant); safecall;
    function Get_SizeMode: Byte; safecall;
    procedure Set_SizeMode(pRet: Byte); safecall;
    function Get_PictureAlignment: Byte; safecall;
    procedure Set_PictureAlignment(pRet: Byte); safecall;
    function Get_PictureTiling: WordBool; safecall;
    procedure Set_PictureTiling(pRet: WordBool); safecall;
    function Get_HyperlinkAddress: WideString; safecall;
    procedure Set_HyperlinkAddress(const pRet: WideString); safecall;
    function Get_HyperlinkSubAddress: WideString; safecall;
    procedure Set_HyperlinkSubAddress(const pRet: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_BackStyle: Byte; safecall;
    procedure Set_BackStyle(pRet: Byte); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(pRet: Integer); safecall;
    function Get_SpecialEffect: Byte; safecall;
    procedure Set_SpecialEffect(pRet: Byte); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_OldBorderStyle: Byte; safecall;
    procedure Set_OldBorderStyle(pRet: Byte); safecall;
    function Get_BorderColor: Integer; safecall;
    procedure Set_BorderColor(pRet: Integer); safecall;
    function Get_BorderWidth: Byte; safecall;
    procedure Set_BorderWidth(pRet: Byte); safecall;
    function Get_BorderLineStyle: Byte; safecall;
    procedure Set_BorderLineStyle(pRet: Byte); safecall;
    function Get_ControlTipText: WideString; safecall;
    procedure Set_ControlTipText(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_ObjectPalette: OleVariant; safecall;
    procedure Set_ObjectPalette(pRet: OleVariant); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_ImageHeight: Integer; safecall;
    procedure Set_ImageHeight(pRet: Integer); safecall;
    function Get_ImageWidth: Integer; safecall;
    procedure Set_ImageWidth(pRet: Integer); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_Layout: AcLayoutType; safecall;
    function Get_LeftPadding: Smallint; safecall;
    procedure Set_LeftPadding(pRet: Smallint); safecall;
    function Get_TopPadding: Smallint; safecall;
    procedure Set_TopPadding(pRet: Smallint); safecall;
    function Get_RightPadding: Smallint; safecall;
    procedure Set_RightPadding(pRet: Smallint); safecall;
    function Get_BottomPadding: Smallint; safecall;
    procedure Set_BottomPadding(pRet: Smallint); safecall;
    function Get_GridlineStyleLeft: Byte; safecall;
    procedure Set_GridlineStyleLeft(pRet: Byte); safecall;
    function Get_GridlineStyleTop: Byte; safecall;
    procedure Set_GridlineStyleTop(pRet: Byte); safecall;
    function Get_GridlineStyleRight: Byte; safecall;
    procedure Set_GridlineStyleRight(pRet: Byte); safecall;
    function Get_GridlineStyleBottom: Byte; safecall;
    procedure Set_GridlineStyleBottom(pRet: Byte); safecall;
    function Get_GridlineWidthLeft: Byte; safecall;
    procedure Set_GridlineWidthLeft(pRet: Byte); safecall;
    function Get_GridlineWidthTop: Byte; safecall;
    procedure Set_GridlineWidthTop(pRet: Byte); safecall;
    function Get_GridlineWidthRight: Byte; safecall;
    procedure Set_GridlineWidthRight(pRet: Byte); safecall;
    function Get_GridlineWidthBottom: Byte; safecall;
    procedure Set_GridlineWidthBottom(pRet: Byte); safecall;
    function Get_GridlineColor: Integer; safecall;
    procedure Set_GridlineColor(pRet: Integer); safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    function Get_LayoutID: Integer; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property OldValue: OleVariant read Get_OldValue;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Hyperlink: _Hyperlink read Get_Hyperlink;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property Picture: WideString read Get_Picture write Set_Picture;
    property PictureType: Byte read Get_PictureType write Set_PictureType;
    property PictureData: OleVariant read Get_PictureData write Set_PictureData;
    property SizeMode: Byte read Get_SizeMode write Set_SizeMode;
    property PictureAlignment: Byte read Get_PictureAlignment write Set_PictureAlignment;
    property PictureTiling: WordBool read Get_PictureTiling write Set_PictureTiling;
    property HyperlinkAddress: WideString read Get_HyperlinkAddress write Set_HyperlinkAddress;
    property HyperlinkSubAddress: WideString read Get_HyperlinkSubAddress write Set_HyperlinkSubAddress;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property BackStyle: Byte read Get_BackStyle write Set_BackStyle;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property SpecialEffect: Byte read Get_SpecialEffect write Set_SpecialEffect;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property OldBorderStyle: Byte read Get_OldBorderStyle write Set_OldBorderStyle;
    property BorderColor: Integer read Get_BorderColor write Set_BorderColor;
    property BorderWidth: Byte read Get_BorderWidth write Set_BorderWidth;
    property BorderLineStyle: Byte read Get_BorderLineStyle write Set_BorderLineStyle;
    property ControlTipText: WideString read Get_ControlTipText write Set_ControlTipText;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property ObjectPalette: OleVariant read Get_ObjectPalette write Set_ObjectPalette;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property ImageHeight: Integer read Get_ImageHeight write Set_ImageHeight;
    property ImageWidth: Integer read Get_ImageWidth write Set_ImageWidth;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property Tag: WideString read Get_Tag write Set_Tag;
    property Name: WideString read Get_Name write Set_Name;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property Layout: AcLayoutType read Get_Layout;
    property LeftPadding: Smallint read Get_LeftPadding write Set_LeftPadding;
    property TopPadding: Smallint read Get_TopPadding write Set_TopPadding;
    property RightPadding: Smallint read Get_RightPadding write Set_RightPadding;
    property BottomPadding: Smallint read Get_BottomPadding write Set_BottomPadding;
    property GridlineStyleLeft: Byte read Get_GridlineStyleLeft write Set_GridlineStyleLeft;
    property GridlineStyleTop: Byte read Get_GridlineStyleTop write Set_GridlineStyleTop;
    property GridlineStyleRight: Byte read Get_GridlineStyleRight write Set_GridlineStyleRight;
    property GridlineStyleBottom: Byte read Get_GridlineStyleBottom write Set_GridlineStyleBottom;
    property GridlineWidthLeft: Byte read Get_GridlineWidthLeft write Set_GridlineWidthLeft;
    property GridlineWidthTop: Byte read Get_GridlineWidthTop write Set_GridlineWidthTop;
    property GridlineWidthRight: Byte read Get_GridlineWidthRight write Set_GridlineWidthRight;
    property GridlineWidthBottom: Byte read Get_GridlineWidthBottom write Set_GridlineWidthBottom;
    property GridlineColor: Integer read Get_GridlineColor write Set_GridlineColor;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
    property LayoutID: Integer read Get_LayoutID;
  end;

// *********************************************************************//
// DispIntf:  _ImageDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E94E-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _ImageDisp = dispinterface
    ['{3B06E94E-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property OldValue: OleVariant readonly dispid 2102;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    procedure Requery; dispid 2018;
    procedure Goto_; dispid 2023;
    procedure SetFocus; dispid 2022;
    property Controls: Children readonly dispid 2190;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Hyperlink: _Hyperlink readonly dispid 2181;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property Picture: WideString dispid 7;
    property PictureType: Byte dispid 341;
    property PictureData: OleVariant dispid 188;
    property SizeMode: Byte dispid 89;
    property PictureAlignment: Byte dispid 309;
    property PictureTiling: WordBool dispid 313;
    property HyperlinkAddress: WideString dispid 343;
    property HyperlinkSubAddress: WideString dispid 347;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property BackStyle: Byte dispid 29;
    property BackColor: Integer dispid 28;
    property SpecialEffect: Byte dispid 4;
    property BorderStyle: Byte dispid 9;
    property OldBorderStyle: Byte dispid 329;
    property BorderColor: Integer dispid 8;
    property BorderWidth: Byte dispid 10;
    property BorderLineStyle: Byte dispid 11;
    property ControlTipText: WideString dispid 317;
    property HelpContextId: Integer dispid 219;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property ObjectPalette: OleVariant dispid 99;
    property IsVisible: WordBool dispid 140;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property ShortcutMenuBar: WideString dispid 304;
    property ImageHeight: Integer dispid 307;
    property ImageWidth: Integer dispid 308;
    property InSelection: WordBool dispid 280;
    property Tag: WideString dispid 266;
    property Name: WideString dispid -2147418112;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property Layout: AcLayoutType readonly dispid 2460;
    property LeftPadding: Smallint dispid 454;
    property TopPadding: Smallint dispid 455;
    property RightPadding: Smallint dispid 456;
    property BottomPadding: Smallint dispid 457;
    property GridlineStyleLeft: Byte dispid 458;
    property GridlineStyleTop: Byte dispid 459;
    property GridlineStyleRight: Byte dispid 460;
    property GridlineStyleBottom: Byte dispid 461;
    property GridlineWidthLeft: Byte dispid 463;
    property GridlineWidthTop: Byte dispid 464;
    property GridlineWidthRight: Byte dispid 465;
    property GridlineWidthBottom: Byte dispid 466;
    property GridlineColor: Integer dispid 462;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
    property LayoutID: Integer readonly dispid 2492;
  end;

// *********************************************************************//
// Interface: _ImageEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4344-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _ImageEvents = interface(IUnknown)
    ['{BC9E4344-F037-11CD-8701-00AA003F0F07}']
    function Click: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispImageEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E705272-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispImageEvents = dispinterface
    ['{2E705272-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
  end;

// *********************************************************************//
// Interface: _CommandButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E950-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _CommandButton = interface(IAccessible)
    ['{3B06E950-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    procedure Requery; safecall;
    procedure Goto_; safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Children; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Hyperlink: _Hyperlink; safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const pRet: WideString); safecall;
    function Get_Picture: WideString; safecall;
    procedure Set_Picture(const pRet: WideString); safecall;
    function Get_PictureType: Byte; safecall;
    procedure Set_PictureType(pRet: Byte); safecall;
    function Get_PictureData: OleVariant; safecall;
    procedure Set_PictureData(pRet: OleVariant); safecall;
    function Get_Transparent: WordBool; safecall;
    procedure Set_Transparent(pRet: WordBool); safecall;
    function Get_Default: WordBool; safecall;
    procedure Set_Default(pRet: WordBool); safecall;
    function Get_Cancel: WordBool; safecall;
    procedure Set_Cancel(pRet: WordBool); safecall;
    function Get_AutoRepeat: WordBool; safecall;
    procedure Set_AutoRepeat(pRet: WordBool); safecall;
    function Get_StatusBarText: WideString; safecall;
    procedure Set_StatusBarText(const pRet: WideString); safecall;
    function Get_OnPush: WideString; safecall;
    procedure Set_OnPush(const pRet: WideString); safecall;
    function Get_HyperlinkAddress: WideString; safecall;
    procedure Set_HyperlinkAddress(const pRet: WideString); safecall;
    function Get_HyperlinkSubAddress: WideString; safecall;
    procedure Set_HyperlinkSubAddress(const pRet: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRet: WordBool); safecall;
    function Get_TabStop: WordBool; safecall;
    procedure Set_TabStop(pRet: WordBool); safecall;
    function Get_TabIndex: Smallint; safecall;
    procedure Set_TabIndex(pRet: Smallint); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_ForeColor: Integer; safecall;
    procedure Set_ForeColor(pRet: Integer); safecall;
    function Get_FontName: WideString; safecall;
    procedure Set_FontName(const pRet: WideString); safecall;
    function Get_FontSize: Smallint; safecall;
    procedure Set_FontSize(pRet: Smallint); safecall;
    function Get_FontWeight: Smallint; safecall;
    procedure Set_FontWeight(pRet: Smallint); safecall;
    function Get_FontItalic: WordBool; safecall;
    procedure Set_FontItalic(pRet: WordBool); safecall;
    function Get_FontUnderline: WordBool; safecall;
    procedure Set_FontUnderline(pRet: WordBool); safecall;
    function Get_TextFontCharSet: Byte; safecall;
    procedure Set_TextFontCharSet(pRet: Byte); safecall;
    function Get_FontBold: Smallint; safecall;
    procedure Set_FontBold(pRet: Smallint); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_ControlTipText: WideString; safecall;
    procedure Set_ControlTipText(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_AutoLabel: WordBool; safecall;
    procedure Set_AutoLabel(pRet: WordBool); safecall;
    function Get_AddColon: WordBool; safecall;
    procedure Set_AddColon(pRet: WordBool); safecall;
    function Get_LabelX: Smallint; safecall;
    procedure Set_LabelX(pRet: Smallint); safecall;
    function Get_LabelY: Smallint; safecall;
    procedure Set_LabelY(pRet: Smallint); safecall;
    function Get_LabelAlign: Byte; safecall;
    procedure Set_LabelAlign(pRet: Byte); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_ObjectPalette: OleVariant; safecall;
    procedure Set_ObjectPalette(pRet: OleVariant); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_OnEnter: WideString; safecall;
    procedure Set_OnEnter(const pRet: WideString); safecall;
    function Get_OnExit: WideString; safecall;
    procedure Set_OnExit(const pRet: WideString); safecall;
    function Get_OnGotFocus: WideString; safecall;
    procedure Set_OnGotFocus(const pRet: WideString); safecall;
    function Get_OnLostFocus: WideString; safecall;
    procedure Set_OnLostFocus(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_OnKeyDown: WideString; safecall;
    procedure Set_OnKeyDown(const pRet: WideString); safecall;
    function Get_OnKeyUp: WideString; safecall;
    procedure Set_OnKeyUp(const pRet: WideString); safecall;
    function Get_OnKeyPress: WideString; safecall;
    procedure Set_OnKeyPress(const pRet: WideString); safecall;
    function Get_ReadingOrder: Byte; safecall;
    procedure Set_ReadingOrder(pRet: Byte); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_BeforeUpdateMacro: WideString; safecall;
    procedure Set_BeforeUpdateMacro(const pRet: WideString); safecall;
    function Get_AfterUpdateMacro: WideString; safecall;
    procedure Set_AfterUpdateMacro(const pRet: WideString); safecall;
    function Get_OnEnterMacro: WideString; safecall;
    procedure Set_OnEnterMacro(const pRet: WideString); safecall;
    function Get_OnExitMacro: WideString; safecall;
    procedure Set_OnExitMacro(const pRet: WideString); safecall;
    function Get_OnGotFocusMacro: WideString; safecall;
    procedure Set_OnGotFocusMacro(const pRet: WideString); safecall;
    function Get_OnLostFocusMacro: WideString; safecall;
    procedure Set_OnLostFocusMacro(const pRet: WideString); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyDownMacro: WideString; safecall;
    procedure Set_OnKeyDownMacro(const pRet: WideString); safecall;
    function Get_OnKeyUpMacro: WideString; safecall;
    procedure Set_OnKeyUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyPressMacro: WideString; safecall;
    procedure Set_OnKeyPressMacro(const pRet: WideString); safecall;
    function Get_Layout: AcLayoutType; safecall;
    function Get_LeftPadding: Smallint; safecall;
    procedure Set_LeftPadding(pRet: Smallint); safecall;
    function Get_TopPadding: Smallint; safecall;
    procedure Set_TopPadding(pRet: Smallint); safecall;
    function Get_RightPadding: Smallint; safecall;
    procedure Set_RightPadding(pRet: Smallint); safecall;
    function Get_BottomPadding: Smallint; safecall;
    procedure Set_BottomPadding(pRet: Smallint); safecall;
    function Get_GridlineStyleLeft: Byte; safecall;
    procedure Set_GridlineStyleLeft(pRet: Byte); safecall;
    function Get_GridlineStyleTop: Byte; safecall;
    procedure Set_GridlineStyleTop(pRet: Byte); safecall;
    function Get_GridlineStyleRight: Byte; safecall;
    procedure Set_GridlineStyleRight(pRet: Byte); safecall;
    function Get_GridlineStyleBottom: Byte; safecall;
    procedure Set_GridlineStyleBottom(pRet: Byte); safecall;
    function Get_GridlineWidthLeft: Byte; safecall;
    procedure Set_GridlineWidthLeft(pRet: Byte); safecall;
    function Get_GridlineWidthTop: Byte; safecall;
    procedure Set_GridlineWidthTop(pRet: Byte); safecall;
    function Get_GridlineWidthRight: Byte; safecall;
    procedure Set_GridlineWidthRight(pRet: Byte); safecall;
    function Get_GridlineWidthBottom: Byte; safecall;
    procedure Set_GridlineWidthBottom(pRet: Byte); safecall;
    function Get_GridlineColor: Integer; safecall;
    procedure Set_GridlineColor(pRet: Integer); safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    function Get_LayoutID: Integer; safecall;
    function Get_BackStyle: Byte; safecall;
    procedure Set_BackStyle(pRet: Byte); safecall;
    function Get_CursorOnHover: AcCursorOnHover; safecall;
    procedure Set_CursorOnHover(pRet: AcCursorOnHover); safecall;
    function Get_PictureCaptionArrangement: AcPictureCaptionArrangement; safecall;
    procedure Set_PictureCaptionArrangement(pRet: AcPictureCaptionArrangement); safecall;
    function Get_Alignment: Byte; safecall;
    procedure Set_Alignment(pRet: Byte); safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property OldValue: OleVariant read Get_OldValue;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Hyperlink: _Hyperlink read Get_Hyperlink;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property Caption: WideString read Get_Caption write Set_Caption;
    property Picture: WideString read Get_Picture write Set_Picture;
    property PictureType: Byte read Get_PictureType write Set_PictureType;
    property PictureData: OleVariant read Get_PictureData write Set_PictureData;
    property Transparent: WordBool read Get_Transparent write Set_Transparent;
    property Default: WordBool read Get_Default write Set_Default;
    property Cancel: WordBool read Get_Cancel write Set_Cancel;
    property AutoRepeat: WordBool read Get_AutoRepeat write Set_AutoRepeat;
    property StatusBarText: WideString read Get_StatusBarText write Set_StatusBarText;
    property OnPush: WideString read Get_OnPush write Set_OnPush;
    property HyperlinkAddress: WideString read Get_HyperlinkAddress write Set_HyperlinkAddress;
    property HyperlinkSubAddress: WideString read Get_HyperlinkSubAddress write Set_HyperlinkSubAddress;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property TabStop: WordBool read Get_TabStop write Set_TabStop;
    property TabIndex: Smallint read Get_TabIndex write Set_TabIndex;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property FontName: WideString read Get_FontName write Set_FontName;
    property FontSize: Smallint read Get_FontSize write Set_FontSize;
    property FontWeight: Smallint read Get_FontWeight write Set_FontWeight;
    property FontItalic: WordBool read Get_FontItalic write Set_FontItalic;
    property FontUnderline: WordBool read Get_FontUnderline write Set_FontUnderline;
    property TextFontCharSet: Byte read Get_TextFontCharSet write Set_TextFontCharSet;
    property FontBold: Smallint read Get_FontBold write Set_FontBold;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property ControlTipText: WideString read Get_ControlTipText write Set_ControlTipText;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property AutoLabel: WordBool read Get_AutoLabel write Set_AutoLabel;
    property AddColon: WordBool read Get_AddColon write Set_AddColon;
    property LabelX: Smallint read Get_LabelX write Set_LabelX;
    property LabelY: Smallint read Get_LabelY write Set_LabelY;
    property LabelAlign: Byte read Get_LabelAlign write Set_LabelAlign;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property ObjectPalette: OleVariant read Get_ObjectPalette write Set_ObjectPalette;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property OnEnter: WideString read Get_OnEnter write Set_OnEnter;
    property OnExit: WideString read Get_OnExit write Set_OnExit;
    property OnGotFocus: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property ReadingOrder: Byte read Get_ReadingOrder write Set_ReadingOrder;
    property Name: WideString read Get_Name write Set_Name;
    property BeforeUpdateMacro: WideString read Get_BeforeUpdateMacro write Set_BeforeUpdateMacro;
    property AfterUpdateMacro: WideString read Get_AfterUpdateMacro write Set_AfterUpdateMacro;
    property OnEnterMacro: WideString read Get_OnEnterMacro write Set_OnEnterMacro;
    property OnExitMacro: WideString read Get_OnExitMacro write Set_OnExitMacro;
    property OnGotFocusMacro: WideString read Get_OnGotFocusMacro write Set_OnGotFocusMacro;
    property OnLostFocusMacro: WideString read Get_OnLostFocusMacro write Set_OnLostFocusMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property OnKeyDownMacro: WideString read Get_OnKeyDownMacro write Set_OnKeyDownMacro;
    property OnKeyUpMacro: WideString read Get_OnKeyUpMacro write Set_OnKeyUpMacro;
    property OnKeyPressMacro: WideString read Get_OnKeyPressMacro write Set_OnKeyPressMacro;
    property Layout: AcLayoutType read Get_Layout;
    property LeftPadding: Smallint read Get_LeftPadding write Set_LeftPadding;
    property TopPadding: Smallint read Get_TopPadding write Set_TopPadding;
    property RightPadding: Smallint read Get_RightPadding write Set_RightPadding;
    property BottomPadding: Smallint read Get_BottomPadding write Set_BottomPadding;
    property GridlineStyleLeft: Byte read Get_GridlineStyleLeft write Set_GridlineStyleLeft;
    property GridlineStyleTop: Byte read Get_GridlineStyleTop write Set_GridlineStyleTop;
    property GridlineStyleRight: Byte read Get_GridlineStyleRight write Set_GridlineStyleRight;
    property GridlineStyleBottom: Byte read Get_GridlineStyleBottom write Set_GridlineStyleBottom;
    property GridlineWidthLeft: Byte read Get_GridlineWidthLeft write Set_GridlineWidthLeft;
    property GridlineWidthTop: Byte read Get_GridlineWidthTop write Set_GridlineWidthTop;
    property GridlineWidthRight: Byte read Get_GridlineWidthRight write Set_GridlineWidthRight;
    property GridlineWidthBottom: Byte read Get_GridlineWidthBottom write Set_GridlineWidthBottom;
    property GridlineColor: Integer read Get_GridlineColor write Set_GridlineColor;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
    property LayoutID: Integer read Get_LayoutID;
    property BackStyle: Byte read Get_BackStyle write Set_BackStyle;
    property CursorOnHover: AcCursorOnHover read Get_CursorOnHover write Set_CursorOnHover;
    property PictureCaptionArrangement: AcPictureCaptionArrangement read Get_PictureCaptionArrangement write Set_PictureCaptionArrangement;
    property Alignment: Byte read Get_Alignment write Set_Alignment;
  end;

// *********************************************************************//
// DispIntf:  _CommandButtonDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E950-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _CommandButtonDisp = dispinterface
    ['{3B06E950-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property OldValue: OleVariant readonly dispid 2102;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    procedure Requery; dispid 2018;
    procedure Goto_; dispid 2023;
    procedure SetFocus; dispid 2022;
    property Controls: Children readonly dispid 2190;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Hyperlink: _Hyperlink readonly dispid 2181;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property Caption: WideString dispid 17;
    property Picture: WideString dispid 7;
    property PictureType: Byte dispid 341;
    property PictureData: OleVariant dispid 188;
    property Transparent: WordBool dispid 46;
    property Default: WordBool dispid 220;
    property Cancel: WordBool dispid 221;
    property AutoRepeat: WordBool dispid 5;
    property StatusBarText: WideString dispid 135;
    property OnPush: WideString dispid 155;
    property HyperlinkAddress: WideString dispid 343;
    property HyperlinkSubAddress: WideString dispid 347;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Enabled: WordBool dispid 25;
    property TabStop: WordBool dispid 262;
    property TabIndex: Smallint dispid 261;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property ForeColor: Integer dispid 204;
    property FontName: WideString dispid 34;
    property FontSize: Smallint dispid 35;
    property FontWeight: Smallint dispid 37;
    property FontItalic: WordBool dispid 33;
    property FontUnderline: WordBool dispid 36;
    property TextFontCharSet: Byte dispid 193;
    property FontBold: Smallint dispid 32;
    property ShortcutMenuBar: WideString dispid 304;
    property ControlTipText: WideString dispid 317;
    property HelpContextId: Integer dispid 219;
    property AutoLabel: WordBool dispid 57;
    property AddColon: WordBool dispid 3;
    property LabelX: Smallint dispid 52;
    property LabelY: Smallint dispid 53;
    property LabelAlign: Byte dispid 51;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property ObjectPalette: OleVariant dispid 99;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property OnEnter: WideString dispid 222;
    property OnExit: WideString dispid 223;
    property OnGotFocus: WideString dispid 115;
    property OnLostFocus: WideString dispid 116;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property OnKeyDown: WideString dispid 104;
    property OnKeyUp: WideString dispid 105;
    property OnKeyPress: WideString dispid 106;
    property ReadingOrder: Byte dispid 367;
    property Name: WideString dispid -2147418112;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property BeforeUpdateMacro: WideString dispid 496;
    property AfterUpdateMacro: WideString dispid 505;
    property OnEnterMacro: WideString dispid 497;
    property OnExitMacro: WideString dispid 498;
    property OnGotFocusMacro: WideString dispid 502;
    property OnLostFocusMacro: WideString dispid 503;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property OnKeyDownMacro: WideString dispid 500;
    property OnKeyUpMacro: WideString dispid 501;
    property OnKeyPressMacro: WideString dispid 499;
    property Layout: AcLayoutType readonly dispid 2460;
    property LeftPadding: Smallint dispid 454;
    property TopPadding: Smallint dispid 455;
    property RightPadding: Smallint dispid 456;
    property BottomPadding: Smallint dispid 457;
    property GridlineStyleLeft: Byte dispid 458;
    property GridlineStyleTop: Byte dispid 459;
    property GridlineStyleRight: Byte dispid 460;
    property GridlineStyleBottom: Byte dispid 461;
    property GridlineWidthLeft: Byte dispid 463;
    property GridlineWidthTop: Byte dispid 464;
    property GridlineWidthRight: Byte dispid 465;
    property GridlineWidthBottom: Byte dispid 466;
    property GridlineColor: Integer dispid 462;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
    property LayoutID: Integer readonly dispid 2492;
    property BackStyle: Byte dispid 29;
    property CursorOnHover: AcCursorOnHover dispid 584;
    property PictureCaptionArrangement: AcPictureCaptionArrangement dispid 593;
    property Alignment: Byte dispid 594;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: _CommandButtonEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4345-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _CommandButtonEvents = interface(IUnknown)
    ['{BC9E4345-F037-11CD-8701-00AA003F0F07}']
    function Click: HResult; stdcall;
    function Enter: HResult; stdcall;
    function Exit(out Cancel: Smallint): HResult; stdcall;
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function KeyDown(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function KeyPress(var KeyAscii: Smallint): HResult; stdcall;
    function KeyUp(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispCommandButtonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E70526B-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispCommandButtonEvents = dispinterface
    ['{2E70526B-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Click; dispid -600;
    procedure Enter; dispid 2019;
    procedure Exit(out Cancel: Smallint); dispid 2075;
    procedure GotFocus; dispid 2073;
    procedure LostFocus; dispid 2074;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid -602;
    procedure KeyPress(var KeyAscii: Smallint); dispid -603;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid -604;
  end;

// *********************************************************************//
// Interface: _OptionButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E952-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _OptionButton = interface(IAccessible)
    ['{3B06E952-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    procedure Requery; safecall;
    procedure Goto_; safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Children; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(pRet: OleVariant); safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_OptionValue: Integer; safecall;
    procedure Set_OptionValue(pRet: Integer); safecall;
    function Get_ControlSource: WideString; safecall;
    procedure Set_ControlSource(const pRet: WideString); safecall;
    function Get_DefaultValue: WideString; safecall;
    procedure Set_DefaultValue(const pRet: WideString); safecall;
    function Get_ValidationRule: WideString; safecall;
    procedure Set_ValidationRule(const pRet: WideString); safecall;
    function Get_ValidationText: WideString; safecall;
    procedure Set_ValidationText(const pRet: WideString); safecall;
    function Get_StatusBarText: WideString; safecall;
    procedure Set_StatusBarText(const pRet: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRet: WordBool); safecall;
    function Get_Locked: WordBool; safecall;
    procedure Set_Locked(pRet: WordBool); safecall;
    function Get_TripleState: WordBool; safecall;
    procedure Set_TripleState(pRet: WordBool); safecall;
    function Get_TabStop: WordBool; safecall;
    procedure Set_TabStop(pRet: WordBool); safecall;
    function Get_TabIndex: Smallint; safecall;
    procedure Set_TabIndex(pRet: Smallint); safecall;
    function Get_HideDuplicates: WordBool; safecall;
    procedure Set_HideDuplicates(pRet: WordBool); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_SpecialEffect: Byte; safecall;
    procedure Set_SpecialEffect(pRet: Byte); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_OldBorderStyle: Byte; safecall;
    procedure Set_OldBorderStyle(pRet: Byte); safecall;
    function Get_BorderWidth: Byte; safecall;
    procedure Set_BorderWidth(pRet: Byte); safecall;
    function Get_BorderLineStyle: Byte; safecall;
    procedure Set_BorderLineStyle(pRet: Byte); safecall;
    function Get_BorderColor: Integer; safecall;
    procedure Set_BorderColor(pRet: Integer); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_ControlTipText: WideString; safecall;
    procedure Set_ControlTipText(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_ColumnWidth: Smallint; safecall;
    procedure Set_ColumnWidth(pRet: Smallint); safecall;
    function Get_ColumnOrder: Smallint; safecall;
    procedure Set_ColumnOrder(pRet: Smallint); safecall;
    function Get_ColumnHidden: WordBool; safecall;
    procedure Set_ColumnHidden(pRet: WordBool); safecall;
    function Get_AutoLabel: WordBool; safecall;
    procedure Set_AutoLabel(pRet: WordBool); safecall;
    function Get_AddColon: WordBool; safecall;
    procedure Set_AddColon(pRet: WordBool); safecall;
    function Get_LabelX: Smallint; safecall;
    procedure Set_LabelX(pRet: Smallint); safecall;
    function Get_LabelY: Smallint; safecall;
    procedure Set_LabelY(pRet: Smallint); safecall;
    function Get_LabelAlign: Byte; safecall;
    procedure Set_LabelAlign(pRet: Byte); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_BeforeUpdate: WideString; safecall;
    procedure Set_BeforeUpdate(const pRet: WideString); safecall;
    function Get_AfterUpdate: WideString; safecall;
    procedure Set_AfterUpdate(const pRet: WideString); safecall;
    function Get_OnEnter: WideString; safecall;
    procedure Set_OnEnter(const pRet: WideString); safecall;
    function Get_OnExit: WideString; safecall;
    procedure Set_OnExit(const pRet: WideString); safecall;
    function Get_OnGotFocus: WideString; safecall;
    procedure Set_OnGotFocus(const pRet: WideString); safecall;
    function Get_OnLostFocus: WideString; safecall;
    procedure Set_OnLostFocus(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_OnKeyDown: WideString; safecall;
    procedure Set_OnKeyDown(const pRet: WideString); safecall;
    function Get_OnKeyUp: WideString; safecall;
    procedure Set_OnKeyUp(const pRet: WideString); safecall;
    function Get_OnKeyPress: WideString; safecall;
    procedure Set_OnKeyPress(const pRet: WideString); safecall;
    function Get_ReadingOrder: Byte; safecall;
    procedure Set_ReadingOrder(pRet: Byte); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_BeforeUpdateMacro: WideString; safecall;
    procedure Set_BeforeUpdateMacro(const pRet: WideString); safecall;
    function Get_AfterUpdateMacro: WideString; safecall;
    procedure Set_AfterUpdateMacro(const pRet: WideString); safecall;
    function Get_OnEnterMacro: WideString; safecall;
    procedure Set_OnEnterMacro(const pRet: WideString); safecall;
    function Get_OnExitMacro: WideString; safecall;
    procedure Set_OnExitMacro(const pRet: WideString); safecall;
    function Get_OnGotFocusMacro: WideString; safecall;
    procedure Set_OnGotFocusMacro(const pRet: WideString); safecall;
    function Get_OnLostFocusMacro: WideString; safecall;
    procedure Set_OnLostFocusMacro(const pRet: WideString); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyDownMacro: WideString; safecall;
    procedure Set_OnKeyDownMacro(const pRet: WideString); safecall;
    function Get_OnKeyUpMacro: WideString; safecall;
    procedure Set_OnKeyUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyPressMacro: WideString; safecall;
    procedure Set_OnKeyPressMacro(const pRet: WideString); safecall;
    function Get_Layout: AcLayoutType; safecall;
    function Get_LeftPadding: Smallint; safecall;
    procedure Set_LeftPadding(pRet: Smallint); safecall;
    function Get_TopPadding: Smallint; safecall;
    procedure Set_TopPadding(pRet: Smallint); safecall;
    function Get_RightPadding: Smallint; safecall;
    procedure Set_RightPadding(pRet: Smallint); safecall;
    function Get_BottomPadding: Smallint; safecall;
    procedure Set_BottomPadding(pRet: Smallint); safecall;
    function Get_GridlineStyleLeft: Byte; safecall;
    procedure Set_GridlineStyleLeft(pRet: Byte); safecall;
    function Get_GridlineStyleTop: Byte; safecall;
    procedure Set_GridlineStyleTop(pRet: Byte); safecall;
    function Get_GridlineStyleRight: Byte; safecall;
    procedure Set_GridlineStyleRight(pRet: Byte); safecall;
    function Get_GridlineStyleBottom: Byte; safecall;
    procedure Set_GridlineStyleBottom(pRet: Byte); safecall;
    function Get_GridlineWidthLeft: Byte; safecall;
    procedure Set_GridlineWidthLeft(pRet: Byte); safecall;
    function Get_GridlineWidthTop: Byte; safecall;
    procedure Set_GridlineWidthTop(pRet: Byte); safecall;
    function Get_GridlineWidthRight: Byte; safecall;
    procedure Set_GridlineWidthRight(pRet: Byte); safecall;
    function Get_GridlineWidthBottom: Byte; safecall;
    procedure Set_GridlineWidthBottom(pRet: Byte); safecall;
    function Get_GridlineColor: Integer; safecall;
    procedure Set_GridlineColor(pRet: Integer); safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    function Get_LayoutID: Integer; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property OldValue: OleVariant read Get_OldValue;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Value: OleVariant read Get_Value write Set_Value;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property OptionValue: Integer read Get_OptionValue write Set_OptionValue;
    property ControlSource: WideString read Get_ControlSource write Set_ControlSource;
    property DefaultValue: WideString read Get_DefaultValue write Set_DefaultValue;
    property ValidationRule: WideString read Get_ValidationRule write Set_ValidationRule;
    property ValidationText: WideString read Get_ValidationText write Set_ValidationText;
    property StatusBarText: WideString read Get_StatusBarText write Set_StatusBarText;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Locked: WordBool read Get_Locked write Set_Locked;
    property TripleState: WordBool read Get_TripleState write Set_TripleState;
    property TabStop: WordBool read Get_TabStop write Set_TabStop;
    property TabIndex: Smallint read Get_TabIndex write Set_TabIndex;
    property HideDuplicates: WordBool read Get_HideDuplicates write Set_HideDuplicates;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property SpecialEffect: Byte read Get_SpecialEffect write Set_SpecialEffect;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property OldBorderStyle: Byte read Get_OldBorderStyle write Set_OldBorderStyle;
    property BorderWidth: Byte read Get_BorderWidth write Set_BorderWidth;
    property BorderLineStyle: Byte read Get_BorderLineStyle write Set_BorderLineStyle;
    property BorderColor: Integer read Get_BorderColor write Set_BorderColor;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property ControlTipText: WideString read Get_ControlTipText write Set_ControlTipText;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property ColumnWidth: Smallint read Get_ColumnWidth write Set_ColumnWidth;
    property ColumnOrder: Smallint read Get_ColumnOrder write Set_ColumnOrder;
    property ColumnHidden: WordBool read Get_ColumnHidden write Set_ColumnHidden;
    property AutoLabel: WordBool read Get_AutoLabel write Set_AutoLabel;
    property AddColon: WordBool read Get_AddColon write Set_AddColon;
    property LabelX: Smallint read Get_LabelX write Set_LabelX;
    property LabelY: Smallint read Get_LabelY write Set_LabelY;
    property LabelAlign: Byte read Get_LabelAlign write Set_LabelAlign;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property BeforeUpdate: WideString read Get_BeforeUpdate write Set_BeforeUpdate;
    property AfterUpdate: WideString read Get_AfterUpdate write Set_AfterUpdate;
    property OnEnter: WideString read Get_OnEnter write Set_OnEnter;
    property OnExit: WideString read Get_OnExit write Set_OnExit;
    property OnGotFocus: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property ReadingOrder: Byte read Get_ReadingOrder write Set_ReadingOrder;
    property Name: WideString read Get_Name write Set_Name;
    property BeforeUpdateMacro: WideString read Get_BeforeUpdateMacro write Set_BeforeUpdateMacro;
    property AfterUpdateMacro: WideString read Get_AfterUpdateMacro write Set_AfterUpdateMacro;
    property OnEnterMacro: WideString read Get_OnEnterMacro write Set_OnEnterMacro;
    property OnExitMacro: WideString read Get_OnExitMacro write Set_OnExitMacro;
    property OnGotFocusMacro: WideString read Get_OnGotFocusMacro write Set_OnGotFocusMacro;
    property OnLostFocusMacro: WideString read Get_OnLostFocusMacro write Set_OnLostFocusMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property OnKeyDownMacro: WideString read Get_OnKeyDownMacro write Set_OnKeyDownMacro;
    property OnKeyUpMacro: WideString read Get_OnKeyUpMacro write Set_OnKeyUpMacro;
    property OnKeyPressMacro: WideString read Get_OnKeyPressMacro write Set_OnKeyPressMacro;
    property Layout: AcLayoutType read Get_Layout;
    property LeftPadding: Smallint read Get_LeftPadding write Set_LeftPadding;
    property TopPadding: Smallint read Get_TopPadding write Set_TopPadding;
    property RightPadding: Smallint read Get_RightPadding write Set_RightPadding;
    property BottomPadding: Smallint read Get_BottomPadding write Set_BottomPadding;
    property GridlineStyleLeft: Byte read Get_GridlineStyleLeft write Set_GridlineStyleLeft;
    property GridlineStyleTop: Byte read Get_GridlineStyleTop write Set_GridlineStyleTop;
    property GridlineStyleRight: Byte read Get_GridlineStyleRight write Set_GridlineStyleRight;
    property GridlineStyleBottom: Byte read Get_GridlineStyleBottom write Set_GridlineStyleBottom;
    property GridlineWidthLeft: Byte read Get_GridlineWidthLeft write Set_GridlineWidthLeft;
    property GridlineWidthTop: Byte read Get_GridlineWidthTop write Set_GridlineWidthTop;
    property GridlineWidthRight: Byte read Get_GridlineWidthRight write Set_GridlineWidthRight;
    property GridlineWidthBottom: Byte read Get_GridlineWidthBottom write Set_GridlineWidthBottom;
    property GridlineColor: Integer read Get_GridlineColor write Set_GridlineColor;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
    property LayoutID: Integer read Get_LayoutID;
  end;

// *********************************************************************//
// DispIntf:  _OptionButtonDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E952-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _OptionButtonDisp = dispinterface
    ['{3B06E952-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property OldValue: OleVariant readonly dispid 2102;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    procedure Requery; dispid 2018;
    procedure Goto_; dispid 2023;
    procedure SetFocus; dispid 2022;
    property Controls: Children readonly dispid 2190;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Value: OleVariant dispid 0;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property OptionValue: Integer dispid 58;
    property ControlSource: WideString dispid 27;
    property DefaultValue: WideString dispid 23;
    property ValidationRule: WideString dispid 145;
    property ValidationText: WideString dispid 61;
    property StatusBarText: WideString dispid 135;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Enabled: WordBool dispid 25;
    property Locked: WordBool dispid 56;
    property TripleState: WordBool dispid 294;
    property TabStop: WordBool dispid 262;
    property TabIndex: Smallint dispid 261;
    property HideDuplicates: WordBool dispid 69;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property SpecialEffect: Byte dispid 4;
    property BorderStyle: Byte dispid 9;
    property OldBorderStyle: Byte dispid 329;
    property BorderWidth: Byte dispid 10;
    property BorderLineStyle: Byte dispid 11;
    property BorderColor: Integer dispid 8;
    property ShortcutMenuBar: WideString dispid 304;
    property ControlTipText: WideString dispid 317;
    property HelpContextId: Integer dispid 219;
    property ColumnWidth: Smallint dispid 166;
    property ColumnOrder: Smallint dispid 165;
    property ColumnHidden: WordBool dispid 167;
    property AutoLabel: WordBool dispid 57;
    property AddColon: WordBool dispid 3;
    property LabelX: Smallint dispid 52;
    property LabelY: Smallint dispid 53;
    property LabelAlign: Byte dispid 51;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property BeforeUpdate: WideString dispid 85;
    property AfterUpdate: WideString dispid 86;
    property OnEnter: WideString dispid 222;
    property OnExit: WideString dispid 223;
    property OnGotFocus: WideString dispid 115;
    property OnLostFocus: WideString dispid 116;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property OnKeyDown: WideString dispid 104;
    property OnKeyUp: WideString dispid 105;
    property OnKeyPress: WideString dispid 106;
    property ReadingOrder: Byte dispid 367;
    property Name: WideString dispid -2147418112;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property BeforeUpdateMacro: WideString dispid 496;
    property AfterUpdateMacro: WideString dispid 505;
    property OnEnterMacro: WideString dispid 497;
    property OnExitMacro: WideString dispid 498;
    property OnGotFocusMacro: WideString dispid 502;
    property OnLostFocusMacro: WideString dispid 503;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property OnKeyDownMacro: WideString dispid 500;
    property OnKeyUpMacro: WideString dispid 501;
    property OnKeyPressMacro: WideString dispid 499;
    property Layout: AcLayoutType readonly dispid 2460;
    property LeftPadding: Smallint dispid 454;
    property TopPadding: Smallint dispid 455;
    property RightPadding: Smallint dispid 456;
    property BottomPadding: Smallint dispid 457;
    property GridlineStyleLeft: Byte dispid 458;
    property GridlineStyleTop: Byte dispid 459;
    property GridlineStyleRight: Byte dispid 460;
    property GridlineStyleBottom: Byte dispid 461;
    property GridlineWidthLeft: Byte dispid 463;
    property GridlineWidthTop: Byte dispid 464;
    property GridlineWidthRight: Byte dispid 465;
    property GridlineWidthBottom: Byte dispid 466;
    property GridlineColor: Integer dispid 462;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
    property LayoutID: Integer readonly dispid 2492;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: _OptionButtonEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4346-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _OptionButtonEvents = interface(IUnknown)
    ['{BC9E4346-F037-11CD-8701-00AA003F0F07}']
    function Click: HResult; stdcall;
    function BeforeUpdate(out Cancel: Smallint): HResult; stdcall;
    function AfterUpdate: HResult; stdcall;
    function Enter: HResult; stdcall;
    function Exit(out Cancel: Smallint): HResult; stdcall;
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function KeyDown(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function KeyPress(var KeyAscii: Smallint): HResult; stdcall;
    function KeyUp(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispOptionButtonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E705268-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispOptionButtonEvents = dispinterface
    ['{2E705268-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Click; dispid -600;
    procedure BeforeUpdate(out Cancel: Smallint); dispid 2061;
    procedure AfterUpdate; dispid 2062;
    procedure Enter; dispid 2019;
    procedure Exit(out Cancel: Smallint); dispid 2075;
    procedure GotFocus; dispid 2073;
    procedure LostFocus; dispid 2074;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid -602;
    procedure KeyPress(var KeyAscii: Smallint); dispid -603;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid -604;
  end;

// *********************************************************************//
// Interface: _OptionButtonInOptionEvents
// Flags:     (16) Hidden
// GUID:      {BC9E435B-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _OptionButtonInOptionEvents = interface(IUnknown)
    ['{BC9E435B-F037-11CD-8701-00AA003F0F07}']
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function KeyDown(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function KeyPress(var KeyAscii: Smallint): HResult; stdcall;
    function KeyUp(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: _Checkbox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E954-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _Checkbox = interface(IAccessible)
    ['{3B06E954-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    procedure Undo; safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    procedure Requery; safecall;
    procedure Goto_; safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Children; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(pRet: OleVariant); safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_OptionValue: Integer; safecall;
    procedure Set_OptionValue(pRet: Integer); safecall;
    function Get_ControlSource: WideString; safecall;
    procedure Set_ControlSource(const pRet: WideString); safecall;
    function Get_DefaultValue: WideString; safecall;
    procedure Set_DefaultValue(const pRet: WideString); safecall;
    function Get_ValidationRule: WideString; safecall;
    procedure Set_ValidationRule(const pRet: WideString); safecall;
    function Get_ValidationText: WideString; safecall;
    procedure Set_ValidationText(const pRet: WideString); safecall;
    function Get_StatusBarText: WideString; safecall;
    procedure Set_StatusBarText(const pRet: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRet: WordBool); safecall;
    function Get_Locked: WordBool; safecall;
    procedure Set_Locked(pRet: WordBool); safecall;
    function Get_TripleState: WordBool; safecall;
    procedure Set_TripleState(pRet: WordBool); safecall;
    function Get_TabStop: WordBool; safecall;
    procedure Set_TabStop(pRet: WordBool); safecall;
    function Get_TabIndex: Smallint; safecall;
    procedure Set_TabIndex(pRet: Smallint); safecall;
    function Get_HideDuplicates: WordBool; safecall;
    procedure Set_HideDuplicates(pRet: WordBool); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_SpecialEffect: Byte; safecall;
    procedure Set_SpecialEffect(pRet: Byte); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_OldBorderStyle: Byte; safecall;
    procedure Set_OldBorderStyle(pRet: Byte); safecall;
    function Get_BorderWidth: Byte; safecall;
    procedure Set_BorderWidth(pRet: Byte); safecall;
    function Get_BorderLineStyle: Byte; safecall;
    procedure Set_BorderLineStyle(pRet: Byte); safecall;
    function Get_BorderColor: Integer; safecall;
    procedure Set_BorderColor(pRet: Integer); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_ControlTipText: WideString; safecall;
    procedure Set_ControlTipText(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_ColumnWidth: Smallint; safecall;
    procedure Set_ColumnWidth(pRet: Smallint); safecall;
    function Get_ColumnOrder: Smallint; safecall;
    procedure Set_ColumnOrder(pRet: Smallint); safecall;
    function Get_ColumnHidden: WordBool; safecall;
    procedure Set_ColumnHidden(pRet: WordBool); safecall;
    function Get_AutoLabel: WordBool; safecall;
    procedure Set_AutoLabel(pRet: WordBool); safecall;
    function Get_AddColon: WordBool; safecall;
    procedure Set_AddColon(pRet: WordBool); safecall;
    function Get_LabelX: Smallint; safecall;
    procedure Set_LabelX(pRet: Smallint); safecall;
    function Get_LabelY: Smallint; safecall;
    procedure Set_LabelY(pRet: Smallint); safecall;
    function Get_LabelAlign: Byte; safecall;
    procedure Set_LabelAlign(pRet: Byte); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_BeforeUpdate: WideString; safecall;
    procedure Set_BeforeUpdate(const pRet: WideString); safecall;
    function Get_AfterUpdate: WideString; safecall;
    procedure Set_AfterUpdate(const pRet: WideString); safecall;
    function Get_OnEnter: WideString; safecall;
    procedure Set_OnEnter(const pRet: WideString); safecall;
    function Get_OnExit: WideString; safecall;
    procedure Set_OnExit(const pRet: WideString); safecall;
    function Get_OnGotFocus: WideString; safecall;
    procedure Set_OnGotFocus(const pRet: WideString); safecall;
    function Get_OnLostFocus: WideString; safecall;
    procedure Set_OnLostFocus(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_OnKeyDown: WideString; safecall;
    procedure Set_OnKeyDown(const pRet: WideString); safecall;
    function Get_OnKeyUp: WideString; safecall;
    procedure Set_OnKeyUp(const pRet: WideString); safecall;
    function Get_OnKeyPress: WideString; safecall;
    procedure Set_OnKeyPress(const pRet: WideString); safecall;
    function Get_ReadingOrder: Byte; safecall;
    procedure Set_ReadingOrder(pRet: Byte); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_BeforeUpdateMacro: WideString; safecall;
    procedure Set_BeforeUpdateMacro(const pRet: WideString); safecall;
    function Get_AfterUpdateMacro: WideString; safecall;
    procedure Set_AfterUpdateMacro(const pRet: WideString); safecall;
    function Get_OnEnterMacro: WideString; safecall;
    procedure Set_OnEnterMacro(const pRet: WideString); safecall;
    function Get_OnExitMacro: WideString; safecall;
    procedure Set_OnExitMacro(const pRet: WideString); safecall;
    function Get_OnGotFocusMacro: WideString; safecall;
    procedure Set_OnGotFocusMacro(const pRet: WideString); safecall;
    function Get_OnLostFocusMacro: WideString; safecall;
    procedure Set_OnLostFocusMacro(const pRet: WideString); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyDownMacro: WideString; safecall;
    procedure Set_OnKeyDownMacro(const pRet: WideString); safecall;
    function Get_OnKeyUpMacro: WideString; safecall;
    procedure Set_OnKeyUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyPressMacro: WideString; safecall;
    procedure Set_OnKeyPressMacro(const pRet: WideString); safecall;
    function Get_Layout: AcLayoutType; safecall;
    function Get_LeftPadding: Smallint; safecall;
    procedure Set_LeftPadding(pRet: Smallint); safecall;
    function Get_TopPadding: Smallint; safecall;
    procedure Set_TopPadding(pRet: Smallint); safecall;
    function Get_RightPadding: Smallint; safecall;
    procedure Set_RightPadding(pRet: Smallint); safecall;
    function Get_BottomPadding: Smallint; safecall;
    procedure Set_BottomPadding(pRet: Smallint); safecall;
    function Get_GridlineStyleLeft: Byte; safecall;
    procedure Set_GridlineStyleLeft(pRet: Byte); safecall;
    function Get_GridlineStyleTop: Byte; safecall;
    procedure Set_GridlineStyleTop(pRet: Byte); safecall;
    function Get_GridlineStyleRight: Byte; safecall;
    procedure Set_GridlineStyleRight(pRet: Byte); safecall;
    function Get_GridlineStyleBottom: Byte; safecall;
    procedure Set_GridlineStyleBottom(pRet: Byte); safecall;
    function Get_GridlineWidthLeft: Byte; safecall;
    procedure Set_GridlineWidthLeft(pRet: Byte); safecall;
    function Get_GridlineWidthTop: Byte; safecall;
    procedure Set_GridlineWidthTop(pRet: Byte); safecall;
    function Get_GridlineWidthRight: Byte; safecall;
    procedure Set_GridlineWidthRight(pRet: Byte); safecall;
    function Get_GridlineWidthBottom: Byte; safecall;
    procedure Set_GridlineWidthBottom(pRet: Byte); safecall;
    function Get_GridlineColor: Integer; safecall;
    procedure Set_GridlineColor(pRet: Integer); safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    function Get_LayoutID: Integer; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property OldValue: OleVariant read Get_OldValue;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Value: OleVariant read Get_Value write Set_Value;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property OptionValue: Integer read Get_OptionValue write Set_OptionValue;
    property ControlSource: WideString read Get_ControlSource write Set_ControlSource;
    property DefaultValue: WideString read Get_DefaultValue write Set_DefaultValue;
    property ValidationRule: WideString read Get_ValidationRule write Set_ValidationRule;
    property ValidationText: WideString read Get_ValidationText write Set_ValidationText;
    property StatusBarText: WideString read Get_StatusBarText write Set_StatusBarText;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Locked: WordBool read Get_Locked write Set_Locked;
    property TripleState: WordBool read Get_TripleState write Set_TripleState;
    property TabStop: WordBool read Get_TabStop write Set_TabStop;
    property TabIndex: Smallint read Get_TabIndex write Set_TabIndex;
    property HideDuplicates: WordBool read Get_HideDuplicates write Set_HideDuplicates;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property SpecialEffect: Byte read Get_SpecialEffect write Set_SpecialEffect;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property OldBorderStyle: Byte read Get_OldBorderStyle write Set_OldBorderStyle;
    property BorderWidth: Byte read Get_BorderWidth write Set_BorderWidth;
    property BorderLineStyle: Byte read Get_BorderLineStyle write Set_BorderLineStyle;
    property BorderColor: Integer read Get_BorderColor write Set_BorderColor;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property ControlTipText: WideString read Get_ControlTipText write Set_ControlTipText;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property ColumnWidth: Smallint read Get_ColumnWidth write Set_ColumnWidth;
    property ColumnOrder: Smallint read Get_ColumnOrder write Set_ColumnOrder;
    property ColumnHidden: WordBool read Get_ColumnHidden write Set_ColumnHidden;
    property AutoLabel: WordBool read Get_AutoLabel write Set_AutoLabel;
    property AddColon: WordBool read Get_AddColon write Set_AddColon;
    property LabelX: Smallint read Get_LabelX write Set_LabelX;
    property LabelY: Smallint read Get_LabelY write Set_LabelY;
    property LabelAlign: Byte read Get_LabelAlign write Set_LabelAlign;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property BeforeUpdate: WideString read Get_BeforeUpdate write Set_BeforeUpdate;
    property AfterUpdate: WideString read Get_AfterUpdate write Set_AfterUpdate;
    property OnEnter: WideString read Get_OnEnter write Set_OnEnter;
    property OnExit: WideString read Get_OnExit write Set_OnExit;
    property OnGotFocus: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property ReadingOrder: Byte read Get_ReadingOrder write Set_ReadingOrder;
    property Name: WideString read Get_Name write Set_Name;
    property BeforeUpdateMacro: WideString read Get_BeforeUpdateMacro write Set_BeforeUpdateMacro;
    property AfterUpdateMacro: WideString read Get_AfterUpdateMacro write Set_AfterUpdateMacro;
    property OnEnterMacro: WideString read Get_OnEnterMacro write Set_OnEnterMacro;
    property OnExitMacro: WideString read Get_OnExitMacro write Set_OnExitMacro;
    property OnGotFocusMacro: WideString read Get_OnGotFocusMacro write Set_OnGotFocusMacro;
    property OnLostFocusMacro: WideString read Get_OnLostFocusMacro write Set_OnLostFocusMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property OnKeyDownMacro: WideString read Get_OnKeyDownMacro write Set_OnKeyDownMacro;
    property OnKeyUpMacro: WideString read Get_OnKeyUpMacro write Set_OnKeyUpMacro;
    property OnKeyPressMacro: WideString read Get_OnKeyPressMacro write Set_OnKeyPressMacro;
    property Layout: AcLayoutType read Get_Layout;
    property LeftPadding: Smallint read Get_LeftPadding write Set_LeftPadding;
    property TopPadding: Smallint read Get_TopPadding write Set_TopPadding;
    property RightPadding: Smallint read Get_RightPadding write Set_RightPadding;
    property BottomPadding: Smallint read Get_BottomPadding write Set_BottomPadding;
    property GridlineStyleLeft: Byte read Get_GridlineStyleLeft write Set_GridlineStyleLeft;
    property GridlineStyleTop: Byte read Get_GridlineStyleTop write Set_GridlineStyleTop;
    property GridlineStyleRight: Byte read Get_GridlineStyleRight write Set_GridlineStyleRight;
    property GridlineStyleBottom: Byte read Get_GridlineStyleBottom write Set_GridlineStyleBottom;
    property GridlineWidthLeft: Byte read Get_GridlineWidthLeft write Set_GridlineWidthLeft;
    property GridlineWidthTop: Byte read Get_GridlineWidthTop write Set_GridlineWidthTop;
    property GridlineWidthRight: Byte read Get_GridlineWidthRight write Set_GridlineWidthRight;
    property GridlineWidthBottom: Byte read Get_GridlineWidthBottom write Set_GridlineWidthBottom;
    property GridlineColor: Integer read Get_GridlineColor write Set_GridlineColor;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
    property LayoutID: Integer read Get_LayoutID;
  end;

// *********************************************************************//
// DispIntf:  _CheckboxDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E954-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _CheckboxDisp = dispinterface
    ['{3B06E954-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    procedure Undo; dispid 2144;
    property OldValue: OleVariant readonly dispid 2102;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    procedure Requery; dispid 2018;
    procedure Goto_; dispid 2023;
    procedure SetFocus; dispid 2022;
    property Controls: Children readonly dispid 2190;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Value: OleVariant dispid 0;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property OptionValue: Integer dispid 58;
    property ControlSource: WideString dispid 27;
    property DefaultValue: WideString dispid 23;
    property ValidationRule: WideString dispid 145;
    property ValidationText: WideString dispid 61;
    property StatusBarText: WideString dispid 135;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Enabled: WordBool dispid 25;
    property Locked: WordBool dispid 56;
    property TripleState: WordBool dispid 294;
    property TabStop: WordBool dispid 262;
    property TabIndex: Smallint dispid 261;
    property HideDuplicates: WordBool dispid 69;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property SpecialEffect: Byte dispid 4;
    property BorderStyle: Byte dispid 9;
    property OldBorderStyle: Byte dispid 329;
    property BorderWidth: Byte dispid 10;
    property BorderLineStyle: Byte dispid 11;
    property BorderColor: Integer dispid 8;
    property ShortcutMenuBar: WideString dispid 304;
    property ControlTipText: WideString dispid 317;
    property HelpContextId: Integer dispid 219;
    property ColumnWidth: Smallint dispid 166;
    property ColumnOrder: Smallint dispid 165;
    property ColumnHidden: WordBool dispid 167;
    property AutoLabel: WordBool dispid 57;
    property AddColon: WordBool dispid 3;
    property LabelX: Smallint dispid 52;
    property LabelY: Smallint dispid 53;
    property LabelAlign: Byte dispid 51;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property BeforeUpdate: WideString dispid 85;
    property AfterUpdate: WideString dispid 86;
    property OnEnter: WideString dispid 222;
    property OnExit: WideString dispid 223;
    property OnGotFocus: WideString dispid 115;
    property OnLostFocus: WideString dispid 116;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property OnKeyDown: WideString dispid 104;
    property OnKeyUp: WideString dispid 105;
    property OnKeyPress: WideString dispid 106;
    property ReadingOrder: Byte dispid 367;
    property Name: WideString dispid -2147418112;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property BeforeUpdateMacro: WideString dispid 496;
    property AfterUpdateMacro: WideString dispid 505;
    property OnEnterMacro: WideString dispid 497;
    property OnExitMacro: WideString dispid 498;
    property OnGotFocusMacro: WideString dispid 502;
    property OnLostFocusMacro: WideString dispid 503;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property OnKeyDownMacro: WideString dispid 500;
    property OnKeyUpMacro: WideString dispid 501;
    property OnKeyPressMacro: WideString dispid 499;
    property Layout: AcLayoutType readonly dispid 2460;
    property LeftPadding: Smallint dispid 454;
    property TopPadding: Smallint dispid 455;
    property RightPadding: Smallint dispid 456;
    property BottomPadding: Smallint dispid 457;
    property GridlineStyleLeft: Byte dispid 458;
    property GridlineStyleTop: Byte dispid 459;
    property GridlineStyleRight: Byte dispid 460;
    property GridlineStyleBottom: Byte dispid 461;
    property GridlineWidthLeft: Byte dispid 463;
    property GridlineWidthTop: Byte dispid 464;
    property GridlineWidthRight: Byte dispid 465;
    property GridlineWidthBottom: Byte dispid 466;
    property GridlineColor: Integer dispid 462;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
    property LayoutID: Integer readonly dispid 2492;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: _CheckBoxEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4347-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _CheckBoxEvents = interface(IUnknown)
    ['{BC9E4347-F037-11CD-8701-00AA003F0F07}']
    function Click: HResult; stdcall;
    function BeforeUpdate(out Cancel: Smallint): HResult; stdcall;
    function AfterUpdate: HResult; stdcall;
    function Enter: HResult; stdcall;
    function Exit(out Cancel: Smallint): HResult; stdcall;
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function KeyDown(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function KeyPress(var KeyAscii: Smallint): HResult; stdcall;
    function KeyUp(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispCheckBoxEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E70526A-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispCheckBoxEvents = dispinterface
    ['{2E70526A-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Click; dispid -600;
    procedure BeforeUpdate(out Cancel: Smallint); dispid 2061;
    procedure AfterUpdate; dispid 2062;
    procedure Enter; dispid 2019;
    procedure Exit(out Cancel: Smallint); dispid 2075;
    procedure GotFocus; dispid 2073;
    procedure LostFocus; dispid 2074;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid -602;
    procedure KeyPress(var KeyAscii: Smallint); dispid -603;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid -604;
  end;

// *********************************************************************//
// Interface: _CheckBoxInOptionEvents
// Flags:     (16) Hidden
// GUID:      {BC9E435D-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _CheckBoxInOptionEvents = interface(IUnknown)
    ['{BC9E435D-F037-11CD-8701-00AA003F0F07}']
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function KeyDown(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function KeyPress(var KeyAscii: Smallint): HResult; stdcall;
    function KeyUp(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: _OptionGroup
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E956-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _OptionGroup = interface(IAccessible)
    ['{3B06E956-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    procedure Undo; safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    procedure Requery; safecall;
    procedure Goto_; safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Children; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(pRet: OleVariant); safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_ControlSource: WideString; safecall;
    procedure Set_ControlSource(const pRet: WideString); safecall;
    function Get_DefaultValue: WideString; safecall;
    procedure Set_DefaultValue(const pRet: WideString); safecall;
    function Get_ValidationRule: WideString; safecall;
    procedure Set_ValidationRule(const pRet: WideString); safecall;
    function Get_ValidationText: WideString; safecall;
    procedure Set_ValidationText(const pRet: WideString); safecall;
    function Get_StatusBarText: WideString; safecall;
    procedure Set_StatusBarText(const pRet: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRet: WordBool); safecall;
    function Get_Locked: WordBool; safecall;
    procedure Set_Locked(pRet: WordBool); safecall;
    function Get_TabStop: WordBool; safecall;
    procedure Set_TabStop(pRet: WordBool); safecall;
    function Get_TabIndex: Smallint; safecall;
    procedure Set_TabIndex(pRet: Smallint); safecall;
    function Get_HideDuplicates: WordBool; safecall;
    procedure Set_HideDuplicates(pRet: WordBool); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_BackStyle: Byte; safecall;
    procedure Set_BackStyle(pRet: Byte); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(pRet: Integer); safecall;
    function Get_SpecialEffect: Byte; safecall;
    procedure Set_SpecialEffect(pRet: Byte); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_OldBorderStyle: Byte; safecall;
    procedure Set_OldBorderStyle(pRet: Byte); safecall;
    function Get_BorderColor: Integer; safecall;
    procedure Set_BorderColor(pRet: Integer); safecall;
    function Get_BorderWidth: Byte; safecall;
    procedure Set_BorderWidth(pRet: Byte); safecall;
    function Get_BorderLineStyle: Byte; safecall;
    procedure Set_BorderLineStyle(pRet: Byte); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_ControlTipText: WideString; safecall;
    procedure Set_ControlTipText(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_ColumnWidth: Smallint; safecall;
    procedure Set_ColumnWidth(pRet: Smallint); safecall;
    function Get_ColumnOrder: Smallint; safecall;
    procedure Set_ColumnOrder(pRet: Smallint); safecall;
    function Get_ColumnHidden: WordBool; safecall;
    procedure Set_ColumnHidden(pRet: WordBool); safecall;
    function Get_AutoLabel: WordBool; safecall;
    procedure Set_AutoLabel(pRet: WordBool); safecall;
    function Get_AddColon: WordBool; safecall;
    procedure Set_AddColon(pRet: WordBool); safecall;
    function Get_LabelX: Smallint; safecall;
    procedure Set_LabelX(pRet: Smallint); safecall;
    function Get_LabelY: Smallint; safecall;
    procedure Set_LabelY(pRet: Smallint); safecall;
    function Get_LabelAlign: Byte; safecall;
    procedure Set_LabelAlign(pRet: Byte); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_BeforeUpdate: WideString; safecall;
    procedure Set_BeforeUpdate(const pRet: WideString); safecall;
    function Get_AfterUpdate: WideString; safecall;
    procedure Set_AfterUpdate(const pRet: WideString); safecall;
    function Get_OnEnter: WideString; safecall;
    procedure Set_OnEnter(const pRet: WideString); safecall;
    function Get_OnExit: WideString; safecall;
    procedure Set_OnExit(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_BeforeUpdateMacro: WideString; safecall;
    procedure Set_BeforeUpdateMacro(const pRet: WideString); safecall;
    function Get_AfterUpdateMacro: WideString; safecall;
    procedure Set_AfterUpdateMacro(const pRet: WideString); safecall;
    function Get_OnEnterMacro: WideString; safecall;
    procedure Set_OnEnterMacro(const pRet: WideString); safecall;
    function Get_OnExitMacro: WideString; safecall;
    procedure Set_OnExitMacro(const pRet: WideString); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property OldValue: OleVariant read Get_OldValue;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Value: OleVariant read Get_Value write Set_Value;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property ControlSource: WideString read Get_ControlSource write Set_ControlSource;
    property DefaultValue: WideString read Get_DefaultValue write Set_DefaultValue;
    property ValidationRule: WideString read Get_ValidationRule write Set_ValidationRule;
    property ValidationText: WideString read Get_ValidationText write Set_ValidationText;
    property StatusBarText: WideString read Get_StatusBarText write Set_StatusBarText;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Locked: WordBool read Get_Locked write Set_Locked;
    property TabStop: WordBool read Get_TabStop write Set_TabStop;
    property TabIndex: Smallint read Get_TabIndex write Set_TabIndex;
    property HideDuplicates: WordBool read Get_HideDuplicates write Set_HideDuplicates;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property BackStyle: Byte read Get_BackStyle write Set_BackStyle;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property SpecialEffect: Byte read Get_SpecialEffect write Set_SpecialEffect;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property OldBorderStyle: Byte read Get_OldBorderStyle write Set_OldBorderStyle;
    property BorderColor: Integer read Get_BorderColor write Set_BorderColor;
    property BorderWidth: Byte read Get_BorderWidth write Set_BorderWidth;
    property BorderLineStyle: Byte read Get_BorderLineStyle write Set_BorderLineStyle;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property ControlTipText: WideString read Get_ControlTipText write Set_ControlTipText;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property ColumnWidth: Smallint read Get_ColumnWidth write Set_ColumnWidth;
    property ColumnOrder: Smallint read Get_ColumnOrder write Set_ColumnOrder;
    property ColumnHidden: WordBool read Get_ColumnHidden write Set_ColumnHidden;
    property AutoLabel: WordBool read Get_AutoLabel write Set_AutoLabel;
    property AddColon: WordBool read Get_AddColon write Set_AddColon;
    property LabelX: Smallint read Get_LabelX write Set_LabelX;
    property LabelY: Smallint read Get_LabelY write Set_LabelY;
    property LabelAlign: Byte read Get_LabelAlign write Set_LabelAlign;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property BeforeUpdate: WideString read Get_BeforeUpdate write Set_BeforeUpdate;
    property AfterUpdate: WideString read Get_AfterUpdate write Set_AfterUpdate;
    property OnEnter: WideString read Get_OnEnter write Set_OnEnter;
    property OnExit: WideString read Get_OnExit write Set_OnExit;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property Name: WideString read Get_Name write Set_Name;
    property BeforeUpdateMacro: WideString read Get_BeforeUpdateMacro write Set_BeforeUpdateMacro;
    property AfterUpdateMacro: WideString read Get_AfterUpdateMacro write Set_AfterUpdateMacro;
    property OnEnterMacro: WideString read Get_OnEnterMacro write Set_OnEnterMacro;
    property OnExitMacro: WideString read Get_OnExitMacro write Set_OnExitMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
  end;

// *********************************************************************//
// DispIntf:  _OptionGroupDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E956-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _OptionGroupDisp = dispinterface
    ['{3B06E956-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    procedure Undo; dispid 2144;
    property OldValue: OleVariant readonly dispid 2102;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    procedure Requery; dispid 2018;
    procedure Goto_; dispid 2023;
    procedure SetFocus; dispid 2022;
    property Controls: Children readonly dispid 2190;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Value: OleVariant dispid 0;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property ControlSource: WideString dispid 27;
    property DefaultValue: WideString dispid 23;
    property ValidationRule: WideString dispid 145;
    property ValidationText: WideString dispid 61;
    property StatusBarText: WideString dispid 135;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Enabled: WordBool dispid 25;
    property Locked: WordBool dispid 56;
    property TabStop: WordBool dispid 262;
    property TabIndex: Smallint dispid 261;
    property HideDuplicates: WordBool dispid 69;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property BackStyle: Byte dispid 29;
    property BackColor: Integer dispid 28;
    property SpecialEffect: Byte dispid 4;
    property BorderStyle: Byte dispid 9;
    property OldBorderStyle: Byte dispid 329;
    property BorderColor: Integer dispid 8;
    property BorderWidth: Byte dispid 10;
    property BorderLineStyle: Byte dispid 11;
    property ShortcutMenuBar: WideString dispid 304;
    property ControlTipText: WideString dispid 317;
    property HelpContextId: Integer dispid 219;
    property ColumnWidth: Smallint dispid 166;
    property ColumnOrder: Smallint dispid 165;
    property ColumnHidden: WordBool dispid 167;
    property AutoLabel: WordBool dispid 57;
    property AddColon: WordBool dispid 3;
    property LabelX: Smallint dispid 52;
    property LabelY: Smallint dispid 53;
    property LabelAlign: Byte dispid 51;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property BeforeUpdate: WideString dispid 85;
    property AfterUpdate: WideString dispid 86;
    property OnEnter: WideString dispid 222;
    property OnExit: WideString dispid 223;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property Name: WideString dispid -2147418112;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property BeforeUpdateMacro: WideString dispid 496;
    property AfterUpdateMacro: WideString dispid 505;
    property OnEnterMacro: WideString dispid 497;
    property OnExitMacro: WideString dispid 498;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: _OptionGroupEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4348-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _OptionGroupEvents = interface(IUnknown)
    ['{BC9E4348-F037-11CD-8701-00AA003F0F07}']
    function BeforeUpdate(out Cancel: Smallint): HResult; stdcall;
    function AfterUpdate: HResult; stdcall;
    function Enter: HResult; stdcall;
    function Exit(out Cancel: Smallint): HResult; stdcall;
    function Click: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispOptionGroupEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E705274-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispOptionGroupEvents = dispinterface
    ['{2E705274-92D1-43CC-A57B-ED48BCCC711D}']
    procedure BeforeUpdate(out Cancel: Smallint); dispid 2061;
    procedure AfterUpdate; dispid 2062;
    procedure Enter; dispid 2019;
    procedure Exit(out Cancel: Smallint); dispid 2075;
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
  end;

// *********************************************************************//
// Interface: _BoundObjectFrame
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E958-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _BoundObjectFrame = interface(IAccessible)
    ['{3B06E958-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_Object_: IDispatch; safecall;
    function Get_ObjectVerbs(Index: Integer): WideString; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    procedure Requery; safecall;
    procedure Goto_; safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Children; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(pRet: OleVariant); safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_ControlSource: WideString; safecall;
    procedure Set_ControlSource(const pRet: WideString); safecall;
    function Get_SizeMode: Byte; safecall;
    procedure Set_SizeMode(pRet: Byte); safecall;
    function Get_Class_: WideString; safecall;
    procedure Set_Class_(const pRet: WideString); safecall;
    function Get_SourceDoc: WideString; safecall;
    procedure Set_SourceDoc(const pRet: WideString); safecall;
    function Get_SourceItem: WideString; safecall;
    procedure Set_SourceItem(const pRet: WideString); safecall;
    function Get_AutoActivate: Smallint; safecall;
    procedure Set_AutoActivate(pRet: Smallint); safecall;
    function Get_DisplayType: WordBool; safecall;
    procedure Set_DisplayType(pRet: WordBool); safecall;
    function Get_UpdateOptions: Smallint; safecall;
    procedure Set_UpdateOptions(pRet: Smallint); safecall;
    function Get_Verb: Integer; safecall;
    procedure Set_Verb(pRet: Integer); safecall;
    function Get_OLETypeAllowed: Byte; safecall;
    procedure Set_OLETypeAllowed(pRet: Byte); safecall;
    function Get_StatusBarText: WideString; safecall;
    procedure Set_StatusBarText(const pRet: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRet: WordBool); safecall;
    function Get_Locked: WordBool; safecall;
    procedure Set_Locked(pRet: WordBool); safecall;
    function Get_TabStop: WordBool; safecall;
    procedure Set_TabStop(pRet: WordBool); safecall;
    function Get_TabIndex: Smallint; safecall;
    procedure Set_TabIndex(pRet: Smallint); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_BackStyle: Byte; safecall;
    procedure Set_BackStyle(pRet: Byte); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(pRet: Integer); safecall;
    function Get_SpecialEffect: Byte; safecall;
    procedure Set_SpecialEffect(pRet: Byte); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_OldBorderStyle: Byte; safecall;
    procedure Set_OldBorderStyle(pRet: Byte); safecall;
    function Get_BorderColor: Integer; safecall;
    procedure Set_BorderColor(pRet: Integer); safecall;
    function Get_BorderWidth: Byte; safecall;
    procedure Set_BorderWidth(pRet: Byte); safecall;
    function Get_BorderLineStyle: Byte; safecall;
    procedure Set_BorderLineStyle(pRet: Byte); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_ControlTipText: WideString; safecall;
    procedure Set_ControlTipText(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_ColumnWidth: Smallint; safecall;
    procedure Set_ColumnWidth(pRet: Smallint); safecall;
    function Get_ColumnOrder: Smallint; safecall;
    procedure Set_ColumnOrder(pRet: Smallint); safecall;
    function Get_ColumnHidden: WordBool; safecall;
    procedure Set_ColumnHidden(pRet: WordBool); safecall;
    function Get_AutoLabel: WordBool; safecall;
    procedure Set_AutoLabel(pRet: WordBool); safecall;
    function Get_AddColon: WordBool; safecall;
    procedure Set_AddColon(pRet: WordBool); safecall;
    function Get_LabelX: Smallint; safecall;
    procedure Set_LabelX(pRet: Smallint); safecall;
    function Get_LabelY: Smallint; safecall;
    procedure Set_LabelY(pRet: Smallint); safecall;
    function Get_LabelAlign: Byte; safecall;
    procedure Set_LabelAlign(pRet: Byte); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_ObjectPalette: OleVariant; safecall;
    procedure Set_ObjectPalette(pRet: OleVariant); safecall;
    function Get_LpOleObject: Integer; safecall;
    procedure Set_LpOleObject(pRet: Integer); safecall;
    function Get_ObjectVerbsCount: Integer; safecall;
    procedure Set_ObjectVerbsCount(pRet: Integer); safecall;
    function Get_Action: Smallint; safecall;
    procedure Set_Action(pRet: Smallint); safecall;
    function Get_Scaling: Byte; safecall;
    procedure Set_Scaling(pRet: Byte); safecall;
    function Get_OLEType: Byte; safecall;
    procedure Set_OLEType(pRet: Byte); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_BeforeUpdate: WideString; safecall;
    procedure Set_BeforeUpdate(const pRet: WideString); safecall;
    function Get_AfterUpdate: WideString; safecall;
    procedure Set_AfterUpdate(const pRet: WideString); safecall;
    function Get_OnUpdated: WideString; safecall;
    procedure Set_OnUpdated(const pRet: WideString); safecall;
    function Get_OnEnter: WideString; safecall;
    procedure Set_OnEnter(const pRet: WideString); safecall;
    function Get_OnExit: WideString; safecall;
    procedure Set_OnExit(const pRet: WideString); safecall;
    function Get_OnGotFocus: WideString; safecall;
    procedure Set_OnGotFocus(const pRet: WideString); safecall;
    function Get_OnLostFocus: WideString; safecall;
    procedure Set_OnLostFocus(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_OnKeyDown: WideString; safecall;
    procedure Set_OnKeyDown(const pRet: WideString); safecall;
    function Get_OnKeyUp: WideString; safecall;
    procedure Set_OnKeyUp(const pRet: WideString); safecall;
    function Get_OnKeyPress: WideString; safecall;
    procedure Set_OnKeyPress(const pRet: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_BeforeUpdateMacro: WideString; safecall;
    procedure Set_BeforeUpdateMacro(const pRet: WideString); safecall;
    function Get_AfterUpdateMacro: WideString; safecall;
    procedure Set_AfterUpdateMacro(const pRet: WideString); safecall;
    function Get_OnUpdatedMacro: WideString; safecall;
    procedure Set_OnUpdatedMacro(const pRet: WideString); safecall;
    function Get_OnEnterMacro: WideString; safecall;
    procedure Set_OnEnterMacro(const pRet: WideString); safecall;
    function Get_OnExitMacro: WideString; safecall;
    procedure Set_OnExitMacro(const pRet: WideString); safecall;
    function Get_OnGotFocusMacro: WideString; safecall;
    procedure Set_OnGotFocusMacro(const pRet: WideString); safecall;
    function Get_OnLostFocusMacro: WideString; safecall;
    procedure Set_OnLostFocusMacro(const pRet: WideString); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyDownMacro: WideString; safecall;
    procedure Set_OnKeyDownMacro(const pRet: WideString); safecall;
    function Get_OnKeyUpMacro: WideString; safecall;
    procedure Set_OnKeyUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyPressMacro: WideString; safecall;
    procedure Set_OnKeyPressMacro(const pRet: WideString); safecall;
    function Get_Layout: AcLayoutType; safecall;
    function Get_LeftPadding: Smallint; safecall;
    procedure Set_LeftPadding(pRet: Smallint); safecall;
    function Get_TopPadding: Smallint; safecall;
    procedure Set_TopPadding(pRet: Smallint); safecall;
    function Get_RightPadding: Smallint; safecall;
    procedure Set_RightPadding(pRet: Smallint); safecall;
    function Get_BottomPadding: Smallint; safecall;
    procedure Set_BottomPadding(pRet: Smallint); safecall;
    function Get_GridlineStyleLeft: Byte; safecall;
    procedure Set_GridlineStyleLeft(pRet: Byte); safecall;
    function Get_GridlineStyleTop: Byte; safecall;
    procedure Set_GridlineStyleTop(pRet: Byte); safecall;
    function Get_GridlineStyleRight: Byte; safecall;
    procedure Set_GridlineStyleRight(pRet: Byte); safecall;
    function Get_GridlineStyleBottom: Byte; safecall;
    procedure Set_GridlineStyleBottom(pRet: Byte); safecall;
    function Get_GridlineWidthLeft: Byte; safecall;
    procedure Set_GridlineWidthLeft(pRet: Byte); safecall;
    function Get_GridlineWidthTop: Byte; safecall;
    procedure Set_GridlineWidthTop(pRet: Byte); safecall;
    function Get_GridlineWidthRight: Byte; safecall;
    procedure Set_GridlineWidthRight(pRet: Byte); safecall;
    function Get_GridlineWidthBottom: Byte; safecall;
    procedure Set_GridlineWidthBottom(pRet: Byte); safecall;
    function Get_GridlineColor: Integer; safecall;
    procedure Set_GridlineColor(pRet: Integer); safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    function Get_LayoutID: Integer; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property OldValue: OleVariant read Get_OldValue;
    property Object_: IDispatch read Get_Object_;
    property ObjectVerbs[Index: Integer]: WideString read Get_ObjectVerbs;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Value: OleVariant read Get_Value write Set_Value;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property ControlSource: WideString read Get_ControlSource write Set_ControlSource;
    property SizeMode: Byte read Get_SizeMode write Set_SizeMode;
    property Class_: WideString read Get_Class_ write Set_Class_;
    property SourceDoc: WideString read Get_SourceDoc write Set_SourceDoc;
    property SourceItem: WideString read Get_SourceItem write Set_SourceItem;
    property AutoActivate: Smallint read Get_AutoActivate write Set_AutoActivate;
    property DisplayType: WordBool read Get_DisplayType write Set_DisplayType;
    property UpdateOptions: Smallint read Get_UpdateOptions write Set_UpdateOptions;
    property Verb: Integer read Get_Verb write Set_Verb;
    property OLETypeAllowed: Byte read Get_OLETypeAllowed write Set_OLETypeAllowed;
    property StatusBarText: WideString read Get_StatusBarText write Set_StatusBarText;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Locked: WordBool read Get_Locked write Set_Locked;
    property TabStop: WordBool read Get_TabStop write Set_TabStop;
    property TabIndex: Smallint read Get_TabIndex write Set_TabIndex;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property BackStyle: Byte read Get_BackStyle write Set_BackStyle;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property SpecialEffect: Byte read Get_SpecialEffect write Set_SpecialEffect;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property OldBorderStyle: Byte read Get_OldBorderStyle write Set_OldBorderStyle;
    property BorderColor: Integer read Get_BorderColor write Set_BorderColor;
    property BorderWidth: Byte read Get_BorderWidth write Set_BorderWidth;
    property BorderLineStyle: Byte read Get_BorderLineStyle write Set_BorderLineStyle;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property ControlTipText: WideString read Get_ControlTipText write Set_ControlTipText;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property ColumnWidth: Smallint read Get_ColumnWidth write Set_ColumnWidth;
    property ColumnOrder: Smallint read Get_ColumnOrder write Set_ColumnOrder;
    property ColumnHidden: WordBool read Get_ColumnHidden write Set_ColumnHidden;
    property AutoLabel: WordBool read Get_AutoLabel write Set_AutoLabel;
    property AddColon: WordBool read Get_AddColon write Set_AddColon;
    property LabelX: Smallint read Get_LabelX write Set_LabelX;
    property LabelY: Smallint read Get_LabelY write Set_LabelY;
    property LabelAlign: Byte read Get_LabelAlign write Set_LabelAlign;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property ObjectPalette: OleVariant read Get_ObjectPalette write Set_ObjectPalette;
    property LpOleObject: Integer read Get_LpOleObject write Set_LpOleObject;
    property ObjectVerbsCount: Integer read Get_ObjectVerbsCount write Set_ObjectVerbsCount;
    property Action: Smallint read Get_Action write Set_Action;
    property Scaling: Byte read Get_Scaling write Set_Scaling;
    property OLEType: Byte read Get_OLEType write Set_OLEType;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property BeforeUpdate: WideString read Get_BeforeUpdate write Set_BeforeUpdate;
    property AfterUpdate: WideString read Get_AfterUpdate write Set_AfterUpdate;
    property OnUpdated: WideString read Get_OnUpdated write Set_OnUpdated;
    property OnEnter: WideString read Get_OnEnter write Set_OnEnter;
    property OnExit: WideString read Get_OnExit write Set_OnExit;
    property OnGotFocus: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property Name: WideString read Get_Name write Set_Name;
    property BeforeUpdateMacro: WideString read Get_BeforeUpdateMacro write Set_BeforeUpdateMacro;
    property AfterUpdateMacro: WideString read Get_AfterUpdateMacro write Set_AfterUpdateMacro;
    property OnUpdatedMacro: WideString read Get_OnUpdatedMacro write Set_OnUpdatedMacro;
    property OnEnterMacro: WideString read Get_OnEnterMacro write Set_OnEnterMacro;
    property OnExitMacro: WideString read Get_OnExitMacro write Set_OnExitMacro;
    property OnGotFocusMacro: WideString read Get_OnGotFocusMacro write Set_OnGotFocusMacro;
    property OnLostFocusMacro: WideString read Get_OnLostFocusMacro write Set_OnLostFocusMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property OnKeyDownMacro: WideString read Get_OnKeyDownMacro write Set_OnKeyDownMacro;
    property OnKeyUpMacro: WideString read Get_OnKeyUpMacro write Set_OnKeyUpMacro;
    property OnKeyPressMacro: WideString read Get_OnKeyPressMacro write Set_OnKeyPressMacro;
    property Layout: AcLayoutType read Get_Layout;
    property LeftPadding: Smallint read Get_LeftPadding write Set_LeftPadding;
    property TopPadding: Smallint read Get_TopPadding write Set_TopPadding;
    property RightPadding: Smallint read Get_RightPadding write Set_RightPadding;
    property BottomPadding: Smallint read Get_BottomPadding write Set_BottomPadding;
    property GridlineStyleLeft: Byte read Get_GridlineStyleLeft write Set_GridlineStyleLeft;
    property GridlineStyleTop: Byte read Get_GridlineStyleTop write Set_GridlineStyleTop;
    property GridlineStyleRight: Byte read Get_GridlineStyleRight write Set_GridlineStyleRight;
    property GridlineStyleBottom: Byte read Get_GridlineStyleBottom write Set_GridlineStyleBottom;
    property GridlineWidthLeft: Byte read Get_GridlineWidthLeft write Set_GridlineWidthLeft;
    property GridlineWidthTop: Byte read Get_GridlineWidthTop write Set_GridlineWidthTop;
    property GridlineWidthRight: Byte read Get_GridlineWidthRight write Set_GridlineWidthRight;
    property GridlineWidthBottom: Byte read Get_GridlineWidthBottom write Set_GridlineWidthBottom;
    property GridlineColor: Integer read Get_GridlineColor write Set_GridlineColor;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
    property LayoutID: Integer read Get_LayoutID;
  end;

// *********************************************************************//
// DispIntf:  _BoundObjectFrameDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E958-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _BoundObjectFrameDisp = dispinterface
    ['{3B06E958-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property OldValue: OleVariant readonly dispid 2102;
    property Object_: IDispatch readonly dispid 2104;
    property ObjectVerbs[Index: Integer]: WideString readonly dispid 2105;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    procedure Requery; dispid 2018;
    procedure Goto_; dispid 2023;
    procedure SetFocus; dispid 2022;
    property Controls: Children readonly dispid 2190;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Value: OleVariant dispid 0;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property ControlSource: WideString dispid 27;
    property SizeMode: Byte dispid 89;
    property Class_: WideString dispid 274;
    property SourceDoc: WideString dispid 133;
    property SourceItem: WideString dispid 48;
    property AutoActivate: Smallint dispid 101;
    property DisplayType: WordBool dispid 272;
    property UpdateOptions: Smallint dispid 103;
    property Verb: Integer dispid 102;
    property OLETypeAllowed: Byte dispid 275;
    property StatusBarText: WideString dispid 135;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Enabled: WordBool dispid 25;
    property Locked: WordBool dispid 56;
    property TabStop: WordBool dispid 262;
    property TabIndex: Smallint dispid 261;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property BackStyle: Byte dispid 29;
    property BackColor: Integer dispid 28;
    property SpecialEffect: Byte dispid 4;
    property BorderStyle: Byte dispid 9;
    property OldBorderStyle: Byte dispid 329;
    property BorderColor: Integer dispid 8;
    property BorderWidth: Byte dispid 10;
    property BorderLineStyle: Byte dispid 11;
    property ShortcutMenuBar: WideString dispid 304;
    property ControlTipText: WideString dispid 317;
    property HelpContextId: Integer dispid 219;
    property ColumnWidth: Smallint dispid 166;
    property ColumnOrder: Smallint dispid 165;
    property ColumnHidden: WordBool dispid 167;
    property AutoLabel: WordBool dispid 57;
    property AddColon: WordBool dispid 3;
    property LabelX: Smallint dispid 52;
    property LabelY: Smallint dispid 53;
    property LabelAlign: Byte dispid 51;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property ObjectPalette: OleVariant dispid 99;
    property LpOleObject: Integer dispid 172;
    property ObjectVerbsCount: Integer dispid 173;
    property Action: Smallint dispid 273;
    property Scaling: Byte dispid 88;
    property OLEType: Byte dispid 276;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property BeforeUpdate: WideString dispid 85;
    property AfterUpdate: WideString dispid 86;
    property OnUpdated: WideString dispid 118;
    property OnEnter: WideString dispid 222;
    property OnExit: WideString dispid 223;
    property OnGotFocus: WideString dispid 115;
    property OnLostFocus: WideString dispid 116;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property OnKeyDown: WideString dispid 104;
    property OnKeyUp: WideString dispid 105;
    property OnKeyPress: WideString dispid 106;
    property Name: WideString dispid -2147418112;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property BeforeUpdateMacro: WideString dispid 496;
    property AfterUpdateMacro: WideString dispid 505;
    property OnUpdatedMacro: WideString dispid 504;
    property OnEnterMacro: WideString dispid 497;
    property OnExitMacro: WideString dispid 498;
    property OnGotFocusMacro: WideString dispid 502;
    property OnLostFocusMacro: WideString dispid 503;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property OnKeyDownMacro: WideString dispid 500;
    property OnKeyUpMacro: WideString dispid 501;
    property OnKeyPressMacro: WideString dispid 499;
    property Layout: AcLayoutType readonly dispid 2460;
    property LeftPadding: Smallint dispid 454;
    property TopPadding: Smallint dispid 455;
    property RightPadding: Smallint dispid 456;
    property BottomPadding: Smallint dispid 457;
    property GridlineStyleLeft: Byte dispid 458;
    property GridlineStyleTop: Byte dispid 459;
    property GridlineStyleRight: Byte dispid 460;
    property GridlineStyleBottom: Byte dispid 461;
    property GridlineWidthLeft: Byte dispid 463;
    property GridlineWidthTop: Byte dispid 464;
    property GridlineWidthRight: Byte dispid 465;
    property GridlineWidthBottom: Byte dispid 466;
    property GridlineColor: Integer dispid 462;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
    property LayoutID: Integer readonly dispid 2492;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: _BoundObjectFrameEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4349-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _BoundObjectFrameEvents = interface(IUnknown)
    ['{BC9E4349-F037-11CD-8701-00AA003F0F07}']
    function Updated(var Code: Smallint): HResult; stdcall;
    function BeforeUpdate(out Cancel: Smallint): HResult; stdcall;
    function AfterUpdate: HResult; stdcall;
    function Enter: HResult; stdcall;
    function Exit(out Cancel: Smallint): HResult; stdcall;
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
    function Click: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function KeyDown(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function KeyPress(var KeyAscii: Smallint): HResult; stdcall;
    function KeyUp(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispBoundObjectFrameEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E70526C-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispBoundObjectFrameEvents = dispinterface
    ['{2E70526C-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Updated(var Code: Smallint); dispid 2076;
    procedure BeforeUpdate(out Cancel: Smallint); dispid 2061;
    procedure AfterUpdate; dispid 2062;
    procedure Enter; dispid 2019;
    procedure Exit(out Cancel: Smallint); dispid 2075;
    procedure GotFocus; dispid 2073;
    procedure LostFocus; dispid 2074;
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid -602;
    procedure KeyPress(var KeyAscii: Smallint); dispid -603;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid -604;
  end;

// *********************************************************************//
// Interface: _Textbox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E946-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _Textbox = interface(IAccessible)
    ['{3B06E946-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    procedure Undo; safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    procedure Requery; safecall;
    procedure Goto_; safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Children; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Hyperlink: _Hyperlink; safecall;
    function Get_FormatConditions: FormatConditions; safecall;
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(pRet: OleVariant); safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_ControlSource: WideString; safecall;
    procedure Set_ControlSource(const pRet: WideString); safecall;
    function Get_Format: WideString; safecall;
    procedure Set_Format(const pRet: WideString); safecall;
    function Get_DecimalPlaces: Byte; safecall;
    procedure Set_DecimalPlaces(pRet: Byte); safecall;
    function Get_InputMask: WideString; safecall;
    procedure Set_InputMask(const pRet: WideString); safecall;
    function Get_DefaultValue: WideString; safecall;
    procedure Set_DefaultValue(const pRet: WideString); safecall;
    function Get_IMEHold: WordBool; safecall;
    procedure Set_IMEHold(pRet: WordBool); safecall;
    function Get_FuriganaControl: WideString; safecall;
    procedure Set_FuriganaControl(const pRet: WideString); safecall;
    function Get_PostalAddress: WideString; safecall;
    procedure Set_PostalAddress(const pRet: WideString); safecall;
    function Get_ValidationRule: WideString; safecall;
    procedure Set_ValidationRule(const pRet: WideString); safecall;
    function Get_ValidationText: WideString; safecall;
    procedure Set_ValidationText(const pRet: WideString); safecall;
    function Get_StatusBarText: WideString; safecall;
    procedure Set_StatusBarText(const pRet: WideString); safecall;
    function Get_EnterKeyBehavior: WordBool; safecall;
    procedure Set_EnterKeyBehavior(pRet: WordBool); safecall;
    function Get_AllowAutoCorrect: WordBool; safecall;
    procedure Set_AllowAutoCorrect(pRet: WordBool); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Vertical: WordBool; safecall;
    procedure Set_Vertical(pRet: WordBool); safecall;
    function Get_FELineBreak: WordBool; safecall;
    procedure Set_FELineBreak(pRet: WordBool); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRet: WordBool); safecall;
    function Get_Locked: WordBool; safecall;
    procedure Set_Locked(pRet: WordBool); safecall;
    function Get_FilterLookup: Byte; safecall;
    procedure Set_FilterLookup(pRet: Byte); safecall;
    function Get_AutoTab: WordBool; safecall;
    procedure Set_AutoTab(pRet: WordBool); safecall;
    function Get_TabStop: WordBool; safecall;
    procedure Set_TabStop(pRet: WordBool); safecall;
    function Get_TabIndex: Smallint; safecall;
    procedure Set_TabIndex(pRet: Smallint); safecall;
    function Get_ScrollBars: Byte; safecall;
    procedure Set_ScrollBars(pRet: Byte); safecall;
    function Get_HideDuplicates: WordBool; safecall;
    procedure Set_HideDuplicates(pRet: WordBool); safecall;
    function Get_CanGrow: WordBool; safecall;
    procedure Set_CanGrow(pRet: WordBool); safecall;
    function Get_CanShrink: WordBool; safecall;
    procedure Set_CanShrink(pRet: WordBool); safecall;
    function Get_RunningSum: Byte; safecall;
    procedure Set_RunningSum(pRet: Byte); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_BackStyle: Byte; safecall;
    procedure Set_BackStyle(pRet: Byte); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(pRet: Integer); safecall;
    function Get_SpecialEffect: Byte; safecall;
    procedure Set_SpecialEffect(pRet: Byte); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_OldBorderStyle: Byte; safecall;
    procedure Set_OldBorderStyle(pRet: Byte); safecall;
    function Get_BorderColor: Integer; safecall;
    procedure Set_BorderColor(pRet: Integer); safecall;
    function Get_BorderWidth: Byte; safecall;
    procedure Set_BorderWidth(pRet: Byte); safecall;
    function Get_BorderLineStyle: Byte; safecall;
    procedure Set_BorderLineStyle(pRet: Byte); safecall;
    function Get_ForeColor: Integer; safecall;
    procedure Set_ForeColor(pRet: Integer); safecall;
    function Get_FontName: WideString; safecall;
    procedure Set_FontName(const pRet: WideString); safecall;
    function Get_FontSize: Smallint; safecall;
    procedure Set_FontSize(pRet: Smallint); safecall;
    function Get_FontWeight: Smallint; safecall;
    procedure Set_FontWeight(pRet: Smallint); safecall;
    function Get_FontItalic: WordBool; safecall;
    procedure Set_FontItalic(pRet: WordBool); safecall;
    function Get_FontUnderline: WordBool; safecall;
    procedure Set_FontUnderline(pRet: WordBool); safecall;
    function Get_TextFontCharSet: Byte; safecall;
    procedure Set_TextFontCharSet(pRet: Byte); safecall;
    function Get_TextAlign: Byte; safecall;
    procedure Set_TextAlign(pRet: Byte); safecall;
    function Get_FontBold: Smallint; safecall;
    procedure Set_FontBold(pRet: Smallint); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_ControlTipText: WideString; safecall;
    procedure Set_ControlTipText(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_ColumnWidth: Smallint; safecall;
    procedure Set_ColumnWidth(pRet: Smallint); safecall;
    function Get_ColumnOrder: Smallint; safecall;
    procedure Set_ColumnOrder(pRet: Smallint); safecall;
    function Get_ColumnHidden: WordBool; safecall;
    procedure Set_ColumnHidden(pRet: WordBool); safecall;
    function Get_AutoLabel: WordBool; safecall;
    procedure Set_AutoLabel(pRet: WordBool); safecall;
    function Get_AddColon: WordBool; safecall;
    procedure Set_AddColon(pRet: WordBool); safecall;
    function Get_LabelX: Smallint; safecall;
    procedure Set_LabelX(pRet: Smallint); safecall;
    function Get_LabelY: Smallint; safecall;
    procedure Set_LabelY(pRet: Smallint); safecall;
    function Get_LabelAlign: Byte; safecall;
    procedure Set_LabelAlign(pRet: Byte); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const pRet: WideString); safecall;
    function Get_SelText: WideString; safecall;
    procedure Set_SelText(const pRet: WideString); safecall;
    function Get_SelStart: Smallint; safecall;
    procedure Set_SelStart(pRet: Smallint); safecall;
    function Get_SelLength: Smallint; safecall;
    procedure Set_SelLength(pRet: Smallint); safecall;
    function Get_TextAlignGeneral: Smallint; safecall;
    procedure Set_TextAlignGeneral(pRet: Smallint); safecall;
    function Get_Coltyp: Integer; safecall;
    procedure Set_Coltyp(pRet: Integer); safecall;
    function Get_FormatPictureText: WideString; safecall;
    procedure Set_FormatPictureText(const pRet: WideString); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_BeforeUpdate: WideString; safecall;
    procedure Set_BeforeUpdate(const pRet: WideString); safecall;
    function Get_AfterUpdate: WideString; safecall;
    procedure Set_AfterUpdate(const pRet: WideString); safecall;
    function Get_OnChange: WideString; safecall;
    procedure Set_OnChange(const pRet: WideString); safecall;
    function Get_OnEnter: WideString; safecall;
    procedure Set_OnEnter(const pRet: WideString); safecall;
    function Get_OnExit: WideString; safecall;
    procedure Set_OnExit(const pRet: WideString); safecall;
    function Get_OnGotFocus: WideString; safecall;
    procedure Set_OnGotFocus(const pRet: WideString); safecall;
    function Get_OnLostFocus: WideString; safecall;
    procedure Set_OnLostFocus(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_OnKeyDown: WideString; safecall;
    procedure Set_OnKeyDown(const pRet: WideString); safecall;
    function Get_OnKeyUp: WideString; safecall;
    procedure Set_OnKeyUp(const pRet: WideString); safecall;
    function Get_OnKeyPress: WideString; safecall;
    procedure Set_OnKeyPress(const pRet: WideString); safecall;
    function Get_ReadingOrder: Byte; safecall;
    procedure Set_ReadingOrder(pRet: Byte); safecall;
    function Get_KeyboardLanguage: Byte; safecall;
    procedure Set_KeyboardLanguage(pRet: Byte); safecall;
    function Get_AllowedText: Byte; safecall;
    procedure Set_AllowedText(pRet: Byte); safecall;
    function Get_ScrollBarAlign: Byte; safecall;
    procedure Set_ScrollBarAlign(pRet: Byte); safecall;
    function Get_NumeralShapes: Byte; safecall;
    procedure Set_NumeralShapes(pRet: Byte); safecall;
    function Get_IMEMode: AcImeMode; safecall;
    procedure Set_IMEMode(pRet: AcImeMode); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    function Get_IMESentenceMode: AcImeSentenceMode; safecall;
    procedure Set_IMESentenceMode(pRet: AcImeSentenceMode); safecall;
    function Get_LeftMargin: Smallint; safecall;
    procedure Set_LeftMargin(pRet: Smallint); safecall;
    function Get_TopMargin: Smallint; safecall;
    procedure Set_TopMargin(pRet: Smallint); safecall;
    function Get_LineSpacing: Smallint; safecall;
    procedure Set_LineSpacing(pRet: Smallint); safecall;
    function Get_RightMargin: Smallint; safecall;
    procedure Set_RightMargin(pRet: Smallint); safecall;
    function Get_BottomMargin: Smallint; safecall;
    procedure Set_BottomMargin(pRet: Smallint); safecall;
    function Get_IsHyperlink: WordBool; safecall;
    procedure Set_IsHyperlink(pRet: WordBool); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function Get_OnDirty: WideString; safecall;
    procedure Set_OnDirty(const pRet: WideString); safecall;
    function Get_OnUndo: WideString; safecall;
    procedure Set_OnUndo(const pRet: WideString); safecall;
    function Get_AsianLineBreak: WordBool; safecall;
    procedure Set_AsianLineBreak(pRet: WordBool); safecall;
    function Get_SmartTags: _SmartTags; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_Layout: AcLayoutType; safecall;
    function Get_TextFormat: AcTextFormat; safecall;
    procedure Set_TextFormat(pRet: AcTextFormat); safecall;
    function Get_LeftPadding: Smallint; safecall;
    procedure Set_LeftPadding(pRet: Smallint); safecall;
    function Get_TopPadding: Smallint; safecall;
    procedure Set_TopPadding(pRet: Smallint); safecall;
    function Get_RightPadding: Smallint; safecall;
    procedure Set_RightPadding(pRet: Smallint); safecall;
    function Get_BottomPadding: Smallint; safecall;
    procedure Set_BottomPadding(pRet: Smallint); safecall;
    function Get_GridlineStyleLeft: Byte; safecall;
    procedure Set_GridlineStyleLeft(pRet: Byte); safecall;
    function Get_GridlineStyleTop: Byte; safecall;
    procedure Set_GridlineStyleTop(pRet: Byte); safecall;
    function Get_GridlineStyleRight: Byte; safecall;
    procedure Set_GridlineStyleRight(pRet: Byte); safecall;
    function Get_GridlineStyleBottom: Byte; safecall;
    procedure Set_GridlineStyleBottom(pRet: Byte); safecall;
    function Get_GridlineWidthLeft: Byte; safecall;
    procedure Set_GridlineWidthLeft(pRet: Byte); safecall;
    function Get_GridlineWidthTop: Byte; safecall;
    procedure Set_GridlineWidthTop(pRet: Byte); safecall;
    function Get_GridlineWidthRight: Byte; safecall;
    procedure Set_GridlineWidthRight(pRet: Byte); safecall;
    function Get_GridlineWidthBottom: Byte; safecall;
    procedure Set_GridlineWidthBottom(pRet: Byte); safecall;
    function Get_GridlineColor: Integer; safecall;
    procedure Set_GridlineColor(pRet: Integer); safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    function Get_BeforeUpdateMacro: WideString; safecall;
    procedure Set_BeforeUpdateMacro(const pRet: WideString); safecall;
    function Get_AfterUpdateMacro: WideString; safecall;
    procedure Set_AfterUpdateMacro(const pRet: WideString); safecall;
    function Get_OnChangeMacro: WideString; safecall;
    procedure Set_OnChangeMacro(const pRet: WideString); safecall;
    function Get_OnEnterMacro: WideString; safecall;
    procedure Set_OnEnterMacro(const pRet: WideString); safecall;
    function Get_OnExitMacro: WideString; safecall;
    procedure Set_OnExitMacro(const pRet: WideString); safecall;
    function Get_OnGotFocusMacro: WideString; safecall;
    procedure Set_OnGotFocusMacro(const pRet: WideString); safecall;
    function Get_OnLostFocusMacro: WideString; safecall;
    procedure Set_OnLostFocusMacro(const pRet: WideString); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyDownMacro: WideString; safecall;
    procedure Set_OnKeyDownMacro(const pRet: WideString); safecall;
    function Get_OnKeyUpMacro: WideString; safecall;
    procedure Set_OnKeyUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyPressMacro: WideString; safecall;
    procedure Set_OnKeyPressMacro(const pRet: WideString); safecall;
    function Get_LayoutID: Integer; safecall;
    function Get_DisplayAsHyperlink: AcDisplayAsHyperlink; safecall;
    procedure Set_DisplayAsHyperlink(pRet: AcDisplayAsHyperlink); safecall;
    function Get_ShowDatePicker: Smallint; safecall;
    procedure Set_ShowDatePicker(pRet: Smallint); safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property OldValue: OleVariant read Get_OldValue;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Hyperlink: _Hyperlink read Get_Hyperlink;
    property FormatConditions: FormatConditions read Get_FormatConditions;
    property Value: OleVariant read Get_Value write Set_Value;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property ControlSource: WideString read Get_ControlSource write Set_ControlSource;
    property Format: WideString read Get_Format write Set_Format;
    property DecimalPlaces: Byte read Get_DecimalPlaces write Set_DecimalPlaces;
    property InputMask: WideString read Get_InputMask write Set_InputMask;
    property DefaultValue: WideString read Get_DefaultValue write Set_DefaultValue;
    property IMEHold: WordBool read Get_IMEHold write Set_IMEHold;
    property FuriganaControl: WideString read Get_FuriganaControl write Set_FuriganaControl;
    property PostalAddress: WideString read Get_PostalAddress write Set_PostalAddress;
    property ValidationRule: WideString read Get_ValidationRule write Set_ValidationRule;
    property ValidationText: WideString read Get_ValidationText write Set_ValidationText;
    property StatusBarText: WideString read Get_StatusBarText write Set_StatusBarText;
    property EnterKeyBehavior: WordBool read Get_EnterKeyBehavior write Set_EnterKeyBehavior;
    property AllowAutoCorrect: WordBool read Get_AllowAutoCorrect write Set_AllowAutoCorrect;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Vertical: WordBool read Get_Vertical write Set_Vertical;
    property FELineBreak: WordBool read Get_FELineBreak write Set_FELineBreak;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Locked: WordBool read Get_Locked write Set_Locked;
    property FilterLookup: Byte read Get_FilterLookup write Set_FilterLookup;
    property AutoTab: WordBool read Get_AutoTab write Set_AutoTab;
    property TabStop: WordBool read Get_TabStop write Set_TabStop;
    property TabIndex: Smallint read Get_TabIndex write Set_TabIndex;
    property ScrollBars: Byte read Get_ScrollBars write Set_ScrollBars;
    property HideDuplicates: WordBool read Get_HideDuplicates write Set_HideDuplicates;
    property CanGrow: WordBool read Get_CanGrow write Set_CanGrow;
    property CanShrink: WordBool read Get_CanShrink write Set_CanShrink;
    property RunningSum: Byte read Get_RunningSum write Set_RunningSum;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property BackStyle: Byte read Get_BackStyle write Set_BackStyle;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property SpecialEffect: Byte read Get_SpecialEffect write Set_SpecialEffect;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property OldBorderStyle: Byte read Get_OldBorderStyle write Set_OldBorderStyle;
    property BorderColor: Integer read Get_BorderColor write Set_BorderColor;
    property BorderWidth: Byte read Get_BorderWidth write Set_BorderWidth;
    property BorderLineStyle: Byte read Get_BorderLineStyle write Set_BorderLineStyle;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property FontName: WideString read Get_FontName write Set_FontName;
    property FontSize: Smallint read Get_FontSize write Set_FontSize;
    property FontWeight: Smallint read Get_FontWeight write Set_FontWeight;
    property FontItalic: WordBool read Get_FontItalic write Set_FontItalic;
    property FontUnderline: WordBool read Get_FontUnderline write Set_FontUnderline;
    property TextFontCharSet: Byte read Get_TextFontCharSet write Set_TextFontCharSet;
    property TextAlign: Byte read Get_TextAlign write Set_TextAlign;
    property FontBold: Smallint read Get_FontBold write Set_FontBold;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property ControlTipText: WideString read Get_ControlTipText write Set_ControlTipText;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property ColumnWidth: Smallint read Get_ColumnWidth write Set_ColumnWidth;
    property ColumnOrder: Smallint read Get_ColumnOrder write Set_ColumnOrder;
    property ColumnHidden: WordBool read Get_ColumnHidden write Set_ColumnHidden;
    property AutoLabel: WordBool read Get_AutoLabel write Set_AutoLabel;
    property AddColon: WordBool read Get_AddColon write Set_AddColon;
    property LabelX: Smallint read Get_LabelX write Set_LabelX;
    property LabelY: Smallint read Get_LabelY write Set_LabelY;
    property LabelAlign: Byte read Get_LabelAlign write Set_LabelAlign;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property Text: WideString read Get_Text write Set_Text;
    property SelText: WideString read Get_SelText write Set_SelText;
    property SelStart: Smallint read Get_SelStart write Set_SelStart;
    property SelLength: Smallint read Get_SelLength write Set_SelLength;
    property TextAlignGeneral: Smallint read Get_TextAlignGeneral write Set_TextAlignGeneral;
    property Coltyp: Integer read Get_Coltyp write Set_Coltyp;
    property FormatPictureText: WideString read Get_FormatPictureText write Set_FormatPictureText;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property BeforeUpdate: WideString read Get_BeforeUpdate write Set_BeforeUpdate;
    property AfterUpdate: WideString read Get_AfterUpdate write Set_AfterUpdate;
    property OnChange: WideString read Get_OnChange write Set_OnChange;
    property OnEnter: WideString read Get_OnEnter write Set_OnEnter;
    property OnExit: WideString read Get_OnExit write Set_OnExit;
    property OnGotFocus: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property ReadingOrder: Byte read Get_ReadingOrder write Set_ReadingOrder;
    property KeyboardLanguage: Byte read Get_KeyboardLanguage write Set_KeyboardLanguage;
    property AllowedText: Byte read Get_AllowedText write Set_AllowedText;
    property ScrollBarAlign: Byte read Get_ScrollBarAlign write Set_ScrollBarAlign;
    property NumeralShapes: Byte read Get_NumeralShapes write Set_NumeralShapes;
    property IMEMode: AcImeMode read Get_IMEMode write Set_IMEMode;
    property Name: WideString read Get_Name write Set_Name;
    property IMESentenceMode: AcImeSentenceMode read Get_IMESentenceMode write Set_IMESentenceMode;
    property LeftMargin: Smallint read Get_LeftMargin write Set_LeftMargin;
    property TopMargin: Smallint read Get_TopMargin write Set_TopMargin;
    property LineSpacing: Smallint read Get_LineSpacing write Set_LineSpacing;
    property RightMargin: Smallint read Get_RightMargin write Set_RightMargin;
    property BottomMargin: Smallint read Get_BottomMargin write Set_BottomMargin;
    property IsHyperlink: WordBool read Get_IsHyperlink write Set_IsHyperlink;
    property OnDirty: WideString read Get_OnDirty write Set_OnDirty;
    property OnUndo: WideString read Get_OnUndo write Set_OnUndo;
    property AsianLineBreak: WordBool read Get_AsianLineBreak write Set_AsianLineBreak;
    property SmartTags: _SmartTags read Get_SmartTags;
    property Layout: AcLayoutType read Get_Layout;
    property TextFormat: AcTextFormat read Get_TextFormat write Set_TextFormat;
    property LeftPadding: Smallint read Get_LeftPadding write Set_LeftPadding;
    property TopPadding: Smallint read Get_TopPadding write Set_TopPadding;
    property RightPadding: Smallint read Get_RightPadding write Set_RightPadding;
    property BottomPadding: Smallint read Get_BottomPadding write Set_BottomPadding;
    property GridlineStyleLeft: Byte read Get_GridlineStyleLeft write Set_GridlineStyleLeft;
    property GridlineStyleTop: Byte read Get_GridlineStyleTop write Set_GridlineStyleTop;
    property GridlineStyleRight: Byte read Get_GridlineStyleRight write Set_GridlineStyleRight;
    property GridlineStyleBottom: Byte read Get_GridlineStyleBottom write Set_GridlineStyleBottom;
    property GridlineWidthLeft: Byte read Get_GridlineWidthLeft write Set_GridlineWidthLeft;
    property GridlineWidthTop: Byte read Get_GridlineWidthTop write Set_GridlineWidthTop;
    property GridlineWidthRight: Byte read Get_GridlineWidthRight write Set_GridlineWidthRight;
    property GridlineWidthBottom: Byte read Get_GridlineWidthBottom write Set_GridlineWidthBottom;
    property GridlineColor: Integer read Get_GridlineColor write Set_GridlineColor;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
    property BeforeUpdateMacro: WideString read Get_BeforeUpdateMacro write Set_BeforeUpdateMacro;
    property AfterUpdateMacro: WideString read Get_AfterUpdateMacro write Set_AfterUpdateMacro;
    property OnChangeMacro: WideString read Get_OnChangeMacro write Set_OnChangeMacro;
    property OnEnterMacro: WideString read Get_OnEnterMacro write Set_OnEnterMacro;
    property OnExitMacro: WideString read Get_OnExitMacro write Set_OnExitMacro;
    property OnGotFocusMacro: WideString read Get_OnGotFocusMacro write Set_OnGotFocusMacro;
    property OnLostFocusMacro: WideString read Get_OnLostFocusMacro write Set_OnLostFocusMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property OnKeyDownMacro: WideString read Get_OnKeyDownMacro write Set_OnKeyDownMacro;
    property OnKeyUpMacro: WideString read Get_OnKeyUpMacro write Set_OnKeyUpMacro;
    property OnKeyPressMacro: WideString read Get_OnKeyPressMacro write Set_OnKeyPressMacro;
    property LayoutID: Integer read Get_LayoutID;
    property DisplayAsHyperlink: AcDisplayAsHyperlink read Get_DisplayAsHyperlink write Set_DisplayAsHyperlink;
    property ShowDatePicker: Smallint read Get_ShowDatePicker write Set_ShowDatePicker;
  end;

// *********************************************************************//
// DispIntf:  _TextboxDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E946-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _TextboxDisp = dispinterface
    ['{3B06E946-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    procedure Undo; dispid 2144;
    property OldValue: OleVariant readonly dispid 2102;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    procedure Requery; dispid 2018;
    procedure Goto_; dispid 2023;
    procedure SetFocus; dispid 2022;
    property Controls: Children readonly dispid 2190;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Hyperlink: _Hyperlink readonly dispid 2181;
    property FormatConditions: FormatConditions readonly dispid 2203;
    property Value: OleVariant dispid 0;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property ControlSource: WideString dispid 27;
    property Format: WideString dispid 38;
    property DecimalPlaces: Byte dispid 71;
    property InputMask: WideString dispid 72;
    property DefaultValue: WideString dispid 23;
    property IMEHold: WordBool dispid 357;
    property FuriganaControl: WideString dispid 359;
    property PostalAddress: WideString dispid 360;
    property ValidationRule: WideString dispid 145;
    property ValidationText: WideString dispid 61;
    property StatusBarText: WideString dispid 135;
    property EnterKeyBehavior: WordBool dispid 74;
    property AllowAutoCorrect: WordBool dispid 340;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Vertical: WordBool dispid 355;
    property FELineBreak: WordBool dispid 358;
    property Enabled: WordBool dispid 25;
    property Locked: WordBool dispid 56;
    property FilterLookup: Byte dispid 305;
    property AutoTab: WordBool dispid 73;
    property TabStop: WordBool dispid 262;
    property TabIndex: Smallint dispid 261;
    property ScrollBars: Byte dispid 152;
    property HideDuplicates: WordBool dispid 69;
    property CanGrow: WordBool dispid 14;
    property CanShrink: WordBool dispid 16;
    property RunningSum: Byte dispid 130;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property BackStyle: Byte dispid 29;
    property BackColor: Integer dispid 28;
    property SpecialEffect: Byte dispid 4;
    property BorderStyle: Byte dispid 9;
    property OldBorderStyle: Byte dispid 329;
    property BorderColor: Integer dispid 8;
    property BorderWidth: Byte dispid 10;
    property BorderLineStyle: Byte dispid 11;
    property ForeColor: Integer dispid 204;
    property FontName: WideString dispid 34;
    property FontSize: Smallint dispid 35;
    property FontWeight: Smallint dispid 37;
    property FontItalic: WordBool dispid 33;
    property FontUnderline: WordBool dispid 36;
    property TextFontCharSet: Byte dispid 193;
    property TextAlign: Byte dispid 136;
    property FontBold: Smallint dispid 32;
    property ShortcutMenuBar: WideString dispid 304;
    property ControlTipText: WideString dispid 317;
    property HelpContextId: Integer dispid 219;
    property ColumnWidth: Smallint dispid 166;
    property ColumnOrder: Smallint dispid 165;
    property ColumnHidden: WordBool dispid 167;
    property AutoLabel: WordBool dispid 57;
    property AddColon: WordBool dispid 3;
    property LabelX: Smallint dispid 52;
    property LabelY: Smallint dispid 53;
    property LabelAlign: Byte dispid 51;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property Text: WideString dispid 267;
    property SelText: WideString dispid 271;
    property SelStart: Smallint dispid 270;
    property SelLength: Smallint dispid 269;
    property TextAlignGeneral: Smallint dispid 137;
    property Coltyp: Integer dispid 139;
    property FormatPictureText: WideString dispid 138;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property BeforeUpdate: WideString dispid 85;
    property AfterUpdate: WideString dispid 86;
    property OnChange: WideString dispid 114;
    property OnEnter: WideString dispid 222;
    property OnExit: WideString dispid 223;
    property OnGotFocus: WideString dispid 115;
    property OnLostFocus: WideString dispid 116;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property OnKeyDown: WideString dispid 104;
    property OnKeyUp: WideString dispid 105;
    property OnKeyPress: WideString dispid 106;
    property ReadingOrder: Byte dispid 367;
    property KeyboardLanguage: Byte dispid 368;
    property AllowedText: Byte dispid 369;
    property ScrollBarAlign: Byte dispid 371;
    property NumeralShapes: Byte dispid 372;
    property IMEMode: AcImeMode dispid 356;
    property Name: WideString dispid -2147418112;
    property IMESentenceMode: AcImeSentenceMode dispid 379;
    property LeftMargin: Smallint dispid 384;
    property TopMargin: Smallint dispid 385;
    property LineSpacing: Smallint dispid 386;
    property RightMargin: Smallint dispid 388;
    property BottomMargin: Smallint dispid 389;
    property IsHyperlink: WordBool dispid 396;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    property OnDirty: WideString dispid 375;
    property OnUndo: WideString dispid 404;
    property AsianLineBreak: WordBool dispid 446;
    property SmartTags: _SmartTags readonly dispid 2445;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property Layout: AcLayoutType readonly dispid 2460;
    property TextFormat: AcTextFormat dispid 476;
    property LeftPadding: Smallint dispid 454;
    property TopPadding: Smallint dispid 455;
    property RightPadding: Smallint dispid 456;
    property BottomPadding: Smallint dispid 457;
    property GridlineStyleLeft: Byte dispid 458;
    property GridlineStyleTop: Byte dispid 459;
    property GridlineStyleRight: Byte dispid 460;
    property GridlineStyleBottom: Byte dispid 461;
    property GridlineWidthLeft: Byte dispid 463;
    property GridlineWidthTop: Byte dispid 464;
    property GridlineWidthRight: Byte dispid 465;
    property GridlineWidthBottom: Byte dispid 466;
    property GridlineColor: Integer dispid 462;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
    property BeforeUpdateMacro: WideString dispid 496;
    property AfterUpdateMacro: WideString dispid 505;
    property OnChangeMacro: WideString dispid 506;
    property OnEnterMacro: WideString dispid 497;
    property OnExitMacro: WideString dispid 498;
    property OnGotFocusMacro: WideString dispid 502;
    property OnLostFocusMacro: WideString dispid 503;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property OnKeyDownMacro: WideString dispid 500;
    property OnKeyUpMacro: WideString dispid 501;
    property OnKeyPressMacro: WideString dispid 499;
    property LayoutID: Integer readonly dispid 2492;
    property DisplayAsHyperlink: AcDisplayAsHyperlink dispid 591;
    property ShowDatePicker: Smallint dispid 486;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: _TextBoxEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4340-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _TextBoxEvents = interface(IUnknown)
    ['{BC9E4340-F037-11CD-8701-00AA003F0F07}']
    function BeforeUpdate(out Cancel: Smallint): HResult; stdcall;
    function AfterUpdate: HResult; stdcall;
    function Change: HResult; stdcall;
    function Enter: HResult; stdcall;
    function Exit(out Cancel: Smallint): HResult; stdcall;
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
    function Click: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function KeyDown(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function KeyPress(var KeyAscii: Smallint): HResult; stdcall;
    function KeyUp(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function Dirty(out Cancel: Smallint): HResult; stdcall;
    function Undo(out Cancel: Smallint): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispTextBoxEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E705275-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispTextBoxEvents = dispinterface
    ['{2E705275-92D1-43CC-A57B-ED48BCCC711D}']
    procedure BeforeUpdate(out Cancel: Smallint); dispid 2061;
    procedure AfterUpdate; dispid 2062;
    procedure Change; dispid 2077;
    procedure Enter; dispid 2019;
    procedure Exit(out Cancel: Smallint); dispid 2075;
    procedure GotFocus; dispid 2073;
    procedure LostFocus; dispid 2074;
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid -602;
    procedure KeyPress(var KeyAscii: Smallint); dispid -603;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid -604;
    procedure Dirty(out Cancel: Smallint); dispid 2205;
    procedure Undo(out Cancel: Smallint); dispid 2144;
  end;

// *********************************************************************//
// Interface: _ListBox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E95A-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _ListBox = interface(IAccessible)
    ['{3B06E95A-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    procedure Undo; safecall;
    function Get_Column(Index: Integer; Row: OleVariant): OleVariant; safecall;
    function Get_Selected(lRow: Integer): Integer; safecall;
    procedure Set_Selected(lRow: Integer; pRet: Integer); safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_ItemData(Index: Integer): OleVariant; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    procedure Requery; safecall;
    procedure Goto_; safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Children; safecall;
    function Get_ItemsSelected: _ItemsSelected; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Hyperlink: _Hyperlink; safecall;
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(pRet: OleVariant); safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_ControlSource: WideString; safecall;
    procedure Set_ControlSource(const pRet: WideString); safecall;
    function Get_RowSourceType: WideString; safecall;
    procedure Set_RowSourceType(const pRet: WideString); safecall;
    function Get_RowSource: WideString; safecall;
    procedure Set_RowSource(const pRet: WideString); safecall;
    function Get_ColumnCount: Smallint; safecall;
    procedure Set_ColumnCount(pRet: Smallint); safecall;
    function Get_ColumnHeads: WordBool; safecall;
    procedure Set_ColumnHeads(pRet: WordBool); safecall;
    function Get_ColumnWidths: WideString; safecall;
    procedure Set_ColumnWidths(const pRet: WideString); safecall;
    function Get_BoundColumn: Integer; safecall;
    procedure Set_BoundColumn(pRet: Integer); safecall;
    function Get_DefaultValue: WideString; safecall;
    procedure Set_DefaultValue(const pRet: WideString); safecall;
    function Get_IMEHold: WordBool; safecall;
    procedure Set_IMEHold(pRet: WordBool); safecall;
    function Get_ValidationRule: WideString; safecall;
    procedure Set_ValidationRule(const pRet: WideString); safecall;
    function Get_ValidationText: WideString; safecall;
    procedure Set_ValidationText(const pRet: WideString); safecall;
    function Get_StatusBarText: WideString; safecall;
    procedure Set_StatusBarText(const pRet: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRet: WordBool); safecall;
    function Get_Locked: WordBool; safecall;
    procedure Set_Locked(pRet: WordBool); safecall;
    function Get_MultiSelect: Byte; safecall;
    procedure Set_MultiSelect(pRet: Byte); safecall;
    function Get_TabStop: WordBool; safecall;
    procedure Set_TabStop(pRet: WordBool); safecall;
    function Get_TabIndex: Smallint; safecall;
    procedure Set_TabIndex(pRet: Smallint); safecall;
    function Get_HideDuplicates: WordBool; safecall;
    procedure Set_HideDuplicates(pRet: WordBool); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(pRet: Integer); safecall;
    function Get_SpecialEffect: Byte; safecall;
    procedure Set_SpecialEffect(pRet: Byte); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_OldBorderStyle: Byte; safecall;
    procedure Set_OldBorderStyle(pRet: Byte); safecall;
    function Get_BorderWidth: Byte; safecall;
    procedure Set_BorderWidth(pRet: Byte); safecall;
    function Get_BorderLineStyle: Byte; safecall;
    procedure Set_BorderLineStyle(pRet: Byte); safecall;
    function Get_BorderColor: Integer; safecall;
    procedure Set_BorderColor(pRet: Integer); safecall;
    function Get_ForeColor: Integer; safecall;
    procedure Set_ForeColor(pRet: Integer); safecall;
    function Get_FontName: WideString; safecall;
    procedure Set_FontName(const pRet: WideString); safecall;
    function Get_FontSize: Smallint; safecall;
    procedure Set_FontSize(pRet: Smallint); safecall;
    function Get_FontWeight: Smallint; safecall;
    procedure Set_FontWeight(pRet: Smallint); safecall;
    function Get_FontItalic: WordBool; safecall;
    procedure Set_FontItalic(pRet: WordBool); safecall;
    function Get_FontUnderline: WordBool; safecall;
    procedure Set_FontUnderline(pRet: WordBool); safecall;
    function Get_TextFontCharSet: Byte; safecall;
    procedure Set_TextFontCharSet(pRet: Byte); safecall;
    function Get_FontBold: Smallint; safecall;
    procedure Set_FontBold(pRet: Smallint); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_ControlTipText: WideString; safecall;
    procedure Set_ControlTipText(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_ColumnWidth: Smallint; safecall;
    procedure Set_ColumnWidth(pRet: Smallint); safecall;
    function Get_ColumnOrder: Smallint; safecall;
    procedure Set_ColumnOrder(pRet: Smallint); safecall;
    function Get_ColumnHidden: WordBool; safecall;
    procedure Set_ColumnHidden(pRet: WordBool); safecall;
    function Get_AutoLabel: WordBool; safecall;
    procedure Set_AutoLabel(pRet: WordBool); safecall;
    function Get_AddColon: WordBool; safecall;
    procedure Set_AddColon(pRet: WordBool); safecall;
    function Get_LabelX: Smallint; safecall;
    procedure Set_LabelX(pRet: Smallint); safecall;
    function Get_LabelY: Smallint; safecall;
    procedure Set_LabelY(pRet: Smallint); safecall;
    function Get_LabelAlign: Byte; safecall;
    procedure Set_LabelAlign(pRet: Byte); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_ListCount: Integer; safecall;
    procedure Set_ListCount(pRet: Integer); safecall;
    function Get_ListIndex: Integer; safecall;
    procedure Set_ListIndex(pRet: Integer); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_BeforeUpdate: WideString; safecall;
    procedure Set_BeforeUpdate(const pRet: WideString); safecall;
    function Get_AfterUpdate: WideString; safecall;
    procedure Set_AfterUpdate(const pRet: WideString); safecall;
    function Get_OnEnter: WideString; safecall;
    procedure Set_OnEnter(const pRet: WideString); safecall;
    function Get_OnExit: WideString; safecall;
    procedure Set_OnExit(const pRet: WideString); safecall;
    function Get_OnGotFocus: WideString; safecall;
    procedure Set_OnGotFocus(const pRet: WideString); safecall;
    function Get_OnLostFocus: WideString; safecall;
    procedure Set_OnLostFocus(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_OnKeyDown: WideString; safecall;
    procedure Set_OnKeyDown(const pRet: WideString); safecall;
    function Get_OnKeyUp: WideString; safecall;
    procedure Set_OnKeyUp(const pRet: WideString); safecall;
    function Get_OnKeyPress: WideString; safecall;
    procedure Set_OnKeyPress(const pRet: WideString); safecall;
    function Get_ReadingOrder: Byte; safecall;
    procedure Set_ReadingOrder(pRet: Byte); safecall;
    function Get_ScrollBarAlign: Byte; safecall;
    procedure Set_ScrollBarAlign(pRet: Byte); safecall;
    function Get_TextAlign: Byte; safecall;
    procedure Set_TextAlign(pRet: Byte); safecall;
    function Get_NumeralShapes: Byte; safecall;
    procedure Set_NumeralShapes(pRet: Byte); safecall;
    function Get_IMEMode: AcImeMode; safecall;
    procedure Set_IMEMode(pRet: AcImeMode); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    function Get_IMESentenceMode: AcImeSentenceMode; safecall;
    procedure Set_IMESentenceMode(pRet: AcImeSentenceMode); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function Get_Recordset: IDispatch; safecall;
    procedure _Set_Recordset(const pRet: IDispatch); safecall;
    procedure AddItem(const Item: WideString; Index: OleVariant); safecall;
    procedure RemoveItem(Index: OleVariant); safecall;
    function Get_SmartTags: _SmartTags; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_Layout: AcLayoutType; safecall;
    function Get_LeftPadding: Smallint; safecall;
    procedure Set_LeftPadding(pRet: Smallint); safecall;
    function Get_TopPadding: Smallint; safecall;
    procedure Set_TopPadding(pRet: Smallint); safecall;
    function Get_RightPadding: Smallint; safecall;
    procedure Set_RightPadding(pRet: Smallint); safecall;
    function Get_BottomPadding: Smallint; safecall;
    procedure Set_BottomPadding(pRet: Smallint); safecall;
    function Get_GridlineStyleLeft: Byte; safecall;
    procedure Set_GridlineStyleLeft(pRet: Byte); safecall;
    function Get_GridlineStyleTop: Byte; safecall;
    procedure Set_GridlineStyleTop(pRet: Byte); safecall;
    function Get_GridlineStyleRight: Byte; safecall;
    procedure Set_GridlineStyleRight(pRet: Byte); safecall;
    function Get_GridlineStyleBottom: Byte; safecall;
    procedure Set_GridlineStyleBottom(pRet: Byte); safecall;
    function Get_GridlineWidthLeft: Byte; safecall;
    procedure Set_GridlineWidthLeft(pRet: Byte); safecall;
    function Get_GridlineWidthTop: Byte; safecall;
    procedure Set_GridlineWidthTop(pRet: Byte); safecall;
    function Get_GridlineWidthRight: Byte; safecall;
    procedure Set_GridlineWidthRight(pRet: Byte); safecall;
    function Get_GridlineWidthBottom: Byte; safecall;
    procedure Set_GridlineWidthBottom(pRet: Byte); safecall;
    function Get_GridlineColor: Integer; safecall;
    procedure Set_GridlineColor(pRet: Integer); safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    function Get_BeforeUpdateMacro: WideString; safecall;
    procedure Set_BeforeUpdateMacro(const pRet: WideString); safecall;
    function Get_AfterUpdateMacro: WideString; safecall;
    procedure Set_AfterUpdateMacro(const pRet: WideString); safecall;
    function Get_OnEnterMacro: WideString; safecall;
    procedure Set_OnEnterMacro(const pRet: WideString); safecall;
    function Get_OnExitMacro: WideString; safecall;
    procedure Set_OnExitMacro(const pRet: WideString); safecall;
    function Get_OnGotFocusMacro: WideString; safecall;
    procedure Set_OnGotFocusMacro(const pRet: WideString); safecall;
    function Get_OnLostFocusMacro: WideString; safecall;
    procedure Set_OnLostFocusMacro(const pRet: WideString); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyDownMacro: WideString; safecall;
    procedure Set_OnKeyDownMacro(const pRet: WideString); safecall;
    function Get_OnKeyUpMacro: WideString; safecall;
    procedure Set_OnKeyUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyPressMacro: WideString; safecall;
    procedure Set_OnKeyPressMacro(const pRet: WideString); safecall;
    function Get_AllowValueListEdits: WordBool; safecall;
    procedure Set_AllowValueListEdits(pRet: WordBool); safecall;
    function Get_ListItemsEditForm: WideString; safecall;
    procedure Set_ListItemsEditForm(const pRet: WideString); safecall;
    function Get_InheritValueList: WordBool; safecall;
    procedure Set_InheritValueList(pRet: WordBool); safecall;
    function Get_LayoutID: Integer; safecall;
    function Get_ShowOnlyRowSourceValues: WordBool; safecall;
    procedure Set_ShowOnlyRowSourceValues(pRet: WordBool); safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Column[Index: Integer; Row: OleVariant]: OleVariant read Get_Column;
    property Selected[lRow: Integer]: Integer read Get_Selected write Set_Selected;
    property OldValue: OleVariant read Get_OldValue;
    property ItemData[Index: Integer]: OleVariant read Get_ItemData;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property ItemsSelected: _ItemsSelected read Get_ItemsSelected;
    property Hyperlink: _Hyperlink read Get_Hyperlink;
    property Value: OleVariant read Get_Value write Set_Value;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property ControlSource: WideString read Get_ControlSource write Set_ControlSource;
    property RowSourceType: WideString read Get_RowSourceType write Set_RowSourceType;
    property RowSource: WideString read Get_RowSource write Set_RowSource;
    property ColumnCount: Smallint read Get_ColumnCount write Set_ColumnCount;
    property ColumnHeads: WordBool read Get_ColumnHeads write Set_ColumnHeads;
    property ColumnWidths: WideString read Get_ColumnWidths write Set_ColumnWidths;
    property BoundColumn: Integer read Get_BoundColumn write Set_BoundColumn;
    property DefaultValue: WideString read Get_DefaultValue write Set_DefaultValue;
    property IMEHold: WordBool read Get_IMEHold write Set_IMEHold;
    property ValidationRule: WideString read Get_ValidationRule write Set_ValidationRule;
    property ValidationText: WideString read Get_ValidationText write Set_ValidationText;
    property StatusBarText: WideString read Get_StatusBarText write Set_StatusBarText;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Locked: WordBool read Get_Locked write Set_Locked;
    property MultiSelect: Byte read Get_MultiSelect write Set_MultiSelect;
    property TabStop: WordBool read Get_TabStop write Set_TabStop;
    property TabIndex: Smallint read Get_TabIndex write Set_TabIndex;
    property HideDuplicates: WordBool read Get_HideDuplicates write Set_HideDuplicates;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property SpecialEffect: Byte read Get_SpecialEffect write Set_SpecialEffect;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property OldBorderStyle: Byte read Get_OldBorderStyle write Set_OldBorderStyle;
    property BorderWidth: Byte read Get_BorderWidth write Set_BorderWidth;
    property BorderLineStyle: Byte read Get_BorderLineStyle write Set_BorderLineStyle;
    property BorderColor: Integer read Get_BorderColor write Set_BorderColor;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property FontName: WideString read Get_FontName write Set_FontName;
    property FontSize: Smallint read Get_FontSize write Set_FontSize;
    property FontWeight: Smallint read Get_FontWeight write Set_FontWeight;
    property FontItalic: WordBool read Get_FontItalic write Set_FontItalic;
    property FontUnderline: WordBool read Get_FontUnderline write Set_FontUnderline;
    property TextFontCharSet: Byte read Get_TextFontCharSet write Set_TextFontCharSet;
    property FontBold: Smallint read Get_FontBold write Set_FontBold;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property ControlTipText: WideString read Get_ControlTipText write Set_ControlTipText;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property ColumnWidth: Smallint read Get_ColumnWidth write Set_ColumnWidth;
    property ColumnOrder: Smallint read Get_ColumnOrder write Set_ColumnOrder;
    property ColumnHidden: WordBool read Get_ColumnHidden write Set_ColumnHidden;
    property AutoLabel: WordBool read Get_AutoLabel write Set_AutoLabel;
    property AddColon: WordBool read Get_AddColon write Set_AddColon;
    property LabelX: Smallint read Get_LabelX write Set_LabelX;
    property LabelY: Smallint read Get_LabelY write Set_LabelY;
    property LabelAlign: Byte read Get_LabelAlign write Set_LabelAlign;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property ListCount: Integer read Get_ListCount write Set_ListCount;
    property ListIndex: Integer read Get_ListIndex write Set_ListIndex;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property BeforeUpdate: WideString read Get_BeforeUpdate write Set_BeforeUpdate;
    property AfterUpdate: WideString read Get_AfterUpdate write Set_AfterUpdate;
    property OnEnter: WideString read Get_OnEnter write Set_OnEnter;
    property OnExit: WideString read Get_OnExit write Set_OnExit;
    property OnGotFocus: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property ReadingOrder: Byte read Get_ReadingOrder write Set_ReadingOrder;
    property ScrollBarAlign: Byte read Get_ScrollBarAlign write Set_ScrollBarAlign;
    property TextAlign: Byte read Get_TextAlign write Set_TextAlign;
    property NumeralShapes: Byte read Get_NumeralShapes write Set_NumeralShapes;
    property IMEMode: AcImeMode read Get_IMEMode write Set_IMEMode;
    property Name: WideString read Get_Name write Set_Name;
    property IMESentenceMode: AcImeSentenceMode read Get_IMESentenceMode write Set_IMESentenceMode;
    property Recordset: IDispatch read Get_Recordset write _Set_Recordset;
    property SmartTags: _SmartTags read Get_SmartTags;
    property Layout: AcLayoutType read Get_Layout;
    property LeftPadding: Smallint read Get_LeftPadding write Set_LeftPadding;
    property TopPadding: Smallint read Get_TopPadding write Set_TopPadding;
    property RightPadding: Smallint read Get_RightPadding write Set_RightPadding;
    property BottomPadding: Smallint read Get_BottomPadding write Set_BottomPadding;
    property GridlineStyleLeft: Byte read Get_GridlineStyleLeft write Set_GridlineStyleLeft;
    property GridlineStyleTop: Byte read Get_GridlineStyleTop write Set_GridlineStyleTop;
    property GridlineStyleRight: Byte read Get_GridlineStyleRight write Set_GridlineStyleRight;
    property GridlineStyleBottom: Byte read Get_GridlineStyleBottom write Set_GridlineStyleBottom;
    property GridlineWidthLeft: Byte read Get_GridlineWidthLeft write Set_GridlineWidthLeft;
    property GridlineWidthTop: Byte read Get_GridlineWidthTop write Set_GridlineWidthTop;
    property GridlineWidthRight: Byte read Get_GridlineWidthRight write Set_GridlineWidthRight;
    property GridlineWidthBottom: Byte read Get_GridlineWidthBottom write Set_GridlineWidthBottom;
    property GridlineColor: Integer read Get_GridlineColor write Set_GridlineColor;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
    property BeforeUpdateMacro: WideString read Get_BeforeUpdateMacro write Set_BeforeUpdateMacro;
    property AfterUpdateMacro: WideString read Get_AfterUpdateMacro write Set_AfterUpdateMacro;
    property OnEnterMacro: WideString read Get_OnEnterMacro write Set_OnEnterMacro;
    property OnExitMacro: WideString read Get_OnExitMacro write Set_OnExitMacro;
    property OnGotFocusMacro: WideString read Get_OnGotFocusMacro write Set_OnGotFocusMacro;
    property OnLostFocusMacro: WideString read Get_OnLostFocusMacro write Set_OnLostFocusMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property OnKeyDownMacro: WideString read Get_OnKeyDownMacro write Set_OnKeyDownMacro;
    property OnKeyUpMacro: WideString read Get_OnKeyUpMacro write Set_OnKeyUpMacro;
    property OnKeyPressMacro: WideString read Get_OnKeyPressMacro write Set_OnKeyPressMacro;
    property AllowValueListEdits: WordBool read Get_AllowValueListEdits write Set_AllowValueListEdits;
    property ListItemsEditForm: WideString read Get_ListItemsEditForm write Set_ListItemsEditForm;
    property InheritValueList: WordBool read Get_InheritValueList write Set_InheritValueList;
    property LayoutID: Integer read Get_LayoutID;
    property ShowOnlyRowSourceValues: WordBool read Get_ShowOnlyRowSourceValues write Set_ShowOnlyRowSourceValues;
  end;

// *********************************************************************//
// DispIntf:  _ListBoxDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E95A-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _ListBoxDisp = dispinterface
    ['{3B06E95A-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    procedure Undo; dispid 2144;
    property Column[Index: Integer; Row: OleVariant]: OleVariant readonly dispid 2101;
    property Selected[lRow: Integer]: Integer dispid 2113;
    property OldValue: OleVariant readonly dispid 2102;
    property ItemData[Index: Integer]: OleVariant readonly dispid 2103;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    procedure Requery; dispid 2018;
    procedure Goto_; dispid 2023;
    procedure SetFocus; dispid 2022;
    property Controls: Children readonly dispid 2190;
    property ItemsSelected: _ItemsSelected readonly dispid 2137;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Hyperlink: _Hyperlink readonly dispid 2181;
    property Value: OleVariant dispid 0;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property ControlSource: WideString dispid 27;
    property RowSourceType: WideString dispid 93;
    property RowSource: WideString dispid 91;
    property ColumnCount: Smallint dispid 70;
    property ColumnHeads: WordBool dispid 131;
    property ColumnWidths: WideString dispid 18;
    property BoundColumn: Integer dispid 13;
    property DefaultValue: WideString dispid 23;
    property IMEHold: WordBool dispid 357;
    property ValidationRule: WideString dispid 145;
    property ValidationText: WideString dispid 61;
    property StatusBarText: WideString dispid 135;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Enabled: WordBool dispid 25;
    property Locked: WordBool dispid 56;
    property MultiSelect: Byte dispid 293;
    property TabStop: WordBool dispid 262;
    property TabIndex: Smallint dispid 261;
    property HideDuplicates: WordBool dispid 69;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property BackColor: Integer dispid 28;
    property SpecialEffect: Byte dispid 4;
    property BorderStyle: Byte dispid 9;
    property OldBorderStyle: Byte dispid 329;
    property BorderWidth: Byte dispid 10;
    property BorderLineStyle: Byte dispid 11;
    property BorderColor: Integer dispid 8;
    property ForeColor: Integer dispid 204;
    property FontName: WideString dispid 34;
    property FontSize: Smallint dispid 35;
    property FontWeight: Smallint dispid 37;
    property FontItalic: WordBool dispid 33;
    property FontUnderline: WordBool dispid 36;
    property TextFontCharSet: Byte dispid 193;
    property FontBold: Smallint dispid 32;
    property ShortcutMenuBar: WideString dispid 304;
    property ControlTipText: WideString dispid 317;
    property HelpContextId: Integer dispid 219;
    property ColumnWidth: Smallint dispid 166;
    property ColumnOrder: Smallint dispid 165;
    property ColumnHidden: WordBool dispid 167;
    property AutoLabel: WordBool dispid 57;
    property AddColon: WordBool dispid 3;
    property LabelX: Smallint dispid 52;
    property LabelY: Smallint dispid 53;
    property LabelAlign: Byte dispid 51;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property ListCount: Integer dispid 238;
    property ListIndex: Integer dispid 239;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property BeforeUpdate: WideString dispid 85;
    property AfterUpdate: WideString dispid 86;
    property OnEnter: WideString dispid 222;
    property OnExit: WideString dispid 223;
    property OnGotFocus: WideString dispid 115;
    property OnLostFocus: WideString dispid 116;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property OnKeyDown: WideString dispid 104;
    property OnKeyUp: WideString dispid 105;
    property OnKeyPress: WideString dispid 106;
    property ReadingOrder: Byte dispid 367;
    property ScrollBarAlign: Byte dispid 371;
    property TextAlign: Byte dispid 136;
    property NumeralShapes: Byte dispid 372;
    property IMEMode: AcImeMode dispid 356;
    property Name: WideString dispid -2147418112;
    property IMESentenceMode: AcImeSentenceMode dispid 379;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    property Recordset: IDispatch dispid 2196;
    procedure AddItem(const Item: WideString; Index: OleVariant); dispid 2380;
    procedure RemoveItem(Index: OleVariant); dispid 2381;
    property SmartTags: _SmartTags readonly dispid 2445;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property Layout: AcLayoutType readonly dispid 2460;
    property LeftPadding: Smallint dispid 454;
    property TopPadding: Smallint dispid 455;
    property RightPadding: Smallint dispid 456;
    property BottomPadding: Smallint dispid 457;
    property GridlineStyleLeft: Byte dispid 458;
    property GridlineStyleTop: Byte dispid 459;
    property GridlineStyleRight: Byte dispid 460;
    property GridlineStyleBottom: Byte dispid 461;
    property GridlineWidthLeft: Byte dispid 463;
    property GridlineWidthTop: Byte dispid 464;
    property GridlineWidthRight: Byte dispid 465;
    property GridlineWidthBottom: Byte dispid 466;
    property GridlineColor: Integer dispid 462;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
    property BeforeUpdateMacro: WideString dispid 496;
    property AfterUpdateMacro: WideString dispid 505;
    property OnEnterMacro: WideString dispid 497;
    property OnExitMacro: WideString dispid 498;
    property OnGotFocusMacro: WideString dispid 502;
    property OnLostFocusMacro: WideString dispid 503;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property OnKeyDownMacro: WideString dispid 500;
    property OnKeyUpMacro: WideString dispid 501;
    property OnKeyPressMacro: WideString dispid 499;
    property AllowValueListEdits: WordBool dispid 556;
    property ListItemsEditForm: WideString dispid 557;
    property InheritValueList: WordBool dispid 568;
    property LayoutID: Integer readonly dispid 2492;
    property ShowOnlyRowSourceValues: WordBool dispid 579;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: _ListBoxEvents
// Flags:     (16) Hidden
// GUID:      {BC9E434B-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _ListBoxEvents = interface(IUnknown)
    ['{BC9E434B-F037-11CD-8701-00AA003F0F07}']
    function BeforeUpdate(out Cancel: Smallint): HResult; stdcall;
    function AfterUpdate: HResult; stdcall;
    function Enter: HResult; stdcall;
    function Exit(out Cancel: Smallint): HResult; stdcall;
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
    function Click: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function KeyDown(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function KeyPress(var KeyAscii: Smallint): HResult; stdcall;
    function KeyUp(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispListBoxEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E705273-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispListBoxEvents = dispinterface
    ['{2E705273-92D1-43CC-A57B-ED48BCCC711D}']
    procedure BeforeUpdate(out Cancel: Smallint); dispid 2061;
    procedure AfterUpdate; dispid 2062;
    procedure Enter; dispid 2019;
    procedure Exit(out Cancel: Smallint); dispid 2075;
    procedure GotFocus; dispid 2073;
    procedure LostFocus; dispid 2074;
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid -602;
    procedure KeyPress(var KeyAscii: Smallint); dispid -603;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid -604;
  end;

// *********************************************************************//
// Interface: _Combobox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E95C-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _Combobox = interface(IAccessible)
    ['{3B06E95C-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    procedure Undo; safecall;
    procedure Dropdown; safecall;
    function Get_Column(Index: Integer; Row: OleVariant): OleVariant; safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_ItemData(Index: Integer): OleVariant; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    procedure Requery; safecall;
    procedure Goto_; safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Children; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Hyperlink: _Hyperlink; safecall;
    function Get_FormatConditions: FormatConditions; safecall;
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(pRet: OleVariant); safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_ControlSource: WideString; safecall;
    procedure Set_ControlSource(const pRet: WideString); safecall;
    function Get_Format: WideString; safecall;
    procedure Set_Format(const pRet: WideString); safecall;
    function Get_DecimalPlaces: Byte; safecall;
    procedure Set_DecimalPlaces(pRet: Byte); safecall;
    function Get_InputMask: WideString; safecall;
    procedure Set_InputMask(const pRet: WideString); safecall;
    function Get_RowSourceType: WideString; safecall;
    procedure Set_RowSourceType(const pRet: WideString); safecall;
    function Get_RowSource: WideString; safecall;
    procedure Set_RowSource(const pRet: WideString); safecall;
    function Get_ColumnCount: Smallint; safecall;
    procedure Set_ColumnCount(pRet: Smallint); safecall;
    function Get_ColumnHeads: WordBool; safecall;
    procedure Set_ColumnHeads(pRet: WordBool); safecall;
    function Get_ColumnWidths: WideString; safecall;
    procedure Set_ColumnWidths(const pRet: WideString); safecall;
    function Get_BoundColumn: Integer; safecall;
    procedure Set_BoundColumn(pRet: Integer); safecall;
    function Get_ListRows: Smallint; safecall;
    procedure Set_ListRows(pRet: Smallint); safecall;
    function Get_ListWidth: WideString; safecall;
    procedure Set_ListWidth(const pRet: WideString); safecall;
    function Get_StatusBarText: WideString; safecall;
    procedure Set_StatusBarText(const pRet: WideString); safecall;
    function Get_LimitToList: WordBool; safecall;
    procedure Set_LimitToList(pRet: WordBool); safecall;
    function Get_AutoExpand: WordBool; safecall;
    procedure Set_AutoExpand(pRet: WordBool); safecall;
    function Get_DefaultValue: WideString; safecall;
    procedure Set_DefaultValue(const pRet: WideString); safecall;
    function Get_IMEHold: WordBool; safecall;
    procedure Set_IMEHold(pRet: WordBool); safecall;
    function Get_ValidationRule: WideString; safecall;
    procedure Set_ValidationRule(const pRet: WideString); safecall;
    function Get_ValidationText: WideString; safecall;
    procedure Set_ValidationText(const pRet: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRet: WordBool); safecall;
    function Get_Locked: WordBool; safecall;
    procedure Set_Locked(pRet: WordBool); safecall;
    function Get_AllowAutoCorrect: WordBool; safecall;
    procedure Set_AllowAutoCorrect(pRet: WordBool); safecall;
    function Get_TabStop: WordBool; safecall;
    procedure Set_TabStop(pRet: WordBool); safecall;
    function Get_TabIndex: Smallint; safecall;
    procedure Set_TabIndex(pRet: Smallint); safecall;
    function Get_HideDuplicates: WordBool; safecall;
    procedure Set_HideDuplicates(pRet: WordBool); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_BackStyle: Byte; safecall;
    procedure Set_BackStyle(pRet: Byte); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(pRet: Integer); safecall;
    function Get_SpecialEffect: Byte; safecall;
    procedure Set_SpecialEffect(pRet: Byte); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_OldBorderStyle: Byte; safecall;
    procedure Set_OldBorderStyle(pRet: Byte); safecall;
    function Get_BorderColor: Integer; safecall;
    procedure Set_BorderColor(pRet: Integer); safecall;
    function Get_BorderWidth: Byte; safecall;
    procedure Set_BorderWidth(pRet: Byte); safecall;
    function Get_BorderLineStyle: Byte; safecall;
    procedure Set_BorderLineStyle(pRet: Byte); safecall;
    function Get_ForeColor: Integer; safecall;
    procedure Set_ForeColor(pRet: Integer); safecall;
    function Get_FontName: WideString; safecall;
    procedure Set_FontName(const pRet: WideString); safecall;
    function Get_FontSize: Smallint; safecall;
    procedure Set_FontSize(pRet: Smallint); safecall;
    function Get_FontWeight: Smallint; safecall;
    procedure Set_FontWeight(pRet: Smallint); safecall;
    function Get_FontItalic: WordBool; safecall;
    procedure Set_FontItalic(pRet: WordBool); safecall;
    function Get_FontUnderline: WordBool; safecall;
    procedure Set_FontUnderline(pRet: WordBool); safecall;
    function Get_TextFontCharSet: Byte; safecall;
    procedure Set_TextFontCharSet(pRet: Byte); safecall;
    function Get_TextAlign: Byte; safecall;
    procedure Set_TextAlign(pRet: Byte); safecall;
    function Get_FontBold: Smallint; safecall;
    procedure Set_FontBold(pRet: Smallint); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_ControlTipText: WideString; safecall;
    procedure Set_ControlTipText(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_ColumnWidth: Smallint; safecall;
    procedure Set_ColumnWidth(pRet: Smallint); safecall;
    function Get_ColumnOrder: Smallint; safecall;
    procedure Set_ColumnOrder(pRet: Smallint); safecall;
    function Get_ColumnHidden: WordBool; safecall;
    procedure Set_ColumnHidden(pRet: WordBool); safecall;
    function Get_AutoLabel: WordBool; safecall;
    procedure Set_AutoLabel(pRet: WordBool); safecall;
    function Get_AddColon: WordBool; safecall;
    procedure Set_AddColon(pRet: WordBool); safecall;
    function Get_LabelX: Smallint; safecall;
    procedure Set_LabelX(pRet: Smallint); safecall;
    function Get_LabelY: Smallint; safecall;
    procedure Set_LabelY(pRet: Smallint); safecall;
    function Get_LabelAlign: Byte; safecall;
    procedure Set_LabelAlign(pRet: Byte); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const pRet: WideString); safecall;
    function Get_SelText: WideString; safecall;
    procedure Set_SelText(const pRet: WideString); safecall;
    function Get_SelStart: Smallint; safecall;
    procedure Set_SelStart(pRet: Smallint); safecall;
    function Get_SelLength: Smallint; safecall;
    procedure Set_SelLength(pRet: Smallint); safecall;
    function Get_TextAlignGeneral: Smallint; safecall;
    procedure Set_TextAlignGeneral(pRet: Smallint); safecall;
    function Get_FormatPictureText: WideString; safecall;
    procedure Set_FormatPictureText(const pRet: WideString); safecall;
    function Get_Coltyp: Integer; safecall;
    procedure Set_Coltyp(pRet: Integer); safecall;
    function Get_ListCount: Integer; safecall;
    procedure Set_ListCount(pRet: Integer); safecall;
    function Get_ListIndex: Integer; safecall;
    procedure Set_ListIndex(pRet: Integer); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_BeforeUpdate: WideString; safecall;
    procedure Set_BeforeUpdate(const pRet: WideString); safecall;
    function Get_AfterUpdate: WideString; safecall;
    procedure Set_AfterUpdate(const pRet: WideString); safecall;
    function Get_OnChange: WideString; safecall;
    procedure Set_OnChange(const pRet: WideString); safecall;
    function Get_OnNotInList: WideString; safecall;
    procedure Set_OnNotInList(const pRet: WideString); safecall;
    function Get_OnEnter: WideString; safecall;
    procedure Set_OnEnter(const pRet: WideString); safecall;
    function Get_OnExit: WideString; safecall;
    procedure Set_OnExit(const pRet: WideString); safecall;
    function Get_OnGotFocus: WideString; safecall;
    procedure Set_OnGotFocus(const pRet: WideString); safecall;
    function Get_OnLostFocus: WideString; safecall;
    procedure Set_OnLostFocus(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_OnKeyDown: WideString; safecall;
    procedure Set_OnKeyDown(const pRet: WideString); safecall;
    function Get_OnKeyUp: WideString; safecall;
    procedure Set_OnKeyUp(const pRet: WideString); safecall;
    function Get_OnKeyPress: WideString; safecall;
    procedure Set_OnKeyPress(const pRet: WideString); safecall;
    function Get_ReadingOrder: Byte; safecall;
    procedure Set_ReadingOrder(pRet: Byte); safecall;
    function Get_KeyboardLanguage: Byte; safecall;
    procedure Set_KeyboardLanguage(pRet: Byte); safecall;
    function Get_AllowedText: Byte; safecall;
    procedure Set_AllowedText(pRet: Byte); safecall;
    function Get_ScrollBarAlign: Byte; safecall;
    procedure Set_ScrollBarAlign(pRet: Byte); safecall;
    function Get_NumeralShapes: Byte; safecall;
    procedure Set_NumeralShapes(pRet: Byte); safecall;
    function Get_IMEMode: AcImeMode; safecall;
    procedure Set_IMEMode(pRet: AcImeMode); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    function Get_IMESentenceMode: AcImeSentenceMode; safecall;
    procedure Set_IMESentenceMode(pRet: AcImeSentenceMode); safecall;
    function Get_IsHyperlink: WordBool; safecall;
    procedure Set_IsHyperlink(pRet: WordBool); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function Get_OnDirty: WideString; safecall;
    procedure Set_OnDirty(const pRet: WideString); safecall;
    function Get_OnUndo: WideString; safecall;
    procedure Set_OnUndo(const pRet: WideString); safecall;
    function Get_Recordset: IDispatch; safecall;
    procedure _Set_Recordset(const pRet: IDispatch); safecall;
    procedure AddItem(const Item: WideString; Index: OleVariant); safecall;
    procedure RemoveItem(Index: OleVariant); safecall;
    function Get_SmartTags: _SmartTags; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_Layout: AcLayoutType; safecall;
    function Get_LeftPadding: Smallint; safecall;
    procedure Set_LeftPadding(pRet: Smallint); safecall;
    function Get_TopPadding: Smallint; safecall;
    procedure Set_TopPadding(pRet: Smallint); safecall;
    function Get_RightPadding: Smallint; safecall;
    procedure Set_RightPadding(pRet: Smallint); safecall;
    function Get_BottomPadding: Smallint; safecall;
    procedure Set_BottomPadding(pRet: Smallint); safecall;
    function Get_GridlineStyleLeft: Byte; safecall;
    procedure Set_GridlineStyleLeft(pRet: Byte); safecall;
    function Get_GridlineStyleTop: Byte; safecall;
    procedure Set_GridlineStyleTop(pRet: Byte); safecall;
    function Get_GridlineStyleRight: Byte; safecall;
    procedure Set_GridlineStyleRight(pRet: Byte); safecall;
    function Get_GridlineStyleBottom: Byte; safecall;
    procedure Set_GridlineStyleBottom(pRet: Byte); safecall;
    function Get_GridlineWidthLeft: Byte; safecall;
    procedure Set_GridlineWidthLeft(pRet: Byte); safecall;
    function Get_GridlineWidthTop: Byte; safecall;
    procedure Set_GridlineWidthTop(pRet: Byte); safecall;
    function Get_GridlineWidthRight: Byte; safecall;
    procedure Set_GridlineWidthRight(pRet: Byte); safecall;
    function Get_GridlineWidthBottom: Byte; safecall;
    procedure Set_GridlineWidthBottom(pRet: Byte); safecall;
    function Get_GridlineColor: Integer; safecall;
    procedure Set_GridlineColor(pRet: Integer); safecall;
    function Get_Selected(lRow: Integer): Integer; safecall;
    procedure Set_Selected(lRow: Integer; pRet: Integer); safecall;
    function Get_ItemsSelected: _ItemsSelected; safecall;
    function Get_CanGrow: WordBool; safecall;
    procedure Set_CanGrow(pRet: WordBool); safecall;
    function Get_CanShrink: WordBool; safecall;
    procedure Set_CanShrink(pRet: WordBool); safecall;
    function Get_SeparatorCharacters: AcSeparatorCharacters; safecall;
    procedure Set_SeparatorCharacters(pRet: AcSeparatorCharacters); safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    function Get_BeforeUpdateMacro: WideString; safecall;
    procedure Set_BeforeUpdateMacro(const pRet: WideString); safecall;
    function Get_AfterUpdateMacro: WideString; safecall;
    procedure Set_AfterUpdateMacro(const pRet: WideString); safecall;
    function Get_OnChangeMacro: WideString; safecall;
    procedure Set_OnChangeMacro(const pRet: WideString); safecall;
    function Get_OnNotInListMacro: WideString; safecall;
    procedure Set_OnNotInListMacro(const pRet: WideString); safecall;
    function Get_OnEnterMacro: WideString; safecall;
    procedure Set_OnEnterMacro(const pRet: WideString); safecall;
    function Get_OnExitMacro: WideString; safecall;
    procedure Set_OnExitMacro(const pRet: WideString); safecall;
    function Get_OnGotFocusMacro: WideString; safecall;
    procedure Set_OnGotFocusMacro(const pRet: WideString); safecall;
    function Get_OnLostFocusMacro: WideString; safecall;
    procedure Set_OnLostFocusMacro(const pRet: WideString); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyDownMacro: WideString; safecall;
    procedure Set_OnKeyDownMacro(const pRet: WideString); safecall;
    function Get_OnKeyUpMacro: WideString; safecall;
    procedure Set_OnKeyUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyPressMacro: WideString; safecall;
    procedure Set_OnKeyPressMacro(const pRet: WideString); safecall;
    function Get_AllowValueListEdits: WordBool; safecall;
    procedure Set_AllowValueListEdits(pRet: WordBool); safecall;
    function Get_ListItemsEditForm: WideString; safecall;
    procedure Set_ListItemsEditForm(const pRet: WideString); safecall;
    function Get_InheritValueList: WordBool; safecall;
    procedure Set_InheritValueList(pRet: WordBool); safecall;
    function Get_LeftMargin: Smallint; safecall;
    procedure Set_LeftMargin(pRet: Smallint); safecall;
    function Get_TopMargin: Smallint; safecall;
    procedure Set_TopMargin(pRet: Smallint); safecall;
    function Get_RightMargin: Smallint; safecall;
    procedure Set_RightMargin(pRet: Smallint); safecall;
    function Get_BottomMargin: Smallint; safecall;
    procedure Set_BottomMargin(pRet: Smallint); safecall;
    function Get_LayoutID: Integer; safecall;
    function Get_ShowOnlyRowSourceValues: WordBool; safecall;
    procedure Set_ShowOnlyRowSourceValues(pRet: WordBool); safecall;
    function Get_DisplayAsHyperlink: AcDisplayAsHyperlink; safecall;
    procedure Set_DisplayAsHyperlink(pRet: AcDisplayAsHyperlink); safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Column[Index: Integer; Row: OleVariant]: OleVariant read Get_Column;
    property OldValue: OleVariant read Get_OldValue;
    property ItemData[Index: Integer]: OleVariant read Get_ItemData;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Hyperlink: _Hyperlink read Get_Hyperlink;
    property FormatConditions: FormatConditions read Get_FormatConditions;
    property Value: OleVariant read Get_Value write Set_Value;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property ControlSource: WideString read Get_ControlSource write Set_ControlSource;
    property Format: WideString read Get_Format write Set_Format;
    property DecimalPlaces: Byte read Get_DecimalPlaces write Set_DecimalPlaces;
    property InputMask: WideString read Get_InputMask write Set_InputMask;
    property RowSourceType: WideString read Get_RowSourceType write Set_RowSourceType;
    property RowSource: WideString read Get_RowSource write Set_RowSource;
    property ColumnCount: Smallint read Get_ColumnCount write Set_ColumnCount;
    property ColumnHeads: WordBool read Get_ColumnHeads write Set_ColumnHeads;
    property ColumnWidths: WideString read Get_ColumnWidths write Set_ColumnWidths;
    property BoundColumn: Integer read Get_BoundColumn write Set_BoundColumn;
    property ListRows: Smallint read Get_ListRows write Set_ListRows;
    property ListWidth: WideString read Get_ListWidth write Set_ListWidth;
    property StatusBarText: WideString read Get_StatusBarText write Set_StatusBarText;
    property LimitToList: WordBool read Get_LimitToList write Set_LimitToList;
    property AutoExpand: WordBool read Get_AutoExpand write Set_AutoExpand;
    property DefaultValue: WideString read Get_DefaultValue write Set_DefaultValue;
    property IMEHold: WordBool read Get_IMEHold write Set_IMEHold;
    property ValidationRule: WideString read Get_ValidationRule write Set_ValidationRule;
    property ValidationText: WideString read Get_ValidationText write Set_ValidationText;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Locked: WordBool read Get_Locked write Set_Locked;
    property AllowAutoCorrect: WordBool read Get_AllowAutoCorrect write Set_AllowAutoCorrect;
    property TabStop: WordBool read Get_TabStop write Set_TabStop;
    property TabIndex: Smallint read Get_TabIndex write Set_TabIndex;
    property HideDuplicates: WordBool read Get_HideDuplicates write Set_HideDuplicates;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property BackStyle: Byte read Get_BackStyle write Set_BackStyle;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property SpecialEffect: Byte read Get_SpecialEffect write Set_SpecialEffect;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property OldBorderStyle: Byte read Get_OldBorderStyle write Set_OldBorderStyle;
    property BorderColor: Integer read Get_BorderColor write Set_BorderColor;
    property BorderWidth: Byte read Get_BorderWidth write Set_BorderWidth;
    property BorderLineStyle: Byte read Get_BorderLineStyle write Set_BorderLineStyle;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property FontName: WideString read Get_FontName write Set_FontName;
    property FontSize: Smallint read Get_FontSize write Set_FontSize;
    property FontWeight: Smallint read Get_FontWeight write Set_FontWeight;
    property FontItalic: WordBool read Get_FontItalic write Set_FontItalic;
    property FontUnderline: WordBool read Get_FontUnderline write Set_FontUnderline;
    property TextFontCharSet: Byte read Get_TextFontCharSet write Set_TextFontCharSet;
    property TextAlign: Byte read Get_TextAlign write Set_TextAlign;
    property FontBold: Smallint read Get_FontBold write Set_FontBold;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property ControlTipText: WideString read Get_ControlTipText write Set_ControlTipText;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property ColumnWidth: Smallint read Get_ColumnWidth write Set_ColumnWidth;
    property ColumnOrder: Smallint read Get_ColumnOrder write Set_ColumnOrder;
    property ColumnHidden: WordBool read Get_ColumnHidden write Set_ColumnHidden;
    property AutoLabel: WordBool read Get_AutoLabel write Set_AutoLabel;
    property AddColon: WordBool read Get_AddColon write Set_AddColon;
    property LabelX: Smallint read Get_LabelX write Set_LabelX;
    property LabelY: Smallint read Get_LabelY write Set_LabelY;
    property LabelAlign: Byte read Get_LabelAlign write Set_LabelAlign;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property Text: WideString read Get_Text write Set_Text;
    property SelText: WideString read Get_SelText write Set_SelText;
    property SelStart: Smallint read Get_SelStart write Set_SelStart;
    property SelLength: Smallint read Get_SelLength write Set_SelLength;
    property TextAlignGeneral: Smallint read Get_TextAlignGeneral write Set_TextAlignGeneral;
    property FormatPictureText: WideString read Get_FormatPictureText write Set_FormatPictureText;
    property Coltyp: Integer read Get_Coltyp write Set_Coltyp;
    property ListCount: Integer read Get_ListCount write Set_ListCount;
    property ListIndex: Integer read Get_ListIndex write Set_ListIndex;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property BeforeUpdate: WideString read Get_BeforeUpdate write Set_BeforeUpdate;
    property AfterUpdate: WideString read Get_AfterUpdate write Set_AfterUpdate;
    property OnChange: WideString read Get_OnChange write Set_OnChange;
    property OnNotInList: WideString read Get_OnNotInList write Set_OnNotInList;
    property OnEnter: WideString read Get_OnEnter write Set_OnEnter;
    property OnExit: WideString read Get_OnExit write Set_OnExit;
    property OnGotFocus: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property ReadingOrder: Byte read Get_ReadingOrder write Set_ReadingOrder;
    property KeyboardLanguage: Byte read Get_KeyboardLanguage write Set_KeyboardLanguage;
    property AllowedText: Byte read Get_AllowedText write Set_AllowedText;
    property ScrollBarAlign: Byte read Get_ScrollBarAlign write Set_ScrollBarAlign;
    property NumeralShapes: Byte read Get_NumeralShapes write Set_NumeralShapes;
    property IMEMode: AcImeMode read Get_IMEMode write Set_IMEMode;
    property Name: WideString read Get_Name write Set_Name;
    property IMESentenceMode: AcImeSentenceMode read Get_IMESentenceMode write Set_IMESentenceMode;
    property IsHyperlink: WordBool read Get_IsHyperlink write Set_IsHyperlink;
    property OnDirty: WideString read Get_OnDirty write Set_OnDirty;
    property OnUndo: WideString read Get_OnUndo write Set_OnUndo;
    property Recordset: IDispatch read Get_Recordset write _Set_Recordset;
    property SmartTags: _SmartTags read Get_SmartTags;
    property Layout: AcLayoutType read Get_Layout;
    property LeftPadding: Smallint read Get_LeftPadding write Set_LeftPadding;
    property TopPadding: Smallint read Get_TopPadding write Set_TopPadding;
    property RightPadding: Smallint read Get_RightPadding write Set_RightPadding;
    property BottomPadding: Smallint read Get_BottomPadding write Set_BottomPadding;
    property GridlineStyleLeft: Byte read Get_GridlineStyleLeft write Set_GridlineStyleLeft;
    property GridlineStyleTop: Byte read Get_GridlineStyleTop write Set_GridlineStyleTop;
    property GridlineStyleRight: Byte read Get_GridlineStyleRight write Set_GridlineStyleRight;
    property GridlineStyleBottom: Byte read Get_GridlineStyleBottom write Set_GridlineStyleBottom;
    property GridlineWidthLeft: Byte read Get_GridlineWidthLeft write Set_GridlineWidthLeft;
    property GridlineWidthTop: Byte read Get_GridlineWidthTop write Set_GridlineWidthTop;
    property GridlineWidthRight: Byte read Get_GridlineWidthRight write Set_GridlineWidthRight;
    property GridlineWidthBottom: Byte read Get_GridlineWidthBottom write Set_GridlineWidthBottom;
    property GridlineColor: Integer read Get_GridlineColor write Set_GridlineColor;
    property Selected[lRow: Integer]: Integer read Get_Selected write Set_Selected;
    property ItemsSelected: _ItemsSelected read Get_ItemsSelected;
    property CanGrow: WordBool read Get_CanGrow write Set_CanGrow;
    property CanShrink: WordBool read Get_CanShrink write Set_CanShrink;
    property SeparatorCharacters: AcSeparatorCharacters read Get_SeparatorCharacters write Set_SeparatorCharacters;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
    property BeforeUpdateMacro: WideString read Get_BeforeUpdateMacro write Set_BeforeUpdateMacro;
    property AfterUpdateMacro: WideString read Get_AfterUpdateMacro write Set_AfterUpdateMacro;
    property OnChangeMacro: WideString read Get_OnChangeMacro write Set_OnChangeMacro;
    property OnNotInListMacro: WideString read Get_OnNotInListMacro write Set_OnNotInListMacro;
    property OnEnterMacro: WideString read Get_OnEnterMacro write Set_OnEnterMacro;
    property OnExitMacro: WideString read Get_OnExitMacro write Set_OnExitMacro;
    property OnGotFocusMacro: WideString read Get_OnGotFocusMacro write Set_OnGotFocusMacro;
    property OnLostFocusMacro: WideString read Get_OnLostFocusMacro write Set_OnLostFocusMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property OnKeyDownMacro: WideString read Get_OnKeyDownMacro write Set_OnKeyDownMacro;
    property OnKeyUpMacro: WideString read Get_OnKeyUpMacro write Set_OnKeyUpMacro;
    property OnKeyPressMacro: WideString read Get_OnKeyPressMacro write Set_OnKeyPressMacro;
    property AllowValueListEdits: WordBool read Get_AllowValueListEdits write Set_AllowValueListEdits;
    property ListItemsEditForm: WideString read Get_ListItemsEditForm write Set_ListItemsEditForm;
    property InheritValueList: WordBool read Get_InheritValueList write Set_InheritValueList;
    property LeftMargin: Smallint read Get_LeftMargin write Set_LeftMargin;
    property TopMargin: Smallint read Get_TopMargin write Set_TopMargin;
    property RightMargin: Smallint read Get_RightMargin write Set_RightMargin;
    property BottomMargin: Smallint read Get_BottomMargin write Set_BottomMargin;
    property LayoutID: Integer read Get_LayoutID;
    property ShowOnlyRowSourceValues: WordBool read Get_ShowOnlyRowSourceValues write Set_ShowOnlyRowSourceValues;
    property DisplayAsHyperlink: AcDisplayAsHyperlink read Get_DisplayAsHyperlink write Set_DisplayAsHyperlink;
  end;

// *********************************************************************//
// DispIntf:  _ComboboxDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E95C-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _ComboboxDisp = dispinterface
    ['{3B06E95C-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    procedure Undo; dispid 2144;
    procedure Dropdown; dispid 2143;
    property Column[Index: Integer; Row: OleVariant]: OleVariant readonly dispid 2101;
    property OldValue: OleVariant readonly dispid 2102;
    property ItemData[Index: Integer]: OleVariant readonly dispid 2103;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    procedure Requery; dispid 2018;
    procedure Goto_; dispid 2023;
    procedure SetFocus; dispid 2022;
    property Controls: Children readonly dispid 2190;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Hyperlink: _Hyperlink readonly dispid 2181;
    property FormatConditions: FormatConditions readonly dispid 2203;
    property Value: OleVariant dispid 0;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property ControlSource: WideString dispid 27;
    property Format: WideString dispid 38;
    property DecimalPlaces: Byte dispid 71;
    property InputMask: WideString dispid 72;
    property RowSourceType: WideString dispid 93;
    property RowSource: WideString dispid 91;
    property ColumnCount: Smallint dispid 70;
    property ColumnHeads: WordBool dispid 131;
    property ColumnWidths: WideString dispid 18;
    property BoundColumn: Integer dispid 13;
    property ListRows: Smallint dispid 153;
    property ListWidth: WideString dispid 154;
    property StatusBarText: WideString dispid 135;
    property LimitToList: WordBool dispid 67;
    property AutoExpand: WordBool dispid 68;
    property DefaultValue: WideString dispid 23;
    property IMEHold: WordBool dispid 357;
    property ValidationRule: WideString dispid 145;
    property ValidationText: WideString dispid 61;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Enabled: WordBool dispid 25;
    property Locked: WordBool dispid 56;
    property AllowAutoCorrect: WordBool dispid 340;
    property TabStop: WordBool dispid 262;
    property TabIndex: Smallint dispid 261;
    property HideDuplicates: WordBool dispid 69;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property BackStyle: Byte dispid 29;
    property BackColor: Integer dispid 28;
    property SpecialEffect: Byte dispid 4;
    property BorderStyle: Byte dispid 9;
    property OldBorderStyle: Byte dispid 329;
    property BorderColor: Integer dispid 8;
    property BorderWidth: Byte dispid 10;
    property BorderLineStyle: Byte dispid 11;
    property ForeColor: Integer dispid 204;
    property FontName: WideString dispid 34;
    property FontSize: Smallint dispid 35;
    property FontWeight: Smallint dispid 37;
    property FontItalic: WordBool dispid 33;
    property FontUnderline: WordBool dispid 36;
    property TextFontCharSet: Byte dispid 193;
    property TextAlign: Byte dispid 136;
    property FontBold: Smallint dispid 32;
    property ShortcutMenuBar: WideString dispid 304;
    property ControlTipText: WideString dispid 317;
    property HelpContextId: Integer dispid 219;
    property ColumnWidth: Smallint dispid 166;
    property ColumnOrder: Smallint dispid 165;
    property ColumnHidden: WordBool dispid 167;
    property AutoLabel: WordBool dispid 57;
    property AddColon: WordBool dispid 3;
    property LabelX: Smallint dispid 52;
    property LabelY: Smallint dispid 53;
    property LabelAlign: Byte dispid 51;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property Text: WideString dispid 267;
    property SelText: WideString dispid 271;
    property SelStart: Smallint dispid 270;
    property SelLength: Smallint dispid 269;
    property TextAlignGeneral: Smallint dispid 137;
    property FormatPictureText: WideString dispid 138;
    property Coltyp: Integer dispid 139;
    property ListCount: Integer dispid 238;
    property ListIndex: Integer dispid 239;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property BeforeUpdate: WideString dispid 85;
    property AfterUpdate: WideString dispid 86;
    property OnChange: WideString dispid 114;
    property OnNotInList: WideString dispid 120;
    property OnEnter: WideString dispid 222;
    property OnExit: WideString dispid 223;
    property OnGotFocus: WideString dispid 115;
    property OnLostFocus: WideString dispid 116;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property OnKeyDown: WideString dispid 104;
    property OnKeyUp: WideString dispid 105;
    property OnKeyPress: WideString dispid 106;
    property ReadingOrder: Byte dispid 367;
    property KeyboardLanguage: Byte dispid 368;
    property AllowedText: Byte dispid 369;
    property ScrollBarAlign: Byte dispid 371;
    property NumeralShapes: Byte dispid 372;
    property IMEMode: AcImeMode dispid 356;
    property Name: WideString dispid -2147418112;
    property IMESentenceMode: AcImeSentenceMode dispid 379;
    property IsHyperlink: WordBool dispid 396;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    property OnDirty: WideString dispid 375;
    property OnUndo: WideString dispid 404;
    property Recordset: IDispatch dispid 2196;
    procedure AddItem(const Item: WideString; Index: OleVariant); dispid 2380;
    procedure RemoveItem(Index: OleVariant); dispid 2381;
    property SmartTags: _SmartTags readonly dispid 2445;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property Layout: AcLayoutType readonly dispid 2460;
    property LeftPadding: Smallint dispid 454;
    property TopPadding: Smallint dispid 455;
    property RightPadding: Smallint dispid 456;
    property BottomPadding: Smallint dispid 457;
    property GridlineStyleLeft: Byte dispid 458;
    property GridlineStyleTop: Byte dispid 459;
    property GridlineStyleRight: Byte dispid 460;
    property GridlineStyleBottom: Byte dispid 461;
    property GridlineWidthLeft: Byte dispid 463;
    property GridlineWidthTop: Byte dispid 464;
    property GridlineWidthRight: Byte dispid 465;
    property GridlineWidthBottom: Byte dispid 466;
    property GridlineColor: Integer dispid 462;
    property Selected[lRow: Integer]: Integer dispid 2113;
    property ItemsSelected: _ItemsSelected readonly dispid 2137;
    property CanGrow: WordBool dispid 14;
    property CanShrink: WordBool dispid 16;
    property SeparatorCharacters: AcSeparatorCharacters dispid 451;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
    property BeforeUpdateMacro: WideString dispid 496;
    property AfterUpdateMacro: WideString dispid 505;
    property OnChangeMacro: WideString dispid 506;
    property OnNotInListMacro: WideString dispid 507;
    property OnEnterMacro: WideString dispid 497;
    property OnExitMacro: WideString dispid 498;
    property OnGotFocusMacro: WideString dispid 502;
    property OnLostFocusMacro: WideString dispid 503;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property OnKeyDownMacro: WideString dispid 500;
    property OnKeyUpMacro: WideString dispid 501;
    property OnKeyPressMacro: WideString dispid 499;
    property AllowValueListEdits: WordBool dispid 556;
    property ListItemsEditForm: WideString dispid 557;
    property InheritValueList: WordBool dispid 568;
    property LeftMargin: Smallint dispid 384;
    property TopMargin: Smallint dispid 385;
    property RightMargin: Smallint dispid 388;
    property BottomMargin: Smallint dispid 389;
    property LayoutID: Integer readonly dispid 2492;
    property ShowOnlyRowSourceValues: WordBool dispid 579;
    property DisplayAsHyperlink: AcDisplayAsHyperlink dispid 591;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: _ComboBoxEvents
// Flags:     (16) Hidden
// GUID:      {BC9E434C-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _ComboBoxEvents = interface(IUnknown)
    ['{BC9E434C-F037-11CD-8701-00AA003F0F07}']
    function BeforeUpdate(out Cancel: Smallint): HResult; stdcall;
    function AfterUpdate: HResult; stdcall;
    function Change: HResult; stdcall;
    function NotInList(var NewData: WideString; out Response: Smallint): HResult; stdcall;
    function Enter: HResult; stdcall;
    function Exit(out Cancel: Smallint): HResult; stdcall;
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
    function Click: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function KeyDown(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function KeyPress(var KeyAscii: Smallint): HResult; stdcall;
    function KeyUp(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function Dirty(out Cancel: Smallint): HResult; stdcall;
    function Undo(out Cancel: Smallint): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispComboBoxEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E705276-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispComboBoxEvents = dispinterface
    ['{2E705276-92D1-43CC-A57B-ED48BCCC711D}']
    procedure BeforeUpdate(out Cancel: Smallint); dispid 2061;
    procedure AfterUpdate; dispid 2062;
    procedure Change; dispid 2077;
    procedure NotInList(var NewData: WideString; out Response: Smallint); dispid 2078;
    procedure Enter; dispid 2019;
    procedure Exit(out Cancel: Smallint); dispid 2075;
    procedure GotFocus; dispid 2073;
    procedure LostFocus; dispid 2074;
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid -602;
    procedure KeyPress(var KeyAscii: Smallint); dispid -603;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid -604;
    procedure Dirty(out Cancel: Smallint); dispid 2205;
    procedure Undo(out Cancel: Smallint); dispid 2144;
  end;

// *********************************************************************//
// Interface: _ObjectFrame
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E95E-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _ObjectFrame = interface(IAccessible)
    ['{3B06E95E-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_Object_: IDispatch; safecall;
    function Get_ObjectVerbs(Index: Integer): WideString; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    procedure Requery; safecall;
    procedure Goto_; safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Children; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_SizeMode: Byte; safecall;
    procedure Set_SizeMode(pRet: Byte); safecall;
    function Get_OLEClass: WideString; safecall;
    procedure Set_OLEClass(const pRet: WideString); safecall;
    function Get_Item: WideString; safecall;
    procedure Set_Item(const pRet: WideString); safecall;
    function Get_RowSourceType: WideString; safecall;
    procedure Set_RowSourceType(const pRet: WideString); safecall;
    function Get_RowSource: WideString; safecall;
    procedure Set_RowSource(const pRet: WideString); safecall;
    function Get_LinkChildFields: WideString; safecall;
    procedure Set_LinkChildFields(const pRet: WideString); safecall;
    function Get_LinkMasterFields: WideString; safecall;
    procedure Set_LinkMasterFields(const pRet: WideString); safecall;
    function Get_AutoActivate: Smallint; safecall;
    procedure Set_AutoActivate(pRet: Smallint); safecall;
    function Get_DisplayType: WordBool; safecall;
    procedure Set_DisplayType(pRet: WordBool); safecall;
    function Get_UpdateOptions: Smallint; safecall;
    procedure Set_UpdateOptions(pRet: Smallint); safecall;
    function Get_Verb: Integer; safecall;
    procedure Set_Verb(pRet: Integer); safecall;
    function Get_OLEType: Byte; safecall;
    procedure Set_OLEType(pRet: Byte); safecall;
    function Get_OLETypeAllowed: Byte; safecall;
    procedure Set_OLETypeAllowed(pRet: Byte); safecall;
    function Get_SourceObject: WideString; safecall;
    procedure Set_SourceObject(const pRet: WideString); safecall;
    function Get_Class_: WideString; safecall;
    procedure Set_Class_(const pRet: WideString); safecall;
    function Get_SourceDoc: WideString; safecall;
    procedure Set_SourceDoc(const pRet: WideString); safecall;
    function Get_SourceItem: WideString; safecall;
    procedure Set_SourceItem(const pRet: WideString); safecall;
    function Get_ColumnCount: Smallint; safecall;
    procedure Set_ColumnCount(pRet: Smallint); safecall;
    function Get_ColumnHeads: WordBool; safecall;
    procedure Set_ColumnHeads(pRet: WordBool); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_OleData: OleVariant; safecall;
    procedure Set_OleData(pRet: OleVariant); safecall;
    function Get_UpdateMethod: Smallint; safecall;
    procedure Set_UpdateMethod(pRet: Smallint); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRet: WordBool); safecall;
    function Get_Locked: WordBool; safecall;
    procedure Set_Locked(pRet: WordBool); safecall;
    function Get_StatusBarText: WideString; safecall;
    procedure Set_StatusBarText(const pRet: WideString); safecall;
    function Get_TabStop: WordBool; safecall;
    procedure Set_TabStop(pRet: WordBool); safecall;
    function Get_TabIndex: Smallint; safecall;
    procedure Set_TabIndex(pRet: Smallint); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_BackStyle: Byte; safecall;
    procedure Set_BackStyle(pRet: Byte); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(pRet: Integer); safecall;
    function Get_SpecialEffect: Byte; safecall;
    procedure Set_SpecialEffect(pRet: Byte); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_OldBorderStyle: Byte; safecall;
    procedure Set_OldBorderStyle(pRet: Byte); safecall;
    function Get_BorderColor: Integer; safecall;
    procedure Set_BorderColor(pRet: Integer); safecall;
    function Get_BorderWidth: Byte; safecall;
    procedure Set_BorderWidth(pRet: Byte); safecall;
    function Get_BorderLineStyle: Byte; safecall;
    procedure Set_BorderLineStyle(pRet: Byte); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_ControlTipText: WideString; safecall;
    procedure Set_ControlTipText(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_Data: Smallint; safecall;
    procedure Set_Data(pRet: Smallint); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_ObjectPalette: OleVariant; safecall;
    procedure Set_ObjectPalette(pRet: OleVariant); safecall;
    function Get_LpOleObject: Integer; safecall;
    procedure Set_LpOleObject(pRet: Integer); safecall;
    function Get_ObjectVerbsCount: Integer; safecall;
    procedure Set_ObjectVerbsCount(pRet: Integer); safecall;
    function Get_Action: Smallint; safecall;
    procedure Set_Action(pRet: Smallint); safecall;
    function Get_Scaling: Byte; safecall;
    procedure Set_Scaling(pRet: Byte); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_OnUpdated: WideString; safecall;
    procedure Set_OnUpdated(const pRet: WideString); safecall;
    function Get_OnEnter: WideString; safecall;
    procedure Set_OnEnter(const pRet: WideString); safecall;
    function Get_OnExit: WideString; safecall;
    procedure Set_OnExit(const pRet: WideString); safecall;
    function Get_OnGotFocus: WideString; safecall;
    procedure Set_OnGotFocus(const pRet: WideString); safecall;
    function Get_OnLostFocus: WideString; safecall;
    procedure Set_OnLostFocus(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_BeforeUpdateMacro: WideString; safecall;
    procedure Set_BeforeUpdateMacro(const pRet: WideString); safecall;
    function Get_AfterUpdateMacro: WideString; safecall;
    procedure Set_AfterUpdateMacro(const pRet: WideString); safecall;
    function Get_OnEnterMacro: WideString; safecall;
    procedure Set_OnEnterMacro(const pRet: WideString); safecall;
    function Get_OnExitMacro: WideString; safecall;
    procedure Set_OnExitMacro(const pRet: WideString); safecall;
    function Get_OnGotFocusMacro: WideString; safecall;
    procedure Set_OnGotFocusMacro(const pRet: WideString); safecall;
    function Get_OnLostFocusMacro: WideString; safecall;
    procedure Set_OnLostFocusMacro(const pRet: WideString); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_Layout: AcLayoutType; safecall;
    function Get_LeftPadding: Smallint; safecall;
    procedure Set_LeftPadding(pRet: Smallint); safecall;
    function Get_TopPadding: Smallint; safecall;
    procedure Set_TopPadding(pRet: Smallint); safecall;
    function Get_RightPadding: Smallint; safecall;
    procedure Set_RightPadding(pRet: Smallint); safecall;
    function Get_BottomPadding: Smallint; safecall;
    procedure Set_BottomPadding(pRet: Smallint); safecall;
    function Get_GridlineStyleLeft: Byte; safecall;
    procedure Set_GridlineStyleLeft(pRet: Byte); safecall;
    function Get_GridlineStyleTop: Byte; safecall;
    procedure Set_GridlineStyleTop(pRet: Byte); safecall;
    function Get_GridlineStyleRight: Byte; safecall;
    procedure Set_GridlineStyleRight(pRet: Byte); safecall;
    function Get_GridlineStyleBottom: Byte; safecall;
    procedure Set_GridlineStyleBottom(pRet: Byte); safecall;
    function Get_GridlineWidthLeft: Byte; safecall;
    procedure Set_GridlineWidthLeft(pRet: Byte); safecall;
    function Get_GridlineWidthTop: Byte; safecall;
    procedure Set_GridlineWidthTop(pRet: Byte); safecall;
    function Get_GridlineWidthRight: Byte; safecall;
    procedure Set_GridlineWidthRight(pRet: Byte); safecall;
    function Get_GridlineWidthBottom: Byte; safecall;
    procedure Set_GridlineWidthBottom(pRet: Byte); safecall;
    function Get_GridlineColor: Integer; safecall;
    procedure Set_GridlineColor(pRet: Integer); safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    function Get_LayoutID: Integer; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property OldValue: OleVariant read Get_OldValue;
    property Object_: IDispatch read Get_Object_;
    property ObjectVerbs[Index: Integer]: WideString read Get_ObjectVerbs;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property SizeMode: Byte read Get_SizeMode write Set_SizeMode;
    property OLEClass: WideString read Get_OLEClass write Set_OLEClass;
    property Item: WideString read Get_Item write Set_Item;
    property RowSourceType: WideString read Get_RowSourceType write Set_RowSourceType;
    property RowSource: WideString read Get_RowSource write Set_RowSource;
    property LinkChildFields: WideString read Get_LinkChildFields write Set_LinkChildFields;
    property LinkMasterFields: WideString read Get_LinkMasterFields write Set_LinkMasterFields;
    property AutoActivate: Smallint read Get_AutoActivate write Set_AutoActivate;
    property DisplayType: WordBool read Get_DisplayType write Set_DisplayType;
    property UpdateOptions: Smallint read Get_UpdateOptions write Set_UpdateOptions;
    property Verb: Integer read Get_Verb write Set_Verb;
    property OLEType: Byte read Get_OLEType write Set_OLEType;
    property OLETypeAllowed: Byte read Get_OLETypeAllowed write Set_OLETypeAllowed;
    property SourceObject: WideString read Get_SourceObject write Set_SourceObject;
    property Class_: WideString read Get_Class_ write Set_Class_;
    property SourceDoc: WideString read Get_SourceDoc write Set_SourceDoc;
    property SourceItem: WideString read Get_SourceItem write Set_SourceItem;
    property ColumnCount: Smallint read Get_ColumnCount write Set_ColumnCount;
    property ColumnHeads: WordBool read Get_ColumnHeads write Set_ColumnHeads;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property OleData: OleVariant read Get_OleData write Set_OleData;
    property UpdateMethod: Smallint read Get_UpdateMethod write Set_UpdateMethod;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Locked: WordBool read Get_Locked write Set_Locked;
    property StatusBarText: WideString read Get_StatusBarText write Set_StatusBarText;
    property TabStop: WordBool read Get_TabStop write Set_TabStop;
    property TabIndex: Smallint read Get_TabIndex write Set_TabIndex;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property BackStyle: Byte read Get_BackStyle write Set_BackStyle;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property SpecialEffect: Byte read Get_SpecialEffect write Set_SpecialEffect;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property OldBorderStyle: Byte read Get_OldBorderStyle write Set_OldBorderStyle;
    property BorderColor: Integer read Get_BorderColor write Set_BorderColor;
    property BorderWidth: Byte read Get_BorderWidth write Set_BorderWidth;
    property BorderLineStyle: Byte read Get_BorderLineStyle write Set_BorderLineStyle;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property ControlTipText: WideString read Get_ControlTipText write Set_ControlTipText;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property Data: Smallint read Get_Data write Set_Data;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property ObjectPalette: OleVariant read Get_ObjectPalette write Set_ObjectPalette;
    property LpOleObject: Integer read Get_LpOleObject write Set_LpOleObject;
    property ObjectVerbsCount: Integer read Get_ObjectVerbsCount write Set_ObjectVerbsCount;
    property Action: Smallint read Get_Action write Set_Action;
    property Scaling: Byte read Get_Scaling write Set_Scaling;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property OnUpdated: WideString read Get_OnUpdated write Set_OnUpdated;
    property OnEnter: WideString read Get_OnEnter write Set_OnEnter;
    property OnExit: WideString read Get_OnExit write Set_OnExit;
    property OnGotFocus: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property Name: WideString read Get_Name write Set_Name;
    property BeforeUpdateMacro: WideString read Get_BeforeUpdateMacro write Set_BeforeUpdateMacro;
    property AfterUpdateMacro: WideString read Get_AfterUpdateMacro write Set_AfterUpdateMacro;
    property OnEnterMacro: WideString read Get_OnEnterMacro write Set_OnEnterMacro;
    property OnExitMacro: WideString read Get_OnExitMacro write Set_OnExitMacro;
    property OnGotFocusMacro: WideString read Get_OnGotFocusMacro write Set_OnGotFocusMacro;
    property OnLostFocusMacro: WideString read Get_OnLostFocusMacro write Set_OnLostFocusMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property Layout: AcLayoutType read Get_Layout;
    property LeftPadding: Smallint read Get_LeftPadding write Set_LeftPadding;
    property TopPadding: Smallint read Get_TopPadding write Set_TopPadding;
    property RightPadding: Smallint read Get_RightPadding write Set_RightPadding;
    property BottomPadding: Smallint read Get_BottomPadding write Set_BottomPadding;
    property GridlineStyleLeft: Byte read Get_GridlineStyleLeft write Set_GridlineStyleLeft;
    property GridlineStyleTop: Byte read Get_GridlineStyleTop write Set_GridlineStyleTop;
    property GridlineStyleRight: Byte read Get_GridlineStyleRight write Set_GridlineStyleRight;
    property GridlineStyleBottom: Byte read Get_GridlineStyleBottom write Set_GridlineStyleBottom;
    property GridlineWidthLeft: Byte read Get_GridlineWidthLeft write Set_GridlineWidthLeft;
    property GridlineWidthTop: Byte read Get_GridlineWidthTop write Set_GridlineWidthTop;
    property GridlineWidthRight: Byte read Get_GridlineWidthRight write Set_GridlineWidthRight;
    property GridlineWidthBottom: Byte read Get_GridlineWidthBottom write Set_GridlineWidthBottom;
    property GridlineColor: Integer read Get_GridlineColor write Set_GridlineColor;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
    property LayoutID: Integer read Get_LayoutID;
  end;

// *********************************************************************//
// DispIntf:  _ObjectFrameDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E95E-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _ObjectFrameDisp = dispinterface
    ['{3B06E95E-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property OldValue: OleVariant readonly dispid 2102;
    property Object_: IDispatch readonly dispid 2104;
    property ObjectVerbs[Index: Integer]: WideString readonly dispid 2105;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    procedure Requery; dispid 2018;
    procedure Goto_; dispid 2023;
    procedure SetFocus; dispid 2022;
    property Controls: Children readonly dispid 2190;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property SizeMode: Byte dispid 89;
    property OLEClass: WideString dispid 76;
    property Item: WideString dispid 47;
    property RowSourceType: WideString dispid 93;
    property RowSource: WideString dispid 91;
    property LinkChildFields: WideString dispid 49;
    property LinkMasterFields: WideString dispid 50;
    property AutoActivate: Smallint dispid 101;
    property DisplayType: WordBool dispid 272;
    property UpdateOptions: Smallint dispid 103;
    property Verb: Integer dispid 102;
    property OLEType: Byte dispid 276;
    property OLETypeAllowed: Byte dispid 275;
    property SourceObject: WideString dispid 132;
    property Class_: WideString dispid 274;
    property SourceDoc: WideString dispid 133;
    property SourceItem: WideString dispid 48;
    property ColumnCount: Smallint dispid 70;
    property ColumnHeads: WordBool dispid 131;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property OleData: OleVariant dispid 171;
    property UpdateMethod: Smallint dispid 142;
    property Enabled: WordBool dispid 25;
    property Locked: WordBool dispid 56;
    property StatusBarText: WideString dispid 135;
    property TabStop: WordBool dispid 262;
    property TabIndex: Smallint dispid 261;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property BackStyle: Byte dispid 29;
    property BackColor: Integer dispid 28;
    property SpecialEffect: Byte dispid 4;
    property BorderStyle: Byte dispid 9;
    property OldBorderStyle: Byte dispid 329;
    property BorderColor: Integer dispid 8;
    property BorderWidth: Byte dispid 10;
    property BorderLineStyle: Byte dispid 11;
    property ShortcutMenuBar: WideString dispid 304;
    property ControlTipText: WideString dispid 317;
    property HelpContextId: Integer dispid 219;
    property Data: Smallint dispid 242;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property ObjectPalette: OleVariant dispid 99;
    property LpOleObject: Integer dispid 172;
    property ObjectVerbsCount: Integer dispid 173;
    property Action: Smallint dispid 273;
    property Scaling: Byte dispid 88;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property OnUpdated: WideString dispid 118;
    property OnEnter: WideString dispid 222;
    property OnExit: WideString dispid 223;
    property OnGotFocus: WideString dispid 115;
    property OnLostFocus: WideString dispid 116;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property Name: WideString dispid -2147418112;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property BeforeUpdateMacro: WideString dispid 496;
    property AfterUpdateMacro: WideString dispid 505;
    property OnEnterMacro: WideString dispid 497;
    property OnExitMacro: WideString dispid 498;
    property OnGotFocusMacro: WideString dispid 502;
    property OnLostFocusMacro: WideString dispid 503;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property Layout: AcLayoutType readonly dispid 2460;
    property LeftPadding: Smallint dispid 454;
    property TopPadding: Smallint dispid 455;
    property RightPadding: Smallint dispid 456;
    property BottomPadding: Smallint dispid 457;
    property GridlineStyleLeft: Byte dispid 458;
    property GridlineStyleTop: Byte dispid 459;
    property GridlineStyleRight: Byte dispid 460;
    property GridlineStyleBottom: Byte dispid 461;
    property GridlineWidthLeft: Byte dispid 463;
    property GridlineWidthTop: Byte dispid 464;
    property GridlineWidthRight: Byte dispid 465;
    property GridlineWidthBottom: Byte dispid 466;
    property GridlineColor: Integer dispid 462;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
    property LayoutID: Integer readonly dispid 2492;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: _ObjectFrameEvents
// Flags:     (16) Hidden
// GUID:      {BC9E434D-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _ObjectFrameEvents = interface(IUnknown)
    ['{BC9E434D-F037-11CD-8701-00AA003F0F07}']
    function Updated(var Code: Smallint): HResult; stdcall;
    function Enter: HResult; stdcall;
    function Exit(out Cancel: Smallint): HResult; stdcall;
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
    function Click: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispObjectFrameEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E70526D-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispObjectFrameEvents = dispinterface
    ['{2E70526D-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Updated(var Code: Smallint); dispid 2076;
    procedure Enter; dispid 2019;
    procedure Exit(out Cancel: Smallint); dispid 2075;
    procedure GotFocus; dispid 2073;
    procedure LostFocus; dispid 2074;
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
  end;

// *********************************************************************//
// Interface: _PageBreak
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E960-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _PageBreak = interface(IDispatch)
    ['{3B06E960-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Properties: Properties read Get_Properties;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Tag: WideString read Get_Tag write Set_Tag;
    property Section: Smallint read Get_Section write Set_Section;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  _PageBreakDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E960-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _PageBreakDisp = dispinterface
    ['{3B06E960-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Tag: WideString dispid 266;
    property Section: Smallint dispid 237;
    property Visible: WordBool dispid 148;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property ControlName: WideString dispid 265;
    property Name: WideString dispid -2147418112;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _PageBreakEvents
// Flags:     (16) Hidden
// GUID:      {BC9E434E-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _PageBreakEvents = interface(IUnknown)
    ['{BC9E434E-F037-11CD-8701-00AA003F0F07}']
  end;

// *********************************************************************//
// DispIntf:  DispPageBreakEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E70527A-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispPageBreakEvents = dispinterface
    ['{2E70527A-92D1-43CC-A57B-ED48BCCC711D}']
  end;

// *********************************************************************//
// Interface: _ToggleButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E962-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _ToggleButton = interface(IAccessible)
    ['{3B06E962-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    procedure Undo; safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    procedure Requery; safecall;
    procedure Goto_; safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Children; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(pRet: OleVariant); safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_ControlSource: WideString; safecall;
    procedure Set_ControlSource(const pRet: WideString); safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const pRet: WideString); safecall;
    function Get_Picture: WideString; safecall;
    procedure Set_Picture(const pRet: WideString); safecall;
    function Get_PictureType: Byte; safecall;
    procedure Set_PictureType(pRet: Byte); safecall;
    function Get_PictureData: OleVariant; safecall;
    procedure Set_PictureData(pRet: OleVariant); safecall;
    function Get_OptionValue: Integer; safecall;
    procedure Set_OptionValue(pRet: Integer); safecall;
    function Get_DefaultValue: WideString; safecall;
    procedure Set_DefaultValue(const pRet: WideString); safecall;
    function Get_ValidationRule: WideString; safecall;
    procedure Set_ValidationRule(const pRet: WideString); safecall;
    function Get_ValidationText: WideString; safecall;
    procedure Set_ValidationText(const pRet: WideString); safecall;
    function Get_StatusBarText: WideString; safecall;
    procedure Set_StatusBarText(const pRet: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRet: WordBool); safecall;
    function Get_Locked: WordBool; safecall;
    procedure Set_Locked(pRet: WordBool); safecall;
    function Get_TripleState: WordBool; safecall;
    procedure Set_TripleState(pRet: WordBool); safecall;
    function Get_TabStop: WordBool; safecall;
    procedure Set_TabStop(pRet: WordBool); safecall;
    function Get_TabIndex: Smallint; safecall;
    procedure Set_TabIndex(pRet: Smallint); safecall;
    function Get_HideDuplicates: WordBool; safecall;
    procedure Set_HideDuplicates(pRet: WordBool); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_ForeColor: Integer; safecall;
    procedure Set_ForeColor(pRet: Integer); safecall;
    function Get_FontName: WideString; safecall;
    procedure Set_FontName(const pRet: WideString); safecall;
    function Get_FontSize: Smallint; safecall;
    procedure Set_FontSize(pRet: Smallint); safecall;
    function Get_FontWeight: Smallint; safecall;
    procedure Set_FontWeight(pRet: Smallint); safecall;
    function Get_FontItalic: WordBool; safecall;
    procedure Set_FontItalic(pRet: WordBool); safecall;
    function Get_FontUnderline: WordBool; safecall;
    procedure Set_FontUnderline(pRet: WordBool); safecall;
    function Get_TextFontCharSet: Byte; safecall;
    procedure Set_TextFontCharSet(pRet: Byte); safecall;
    function Get_FontBold: Smallint; safecall;
    procedure Set_FontBold(pRet: Smallint); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_ControlTipText: WideString; safecall;
    procedure Set_ControlTipText(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_ColumnWidth: Smallint; safecall;
    procedure Set_ColumnWidth(pRet: Smallint); safecall;
    function Get_ColumnOrder: Smallint; safecall;
    procedure Set_ColumnOrder(pRet: Smallint); safecall;
    function Get_ColumnHidden: WordBool; safecall;
    procedure Set_ColumnHidden(pRet: WordBool); safecall;
    function Get_AutoLabel: WordBool; safecall;
    procedure Set_AutoLabel(pRet: WordBool); safecall;
    function Get_AddColon: WordBool; safecall;
    procedure Set_AddColon(pRet: WordBool); safecall;
    function Get_LabelX: Smallint; safecall;
    procedure Set_LabelX(pRet: Smallint); safecall;
    function Get_LabelY: Smallint; safecall;
    procedure Set_LabelY(pRet: Smallint); safecall;
    function Get_LabelAlign: Byte; safecall;
    procedure Set_LabelAlign(pRet: Byte); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_ObjectPalette: OleVariant; safecall;
    procedure Set_ObjectPalette(pRet: OleVariant); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_BeforeUpdate: WideString; safecall;
    procedure Set_BeforeUpdate(const pRet: WideString); safecall;
    function Get_AfterUpdate: WideString; safecall;
    procedure Set_AfterUpdate(const pRet: WideString); safecall;
    function Get_OnEnter: WideString; safecall;
    procedure Set_OnEnter(const pRet: WideString); safecall;
    function Get_OnExit: WideString; safecall;
    procedure Set_OnExit(const pRet: WideString); safecall;
    function Get_OnGotFocus: WideString; safecall;
    procedure Set_OnGotFocus(const pRet: WideString); safecall;
    function Get_OnLostFocus: WideString; safecall;
    procedure Set_OnLostFocus(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_OnKeyDown: WideString; safecall;
    procedure Set_OnKeyDown(const pRet: WideString); safecall;
    function Get_OnKeyUp: WideString; safecall;
    procedure Set_OnKeyUp(const pRet: WideString); safecall;
    function Get_OnKeyPress: WideString; safecall;
    procedure Set_OnKeyPress(const pRet: WideString); safecall;
    function Get_ReadingOrder: Byte; safecall;
    procedure Set_ReadingOrder(pRet: Byte); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_BeforeUpdateMacro: WideString; safecall;
    procedure Set_BeforeUpdateMacro(const pRet: WideString); safecall;
    function Get_AfterUpdateMacro: WideString; safecall;
    procedure Set_AfterUpdateMacro(const pRet: WideString); safecall;
    function Get_OnEnterMacro: WideString; safecall;
    procedure Set_OnEnterMacro(const pRet: WideString); safecall;
    function Get_OnExitMacro: WideString; safecall;
    procedure Set_OnExitMacro(const pRet: WideString); safecall;
    function Get_OnGotFocusMacro: WideString; safecall;
    procedure Set_OnGotFocusMacro(const pRet: WideString); safecall;
    function Get_OnLostFocusMacro: WideString; safecall;
    procedure Set_OnLostFocusMacro(const pRet: WideString); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyDownMacro: WideString; safecall;
    procedure Set_OnKeyDownMacro(const pRet: WideString); safecall;
    function Get_OnKeyUpMacro: WideString; safecall;
    procedure Set_OnKeyUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyPressMacro: WideString; safecall;
    procedure Set_OnKeyPressMacro(const pRet: WideString); safecall;
    function Get_Layout: AcLayoutType; safecall;
    function Get_LeftPadding: Smallint; safecall;
    procedure Set_LeftPadding(pRet: Smallint); safecall;
    function Get_TopPadding: Smallint; safecall;
    procedure Set_TopPadding(pRet: Smallint); safecall;
    function Get_RightPadding: Smallint; safecall;
    procedure Set_RightPadding(pRet: Smallint); safecall;
    function Get_BottomPadding: Smallint; safecall;
    procedure Set_BottomPadding(pRet: Smallint); safecall;
    function Get_GridlineStyleLeft: Byte; safecall;
    procedure Set_GridlineStyleLeft(pRet: Byte); safecall;
    function Get_GridlineStyleTop: Byte; safecall;
    procedure Set_GridlineStyleTop(pRet: Byte); safecall;
    function Get_GridlineStyleRight: Byte; safecall;
    procedure Set_GridlineStyleRight(pRet: Byte); safecall;
    function Get_GridlineStyleBottom: Byte; safecall;
    procedure Set_GridlineStyleBottom(pRet: Byte); safecall;
    function Get_GridlineWidthLeft: Byte; safecall;
    procedure Set_GridlineWidthLeft(pRet: Byte); safecall;
    function Get_GridlineWidthTop: Byte; safecall;
    procedure Set_GridlineWidthTop(pRet: Byte); safecall;
    function Get_GridlineWidthRight: Byte; safecall;
    procedure Set_GridlineWidthRight(pRet: Byte); safecall;
    function Get_GridlineWidthBottom: Byte; safecall;
    procedure Set_GridlineWidthBottom(pRet: Byte); safecall;
    function Get_GridlineColor: Integer; safecall;
    procedure Set_GridlineColor(pRet: Integer); safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    function Get_LayoutID: Integer; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property OldValue: OleVariant read Get_OldValue;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Value: OleVariant read Get_Value write Set_Value;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property ControlSource: WideString read Get_ControlSource write Set_ControlSource;
    property Caption: WideString read Get_Caption write Set_Caption;
    property Picture: WideString read Get_Picture write Set_Picture;
    property PictureType: Byte read Get_PictureType write Set_PictureType;
    property PictureData: OleVariant read Get_PictureData write Set_PictureData;
    property OptionValue: Integer read Get_OptionValue write Set_OptionValue;
    property DefaultValue: WideString read Get_DefaultValue write Set_DefaultValue;
    property ValidationRule: WideString read Get_ValidationRule write Set_ValidationRule;
    property ValidationText: WideString read Get_ValidationText write Set_ValidationText;
    property StatusBarText: WideString read Get_StatusBarText write Set_StatusBarText;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Locked: WordBool read Get_Locked write Set_Locked;
    property TripleState: WordBool read Get_TripleState write Set_TripleState;
    property TabStop: WordBool read Get_TabStop write Set_TabStop;
    property TabIndex: Smallint read Get_TabIndex write Set_TabIndex;
    property HideDuplicates: WordBool read Get_HideDuplicates write Set_HideDuplicates;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property FontName: WideString read Get_FontName write Set_FontName;
    property FontSize: Smallint read Get_FontSize write Set_FontSize;
    property FontWeight: Smallint read Get_FontWeight write Set_FontWeight;
    property FontItalic: WordBool read Get_FontItalic write Set_FontItalic;
    property FontUnderline: WordBool read Get_FontUnderline write Set_FontUnderline;
    property TextFontCharSet: Byte read Get_TextFontCharSet write Set_TextFontCharSet;
    property FontBold: Smallint read Get_FontBold write Set_FontBold;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property ControlTipText: WideString read Get_ControlTipText write Set_ControlTipText;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property ColumnWidth: Smallint read Get_ColumnWidth write Set_ColumnWidth;
    property ColumnOrder: Smallint read Get_ColumnOrder write Set_ColumnOrder;
    property ColumnHidden: WordBool read Get_ColumnHidden write Set_ColumnHidden;
    property AutoLabel: WordBool read Get_AutoLabel write Set_AutoLabel;
    property AddColon: WordBool read Get_AddColon write Set_AddColon;
    property LabelX: Smallint read Get_LabelX write Set_LabelX;
    property LabelY: Smallint read Get_LabelY write Set_LabelY;
    property LabelAlign: Byte read Get_LabelAlign write Set_LabelAlign;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property ObjectPalette: OleVariant read Get_ObjectPalette write Set_ObjectPalette;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property BeforeUpdate: WideString read Get_BeforeUpdate write Set_BeforeUpdate;
    property AfterUpdate: WideString read Get_AfterUpdate write Set_AfterUpdate;
    property OnEnter: WideString read Get_OnEnter write Set_OnEnter;
    property OnExit: WideString read Get_OnExit write Set_OnExit;
    property OnGotFocus: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property ReadingOrder: Byte read Get_ReadingOrder write Set_ReadingOrder;
    property Name: WideString read Get_Name write Set_Name;
    property BeforeUpdateMacro: WideString read Get_BeforeUpdateMacro write Set_BeforeUpdateMacro;
    property AfterUpdateMacro: WideString read Get_AfterUpdateMacro write Set_AfterUpdateMacro;
    property OnEnterMacro: WideString read Get_OnEnterMacro write Set_OnEnterMacro;
    property OnExitMacro: WideString read Get_OnExitMacro write Set_OnExitMacro;
    property OnGotFocusMacro: WideString read Get_OnGotFocusMacro write Set_OnGotFocusMacro;
    property OnLostFocusMacro: WideString read Get_OnLostFocusMacro write Set_OnLostFocusMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property OnKeyDownMacro: WideString read Get_OnKeyDownMacro write Set_OnKeyDownMacro;
    property OnKeyUpMacro: WideString read Get_OnKeyUpMacro write Set_OnKeyUpMacro;
    property OnKeyPressMacro: WideString read Get_OnKeyPressMacro write Set_OnKeyPressMacro;
    property Layout: AcLayoutType read Get_Layout;
    property LeftPadding: Smallint read Get_LeftPadding write Set_LeftPadding;
    property TopPadding: Smallint read Get_TopPadding write Set_TopPadding;
    property RightPadding: Smallint read Get_RightPadding write Set_RightPadding;
    property BottomPadding: Smallint read Get_BottomPadding write Set_BottomPadding;
    property GridlineStyleLeft: Byte read Get_GridlineStyleLeft write Set_GridlineStyleLeft;
    property GridlineStyleTop: Byte read Get_GridlineStyleTop write Set_GridlineStyleTop;
    property GridlineStyleRight: Byte read Get_GridlineStyleRight write Set_GridlineStyleRight;
    property GridlineStyleBottom: Byte read Get_GridlineStyleBottom write Set_GridlineStyleBottom;
    property GridlineWidthLeft: Byte read Get_GridlineWidthLeft write Set_GridlineWidthLeft;
    property GridlineWidthTop: Byte read Get_GridlineWidthTop write Set_GridlineWidthTop;
    property GridlineWidthRight: Byte read Get_GridlineWidthRight write Set_GridlineWidthRight;
    property GridlineWidthBottom: Byte read Get_GridlineWidthBottom write Set_GridlineWidthBottom;
    property GridlineColor: Integer read Get_GridlineColor write Set_GridlineColor;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
    property LayoutID: Integer read Get_LayoutID;
  end;

// *********************************************************************//
// DispIntf:  _ToggleButtonDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E962-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _ToggleButtonDisp = dispinterface
    ['{3B06E962-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    procedure Undo; dispid 2144;
    property OldValue: OleVariant readonly dispid 2102;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    procedure Requery; dispid 2018;
    procedure Goto_; dispid 2023;
    procedure SetFocus; dispid 2022;
    property Controls: Children readonly dispid 2190;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Value: OleVariant dispid 0;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property ControlSource: WideString dispid 27;
    property Caption: WideString dispid 17;
    property Picture: WideString dispid 7;
    property PictureType: Byte dispid 341;
    property PictureData: OleVariant dispid 188;
    property OptionValue: Integer dispid 58;
    property DefaultValue: WideString dispid 23;
    property ValidationRule: WideString dispid 145;
    property ValidationText: WideString dispid 61;
    property StatusBarText: WideString dispid 135;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Enabled: WordBool dispid 25;
    property Locked: WordBool dispid 56;
    property TripleState: WordBool dispid 294;
    property TabStop: WordBool dispid 262;
    property TabIndex: Smallint dispid 261;
    property HideDuplicates: WordBool dispid 69;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property ForeColor: Integer dispid 204;
    property FontName: WideString dispid 34;
    property FontSize: Smallint dispid 35;
    property FontWeight: Smallint dispid 37;
    property FontItalic: WordBool dispid 33;
    property FontUnderline: WordBool dispid 36;
    property TextFontCharSet: Byte dispid 193;
    property FontBold: Smallint dispid 32;
    property ShortcutMenuBar: WideString dispid 304;
    property ControlTipText: WideString dispid 317;
    property HelpContextId: Integer dispid 219;
    property ColumnWidth: Smallint dispid 166;
    property ColumnOrder: Smallint dispid 165;
    property ColumnHidden: WordBool dispid 167;
    property AutoLabel: WordBool dispid 57;
    property AddColon: WordBool dispid 3;
    property LabelX: Smallint dispid 52;
    property LabelY: Smallint dispid 53;
    property LabelAlign: Byte dispid 51;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property ObjectPalette: OleVariant dispid 99;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property BeforeUpdate: WideString dispid 85;
    property AfterUpdate: WideString dispid 86;
    property OnEnter: WideString dispid 222;
    property OnExit: WideString dispid 223;
    property OnGotFocus: WideString dispid 115;
    property OnLostFocus: WideString dispid 116;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property OnKeyDown: WideString dispid 104;
    property OnKeyUp: WideString dispid 105;
    property OnKeyPress: WideString dispid 106;
    property ReadingOrder: Byte dispid 367;
    property Name: WideString dispid -2147418112;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property BeforeUpdateMacro: WideString dispid 496;
    property AfterUpdateMacro: WideString dispid 505;
    property OnEnterMacro: WideString dispid 497;
    property OnExitMacro: WideString dispid 498;
    property OnGotFocusMacro: WideString dispid 502;
    property OnLostFocusMacro: WideString dispid 503;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property OnKeyDownMacro: WideString dispid 500;
    property OnKeyUpMacro: WideString dispid 501;
    property OnKeyPressMacro: WideString dispid 499;
    property Layout: AcLayoutType readonly dispid 2460;
    property LeftPadding: Smallint dispid 454;
    property TopPadding: Smallint dispid 455;
    property RightPadding: Smallint dispid 456;
    property BottomPadding: Smallint dispid 457;
    property GridlineStyleLeft: Byte dispid 458;
    property GridlineStyleTop: Byte dispid 459;
    property GridlineStyleRight: Byte dispid 460;
    property GridlineStyleBottom: Byte dispid 461;
    property GridlineWidthLeft: Byte dispid 463;
    property GridlineWidthTop: Byte dispid 464;
    property GridlineWidthRight: Byte dispid 465;
    property GridlineWidthBottom: Byte dispid 466;
    property GridlineColor: Integer dispid 462;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
    property LayoutID: Integer readonly dispid 2492;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: _ToggleButtonEvents
// Flags:     (16) Hidden
// GUID:      {BC9E434F-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _ToggleButtonEvents = interface(IUnknown)
    ['{BC9E434F-F037-11CD-8701-00AA003F0F07}']
    function Click: HResult; stdcall;
    function BeforeUpdate(out Cancel: Smallint): HResult; stdcall;
    function AfterUpdate: HResult; stdcall;
    function Enter: HResult; stdcall;
    function Exit(out Cancel: Smallint): HResult; stdcall;
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function KeyDown(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function KeyPress(var KeyAscii: Smallint): HResult; stdcall;
    function KeyUp(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispToggleButtonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E705266-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispToggleButtonEvents = dispinterface
    ['{2E705266-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Click; dispid -600;
    procedure BeforeUpdate(out Cancel: Smallint); dispid 2061;
    procedure AfterUpdate; dispid 2062;
    procedure Enter; dispid 2019;
    procedure Exit(out Cancel: Smallint); dispid 2075;
    procedure GotFocus; dispid 2073;
    procedure LostFocus; dispid 2074;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid -602;
    procedure KeyPress(var KeyAscii: Smallint); dispid -603;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid -604;
  end;

// *********************************************************************//
// Interface: _ToggleButtonInOptionEvents
// Flags:     (16) Hidden
// GUID:      {BC9E435F-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _ToggleButtonInOptionEvents = interface(IUnknown)
    ['{BC9E435F-F037-11CD-8701-00AA003F0F07}']
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function KeyDown(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function KeyPress(var KeyAscii: Smallint): HResult; stdcall;
    function KeyUp(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: _PaletteButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9CD4A760-A6A9-11CE-A686-00AA003F0F07}
// *********************************************************************//
  _PaletteButton = interface(IDispatch)
    ['{9CD4A760-A6A9-11CE-A686-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    procedure Requery; safecall;
    procedure Goto_; safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Children; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(pRet: OleVariant); safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_OptionValue: Integer; safecall;
    procedure Set_OptionValue(pRet: Integer); safecall;
    function Get_ControlSource: WideString; safecall;
    procedure Set_ControlSource(const pRet: WideString); safecall;
    function Get_DefaultValue: WideString; safecall;
    procedure Set_DefaultValue(const pRet: WideString); safecall;
    function Get_ValidationRule: WideString; safecall;
    procedure Set_ValidationRule(const pRet: WideString); safecall;
    function Get_ValidationText: WideString; safecall;
    procedure Set_ValidationText(const pRet: WideString); safecall;
    function Get_StatusBarText: WideString; safecall;
    procedure Set_StatusBarText(const pRet: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRet: WordBool); safecall;
    function Get_Locked: WordBool; safecall;
    procedure Set_Locked(pRet: WordBool); safecall;
    function Get_TripleState: WordBool; safecall;
    procedure Set_TripleState(pRet: WordBool); safecall;
    function Get_TabStop: WordBool; safecall;
    procedure Set_TabStop(pRet: WordBool); safecall;
    function Get_TabIndex: Smallint; safecall;
    procedure Set_TabIndex(pRet: Smallint); safecall;
    function Get_HideDuplicates: WordBool; safecall;
    procedure Set_HideDuplicates(pRet: WordBool); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_BackStyle: Byte; safecall;
    procedure Set_BackStyle(pRet: Byte); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(pRet: Integer); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_ControlTipText: WideString; safecall;
    procedure Set_ControlTipText(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_ColumnWidth: Smallint; safecall;
    procedure Set_ColumnWidth(pRet: Smallint); safecall;
    function Get_ColumnOrder: Smallint; safecall;
    procedure Set_ColumnOrder(pRet: Smallint); safecall;
    function Get_ColumnHidden: WordBool; safecall;
    procedure Set_ColumnHidden(pRet: WordBool); safecall;
    function Get_AutoLabel: WordBool; safecall;
    procedure Set_AutoLabel(pRet: WordBool); safecall;
    function Get_AddColon: WordBool; safecall;
    procedure Set_AddColon(pRet: WordBool); safecall;
    function Get_LabelX: Smallint; safecall;
    procedure Set_LabelX(pRet: Smallint); safecall;
    function Get_LabelY: Smallint; safecall;
    procedure Set_LabelY(pRet: Smallint); safecall;
    function Get_LabelAlign: Byte; safecall;
    procedure Set_LabelAlign(pRet: Byte); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_BeforeUpdate: WideString; safecall;
    procedure Set_BeforeUpdate(const pRet: WideString); safecall;
    function Get_AfterUpdate: WideString; safecall;
    procedure Set_AfterUpdate(const pRet: WideString); safecall;
    function Get_OnEnter: WideString; safecall;
    procedure Set_OnEnter(const pRet: WideString); safecall;
    function Get_OnExit: WideString; safecall;
    procedure Set_OnExit(const pRet: WideString); safecall;
    function Get_OnGotFocus: WideString; safecall;
    procedure Set_OnGotFocus(const pRet: WideString); safecall;
    function Get_OnLostFocus: WideString; safecall;
    procedure Set_OnLostFocus(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_OnKeyDown: WideString; safecall;
    procedure Set_OnKeyDown(const pRet: WideString); safecall;
    function Get_OnKeyUp: WideString; safecall;
    procedure Set_OnKeyUp(const pRet: WideString); safecall;
    function Get_OnKeyPress: WideString; safecall;
    procedure Set_OnKeyPress(const pRet: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_BeforeUpdateMacro: WideString; safecall;
    procedure Set_BeforeUpdateMacro(const pRet: WideString); safecall;
    function Get_AfterUpdateMacro: WideString; safecall;
    procedure Set_AfterUpdateMacro(const pRet: WideString); safecall;
    function Get_OnEnterMacro: WideString; safecall;
    procedure Set_OnEnterMacro(const pRet: WideString); safecall;
    function Get_OnExitMacro: WideString; safecall;
    procedure Set_OnExitMacro(const pRet: WideString); safecall;
    function Get_OnGotFocusMacro: WideString; safecall;
    procedure Set_OnGotFocusMacro(const pRet: WideString); safecall;
    function Get_OnLostFocusMacro: WideString; safecall;
    procedure Set_OnLostFocusMacro(const pRet: WideString); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyDownMacro: WideString; safecall;
    procedure Set_OnKeyDownMacro(const pRet: WideString); safecall;
    function Get_OnKeyUpMacro: WideString; safecall;
    procedure Set_OnKeyUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyPressMacro: WideString; safecall;
    procedure Set_OnKeyPressMacro(const pRet: WideString); safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property OldValue: OleVariant read Get_OldValue;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Value: OleVariant read Get_Value write Set_Value;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property OptionValue: Integer read Get_OptionValue write Set_OptionValue;
    property ControlSource: WideString read Get_ControlSource write Set_ControlSource;
    property DefaultValue: WideString read Get_DefaultValue write Set_DefaultValue;
    property ValidationRule: WideString read Get_ValidationRule write Set_ValidationRule;
    property ValidationText: WideString read Get_ValidationText write Set_ValidationText;
    property StatusBarText: WideString read Get_StatusBarText write Set_StatusBarText;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Locked: WordBool read Get_Locked write Set_Locked;
    property TripleState: WordBool read Get_TripleState write Set_TripleState;
    property TabStop: WordBool read Get_TabStop write Set_TabStop;
    property TabIndex: Smallint read Get_TabIndex write Set_TabIndex;
    property HideDuplicates: WordBool read Get_HideDuplicates write Set_HideDuplicates;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property BackStyle: Byte read Get_BackStyle write Set_BackStyle;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property ControlTipText: WideString read Get_ControlTipText write Set_ControlTipText;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property ColumnWidth: Smallint read Get_ColumnWidth write Set_ColumnWidth;
    property ColumnOrder: Smallint read Get_ColumnOrder write Set_ColumnOrder;
    property ColumnHidden: WordBool read Get_ColumnHidden write Set_ColumnHidden;
    property AutoLabel: WordBool read Get_AutoLabel write Set_AutoLabel;
    property AddColon: WordBool read Get_AddColon write Set_AddColon;
    property LabelX: Smallint read Get_LabelX write Set_LabelX;
    property LabelY: Smallint read Get_LabelY write Set_LabelY;
    property LabelAlign: Byte read Get_LabelAlign write Set_LabelAlign;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property BeforeUpdate: WideString read Get_BeforeUpdate write Set_BeforeUpdate;
    property AfterUpdate: WideString read Get_AfterUpdate write Set_AfterUpdate;
    property OnEnter: WideString read Get_OnEnter write Set_OnEnter;
    property OnExit: WideString read Get_OnExit write Set_OnExit;
    property OnGotFocus: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property Name: WideString read Get_Name write Set_Name;
    property BeforeUpdateMacro: WideString read Get_BeforeUpdateMacro write Set_BeforeUpdateMacro;
    property AfterUpdateMacro: WideString read Get_AfterUpdateMacro write Set_AfterUpdateMacro;
    property OnEnterMacro: WideString read Get_OnEnterMacro write Set_OnEnterMacro;
    property OnExitMacro: WideString read Get_OnExitMacro write Set_OnExitMacro;
    property OnGotFocusMacro: WideString read Get_OnGotFocusMacro write Set_OnGotFocusMacro;
    property OnLostFocusMacro: WideString read Get_OnLostFocusMacro write Set_OnLostFocusMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property OnKeyDownMacro: WideString read Get_OnKeyDownMacro write Set_OnKeyDownMacro;
    property OnKeyUpMacro: WideString read Get_OnKeyUpMacro write Set_OnKeyUpMacro;
    property OnKeyPressMacro: WideString read Get_OnKeyPressMacro write Set_OnKeyPressMacro;
  end;

// *********************************************************************//
// DispIntf:  _PaletteButtonDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9CD4A760-A6A9-11CE-A686-00AA003F0F07}
// *********************************************************************//
  _PaletteButtonDisp = dispinterface
    ['{9CD4A760-A6A9-11CE-A686-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property OldValue: OleVariant readonly dispid 2102;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    procedure Requery; dispid 2018;
    procedure Goto_; dispid 2023;
    procedure SetFocus; dispid 2022;
    property Controls: Children readonly dispid 2190;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Value: OleVariant dispid 0;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property OptionValue: Integer dispid 58;
    property ControlSource: WideString dispid 27;
    property DefaultValue: WideString dispid 23;
    property ValidationRule: WideString dispid 145;
    property ValidationText: WideString dispid 61;
    property StatusBarText: WideString dispid 135;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Enabled: WordBool dispid 25;
    property Locked: WordBool dispid 56;
    property TripleState: WordBool dispid 294;
    property TabStop: WordBool dispid 262;
    property TabIndex: Smallint dispid 261;
    property HideDuplicates: WordBool dispid 69;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property BackStyle: Byte dispid 29;
    property BackColor: Integer dispid 28;
    property ShortcutMenuBar: WideString dispid 304;
    property ControlTipText: WideString dispid 317;
    property HelpContextId: Integer dispid 219;
    property ColumnWidth: Smallint dispid 166;
    property ColumnOrder: Smallint dispid 165;
    property ColumnHidden: WordBool dispid 167;
    property AutoLabel: WordBool dispid 57;
    property AddColon: WordBool dispid 3;
    property LabelX: Smallint dispid 52;
    property LabelY: Smallint dispid 53;
    property LabelAlign: Byte dispid 51;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property BeforeUpdate: WideString dispid 85;
    property AfterUpdate: WideString dispid 86;
    property OnEnter: WideString dispid 222;
    property OnExit: WideString dispid 223;
    property OnGotFocus: WideString dispid 115;
    property OnLostFocus: WideString dispid 116;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property OnKeyDown: WideString dispid 104;
    property OnKeyUp: WideString dispid 105;
    property OnKeyPress: WideString dispid 106;
    property Name: WideString dispid -2147418112;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property BeforeUpdateMacro: WideString dispid 496;
    property AfterUpdateMacro: WideString dispid 505;
    property OnEnterMacro: WideString dispid 497;
    property OnExitMacro: WideString dispid 498;
    property OnGotFocusMacro: WideString dispid 502;
    property OnLostFocusMacro: WideString dispid 503;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property OnKeyDownMacro: WideString dispid 500;
    property OnKeyUpMacro: WideString dispid 501;
    property OnKeyPressMacro: WideString dispid 499;
  end;

// *********************************************************************//
// Interface: _PaletteButtonEvents
// Flags:     (16) Hidden
// GUID:      {A843CCD0-6E2C-11CF-A219-00A0C90542FF}
// *********************************************************************//
  _PaletteButtonEvents = interface(IUnknown)
    ['{A843CCD0-6E2C-11CF-A219-00A0C90542FF}']
    function Click: HResult; stdcall;
    function BeforeUpdate(out Cancel: Smallint): HResult; stdcall;
    function AfterUpdate: HResult; stdcall;
    function Enter: HResult; stdcall;
    function Exit(out Cancel: Smallint): HResult; stdcall;
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function KeyDown(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function KeyPress(var KeyAscii: Smallint): HResult; stdcall;
    function KeyUp(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispPaletteButtonEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E70527F-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispPaletteButtonEvents = dispinterface
    ['{2E70527F-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Click; dispid -600;
    procedure BeforeUpdate(out Cancel: Smallint); dispid 2061;
    procedure AfterUpdate; dispid 2062;
    procedure Enter; dispid 2019;
    procedure Exit(out Cancel: Smallint); dispid 2075;
    procedure GotFocus; dispid 2073;
    procedure LostFocus; dispid 2074;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid -602;
    procedure KeyPress(var KeyAscii: Smallint); dispid -603;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid -604;
  end;

// *********************************************************************//
// Interface: _SubForm
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E964-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _SubForm = interface(IAccessible)
    ['{3B06E964-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Form: AccessForm; safecall;
    function Get_Report: AccessReport; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    procedure Goto_; safecall;
    procedure SetFocus; safecall;
    procedure Requery; safecall;
    function Get_Controls: Controls; safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_SourceObject: WideString; safecall;
    procedure Set_SourceObject(const pRet: WideString); safecall;
    function Get_LinkChildFields: WideString; safecall;
    procedure Set_LinkChildFields(const pRet: WideString); safecall;
    function Get_LinkMasterFields: WideString; safecall;
    procedure Set_LinkMasterFields(const pRet: WideString); safecall;
    function Get_StatusBarText: WideString; safecall;
    procedure Set_StatusBarText(const pRet: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRet: WordBool); safecall;
    function Get_Locked: WordBool; safecall;
    procedure Set_Locked(pRet: WordBool); safecall;
    function Get_TabStop: WordBool; safecall;
    procedure Set_TabStop(pRet: WordBool); safecall;
    function Get_TabIndex: Smallint; safecall;
    procedure Set_TabIndex(pRet: Smallint); safecall;
    function Get_CanGrow: WordBool; safecall;
    procedure Set_CanGrow(pRet: WordBool); safecall;
    function Get_CanShrink: WordBool; safecall;
    procedure Set_CanShrink(pRet: WordBool); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_SpecialEffect: Byte; safecall;
    procedure Set_SpecialEffect(pRet: Byte); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_OldBorderStyle: Byte; safecall;
    procedure Set_OldBorderStyle(pRet: Byte); safecall;
    function Get_BorderWidth: Byte; safecall;
    procedure Set_BorderWidth(pRet: Byte); safecall;
    function Get_BorderLineStyle: Byte; safecall;
    procedure Set_BorderLineStyle(pRet: Byte); safecall;
    function Get_BorderColor: Integer; safecall;
    procedure Set_BorderColor(pRet: Integer); safecall;
    function Get_AutoLabel: WordBool; safecall;
    procedure Set_AutoLabel(pRet: WordBool); safecall;
    function Get_AddColon: WordBool; safecall;
    procedure Set_AddColon(pRet: WordBool); safecall;
    function Get_LabelX: Smallint; safecall;
    procedure Set_LabelX(pRet: Smallint); safecall;
    function Get_LabelY: Smallint; safecall;
    procedure Set_LabelY(pRet: Smallint); safecall;
    function Get_LabelAlign: Byte; safecall;
    procedure Set_LabelAlign(pRet: Byte); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_OnEnter: WideString; safecall;
    procedure Set_OnEnter(const pRet: WideString); safecall;
    function Get_OnExit: WideString; safecall;
    procedure Set_OnExit(const pRet: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_OnEnterMacro: WideString; safecall;
    procedure Set_OnEnterMacro(const pRet: WideString); safecall;
    function Get_OnExitMacro: WideString; safecall;
    procedure Set_OnExitMacro(const pRet: WideString); safecall;
    function Get_Layout: AcLayoutType; safecall;
    function Get_LeftPadding: Smallint; safecall;
    procedure Set_LeftPadding(pRet: Smallint); safecall;
    function Get_TopPadding: Smallint; safecall;
    procedure Set_TopPadding(pRet: Smallint); safecall;
    function Get_RightPadding: Smallint; safecall;
    procedure Set_RightPadding(pRet: Smallint); safecall;
    function Get_BottomPadding: Smallint; safecall;
    procedure Set_BottomPadding(pRet: Smallint); safecall;
    function Get_GridlineStyleLeft: Byte; safecall;
    procedure Set_GridlineStyleLeft(pRet: Byte); safecall;
    function Get_GridlineStyleTop: Byte; safecall;
    procedure Set_GridlineStyleTop(pRet: Byte); safecall;
    function Get_GridlineStyleRight: Byte; safecall;
    procedure Set_GridlineStyleRight(pRet: Byte); safecall;
    function Get_GridlineStyleBottom: Byte; safecall;
    procedure Set_GridlineStyleBottom(pRet: Byte); safecall;
    function Get_GridlineWidthLeft: Byte; safecall;
    procedure Set_GridlineWidthLeft(pRet: Byte); safecall;
    function Get_GridlineWidthTop: Byte; safecall;
    procedure Set_GridlineWidthTop(pRet: Byte); safecall;
    function Get_GridlineWidthRight: Byte; safecall;
    procedure Set_GridlineWidthRight(pRet: Byte); safecall;
    function Get_GridlineWidthBottom: Byte; safecall;
    procedure Set_GridlineWidthBottom(pRet: Byte); safecall;
    function Get_GridlineColor: Integer; safecall;
    procedure Set_GridlineColor(pRet: Integer); safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    function Get_FilterOnEmptyMaster: WordBool; safecall;
    procedure Set_FilterOnEmptyMaster(pRet: WordBool); safecall;
    function Get_LayoutID: Integer; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Form: AccessForm read Get_Form;
    property Report: AccessReport read Get_Report;
    property Properties: Properties read Get_Properties;
    property Controls: Controls read Get_Controls;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property SourceObject: WideString read Get_SourceObject write Set_SourceObject;
    property LinkChildFields: WideString read Get_LinkChildFields write Set_LinkChildFields;
    property LinkMasterFields: WideString read Get_LinkMasterFields write Set_LinkMasterFields;
    property StatusBarText: WideString read Get_StatusBarText write Set_StatusBarText;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Locked: WordBool read Get_Locked write Set_Locked;
    property TabStop: WordBool read Get_TabStop write Set_TabStop;
    property TabIndex: Smallint read Get_TabIndex write Set_TabIndex;
    property CanGrow: WordBool read Get_CanGrow write Set_CanGrow;
    property CanShrink: WordBool read Get_CanShrink write Set_CanShrink;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property SpecialEffect: Byte read Get_SpecialEffect write Set_SpecialEffect;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property OldBorderStyle: Byte read Get_OldBorderStyle write Set_OldBorderStyle;
    property BorderWidth: Byte read Get_BorderWidth write Set_BorderWidth;
    property BorderLineStyle: Byte read Get_BorderLineStyle write Set_BorderLineStyle;
    property BorderColor: Integer read Get_BorderColor write Set_BorderColor;
    property AutoLabel: WordBool read Get_AutoLabel write Set_AutoLabel;
    property AddColon: WordBool read Get_AddColon write Set_AddColon;
    property LabelX: Smallint read Get_LabelX write Set_LabelX;
    property LabelY: Smallint read Get_LabelY write Set_LabelY;
    property LabelAlign: Byte read Get_LabelAlign write Set_LabelAlign;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property OnEnter: WideString read Get_OnEnter write Set_OnEnter;
    property OnExit: WideString read Get_OnExit write Set_OnExit;
    property Name: WideString read Get_Name write Set_Name;
    property OnEnterMacro: WideString read Get_OnEnterMacro write Set_OnEnterMacro;
    property OnExitMacro: WideString read Get_OnExitMacro write Set_OnExitMacro;
    property Layout: AcLayoutType read Get_Layout;
    property LeftPadding: Smallint read Get_LeftPadding write Set_LeftPadding;
    property TopPadding: Smallint read Get_TopPadding write Set_TopPadding;
    property RightPadding: Smallint read Get_RightPadding write Set_RightPadding;
    property BottomPadding: Smallint read Get_BottomPadding write Set_BottomPadding;
    property GridlineStyleLeft: Byte read Get_GridlineStyleLeft write Set_GridlineStyleLeft;
    property GridlineStyleTop: Byte read Get_GridlineStyleTop write Set_GridlineStyleTop;
    property GridlineStyleRight: Byte read Get_GridlineStyleRight write Set_GridlineStyleRight;
    property GridlineStyleBottom: Byte read Get_GridlineStyleBottom write Set_GridlineStyleBottom;
    property GridlineWidthLeft: Byte read Get_GridlineWidthLeft write Set_GridlineWidthLeft;
    property GridlineWidthTop: Byte read Get_GridlineWidthTop write Set_GridlineWidthTop;
    property GridlineWidthRight: Byte read Get_GridlineWidthRight write Set_GridlineWidthRight;
    property GridlineWidthBottom: Byte read Get_GridlineWidthBottom write Set_GridlineWidthBottom;
    property GridlineColor: Integer read Get_GridlineColor write Set_GridlineColor;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
    property FilterOnEmptyMaster: WordBool read Get_FilterOnEmptyMaster write Set_FilterOnEmptyMaster;
    property LayoutID: Integer read Get_LayoutID;
  end;

// *********************************************************************//
// DispIntf:  _SubFormDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E964-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _SubFormDisp = dispinterface
    ['{3B06E964-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Form: AccessForm readonly dispid 2089;
    property Report: AccessReport readonly dispid 2097;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    procedure Goto_; dispid 2023;
    procedure SetFocus; dispid 2022;
    procedure Requery; dispid 2018;
    property Controls: Controls readonly dispid 0;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property SourceObject: WideString dispid 132;
    property LinkChildFields: WideString dispid 49;
    property LinkMasterFields: WideString dispid 50;
    property StatusBarText: WideString dispid 135;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Enabled: WordBool dispid 25;
    property Locked: WordBool dispid 56;
    property TabStop: WordBool dispid 262;
    property TabIndex: Smallint dispid 261;
    property CanGrow: WordBool dispid 14;
    property CanShrink: WordBool dispid 16;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property SpecialEffect: Byte dispid 4;
    property BorderStyle: Byte dispid 9;
    property OldBorderStyle: Byte dispid 329;
    property BorderWidth: Byte dispid 10;
    property BorderLineStyle: Byte dispid 11;
    property BorderColor: Integer dispid 8;
    property AutoLabel: WordBool dispid 57;
    property AddColon: WordBool dispid 3;
    property LabelX: Smallint dispid 52;
    property LabelY: Smallint dispid 53;
    property LabelAlign: Byte dispid 51;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property OnEnter: WideString dispid 222;
    property OnExit: WideString dispid 223;
    property Name: WideString dispid -2147418112;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property OnEnterMacro: WideString dispid 497;
    property OnExitMacro: WideString dispid 498;
    property Layout: AcLayoutType readonly dispid 2460;
    property LeftPadding: Smallint dispid 454;
    property TopPadding: Smallint dispid 455;
    property RightPadding: Smallint dispid 456;
    property BottomPadding: Smallint dispid 457;
    property GridlineStyleLeft: Byte dispid 458;
    property GridlineStyleTop: Byte dispid 459;
    property GridlineStyleRight: Byte dispid 460;
    property GridlineStyleBottom: Byte dispid 461;
    property GridlineWidthLeft: Byte dispid 463;
    property GridlineWidthTop: Byte dispid 464;
    property GridlineWidthRight: Byte dispid 465;
    property GridlineWidthBottom: Byte dispid 466;
    property GridlineColor: Integer dispid 462;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
    property FilterOnEmptyMaster: WordBool dispid 576;
    property LayoutID: Integer readonly dispid 2492;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: _SubFormEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4350-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _SubFormEvents = interface(IUnknown)
    ['{BC9E4350-F037-11CD-8701-00AA003F0F07}']
    function Enter: HResult; stdcall;
    function Exit(out Cancel: Smallint): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispSubFormEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E705277-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispSubFormEvents = dispinterface
    ['{2E705277-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Enter; dispid 2019;
    procedure Exit(out Cancel: Smallint); dispid 2075;
  end;

// *********************************************************************//
// Interface: _SubReport
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E966-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _SubReport = interface(IDispatch)
    ['{3B06E966-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Form: AccessForm; safecall;
    function Get_Report: AccessReport; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Form: AccessForm read Get_Form;
    property Report: AccessReport read Get_Report;
  end;

// *********************************************************************//
// DispIntf:  _SubReportDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E966-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _SubReportDisp = dispinterface
    ['{3B06E966-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Form: AccessForm readonly dispid 2089;
    property Report: AccessReport readonly dispid 2097;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _SubReportEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4351-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _SubReportEvents = interface(IUnknown)
    ['{BC9E4351-F037-11CD-8701-00AA003F0F07}']
    function Enter: HResult; stdcall;
    function Exit(out Cancel: Smallint): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispSubReportEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E705278-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispSubReportEvents = dispinterface
    ['{2E705278-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Enter; dispid 2019;
    procedure Exit(out Cancel: Smallint); dispid 2075;
  end;

// *********************************************************************//
// Interface: _CustomControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E968-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _CustomControl = interface(IAccessible)
    ['{3B06E968-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_Object_: IDispatch; safecall;
    function Get_ObjectVerbs(Index: Integer): WideString; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    procedure Requery; safecall;
    procedure Goto_; safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Children; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(pRet: OleVariant); safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_ControlSource: WideString; safecall;
    procedure Set_ControlSource(const pRet: WideString); safecall;
    function Get_OLEClass: WideString; safecall;
    procedure Set_OLEClass(const pRet: WideString); safecall;
    function Get_Verb: Integer; safecall;
    procedure Set_Verb(pRet: Integer); safecall;
    function Get_Class_: WideString; safecall;
    procedure Set_Class_(const pRet: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRet: WordBool); safecall;
    function Get_Locked: WordBool; safecall;
    procedure Set_Locked(pRet: WordBool); safecall;
    function Get_OleData: OleVariant; safecall;
    procedure Set_OleData(pRet: OleVariant); safecall;
    function Get_TabStop: WordBool; safecall;
    procedure Set_TabStop(pRet: WordBool); safecall;
    function Get_TabIndex: Smallint; safecall;
    procedure Set_TabIndex(pRet: Smallint); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_SpecialEffect: Byte; safecall;
    procedure Set_SpecialEffect(pRet: Byte); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_OldBorderStyle: Byte; safecall;
    procedure Set_OldBorderStyle(pRet: Byte); safecall;
    function Get_BorderColor: Integer; safecall;
    procedure Set_BorderColor(pRet: Integer); safecall;
    function Get_BorderWidth: Byte; safecall;
    procedure Set_BorderWidth(pRet: Byte); safecall;
    function Get_BorderLineStyle: Byte; safecall;
    procedure Set_BorderLineStyle(pRet: Byte); safecall;
    function Get_ControlTipText: WideString; safecall;
    procedure Set_ControlTipText(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_ObjectPalette: OleVariant; safecall;
    procedure Set_ObjectPalette(pRet: OleVariant); safecall;
    function Get_LpOleObject: Integer; safecall;
    procedure Set_LpOleObject(pRet: Integer); safecall;
    function Get_ObjectVerbsCount: Integer; safecall;
    procedure Set_ObjectVerbsCount(pRet: Integer); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_OnUpdated: WideString; safecall;
    procedure Set_OnUpdated(const pRet: WideString); safecall;
    function Get_OnEnter: WideString; safecall;
    procedure Set_OnEnter(const pRet: WideString); safecall;
    function Get_OnExit: WideString; safecall;
    procedure Set_OnExit(const pRet: WideString); safecall;
    function Get_OnGotFocus: WideString; safecall;
    procedure Set_OnGotFocus(const pRet: WideString); safecall;
    function Get_OnLostFocus: WideString; safecall;
    procedure Set_OnLostFocus(const pRet: WideString); safecall;
    function Get_Default: WordBool; safecall;
    procedure Set_Default(pRet: WordBool); safecall;
    function Get_Cancel: WordBool; safecall;
    procedure Set_Cancel(pRet: WordBool); safecall;
    function Get_Custom: WideString; safecall;
    procedure Set_Custom(const pRet: WideString); safecall;
    function Get_About: WideString; safecall;
    procedure Set_About(const pRet: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_OnUpdatedMacro: WideString; safecall;
    procedure Set_OnUpdatedMacro(const pRet: WideString); safecall;
    function Get_OnEnterMacro: WideString; safecall;
    procedure Set_OnEnterMacro(const pRet: WideString); safecall;
    function Get_OnExitMacro: WideString; safecall;
    procedure Set_OnExitMacro(const pRet: WideString); safecall;
    function Get_OnGotFocusMacro: WideString; safecall;
    procedure Set_OnGotFocusMacro(const pRet: WideString); safecall;
    function Get_OnLostFocusMacro: WideString; safecall;
    procedure Set_OnLostFocusMacro(const pRet: WideString); safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property OldValue: OleVariant read Get_OldValue;
    property Object_: IDispatch read Get_Object_;
    property ObjectVerbs[Index: Integer]: WideString read Get_ObjectVerbs;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Value: OleVariant read Get_Value write Set_Value;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property ControlSource: WideString read Get_ControlSource write Set_ControlSource;
    property OLEClass: WideString read Get_OLEClass write Set_OLEClass;
    property Verb: Integer read Get_Verb write Set_Verb;
    property Class_: WideString read Get_Class_ write Set_Class_;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Locked: WordBool read Get_Locked write Set_Locked;
    property OleData: OleVariant read Get_OleData write Set_OleData;
    property TabStop: WordBool read Get_TabStop write Set_TabStop;
    property TabIndex: Smallint read Get_TabIndex write Set_TabIndex;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property SpecialEffect: Byte read Get_SpecialEffect write Set_SpecialEffect;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property OldBorderStyle: Byte read Get_OldBorderStyle write Set_OldBorderStyle;
    property BorderColor: Integer read Get_BorderColor write Set_BorderColor;
    property BorderWidth: Byte read Get_BorderWidth write Set_BorderWidth;
    property BorderLineStyle: Byte read Get_BorderLineStyle write Set_BorderLineStyle;
    property ControlTipText: WideString read Get_ControlTipText write Set_ControlTipText;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property ObjectPalette: OleVariant read Get_ObjectPalette write Set_ObjectPalette;
    property LpOleObject: Integer read Get_LpOleObject write Set_LpOleObject;
    property ObjectVerbsCount: Integer read Get_ObjectVerbsCount write Set_ObjectVerbsCount;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property OnUpdated: WideString read Get_OnUpdated write Set_OnUpdated;
    property OnEnter: WideString read Get_OnEnter write Set_OnEnter;
    property OnExit: WideString read Get_OnExit write Set_OnExit;
    property OnGotFocus: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property Default: WordBool read Get_Default write Set_Default;
    property Cancel: WordBool read Get_Cancel write Set_Cancel;
    property Custom: WideString read Get_Custom write Set_Custom;
    property About: WideString read Get_About write Set_About;
    property Name: WideString read Get_Name write Set_Name;
    property OnUpdatedMacro: WideString read Get_OnUpdatedMacro write Set_OnUpdatedMacro;
    property OnEnterMacro: WideString read Get_OnEnterMacro write Set_OnEnterMacro;
    property OnExitMacro: WideString read Get_OnExitMacro write Set_OnExitMacro;
    property OnGotFocusMacro: WideString read Get_OnGotFocusMacro write Set_OnGotFocusMacro;
    property OnLostFocusMacro: WideString read Get_OnLostFocusMacro write Set_OnLostFocusMacro;
  end;

// *********************************************************************//
// DispIntf:  _CustomControlDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E968-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _CustomControlDisp = dispinterface
    ['{3B06E968-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property OldValue: OleVariant readonly dispid 2102;
    property Object_: IDispatch readonly dispid 2104;
    property ObjectVerbs[Index: Integer]: WideString readonly dispid 2105;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    procedure Requery; dispid 2018;
    procedure Goto_; dispid 2023;
    procedure SetFocus; dispid 2022;
    property Controls: Children readonly dispid 2190;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Value: OleVariant dispid 0;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property ControlSource: WideString dispid 27;
    property OLEClass: WideString dispid 76;
    property Verb: Integer dispid 102;
    property Class_: WideString dispid 274;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Enabled: WordBool dispid 25;
    property Locked: WordBool dispid 56;
    property OleData: OleVariant dispid 171;
    property TabStop: WordBool dispid 262;
    property TabIndex: Smallint dispid 261;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property SpecialEffect: Byte dispid 4;
    property BorderStyle: Byte dispid 9;
    property OldBorderStyle: Byte dispid 329;
    property BorderColor: Integer dispid 8;
    property BorderWidth: Byte dispid 10;
    property BorderLineStyle: Byte dispid 11;
    property ControlTipText: WideString dispid 317;
    property HelpContextId: Integer dispid 219;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property ObjectPalette: OleVariant dispid 99;
    property LpOleObject: Integer dispid 172;
    property ObjectVerbsCount: Integer dispid 173;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property OnUpdated: WideString dispid 118;
    property OnEnter: WideString dispid 222;
    property OnExit: WideString dispid 223;
    property OnGotFocus: WideString dispid 115;
    property OnLostFocus: WideString dispid 116;
    property Default: WordBool dispid 220;
    property Cancel: WordBool dispid 221;
    property Custom: WideString dispid 296;
    property About: WideString dispid 297;
    property Name: WideString dispid -2147418112;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property OnUpdatedMacro: WideString dispid 504;
    property OnEnterMacro: WideString dispid 497;
    property OnExitMacro: WideString dispid 498;
    property OnGotFocusMacro: WideString dispid 502;
    property OnLostFocusMacro: WideString dispid 503;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: _CustomControlEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4352-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _CustomControlEvents = interface(IUnknown)
    ['{BC9E4352-F037-11CD-8701-00AA003F0F07}']
    function Updated(var Code: Smallint): HResult; stdcall;
    function Enter: HResult; stdcall;
    function Exit(out Cancel: Smallint): HResult; stdcall;
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispCustomControlEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E70526E-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispCustomControlEvents = dispinterface
    ['{2E70526E-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Updated(var Code: Smallint); dispid 2076;
    procedure Enter; dispid 2019;
    procedure Exit(out Cancel: Smallint); dispid 2075;
    procedure GotFocus; dispid 2073;
    procedure LostFocus; dispid 2074;
  end;

// *********************************************************************//
// Interface: _CustomControlInReportEvents
// Flags:     (16) Hidden
// GUID:      {300471E2-7426-11CE-AB64-00AA0042B7CE}
// *********************************************************************//
  _CustomControlInReportEvents = interface(IUnknown)
    ['{300471E2-7426-11CE-AB64-00AA0042B7CE}']
  end;

// *********************************************************************//
// DispIntf:  DispCustomControlInReportEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E70527E-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispCustomControlInReportEvents = dispinterface
    ['{2E70527E-92D1-43CC-A57B-ED48BCCC711D}']
  end;

// *********************************************************************//
// Interface: _TabControl
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E971-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _TabControl = interface(IAccessible)
    ['{3B06E971-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    function Get_Pages: Pages; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(pRet: OleVariant); safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_StatusBarText: WideString; safecall;
    procedure Set_StatusBarText(const pRet: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRet: WordBool); safecall;
    function Get_TabStop: WordBool; safecall;
    procedure Set_TabStop(pRet: WordBool); safecall;
    function Get_TabIndex: Smallint; safecall;
    procedure Set_TabIndex(pRet: Smallint); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_BackStyle: Byte; safecall;
    procedure Set_BackStyle(pRet: Byte); safecall;
    function Get_MultiRow: WordBool; safecall;
    procedure Set_MultiRow(pRet: WordBool); safecall;
    function Get_Style: Byte; safecall;
    procedure Set_Style(pRet: Byte); safecall;
    function Get_TabFixedHeight: Smallint; safecall;
    procedure Set_TabFixedHeight(pRet: Smallint); safecall;
    function Get_TabFixedWidth: Smallint; safecall;
    procedure Set_TabFixedWidth(pRet: Smallint); safecall;
    function Get_FontName: WideString; safecall;
    procedure Set_FontName(const pRet: WideString); safecall;
    function Get_FontSize: Smallint; safecall;
    procedure Set_FontSize(pRet: Smallint); safecall;
    function Get_FontWeight: Smallint; safecall;
    procedure Set_FontWeight(pRet: Smallint); safecall;
    function Get_FontItalic: WordBool; safecall;
    procedure Set_FontItalic(pRet: WordBool); safecall;
    function Get_FontUnderline: WordBool; safecall;
    procedure Set_FontUnderline(pRet: WordBool); safecall;
    function Get_TextFontCharSet: Byte; safecall;
    procedure Set_TextFontCharSet(pRet: Byte); safecall;
    function Get_FontBold: Smallint; safecall;
    procedure Set_FontBold(pRet: Smallint); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_OnChange: WideString; safecall;
    procedure Set_OnChange(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_OnKeyDown: WideString; safecall;
    procedure Set_OnKeyDown(const pRet: WideString); safecall;
    function Get_OnKeyUp: WideString; safecall;
    procedure Set_OnKeyUp(const pRet: WideString); safecall;
    function Get_OnKeyPress: WideString; safecall;
    procedure Set_OnKeyPress(const pRet: WideString); safecall;
    function _NewEnum: IUnknown; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_OnChangeMacro: WideString; safecall;
    procedure Set_OnChangeMacro(const pRet: WideString); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyDownMacro: WideString; safecall;
    procedure Set_OnKeyDownMacro(const pRet: WideString); safecall;
    function Get_OnKeyUpMacro: WideString; safecall;
    procedure Set_OnKeyUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyPressMacro: WideString; safecall;
    procedure Set_OnKeyPressMacro(const pRet: WideString); safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property OldValue: OleVariant read Get_OldValue;
    property Properties: Properties read Get_Properties;
    property Pages: Pages read Get_Pages;
    property Value: OleVariant read Get_Value write Set_Value;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property StatusBarText: WideString read Get_StatusBarText write Set_StatusBarText;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property TabStop: WordBool read Get_TabStop write Set_TabStop;
    property TabIndex: Smallint read Get_TabIndex write Set_TabIndex;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property BackStyle: Byte read Get_BackStyle write Set_BackStyle;
    property MultiRow: WordBool read Get_MultiRow write Set_MultiRow;
    property Style: Byte read Get_Style write Set_Style;
    property TabFixedHeight: Smallint read Get_TabFixedHeight write Set_TabFixedHeight;
    property TabFixedWidth: Smallint read Get_TabFixedWidth write Set_TabFixedWidth;
    property FontName: WideString read Get_FontName write Set_FontName;
    property FontSize: Smallint read Get_FontSize write Set_FontSize;
    property FontWeight: Smallint read Get_FontWeight write Set_FontWeight;
    property FontItalic: WordBool read Get_FontItalic write Set_FontItalic;
    property FontUnderline: WordBool read Get_FontUnderline write Set_FontUnderline;
    property TextFontCharSet: Byte read Get_TextFontCharSet write Set_TextFontCharSet;
    property FontBold: Smallint read Get_FontBold write Set_FontBold;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property Tag: WideString read Get_Tag write Set_Tag;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property OnChange: WideString read Get_OnChange write Set_OnChange;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property Name: WideString read Get_Name write Set_Name;
    property OnChangeMacro: WideString read Get_OnChangeMacro write Set_OnChangeMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property OnKeyDownMacro: WideString read Get_OnKeyDownMacro write Set_OnKeyDownMacro;
    property OnKeyUpMacro: WideString read Get_OnKeyUpMacro write Set_OnKeyUpMacro;
    property OnKeyPressMacro: WideString read Get_OnKeyPressMacro write Set_OnKeyPressMacro;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
  end;

// *********************************************************************//
// DispIntf:  _TabControlDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E971-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _TabControlDisp = dispinterface
    ['{3B06E971-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property OldValue: OleVariant readonly dispid 2102;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    property Pages: Pages readonly dispid 2180;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Value: OleVariant dispid 0;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property StatusBarText: WideString dispid 135;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Enabled: WordBool dispid 25;
    property TabStop: WordBool dispid 262;
    property TabIndex: Smallint dispid 261;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property BackStyle: Byte dispid 29;
    property MultiRow: WordBool dispid 348;
    property Style: Byte dispid 349;
    property TabFixedHeight: Smallint dispid 350;
    property TabFixedWidth: Smallint dispid 351;
    property FontName: WideString dispid 34;
    property FontSize: Smallint dispid 35;
    property FontWeight: Smallint dispid 37;
    property FontItalic: WordBool dispid 33;
    property FontUnderline: WordBool dispid 36;
    property TextFontCharSet: Byte dispid 193;
    property FontBold: Smallint dispid 32;
    property ShortcutMenuBar: WideString dispid 304;
    property HelpContextId: Integer dispid 219;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property Tag: WideString dispid 266;
    property IsVisible: WordBool dispid 140;
    property InSelection: WordBool dispid 280;
    property OnChange: WideString dispid 114;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property OnKeyDown: WideString dispid 104;
    property OnKeyUp: WideString dispid 105;
    property OnKeyPress: WideString dispid 106;
    function _NewEnum: IUnknown; dispid -4;
    property Name: WideString dispid -2147418112;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property OnChangeMacro: WideString dispid 506;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property OnKeyDownMacro: WideString dispid 500;
    property OnKeyUpMacro: WideString dispid 501;
    property OnKeyPressMacro: WideString dispid 499;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: _TabControlEvents
// Flags:     (16) Hidden
// GUID:      {3B06E972-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _TabControlEvents = interface(IUnknown)
    ['{3B06E972-E47C-11CD-8701-00AA003F0F07}']
    function Click: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function KeyDown(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function KeyPress(var KeyAscii: Smallint): HResult; stdcall;
    function KeyUp(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function Change: HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispTabControlEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E705281-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispTabControlEvents = dispinterface
    ['{2E705281-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid -602;
    procedure KeyPress(var KeyAscii: Smallint); dispid -603;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid -604;
    procedure Change; dispid 2077;
  end;

// *********************************************************************//
// Interface: _PageEvents
// Flags:     (16) Hidden
// GUID:      {3B06E975-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _PageEvents = interface(IUnknown)
    ['{3B06E975-E47C-11CD-8701-00AA003F0F07}']
    function Click: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispPageEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E705282-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispPageEvents = dispinterface
    ['{2E705282-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
  end;

// *********************************************************************//
// Interface: _Section
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDCFC-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _Section = interface(IDispatch)
    ['{331FDCFC-CF31-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Controls: Children; safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ForceNewPage: Byte; safecall;
    procedure Set_ForceNewPage(pRet: Byte); safecall;
    function Get_NewRowOrCol: Byte; safecall;
    procedure Set_NewRowOrCol(pRet: Byte); safecall;
    function Get_KeepTogether: WordBool; safecall;
    procedure Set_KeepTogether(pRet: WordBool); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_CanGrow: WordBool; safecall;
    procedure Set_CanGrow(pRet: WordBool); safecall;
    function Get_CanShrink: WordBool; safecall;
    procedure Set_CanShrink(pRet: WordBool); safecall;
    function Get_RepeatSection: WordBool; safecall;
    procedure Set_RepeatSection(pRet: WordBool); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(pRet: Integer); safecall;
    function Get_SpecialEffect: Byte; safecall;
    procedure Set_SpecialEffect(pRet: Byte); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_OnFormat: WideString; safecall;
    procedure Set_OnFormat(const pRet: WideString); safecall;
    function Get_OnPrint: WideString; safecall;
    procedure Set_OnPrint(const pRet: WideString); safecall;
    function Get_OnRetreat: WideString; safecall;
    procedure Set_OnRetreat(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_HasContinued: WordBool; safecall;
    procedure Set_HasContinued(pRet: WordBool); safecall;
    function Get_WillContinue: WordBool; safecall;
    procedure Set_WillContinue(pRet: WordBool); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_AutoHeight: WordBool; safecall;
    procedure Set_AutoHeight(pRet: WordBool); safecall;
    function Get_OnFormatMacro: WideString; safecall;
    procedure Set_OnFormatMacro(const pRet: WideString); safecall;
    function Get_OnPrintMacro: WideString; safecall;
    procedure Set_OnPrintMacro(const pRet: WideString); safecall;
    function Get_OnRetreatMacro: WideString; safecall;
    procedure Set_OnRetreatMacro(const pRet: WideString); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_AlternateBackColor: Integer; safecall;
    procedure Set_AlternateBackColor(pRet: Integer); safecall;
    function Get_OnPaint: WideString; safecall;
    procedure Set_OnPaint(const pRet: WideString); safecall;
    function Get_OnPaintMacro: WideString; safecall;
    procedure Set_OnPaintMacro(const pRet: WideString); safecall;
    procedure SetTabOrder; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ForceNewPage: Byte read Get_ForceNewPage write Set_ForceNewPage;
    property NewRowOrCol: Byte read Get_NewRowOrCol write Set_NewRowOrCol;
    property KeepTogether: WordBool read Get_KeepTogether write Set_KeepTogether;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property CanGrow: WordBool read Get_CanGrow write Set_CanGrow;
    property CanShrink: WordBool read Get_CanShrink write Set_CanShrink;
    property RepeatSection: WordBool read Get_RepeatSection write Set_RepeatSection;
    property Height: Smallint read Get_Height write Set_Height;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property SpecialEffect: Byte read Get_SpecialEffect write Set_SpecialEffect;
    property Tag: WideString read Get_Tag write Set_Tag;
    property OnFormat: WideString read Get_OnFormat write Set_OnFormat;
    property OnPrint: WideString read Get_OnPrint write Set_OnPrint;
    property OnRetreat: WideString read Get_OnRetreat write Set_OnRetreat;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property HasContinued: WordBool read Get_HasContinued write Set_HasContinued;
    property WillContinue: WordBool read Get_WillContinue write Set_WillContinue;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property Name: WideString read Get_Name write Set_Name;
    property AutoHeight: WordBool read Get_AutoHeight write Set_AutoHeight;
    property OnFormatMacro: WideString read Get_OnFormatMacro write Set_OnFormatMacro;
    property OnPrintMacro: WideString read Get_OnPrintMacro write Set_OnPrintMacro;
    property OnRetreatMacro: WideString read Get_OnRetreatMacro write Set_OnRetreatMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property AlternateBackColor: Integer read Get_AlternateBackColor write Set_AlternateBackColor;
    property OnPaint: WideString read Get_OnPaint write Set_OnPaint;
    property OnPaintMacro: WideString read Get_OnPaintMacro write Set_OnPaintMacro;
  end;

// *********************************************************************//
// DispIntf:  _SectionDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDCFC-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _SectionDisp = dispinterface
    ['{331FDCFC-CF31-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Properties: Properties readonly dispid 2091;
    property Controls: Children readonly dispid 2190;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ForceNewPage: Byte dispid 151;
    property NewRowOrCol: Byte dispid 231;
    property KeepTogether: WordBool dispid 75;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property CanGrow: WordBool dispid 14;
    property CanShrink: WordBool dispid 16;
    property RepeatSection: WordBool dispid 15;
    property Height: Smallint dispid 44;
    property BackColor: Integer dispid 28;
    property SpecialEffect: Byte dispid 4;
    property Tag: WideString dispid 266;
    property OnFormat: WideString dispid 80;
    property OnPrint: WideString dispid 82;
    property OnRetreat: WideString dispid 84;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property HasContinued: WordBool dispid 200;
    property WillContinue: WordBool dispid 201;
    property InSelection: WordBool dispid 280;
    property Name: WideString dispid -2147418112;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property AutoHeight: WordBool dispid 475;
    property OnFormatMacro: WideString dispid 493;
    property OnPrintMacro: WideString dispid 494;
    property OnRetreatMacro: WideString dispid 495;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property AlternateBackColor: Integer dispid 571;
    property OnPaint: WideString dispid 569;
    property OnPaintMacro: WideString dispid 570;
    procedure SetTabOrder; dispid 2503;
  end;

// *********************************************************************//
// Interface: _SectionEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4353-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _SectionEvents = interface(IUnknown)
    ['{BC9E4353-F037-11CD-8701-00AA003F0F07}']
    function Click: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function Paint: HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispSectionEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E70527B-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispSectionEvents = dispinterface
    ['{2E70527B-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
    procedure Paint; dispid 2486;
  end;

// *********************************************************************//
// Interface: _GroupLevel
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDD27-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _GroupLevel = interface(IDispatch)
    ['{331FDD27-CF31-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Properties: Properties; safecall;
    function Get_ControlSource: WideString; safecall;
    procedure Set_ControlSource(const pRet: WideString); safecall;
    function Get_SortOrder: WordBool; safecall;
    procedure Set_SortOrder(pRet: WordBool); safecall;
    function Get_GroupHeader: WordBool; safecall;
    procedure Set_GroupHeader(pRet: WordBool); safecall;
    function Get_GroupFooter: WordBool; safecall;
    procedure Set_GroupFooter(pRet: WordBool); safecall;
    function Get_GroupOn: Smallint; safecall;
    procedure Set_GroupOn(pRet: Smallint); safecall;
    function Get_GroupInterval: Integer; safecall;
    procedure Set_GroupInterval(pRet: Integer); safecall;
    function Get_KeepTogether: Byte; safecall;
    procedure Set_KeepTogether(pRet: Byte); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Properties: Properties read Get_Properties;
    property ControlSource: WideString read Get_ControlSource write Set_ControlSource;
    property SortOrder: WordBool read Get_SortOrder write Set_SortOrder;
    property GroupHeader: WordBool read Get_GroupHeader write Set_GroupHeader;
    property GroupFooter: WordBool read Get_GroupFooter write Set_GroupFooter;
    property GroupOn: Smallint read Get_GroupOn write Set_GroupOn;
    property GroupInterval: Integer read Get_GroupInterval write Set_GroupInterval;
    property KeepTogether: Byte read Get_KeepTogether write Set_KeepTogether;
  end;

// *********************************************************************//
// DispIntf:  _GroupLevelDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDD27-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _GroupLevelDisp = dispinterface
    ['{331FDD27-CF31-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Properties: Properties readonly dispid 2091;
    property ControlSource: WideString dispid 27;
    property SortOrder: WordBool dispid 174;
    property GroupHeader: WordBool dispid 175;
    property GroupFooter: WordBool dispid 176;
    property GroupOn: Smallint dispid 177;
    property GroupInterval: Integer dispid 178;
    property KeepTogether: Byte dispid 75;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _SectionInReportEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4361-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _SectionInReportEvents = interface(IUnknown)
    ['{BC9E4361-F037-11CD-8701-00AA003F0F07}']
    function Format(out Cancel: Smallint; var FormatCount: Smallint): HResult; stdcall;
    function Print(out Cancel: Smallint; var PrintCount: Smallint): HResult; stdcall;
    function Retreat: HResult; stdcall;
    function Click: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function Paint: HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispSectionInReportEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E70527C-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispSectionInReportEvents = dispinterface
    ['{2E70527C-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Format(out Cancel: Smallint; var FormatCount: Smallint); dispid 2079;
    procedure Print(out Cancel: Smallint; var PrintCount: Smallint); dispid 2080;
    procedure Retreat; dispid 2081;
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
    procedure Paint; dispid 2486;
  end;

// *********************************************************************//
// Interface: _PageHdrFtrInReportEvents
// Flags:     (16) Hidden
// GUID:      {7AD9E905-BAF8-11CE-A68A-00AA003F0F07}
// *********************************************************************//
  _PageHdrFtrInReportEvents = interface(IUnknown)
    ['{7AD9E905-BAF8-11CE-A68A-00AA003F0F07}']
    function Format(out Cancel: Smallint; var FormatCount: Smallint): HResult; stdcall;
    function Print(out Cancel: Smallint; var PrintCount: Smallint): HResult; stdcall;
    function Click: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
  end;

// *********************************************************************//
// DispIntf:  DispPageHdrFtrInReportEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2E705280-92D1-43CC-A57B-ED48BCCC711D}
// *********************************************************************//
  DispPageHdrFtrInReportEvents = dispinterface
    ['{2E705280-92D1-43CC-A57B-ED48BCCC711D}']
    procedure Format(out Cancel: Smallint; var FormatCount: Smallint); dispid 2079;
    procedure Print(out Cancel: Smallint; var PrintCount: Smallint); dispid 2080;
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
    procedure Paint; dispid 2486;
  end;

// *********************************************************************//
// Interface: Module
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDCFE-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
  Module = interface(IDispatch)
    ['{331FDCFE-CF31-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    procedure InsertText(const Text: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure AddFromString(const String_: WideString); safecall;
    procedure AddFromFile(const FileName: WideString); safecall;
    function Get_Lines(Line: Integer; NumLines: Integer): WideString; safecall;
    function Get_CountOfLines: Integer; safecall;
    procedure InsertLines(Line: Integer; const String_: WideString); safecall;
    procedure DeleteLines(StartLine: Integer; Count: Integer); safecall;
    procedure ReplaceLine(Line: Integer; const String_: WideString); safecall;
    function Get_ProcStartLine(const ProcName: WideString; ProcKind: vbext_ProcKind): Integer; safecall;
    function Get_ProcCountLines(const ProcName: WideString; ProcKind: vbext_ProcKind): Integer; safecall;
    function Get_ProcBodyLine(const ProcName: WideString; ProcKind: vbext_ProcKind): Integer; safecall;
    function Get_ProcOfLine(Line: Integer; out pprockind: vbext_ProcKind): WideString; safecall;
    function Get_CountOfDeclarationLines: Integer; safecall;
    function CreateEventProc(const EventName: WideString; const ObjectName: WideString): Integer; safecall;
    function Find(const Target: WideString; var StartLine: Integer; var StartColumn: Integer; 
                  var EndLine: Integer; var EndColumn: Integer; WholeWord: WordBool; 
                  MatchCase: WordBool; PatternSearch: WordBool): WordBool; safecall;
    function Get_type_: AcModuleType; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Name: WideString read Get_Name write Set_Name;
    property Lines[Line: Integer; NumLines: Integer]: WideString read Get_Lines;
    property CountOfLines: Integer read Get_CountOfLines;
    property ProcStartLine[const ProcName: WideString; ProcKind: vbext_ProcKind]: Integer read Get_ProcStartLine;
    property ProcCountLines[const ProcName: WideString; ProcKind: vbext_ProcKind]: Integer read Get_ProcCountLines;
    property ProcBodyLine[const ProcName: WideString; ProcKind: vbext_ProcKind]: Integer read Get_ProcBodyLine;
    property ProcOfLine[Line: Integer; out pprockind: vbext_ProcKind]: WideString read Get_ProcOfLine;
    property CountOfDeclarationLines: Integer read Get_CountOfDeclarationLines;
    property type_: AcModuleType read Get_type_;
  end;

// *********************************************************************//
// DispIntf:  ModuleDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDCFE-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
  ModuleDisp = dispinterface
    ['{331FDCFE-CF31-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    procedure InsertText(const Text: WideString); dispid 2093;
    property Name: WideString dispid 0;
    procedure AddFromString(const String_: WideString); dispid 1610743813;
    procedure AddFromFile(const FileName: WideString); dispid 1610743814;
    property Lines[Line: Integer; NumLines: Integer]: WideString readonly dispid 1610743815;
    property CountOfLines: Integer readonly dispid 1610743816;
    procedure InsertLines(Line: Integer; const String_: WideString); dispid 1610743817;
    procedure DeleteLines(StartLine: Integer; Count: Integer); dispid 1610743818;
    procedure ReplaceLine(Line: Integer; const String_: WideString); dispid 1610743819;
    property ProcStartLine[const ProcName: WideString; ProcKind: vbext_ProcKind]: Integer readonly dispid 1610743820;
    property ProcCountLines[const ProcName: WideString; ProcKind: vbext_ProcKind]: Integer readonly dispid 1610743821;
    property ProcBodyLine[const ProcName: WideString; ProcKind: vbext_ProcKind]: Integer readonly dispid 1610743822;
    property ProcOfLine[Line: Integer; out pprockind: vbext_ProcKind]: WideString readonly dispid 1610743823;
    property CountOfDeclarationLines: Integer readonly dispid 1610743824;
    function CreateEventProc(const EventName: WideString; const ObjectName: WideString): Integer; dispid 1610743825;
    function Find(const Target: WideString; var StartLine: Integer; var StartColumn: Integer; 
                  var EndLine: Integer; var EndColumn: Integer; WholeWord: WordBool; 
                  MatchCase: WordBool; PatternSearch: WordBool): WordBool; dispid 1610743826;
    property type_: AcModuleType readonly dispid 1610743827;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: Modules
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9DD0AF42-6E28-11CF-9008-00AA0042B7CE}
// *********************************************************************//
  Modules = interface(IDispatch)
    ['{9DD0AF42-6E28-11CF-9008-00AA0042B7CE}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Item(Index: OleVariant): Module; safecall;
    function Get_Count: Integer; safecall;
    function _NewEnum: IUnknown; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: Module read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ModulesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9DD0AF42-6E28-11CF-9008-00AA0042B7CE}
// *********************************************************************//
  ModulesDisp = dispinterface
    ['{9DD0AF42-6E28-11CF-9008-00AA0042B7CE}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Item[Index: OleVariant]: Module readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function _NewEnum: IUnknown; dispid -4;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _Form
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E5135D80-8F8D-101B-AF4E-00AA003F0F07}
// *********************************************************************//
  _Form = interface(IAccessible)
    ['{E5135D80-8F8D-101B-AF4E-00AA003F0F07}']
    function Get_FormName: WideString; safecall;
    procedure Set_FormName(const pRet: WideString); safecall;
    function Get_RecordSource: WideString; safecall;
    procedure Set_RecordSource(const pRet: WideString); safecall;
    function Get_Filter: WideString; safecall;
    procedure Set_Filter(const pRet: WideString); safecall;
    function Get_FilterOn: WordBool; safecall;
    procedure Set_FilterOn(pRet: WordBool); safecall;
    function Get_OrderBy: WideString; safecall;
    procedure Set_OrderBy(const pRet: WideString); safecall;
    function Get_OrderByOn: WordBool; safecall;
    procedure Set_OrderByOn(pRet: WordBool); safecall;
    function Get_AllowFilters: WordBool; safecall;
    procedure Set_AllowFilters(pRet: WordBool); safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const pRet: WideString); safecall;
    function Get_DefaultView: Byte; safecall;
    procedure Set_DefaultView(pRet: Byte); safecall;
    function Get_ViewsAllowed: Byte; safecall;
    procedure Set_ViewsAllowed(pRet: Byte); safecall;
    function Get_AllowEditing: WordBool; safecall;
    procedure Set_AllowEditing(pRet: WordBool); safecall;
    function Get_DefaultEditing: Smallint; safecall;
    procedure Set_DefaultEditing(pRet: Smallint); safecall;
    function Get_AllowEdits: WordBool; safecall;
    procedure Set_AllowEdits(pRet: WordBool); safecall;
    function Get_AllowDeletions: WordBool; safecall;
    procedure Set_AllowDeletions(pRet: WordBool); safecall;
    function Get_AllowAdditions: WordBool; safecall;
    procedure Set_AllowAdditions(pRet: WordBool); safecall;
    function Get_DataEntry: WordBool; safecall;
    procedure Set_DataEntry(pRet: WordBool); safecall;
    function Get_AllowUpdating: Byte; safecall;
    procedure Set_AllowUpdating(pRet: Byte); safecall;
    function Get_RecordsetType: Byte; safecall;
    procedure Set_RecordsetType(pRet: Byte); safecall;
    function Get_RecordLocks: Byte; safecall;
    procedure Set_RecordLocks(pRet: Byte); safecall;
    function Get_ScrollBars: Byte; safecall;
    procedure Set_ScrollBars(pRet: Byte); safecall;
    function Get_RecordSelectors: WordBool; safecall;
    procedure Set_RecordSelectors(pRet: WordBool); safecall;
    function Get_NavigationButtons: WordBool; safecall;
    procedure Set_NavigationButtons(pRet: WordBool); safecall;
    function Get_DividingLines: WordBool; safecall;
    procedure Set_DividingLines(pRet: WordBool); safecall;
    function Get_AutoResize: WordBool; safecall;
    procedure Set_AutoResize(pRet: WordBool); safecall;
    function Get_AutoCenter: WordBool; safecall;
    procedure Set_AutoCenter(pRet: WordBool); safecall;
    function Get_PopUp: WordBool; safecall;
    procedure Set_PopUp(pRet: WordBool); safecall;
    function Get_Modal: WordBool; safecall;
    procedure Set_Modal(pRet: WordBool); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_ControlBox: WordBool; safecall;
    procedure Set_ControlBox(pRet: WordBool); safecall;
    function Get_MinButton: WordBool; safecall;
    procedure Set_MinButton(pRet: WordBool); safecall;
    function Get_MaxButton: WordBool; safecall;
    procedure Set_MaxButton(pRet: WordBool); safecall;
    function Get_MinMaxButtons: Byte; safecall;
    procedure Set_MinMaxButtons(pRet: Byte); safecall;
    function Get_CloseButton: WordBool; safecall;
    procedure Set_CloseButton(pRet: WordBool); safecall;
    function Get_WhatsThisButton: WordBool; safecall;
    procedure Set_WhatsThisButton(pRet: WordBool); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Picture: WideString; safecall;
    procedure Set_Picture(const pRet: WideString); safecall;
    function Get_PictureType: Byte; safecall;
    procedure Set_PictureType(pRet: Byte); safecall;
    function Get_PictureSizeMode: Byte; safecall;
    procedure Set_PictureSizeMode(pRet: Byte); safecall;
    function Get_PictureAlignment: Byte; safecall;
    procedure Set_PictureAlignment(pRet: Byte); safecall;
    function Get_PictureTiling: WordBool; safecall;
    procedure Set_PictureTiling(pRet: WordBool); safecall;
    function Get_Cycle: Byte; safecall;
    procedure Set_Cycle(pRet: Byte); safecall;
    function Get_MenuBar: WideString; safecall;
    procedure Set_MenuBar(const pRet: WideString); safecall;
    function Get_Toolbar: WideString; safecall;
    procedure Set_Toolbar(const pRet: WideString); safecall;
    function Get_ShortcutMenu: WordBool; safecall;
    procedure Set_ShortcutMenu(pRet: WordBool); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_GridX: Smallint; safecall;
    procedure Set_GridX(pRet: Smallint); safecall;
    function Get_GridY: Smallint; safecall;
    procedure Set_GridY(pRet: Smallint); safecall;
    function Get_LayoutForPrint: WordBool; safecall;
    procedure Set_LayoutForPrint(pRet: WordBool); safecall;
    function Get_FastLaserPrinting: WordBool; safecall;
    procedure Set_FastLaserPrinting(pRet: WordBool); safecall;
    function Get_HelpFile: WideString; safecall;
    procedure Set_HelpFile(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_RowHeight: Smallint; safecall;
    procedure Set_RowHeight(pRet: Smallint); safecall;
    function Get_DatasheetFontName: WideString; safecall;
    procedure Set_DatasheetFontName(const pRet: WideString); safecall;
    function Get_DatasheetFontHeight: Smallint; safecall;
    procedure Set_DatasheetFontHeight(pRet: Smallint); safecall;
    function Get_DatasheetFontWeight: Smallint; safecall;
    procedure Set_DatasheetFontWeight(pRet: Smallint); safecall;
    function Get_DatasheetFontItalic: WordBool; safecall;
    procedure Set_DatasheetFontItalic(pRet: WordBool); safecall;
    function Get_DatasheetFontUnderline: WordBool; safecall;
    procedure Set_DatasheetFontUnderline(pRet: WordBool); safecall;
    function Get_TabularCharSet: Byte; safecall;
    procedure Set_TabularCharSet(pRet: Byte); safecall;
    function Get_DatasheetGridlinesBehavior: Byte; safecall;
    procedure Set_DatasheetGridlinesBehavior(pRet: Byte); safecall;
    function Get_DatasheetGridlinesColor: Integer; safecall;
    procedure Set_DatasheetGridlinesColor(pRet: Integer); safecall;
    function Get_DatasheetCellsEffect: Byte; safecall;
    procedure Set_DatasheetCellsEffect(pRet: Byte); safecall;
    function Get_DatasheetForeColor: Integer; safecall;
    procedure Set_DatasheetForeColor(pRet: Integer); safecall;
    function Get_ShowGrid: WordBool; safecall;
    procedure Set_ShowGrid(pRet: WordBool); safecall;
    function Get_DatasheetBackColor: Integer; safecall;
    procedure Set_DatasheetBackColor(pRet: Integer); safecall;
    function Get_Hwnd: Integer; safecall;
    procedure Set_Hwnd(pRet: Integer); safecall;
    function Get_Count: Smallint; safecall;
    procedure Set_Count(pRet: Smallint); safecall;
    function Get_Page: Integer; safecall;
    procedure Set_Page(pRet: Integer); safecall;
    function Get_Pages: Smallint; safecall;
    procedure Set_Pages(pRet: Smallint); safecall;
    function Get_LogicalPageWidth: Integer; safecall;
    procedure Set_LogicalPageWidth(pRet: Integer); safecall;
    function Get_LogicalPageHeight: Integer; safecall;
    procedure Set_LogicalPageHeight(pRet: Integer); safecall;
    function Get_ZoomControl: Integer; safecall;
    procedure Set_ZoomControl(pRet: Integer); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_Painting: WordBool; safecall;
    procedure Set_Painting(pRet: WordBool); safecall;
    function Get_PrtMip: OleVariant; safecall;
    procedure Set_PrtMip(pRet: OleVariant); safecall;
    function Get_PrtDevMode: OleVariant; safecall;
    procedure Set_PrtDevMode(pRet: OleVariant); safecall;
    function Get_PrtDevNames: OleVariant; safecall;
    procedure Set_PrtDevNames(pRet: OleVariant); safecall;
    function Get_FrozenColumns: Smallint; safecall;
    procedure Set_FrozenColumns(pRet: Smallint); safecall;
    function Get_Bookmark: OleVariant; safecall;
    procedure Set_Bookmark(pRet: OleVariant); safecall;
    function Get_TabularFamily: Byte; safecall;
    procedure Set_TabularFamily(pRet: Byte); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_PaletteSource: WideString; safecall;
    procedure Set_PaletteSource(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_PaintPalette: OleVariant; safecall;
    procedure Set_PaintPalette(pRet: OleVariant); safecall;
    function Get_OnMenu: WideString; safecall;
    procedure Set_OnMenu(const pRet: WideString); safecall;
    function Get_OpenArgs: OleVariant; safecall;
    procedure Set_OpenArgs(pRet: OleVariant); safecall;
    function Get_ConnectSynch: Smallint; safecall;
    procedure Set_ConnectSynch(pRet: Smallint); safecall;
    function Get_OnCurrent: WideString; safecall;
    procedure Set_OnCurrent(const pRet: WideString); safecall;
    function Get_OnInsert: WideString; safecall;
    procedure Set_OnInsert(const pRet: WideString); safecall;
    function Get_BeforeInsert: WideString; safecall;
    procedure Set_BeforeInsert(const pRet: WideString); safecall;
    function Get_AfterInsert: WideString; safecall;
    procedure Set_AfterInsert(const pRet: WideString); safecall;
    function Get_BeforeUpdate: WideString; safecall;
    procedure Set_BeforeUpdate(const pRet: WideString); safecall;
    function Get_AfterUpdate: WideString; safecall;
    procedure Set_AfterUpdate(const pRet: WideString); safecall;
    function Get_OnDirty: WideString; safecall;
    procedure Set_OnDirty(const pRet: WideString); safecall;
    function Get_OnDelete: WideString; safecall;
    procedure Set_OnDelete(const pRet: WideString); safecall;
    function Get_BeforeDelConfirm: WideString; safecall;
    procedure Set_BeforeDelConfirm(const pRet: WideString); safecall;
    function Get_AfterDelConfirm: WideString; safecall;
    procedure Set_AfterDelConfirm(const pRet: WideString); safecall;
    function Get_OnOpen: WideString; safecall;
    procedure Set_OnOpen(const pRet: WideString); safecall;
    function Get_OnLoad: WideString; safecall;
    procedure Set_OnLoad(const pRet: WideString); safecall;
    function Get_OnResize: WideString; safecall;
    procedure Set_OnResize(const pRet: WideString); safecall;
    function Get_OnUnload: WideString; safecall;
    procedure Set_OnUnload(const pRet: WideString); safecall;
    function Get_OnClose: WideString; safecall;
    procedure Set_OnClose(const pRet: WideString); safecall;
    function Get_OnActivate: WideString; safecall;
    procedure Set_OnActivate(const pRet: WideString); safecall;
    function Get_OnDeactivate: WideString; safecall;
    procedure Set_OnDeactivate(const pRet: WideString); safecall;
    function Get_OnGotFocus: WideString; safecall;
    procedure Set_OnGotFocus(const pRet: WideString); safecall;
    function Get_OnLostFocus: WideString; safecall;
    procedure Set_OnLostFocus(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_OnKeyDown: WideString; safecall;
    procedure Set_OnKeyDown(const pRet: WideString); safecall;
    function Get_OnKeyUp: WideString; safecall;
    procedure Set_OnKeyUp(const pRet: WideString); safecall;
    function Get_OnKeyPress: WideString; safecall;
    procedure Set_OnKeyPress(const pRet: WideString); safecall;
    function Get_KeyPreview: WordBool; safecall;
    procedure Set_KeyPreview(pRet: WordBool); safecall;
    function Get_OnError: WideString; safecall;
    procedure Set_OnError(const pRet: WideString); safecall;
    function Get_OnFilter: WideString; safecall;
    procedure Set_OnFilter(const pRet: WideString); safecall;
    function Get_OnApplyFilter: WideString; safecall;
    procedure Set_OnApplyFilter(const pRet: WideString); safecall;
    function Get_OnTimer: WideString; safecall;
    procedure Set_OnTimer(const pRet: WideString); safecall;
    function Get_TimerInterval: Integer; safecall;
    procedure Set_TimerInterval(pRet: Integer); safecall;
    function Get_Dirty: WordBool; safecall;
    procedure Set_Dirty(pRet: WordBool); safecall;
    function Get_WindowWidth: Smallint; safecall;
    procedure Set_WindowWidth(pRet: Smallint); safecall;
    function Get_WindowHeight: Smallint; safecall;
    procedure Set_WindowHeight(pRet: Smallint); safecall;
    function Get_CurrentView: Smallint; safecall;
    procedure Set_CurrentView(pRet: Smallint); safecall;
    function Get_CurrentSectionTop: Smallint; safecall;
    procedure Set_CurrentSectionTop(pRet: Smallint); safecall;
    function Get_CurrentSectionLeft: Smallint; safecall;
    procedure Set_CurrentSectionLeft(pRet: Smallint); safecall;
    function Get_SelLeft: Integer; safecall;
    procedure Set_SelLeft(pRet: Integer); safecall;
    function Get_SelTop: Integer; safecall;
    procedure Set_SelTop(pRet: Integer); safecall;
    function Get_SelWidth: Integer; safecall;
    procedure Set_SelWidth(pRet: Integer); safecall;
    function Get_SelHeight: Integer; safecall;
    procedure Set_SelHeight(pRet: Integer); safecall;
    function Get_CurrentRecord: Integer; safecall;
    procedure Set_CurrentRecord(pRet: Integer); safecall;
    function Get_PictureData: OleVariant; safecall;
    procedure Set_PictureData(pRet: OleVariant); safecall;
    function Get_InsideHeight: Integer; safecall;
    procedure Set_InsideHeight(pRet: Integer); safecall;
    function Get_InsideWidth: Integer; safecall;
    procedure Set_InsideWidth(pRet: Integer); safecall;
    function Get_PicturePalette: OleVariant; safecall;
    procedure Set_PicturePalette(pRet: OleVariant); safecall;
    function Get_HasModule: WordBool; safecall;
    procedure Set_HasModule(pRet: WordBool); safecall;
    function Get_acHiddenCurrentPage: Integer; safecall;
    procedure Set_acHiddenCurrentPage(pRet: Integer); safecall;
    function Get_Orientation: Byte; safecall;
    procedure Set_Orientation(pRet: Byte); safecall;
    function Get_AllowDesignChanges: WordBool; safecall;
    procedure Set_AllowDesignChanges(pRet: WordBool); safecall;
    function Get_ServerFilter: WideString; safecall;
    procedure Set_ServerFilter(const pRet: WideString); safecall;
    function Get_ServerFilterByForm: WordBool; safecall;
    procedure Set_ServerFilterByForm(pRet: WordBool); safecall;
    function Get_MaxRecords: Integer; safecall;
    procedure Set_MaxRecords(pRet: Integer); safecall;
    function Get_UniqueTable: WideString; safecall;
    procedure Set_UniqueTable(const pRet: WideString); safecall;
    function Get_ResyncCommand: WideString; safecall;
    procedure Set_ResyncCommand(const pRet: WideString); safecall;
    function Get_InputParameters: WideString; safecall;
    procedure Set_InputParameters(const pRet: WideString); safecall;
    function Get_MaxRecButton: WordBool; safecall;
    procedure Set_MaxRecButton(pRet: WordBool); safecall;
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_NewRecord: Smallint; safecall;
    procedure Undo; safecall;
    function Get_ActiveControl: AccessControl; safecall;
    function Get_DefaultControl(ControlType: Integer): AccessControl; safecall;
    function Get_Dynaset: IDispatch; safecall;
    function Get_RecordsetClone: IDispatch; safecall;
    function Get_Recordset: IDispatch; safecall;
    procedure _Set_Recordset(const pRet: IDispatch); safecall;
    function Get_Section(Index: OleVariant): AccessSection; safecall;
    function Get_Form: AccessForm; safecall;
    function Get_Module: Module; safecall;
    function Get_Properties: Properties; safecall;
    function Get_ConnectControl: AccessControl; safecall;
    procedure Recalc; safecall;
    procedure Requery; safecall;
    procedure Refresh; safecall;
    procedure Repaint; safecall;
    procedure GoToPage(PageNumber: Integer; Right: Integer; Down: Integer); safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Controls; safecall;
    function _NewEnum: IUnknown; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    function Get_SubdatasheetHeight: Smallint; safecall;
    procedure Set_SubdatasheetHeight(pRet: Smallint); safecall;
    function Get_SubdatasheetExpanded: WordBool; safecall;
    procedure Set_SubdatasheetExpanded(pRet: WordBool); safecall;
    property FormName: WideString read Get_FormName write Set_FormName;
    property RecordSource: WideString read Get_RecordSource write Set_RecordSource;
    property Filter: WideString read Get_Filter write Set_Filter;
    property FilterOn: WordBool read Get_FilterOn write Set_FilterOn;
    property OrderBy: WideString read Get_OrderBy write Set_OrderBy;
    property OrderByOn: WordBool read Get_OrderByOn write Set_OrderByOn;
    property AllowFilters: WordBool read Get_AllowFilters write Set_AllowFilters;
    property Caption: WideString read Get_Caption write Set_Caption;
    property DefaultView: Byte read Get_DefaultView write Set_DefaultView;
    property ViewsAllowed: Byte read Get_ViewsAllowed write Set_ViewsAllowed;
    property AllowEditing: WordBool read Get_AllowEditing write Set_AllowEditing;
    property DefaultEditing: Smallint read Get_DefaultEditing write Set_DefaultEditing;
    property AllowEdits: WordBool read Get_AllowEdits write Set_AllowEdits;
    property AllowDeletions: WordBool read Get_AllowDeletions write Set_AllowDeletions;
    property AllowAdditions: WordBool read Get_AllowAdditions write Set_AllowAdditions;
    property DataEntry: WordBool read Get_DataEntry write Set_DataEntry;
    property AllowUpdating: Byte read Get_AllowUpdating write Set_AllowUpdating;
    property RecordsetType: Byte read Get_RecordsetType write Set_RecordsetType;
    property RecordLocks: Byte read Get_RecordLocks write Set_RecordLocks;
    property ScrollBars: Byte read Get_ScrollBars write Set_ScrollBars;
    property RecordSelectors: WordBool read Get_RecordSelectors write Set_RecordSelectors;
    property NavigationButtons: WordBool read Get_NavigationButtons write Set_NavigationButtons;
    property DividingLines: WordBool read Get_DividingLines write Set_DividingLines;
    property AutoResize: WordBool read Get_AutoResize write Set_AutoResize;
    property AutoCenter: WordBool read Get_AutoCenter write Set_AutoCenter;
    property PopUp: WordBool read Get_PopUp write Set_PopUp;
    property Modal: WordBool read Get_Modal write Set_Modal;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property ControlBox: WordBool read Get_ControlBox write Set_ControlBox;
    property MinButton: WordBool read Get_MinButton write Set_MinButton;
    property MaxButton: WordBool read Get_MaxButton write Set_MaxButton;
    property MinMaxButtons: Byte read Get_MinMaxButtons write Set_MinMaxButtons;
    property CloseButton: WordBool read Get_CloseButton write Set_CloseButton;
    property WhatsThisButton: WordBool read Get_WhatsThisButton write Set_WhatsThisButton;
    property Width: Smallint read Get_Width write Set_Width;
    property Picture: WideString read Get_Picture write Set_Picture;
    property PictureType: Byte read Get_PictureType write Set_PictureType;
    property PictureSizeMode: Byte read Get_PictureSizeMode write Set_PictureSizeMode;
    property PictureAlignment: Byte read Get_PictureAlignment write Set_PictureAlignment;
    property PictureTiling: WordBool read Get_PictureTiling write Set_PictureTiling;
    property Cycle: Byte read Get_Cycle write Set_Cycle;
    property MenuBar: WideString read Get_MenuBar write Set_MenuBar;
    property Toolbar: WideString read Get_Toolbar write Set_Toolbar;
    property ShortcutMenu: WordBool read Get_ShortcutMenu write Set_ShortcutMenu;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property GridX: Smallint read Get_GridX write Set_GridX;
    property GridY: Smallint read Get_GridY write Set_GridY;
    property LayoutForPrint: WordBool read Get_LayoutForPrint write Set_LayoutForPrint;
    property FastLaserPrinting: WordBool read Get_FastLaserPrinting write Set_FastLaserPrinting;
    property HelpFile: WideString read Get_HelpFile write Set_HelpFile;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property RowHeight: Smallint read Get_RowHeight write Set_RowHeight;
    property DatasheetFontName: WideString read Get_DatasheetFontName write Set_DatasheetFontName;
    property DatasheetFontHeight: Smallint read Get_DatasheetFontHeight write Set_DatasheetFontHeight;
    property DatasheetFontWeight: Smallint read Get_DatasheetFontWeight write Set_DatasheetFontWeight;
    property DatasheetFontItalic: WordBool read Get_DatasheetFontItalic write Set_DatasheetFontItalic;
    property DatasheetFontUnderline: WordBool read Get_DatasheetFontUnderline write Set_DatasheetFontUnderline;
    property TabularCharSet: Byte read Get_TabularCharSet write Set_TabularCharSet;
    property DatasheetGridlinesBehavior: Byte read Get_DatasheetGridlinesBehavior write Set_DatasheetGridlinesBehavior;
    property DatasheetGridlinesColor: Integer read Get_DatasheetGridlinesColor write Set_DatasheetGridlinesColor;
    property DatasheetCellsEffect: Byte read Get_DatasheetCellsEffect write Set_DatasheetCellsEffect;
    property DatasheetForeColor: Integer read Get_DatasheetForeColor write Set_DatasheetForeColor;
    property ShowGrid: WordBool read Get_ShowGrid write Set_ShowGrid;
    property DatasheetBackColor: Integer read Get_DatasheetBackColor write Set_DatasheetBackColor;
    property Hwnd: Integer read Get_Hwnd write Set_Hwnd;
    property Count: Smallint read Get_Count write Set_Count;
    property Page: Integer read Get_Page write Set_Page;
    property Pages: Smallint read Get_Pages write Set_Pages;
    property LogicalPageWidth: Integer read Get_LogicalPageWidth write Set_LogicalPageWidth;
    property LogicalPageHeight: Integer read Get_LogicalPageHeight write Set_LogicalPageHeight;
    property ZoomControl: Integer read Get_ZoomControl write Set_ZoomControl;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Painting: WordBool read Get_Painting write Set_Painting;
    property PrtMip: OleVariant read Get_PrtMip write Set_PrtMip;
    property PrtDevMode: OleVariant read Get_PrtDevMode write Set_PrtDevMode;
    property PrtDevNames: OleVariant read Get_PrtDevNames write Set_PrtDevNames;
    property FrozenColumns: Smallint read Get_FrozenColumns write Set_FrozenColumns;
    property Bookmark: OleVariant read Get_Bookmark write Set_Bookmark;
    property TabularFamily: Byte read Get_TabularFamily write Set_TabularFamily;
    property _Name: WideString read Get__Name write Set__Name;
    property PaletteSource: WideString read Get_PaletteSource write Set_PaletteSource;
    property Tag: WideString read Get_Tag write Set_Tag;
    property PaintPalette: OleVariant read Get_PaintPalette write Set_PaintPalette;
    property OnMenu: WideString read Get_OnMenu write Set_OnMenu;
    property OpenArgs: OleVariant read Get_OpenArgs write Set_OpenArgs;
    property ConnectSynch: Smallint read Get_ConnectSynch write Set_ConnectSynch;
    property OnCurrent: WideString read Get_OnCurrent write Set_OnCurrent;
    property OnInsert: WideString read Get_OnInsert write Set_OnInsert;
    property BeforeInsert: WideString read Get_BeforeInsert write Set_BeforeInsert;
    property AfterInsert: WideString read Get_AfterInsert write Set_AfterInsert;
    property BeforeUpdate: WideString read Get_BeforeUpdate write Set_BeforeUpdate;
    property AfterUpdate: WideString read Get_AfterUpdate write Set_AfterUpdate;
    property OnDirty: WideString read Get_OnDirty write Set_OnDirty;
    property OnDelete: WideString read Get_OnDelete write Set_OnDelete;
    property BeforeDelConfirm: WideString read Get_BeforeDelConfirm write Set_BeforeDelConfirm;
    property AfterDelConfirm: WideString read Get_AfterDelConfirm write Set_AfterDelConfirm;
    property OnOpen: WideString read Get_OnOpen write Set_OnOpen;
    property OnLoad: WideString read Get_OnLoad write Set_OnLoad;
    property OnResize: WideString read Get_OnResize write Set_OnResize;
    property OnUnload: WideString read Get_OnUnload write Set_OnUnload;
    property OnClose: WideString read Get_OnClose write Set_OnClose;
    property OnActivate: WideString read Get_OnActivate write Set_OnActivate;
    property OnDeactivate: WideString read Get_OnDeactivate write Set_OnDeactivate;
    property OnGotFocus: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property KeyPreview: WordBool read Get_KeyPreview write Set_KeyPreview;
    property OnError: WideString read Get_OnError write Set_OnError;
    property OnFilter: WideString read Get_OnFilter write Set_OnFilter;
    property OnApplyFilter: WideString read Get_OnApplyFilter write Set_OnApplyFilter;
    property OnTimer: WideString read Get_OnTimer write Set_OnTimer;
    property TimerInterval: Integer read Get_TimerInterval write Set_TimerInterval;
    property Dirty: WordBool read Get_Dirty write Set_Dirty;
    property WindowWidth: Smallint read Get_WindowWidth write Set_WindowWidth;
    property WindowHeight: Smallint read Get_WindowHeight write Set_WindowHeight;
    property CurrentView: Smallint read Get_CurrentView write Set_CurrentView;
    property CurrentSectionTop: Smallint read Get_CurrentSectionTop write Set_CurrentSectionTop;
    property CurrentSectionLeft: Smallint read Get_CurrentSectionLeft write Set_CurrentSectionLeft;
    property SelLeft: Integer read Get_SelLeft write Set_SelLeft;
    property SelTop: Integer read Get_SelTop write Set_SelTop;
    property SelWidth: Integer read Get_SelWidth write Set_SelWidth;
    property SelHeight: Integer read Get_SelHeight write Set_SelHeight;
    property CurrentRecord: Integer read Get_CurrentRecord write Set_CurrentRecord;
    property PictureData: OleVariant read Get_PictureData write Set_PictureData;
    property InsideHeight: Integer read Get_InsideHeight write Set_InsideHeight;
    property InsideWidth: Integer read Get_InsideWidth write Set_InsideWidth;
    property PicturePalette: OleVariant read Get_PicturePalette write Set_PicturePalette;
    property HasModule: WordBool read Get_HasModule write Set_HasModule;
    property acHiddenCurrentPage: Integer read Get_acHiddenCurrentPage write Set_acHiddenCurrentPage;
    property Orientation: Byte read Get_Orientation write Set_Orientation;
    property AllowDesignChanges: WordBool read Get_AllowDesignChanges write Set_AllowDesignChanges;
    property ServerFilter: WideString read Get_ServerFilter write Set_ServerFilter;
    property ServerFilterByForm: WordBool read Get_ServerFilterByForm write Set_ServerFilterByForm;
    property MaxRecords: Integer read Get_MaxRecords write Set_MaxRecords;
    property UniqueTable: WideString read Get_UniqueTable write Set_UniqueTable;
    property ResyncCommand: WideString read Get_ResyncCommand write Set_ResyncCommand;
    property InputParameters: WideString read Get_InputParameters write Set_InputParameters;
    property MaxRecButton: WordBool read Get_MaxRecButton write Set_MaxRecButton;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property NewRecord: Smallint read Get_NewRecord;
    property ActiveControl: AccessControl read Get_ActiveControl;
    property DefaultControl[ControlType: Integer]: AccessControl read Get_DefaultControl;
    property Dynaset: IDispatch read Get_Dynaset;
    property RecordsetClone: IDispatch read Get_RecordsetClone;
    property Recordset: IDispatch read Get_Recordset write _Set_Recordset;
    property Section[Index: OleVariant]: AccessSection read Get_Section;
    property Form: AccessForm read Get_Form;
    property Module: Module read Get_Module;
    property Properties: Properties read Get_Properties;
    property ConnectControl: AccessControl read Get_ConnectControl;
    property Controls: Controls read Get_Controls;
    property Name: WideString read Get_Name write Set_Name;
    property SubdatasheetHeight: Smallint read Get_SubdatasheetHeight write Set_SubdatasheetHeight;
    property SubdatasheetExpanded: WordBool read Get_SubdatasheetExpanded write Set_SubdatasheetExpanded;
  end;

// *********************************************************************//
// DispIntf:  _FormDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E5135D80-8F8D-101B-AF4E-00AA003F0F07}
// *********************************************************************//
  _FormDisp = dispinterface
    ['{E5135D80-8F8D-101B-AF4E-00AA003F0F07}']
    property FormName: WideString dispid 39;
    property RecordSource: WideString dispid 156;
    property Filter: WideString dispid 245;
    property FilterOn: WordBool dispid 332;
    property OrderBy: WideString dispid 331;
    property OrderByOn: WordBool dispid 336;
    property AllowFilters: WordBool dispid 30;
    property Caption: WideString dispid 17;
    property DefaultView: Byte dispid 147;
    property ViewsAllowed: Byte dispid 146;
    property AllowEditing: WordBool dispid 24;
    property DefaultEditing: Smallint dispid 134;
    property AllowEdits: WordBool dispid 339;
    property AllowDeletions: WordBool dispid 292;
    property AllowAdditions: WordBool dispid 326;
    property DataEntry: WordBool dispid 338;
    property AllowUpdating: Byte dispid 45;
    property RecordsetType: Byte dispid 337;
    property RecordLocks: Byte dispid 26;
    property ScrollBars: Byte dispid 152;
    property RecordSelectors: WordBool dispid 19;
    property NavigationButtons: WordBool dispid 279;
    property DividingLines: WordBool dispid 314;
    property AutoResize: WordBool dispid 6;
    property AutoCenter: WordBool dispid 278;
    property PopUp: WordBool dispid 90;
    property Modal: WordBool dispid 62;
    property BorderStyle: Byte dispid 9;
    property ControlBox: WordBool dispid 97;
    property MinButton: WordBool dispid 95;
    property MaxButton: WordBool dispid 94;
    property MinMaxButtons: Byte dispid 328;
    property CloseButton: WordBool dispid 303;
    property WhatsThisButton: WordBool dispid 96;
    property Width: Smallint dispid 150;
    property Picture: WideString dispid 7;
    property PictureType: Byte dispid 341;
    property PictureSizeMode: Byte dispid 312;
    property PictureAlignment: Byte dispid 309;
    property PictureTiling: WordBool dispid 313;
    property Cycle: Byte dispid 330;
    property MenuBar: WideString dispid 240;
    property Toolbar: WideString dispid 353;
    property ShortcutMenu: WordBool dispid 31;
    property ShortcutMenuBar: WideString dispid 304;
    property GridX: Smallint dispid 41;
    property GridY: Smallint dispid 42;
    property LayoutForPrint: WordBool dispid 143;
    property FastLaserPrinting: WordBool dispid 144;
    property HelpFile: WideString dispid 218;
    property HelpContextId: Integer dispid 219;
    property RowHeight: Smallint dispid 168;
    property DatasheetFontName: WideString dispid 160;
    property DatasheetFontHeight: Smallint dispid 161;
    property DatasheetFontWeight: Smallint dispid 162;
    property DatasheetFontItalic: WordBool dispid 163;
    property DatasheetFontUnderline: WordBool dispid 164;
    property TabularCharSet: Byte dispid 194;
    property DatasheetGridlinesBehavior: Byte dispid 318;
    property DatasheetGridlinesColor: Integer dispid 319;
    property DatasheetCellsEffect: Byte dispid 320;
    property DatasheetForeColor: Integer dispid 306;
    property ShowGrid: WordBool dispid 169;
    property DatasheetBackColor: Integer dispid 321;
    property Hwnd: Integer dispid 192;
    property Count: Smallint dispid 195;
    property Page: Integer dispid 196;
    property Pages: Smallint dispid 197;
    property LogicalPageWidth: Integer dispid 198;
    property LogicalPageHeight: Integer dispid 199;
    property ZoomControl: Integer dispid 217;
    property Visible: WordBool dispid 148;
    property Painting: WordBool dispid 241;
    property PrtMip: OleVariant dispid 189;
    property PrtDevMode: OleVariant dispid 190;
    property PrtDevNames: OleVariant dispid 191;
    property FrozenColumns: Smallint dispid 170;
    property Bookmark: OleVariant dispid 230;
    property TabularFamily: Byte dispid 244;
    property _Name: WideString dispid 20;
    property PaletteSource: WideString dispid 98;
    property Tag: WideString dispid 266;
    property PaintPalette: OleVariant dispid 100;
    property OnMenu: WideString dispid 60;
    property OpenArgs: OleVariant dispid 284;
    property ConnectSynch: Smallint dispid 285;
    property OnCurrent: WideString dispid 87;
    property OnInsert: WideString dispid 81;
    property BeforeInsert: WideString dispid 122;
    property AfterInsert: WideString dispid 123;
    property BeforeUpdate: WideString dispid 85;
    property AfterUpdate: WideString dispid 86;
    property OnDirty: WideString dispid 375;
    property OnDelete: WideString dispid 79;
    property BeforeDelConfirm: WideString dispid 124;
    property AfterDelConfirm: WideString dispid 125;
    property OnOpen: WideString dispid 77;
    property OnLoad: WideString dispid 127;
    property OnResize: WideString dispid 117;
    property OnUnload: WideString dispid 128;
    property OnClose: WideString dispid 78;
    property OnActivate: WideString dispid 112;
    property OnDeactivate: WideString dispid 113;
    property OnGotFocus: WideString dispid 115;
    property OnLostFocus: WideString dispid 116;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property OnKeyDown: WideString dispid 104;
    property OnKeyUp: WideString dispid 105;
    property OnKeyPress: WideString dispid 106;
    property KeyPreview: WordBool dispid 327;
    property OnError: WideString dispid 119;
    property OnFilter: WideString dispid 333;
    property OnApplyFilter: WideString dispid 334;
    property OnTimer: WideString dispid 110;
    property TimerInterval: Integer dispid 111;
    property Dirty: WordBool dispid 286;
    property WindowWidth: Smallint dispid 287;
    property WindowHeight: Smallint dispid 288;
    property CurrentView: Smallint dispid 289;
    property CurrentSectionTop: Smallint dispid 291;
    property CurrentSectionLeft: Smallint dispid 290;
    property SelLeft: Integer dispid 298;
    property SelTop: Integer dispid 299;
    property SelWidth: Integer dispid 300;
    property SelHeight: Integer dispid 301;
    property CurrentRecord: Integer dispid 302;
    property PictureData: OleVariant dispid 188;
    property InsideHeight: Integer dispid 315;
    property InsideWidth: Integer dispid 316;
    property PicturePalette: OleVariant dispid 311;
    property HasModule: WordBool dispid 342;
    property acHiddenCurrentPage: Integer dispid 365;
    property Orientation: Byte dispid 370;
    property AllowDesignChanges: WordBool dispid 373;
    property ServerFilter: WideString dispid 246;
    property ServerFilterByForm: WordBool dispid 247;
    property MaxRecords: Integer dispid 361;
    property UniqueTable: WideString dispid 65;
    property ResyncCommand: WideString dispid 64;
    property InputParameters: WideString dispid 66;
    property MaxRecButton: WordBool dispid 63;
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property NewRecord: Smallint readonly dispid 2147;
    procedure Undo; dispid 2145;
    property ActiveControl: AccessControl readonly dispid 2006;
    property DefaultControl[ControlType: Integer]: AccessControl readonly dispid 2150;
    property Dynaset: IDispatch readonly dispid 2085;
    property RecordsetClone: IDispatch readonly dispid 2086;
    property Recordset: IDispatch dispid 2196;
    property Section[Index: OleVariant]: AccessSection readonly dispid 2088;
    property Form: AccessForm readonly dispid 2089;
    property Module: Module readonly dispid 2090;
    property Properties: Properties readonly dispid 2091;
    property ConnectControl: AccessControl readonly dispid 2092;
    procedure Recalc; dispid 2017;
    procedure Requery; dispid 2018;
    procedure Refresh; dispid -550;
    procedure Repaint; dispid 2020;
    procedure GoToPage(PageNumber: Integer; Right: Integer; Down: Integer); dispid 2021;
    procedure SetFocus; dispid 2022;
    property Controls: Controls readonly dispid 0;
    function _NewEnum: IUnknown; dispid -4;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Name: WideString dispid -2147418112;
    property SubdatasheetHeight: Smallint dispid 387;
    property SubdatasheetExpanded: WordBool dispid 390;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: _FormEvents
// Flags:     (16) Hidden
// GUID:      {331FDCFB-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _FormEvents = interface(IUnknown)
    ['{331FDCFB-CF31-11CD-8701-00AA003F0F07}']
    function Load: HResult; stdcall;
    function Current: HResult; stdcall;
    function BeforeInsert(out Cancel: Smallint): HResult; stdcall;
    function AfterInsert: HResult; stdcall;
    function BeforeUpdate(out Cancel: Smallint): HResult; stdcall;
    function AfterUpdate: HResult; stdcall;
    function Delete(out Cancel: Smallint): HResult; stdcall;
    function BeforeDelConfirm(out Cancel: Smallint; out Response: Smallint): HResult; stdcall;
    function AfterDelConfirm(var Status: Smallint): HResult; stdcall;
    function Open(out Cancel: Smallint): HResult; stdcall;
    function Resize: HResult; stdcall;
    function Unload(out Cancel: Smallint): HResult; stdcall;
    function Close: HResult; stdcall;
    function Activate: HResult; stdcall;
    function Deactivate: HResult; stdcall;
    function GotFocus: HResult; stdcall;
    function LostFocus: HResult; stdcall;
    function Click: HResult; stdcall;
    function DblClick(out Cancel: Smallint): HResult; stdcall;
    function MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single): HResult; stdcall;
    function KeyDown(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function KeyPress(var KeyAscii: Smallint): HResult; stdcall;
    function KeyUp(var KeyCode: Smallint; var Shift: Smallint): HResult; stdcall;
    function Error(var DataErr: Smallint; out Response: Smallint): HResult; stdcall;
    function Timer: HResult; stdcall;
    function Filter(out Cancel: Smallint; var FilterType: Smallint): HResult; stdcall;
    function ApplyFilter(out Cancel: Smallint; var ApplyType: Smallint): HResult; stdcall;
    function Dirty(out Cancel: Smallint): HResult; stdcall;
    function Undo(out Cancel: Smallint): HResult; stdcall;
    function RecordExit(out Cancel: Smallint): HResult; stdcall;
    function BeginBatchEdit(out Cancel: Smallint): HResult; stdcall;
    function UndoBatchEdit(out Cancel: Smallint): HResult; stdcall;
    function BeforeBeginTransaction(out Cancel: Smallint; var Connection: Connection): HResult; stdcall;
    function AfterBeginTransaction(var Connection: Connection): HResult; stdcall;
    function BeforeCommitTransaction(out Cancel: Smallint; var Connection: Connection): HResult; stdcall;
    function AfterCommitTransaction(var Connection: Connection): HResult; stdcall;
    function RollbackTransaction(var Connection: Connection): HResult; stdcall;
    function OnConnect: HResult; stdcall;
    function OnDisconnect: HResult; stdcall;
    function PivotTableChange(Reason: Integer): HResult; stdcall;
    function Query: HResult; stdcall;
    function BeforeQuery: HResult; stdcall;
    function SelectionChange: HResult; stdcall;
    function CommandBeforeExecute(Command: OleVariant; const Cancel: IDispatch): HResult; stdcall;
    function CommandChecked(Command: OleVariant; const Checked: IDispatch): HResult; stdcall;
    function CommandEnabled(Command: OleVariant; const Enabled: IDispatch): HResult; stdcall;
    function CommandExecute(Command: OleVariant): HResult; stdcall;
    function DataSetChange: HResult; stdcall;
    function BeforeScreenTip(const ScreenTipText: IDispatch; const SourceObject: IDispatch): HResult; stdcall;
    function BeforeRender(const drawObject: IDispatch; const chartObject: IDispatch; 
                          const Cancel: IDispatch): HResult; stdcall;
    function AfterRender(const drawObject: IDispatch; const chartObject: IDispatch): HResult; stdcall;
    function AfterFinalRender(const drawObject: IDispatch): HResult; stdcall;
    function AfterLayout(const drawObject: IDispatch): HResult; stdcall;
    function MouseWheel(Page: WordBool; Count: Integer): HResult; stdcall;
    function ViewChange(Reason: Integer): HResult; stdcall;
    function DataChange(Reason: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Forms
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B1BB0E80-6128-101B-AF4E-00AA003F0F07}
// *********************************************************************//
  Forms = interface(IDispatch)
    ['{B1BB0E80-6128-101B-AF4E-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Item(Index: OleVariant): AccessForm; safecall;
    function Get_Count: Integer; safecall;
    function _NewEnum: IUnknown; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: AccessForm read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  FormsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B1BB0E80-6128-101B-AF4E-00AA003F0F07}
// *********************************************************************//
  FormsDisp = dispinterface
    ['{B1BB0E80-6128-101B-AF4E-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Item[Index: OleVariant]: AccessForm readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function _NewEnum: IUnknown; dispid -4;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _Report
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3E8B6B00-91FF-101B-AF4E-00AA003F0F07}
// *********************************************************************//
  _Report = interface(IDispatch)
    ['{3E8B6B00-91FF-101B-AF4E-00AA003F0F07}']
    function Get_FormName: WideString; safecall;
    procedure Set_FormName(const pRet: WideString); safecall;
    function Get_RecordSource: WideString; safecall;
    procedure Set_RecordSource(const pRet: WideString); safecall;
    function Get_Filter: WideString; safecall;
    procedure Set_Filter(const pRet: WideString); safecall;
    function Get_FilterOn: WordBool; safecall;
    procedure Set_FilterOn(pRet: WordBool); safecall;
    function Get_OrderBy: WideString; safecall;
    procedure Set_OrderBy(const pRet: WideString); safecall;
    function Get_OrderByOn: WordBool; safecall;
    procedure Set_OrderByOn(pRet: WordBool); safecall;
    function Get_ServerFilter: WideString; safecall;
    procedure Set_ServerFilter(const pRet: WideString); safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const pRet: WideString); safecall;
    function Get_RecordLocks: Byte; safecall;
    procedure Set_RecordLocks(pRet: Byte); safecall;
    function Get_PageHeader: Byte; safecall;
    procedure Set_PageHeader(pRet: Byte); safecall;
    function Get_PageFooter: Byte; safecall;
    procedure Set_PageFooter(pRet: Byte); safecall;
    function Get_DateGrouping: Byte; safecall;
    procedure Set_DateGrouping(pRet: Byte); safecall;
    function Get_GrpKeepTogether: Byte; safecall;
    procedure Set_GrpKeepTogether(pRet: Byte); safecall;
    function Get_MinButton: WordBool; safecall;
    procedure Set_MinButton(pRet: WordBool); safecall;
    function Get_MaxButton: WordBool; safecall;
    procedure Set_MaxButton(pRet: WordBool); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Picture: WideString; safecall;
    procedure Set_Picture(const pRet: WideString); safecall;
    function Get_PictureType: Byte; safecall;
    procedure Set_PictureType(pRet: Byte); safecall;
    function Get_PictureSizeMode: Byte; safecall;
    procedure Set_PictureSizeMode(pRet: Byte); safecall;
    function Get_PictureAlignment: Byte; safecall;
    procedure Set_PictureAlignment(pRet: Byte); safecall;
    function Get_PictureTiling: WordBool; safecall;
    procedure Set_PictureTiling(pRet: WordBool); safecall;
    function Get_PicturePages: Byte; safecall;
    procedure Set_PicturePages(pRet: Byte); safecall;
    function Get_MenuBar: WideString; safecall;
    procedure Set_MenuBar(const pRet: WideString); safecall;
    function Get_Toolbar: WideString; safecall;
    procedure Set_Toolbar(const pRet: WideString); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_GridX: Smallint; safecall;
    procedure Set_GridX(pRet: Smallint); safecall;
    function Get_GridY: Smallint; safecall;
    procedure Set_GridY(pRet: Smallint); safecall;
    function Get_LayoutForPrint: WordBool; safecall;
    procedure Set_LayoutForPrint(pRet: WordBool); safecall;
    function Get_FastLaserPrinting: WordBool; safecall;
    procedure Set_FastLaserPrinting(pRet: WordBool); safecall;
    function Get_HelpFile: WideString; safecall;
    procedure Set_HelpFile(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_Hwnd: Integer; safecall;
    procedure Set_Hwnd(pRet: Integer); safecall;
    function Get_Count: Smallint; safecall;
    procedure Set_Count(pRet: Smallint); safecall;
    function Get_Page: Integer; safecall;
    procedure Set_Page(pRet: Integer); safecall;
    function Get_Pages: Smallint; safecall;
    procedure Set_Pages(pRet: Smallint); safecall;
    function Get_LogicalPageWidth: Integer; safecall;
    procedure Set_LogicalPageWidth(pRet: Integer); safecall;
    function Get_LogicalPageHeight: Integer; safecall;
    procedure Set_LogicalPageHeight(pRet: Integer); safecall;
    function Get_ZoomControl: Integer; safecall;
    procedure Set_ZoomControl(pRet: Integer); safecall;
    function Get_HasData: Integer; safecall;
    procedure Set_HasData(pRet: Integer); safecall;
    function Get_Left: Integer; safecall;
    procedure Set_Left(pRet: Integer); safecall;
    function Get_Top: Integer; safecall;
    procedure Set_Top(pRet: Integer); safecall;
    function Get_Height: Integer; safecall;
    procedure Set_Height(pRet: Integer); safecall;
    function Get_PrintSection: WordBool; safecall;
    procedure Set_PrintSection(pRet: WordBool); safecall;
    function Get_NextRecord: WordBool; safecall;
    procedure Set_NextRecord(pRet: WordBool); safecall;
    function Get_MoveLayout: WordBool; safecall;
    procedure Set_MoveLayout(pRet: WordBool); safecall;
    function Get_FormatCount: Smallint; safecall;
    procedure Set_FormatCount(pRet: Smallint); safecall;
    function Get_PrintCount: Smallint; safecall;
    procedure Set_PrintCount(pRet: Smallint); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_Painting: WordBool; safecall;
    procedure Set_Painting(pRet: WordBool); safecall;
    function Get_PrtMip: OleVariant; safecall;
    procedure Set_PrtMip(pRet: OleVariant); safecall;
    function Get_PrtDevMode: OleVariant; safecall;
    procedure Set_PrtDevMode(pRet: OleVariant); safecall;
    function Get_PrtDevNames: OleVariant; safecall;
    procedure Set_PrtDevNames(pRet: OleVariant); safecall;
    function Get_ForeColor: Integer; safecall;
    procedure Set_ForeColor(pRet: Integer); safecall;
    function Get_CurrentX: Single; safecall;
    procedure Set_CurrentX(pRet: Single); safecall;
    function Get_CurrentY: Single; safecall;
    procedure Set_CurrentY(pRet: Single); safecall;
    function Get_ScaleHeight: Single; safecall;
    procedure Set_ScaleHeight(pRet: Single); safecall;
    function Get_ScaleLeft: Single; safecall;
    procedure Set_ScaleLeft(pRet: Single); safecall;
    function Get_ScaleMode: Smallint; safecall;
    procedure Set_ScaleMode(pRet: Smallint); safecall;
    function Get_ScaleTop: Single; safecall;
    procedure Set_ScaleTop(pRet: Single); safecall;
    function Get_ScaleWidth: Single; safecall;
    procedure Set_ScaleWidth(pRet: Single); safecall;
    function Get_FontBold: Smallint; safecall;
    procedure Set_FontBold(pRet: Smallint); safecall;
    function Get_FontItalic: Smallint; safecall;
    procedure Set_FontItalic(pRet: Smallint); safecall;
    function Get_FontName: WideString; safecall;
    procedure Set_FontName(const pRet: WideString); safecall;
    function Get_FontSize: Smallint; safecall;
    procedure Set_FontSize(pRet: Smallint); safecall;
    function Get_FontUnderline: Smallint; safecall;
    procedure Set_FontUnderline(pRet: Smallint); safecall;
    function Get_DrawMode: Smallint; safecall;
    procedure Set_DrawMode(pRet: Smallint); safecall;
    function Get_DrawStyle: Smallint; safecall;
    procedure Set_DrawStyle(pRet: Smallint); safecall;
    function Get_DrawWidth: Smallint; safecall;
    procedure Set_DrawWidth(pRet: Smallint); safecall;
    function Get_FillColor: Integer; safecall;
    procedure Set_FillColor(pRet: Integer); safecall;
    function Get_FillStyle: Smallint; safecall;
    procedure Set_FillStyle(pRet: Smallint); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_PaletteSource: WideString; safecall;
    procedure Set_PaletteSource(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_PaintPalette: OleVariant; safecall;
    procedure Set_PaintPalette(pRet: OleVariant); safecall;
    function Get_OnMenu: WideString; safecall;
    procedure Set_OnMenu(const pRet: WideString); safecall;
    function Get_OnOpen: WideString; safecall;
    procedure Set_OnOpen(const pRet: WideString); safecall;
    function Get_OnClose: WideString; safecall;
    procedure Set_OnClose(const pRet: WideString); safecall;
    function Get_OnActivate: WideString; safecall;
    procedure Set_OnActivate(const pRet: WideString); safecall;
    function Get_OnDeactivate: WideString; safecall;
    procedure Set_OnDeactivate(const pRet: WideString); safecall;
    function Get_OnNoData: WideString; safecall;
    procedure Set_OnNoData(const pRet: WideString); safecall;
    function Get_OnPage: WideString; safecall;
    procedure Set_OnPage(const pRet: WideString); safecall;
    function Get_OnError: WideString; safecall;
    procedure Set_OnError(const pRet: WideString); safecall;
    function Get_Dirty: WordBool; safecall;
    procedure Set_Dirty(pRet: WordBool); safecall;
    function Get_CurrentRecord: Integer; safecall;
    procedure Set_CurrentRecord(pRet: Integer); safecall;
    function Get_PictureData: OleVariant; safecall;
    procedure Set_PictureData(pRet: OleVariant); safecall;
    function Get_PicturePalette: OleVariant; safecall;
    procedure Set_PicturePalette(pRet: OleVariant); safecall;
    function Get_HasModule: WordBool; safecall;
    procedure Set_HasModule(pRet: WordBool); safecall;
    function Get_acHiddenCurrentPage: Integer; safecall;
    procedure Set_acHiddenCurrentPage(pRet: Integer); safecall;
    function Get_Orientation: Byte; safecall;
    procedure Set_Orientation(pRet: Byte); safecall;
    function Get_InputParameters: WideString; safecall;
    procedure Set_InputParameters(const pRet: WideString); safecall;
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_ActiveControl: AccessControl; safecall;
    function Get_DefaultControl(ControlType: Integer): AccessControl; safecall;
    procedure Circle(flags: Smallint; X: Single; Y: Single; radius: Single; color: Integer; 
                     start: Single; end_: Single; aspect: Single); safecall;
    procedure Line(flags: Smallint; x1: Single; y1: Single; x2: Single; y2: Single; color: Integer); safecall;
    procedure PSet(flags: Smallint; X: Single; Y: Single; color: Integer); safecall;
    procedure Scale(flags: Smallint; x1: Single; y1: Single; x2: Single; y2: Single); safecall;
    function TextWidth(const Expr: WideString): Single; safecall;
    function TextHeight(const Expr: WideString): Single; safecall;
    procedure Print(const Expr: WideString); safecall;
    function Get_Section(Index: OleVariant): AccessSection; safecall;
    function Get_GroupLevel(Index: Integer): AccessGroupLevel; safecall;
    function Get_Report: AccessReport; safecall;
    function Get_Module: Module; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Controls: Controls; safecall;
    function _NewEnum: IUnknown; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    property FormName: WideString read Get_FormName write Set_FormName;
    property RecordSource: WideString read Get_RecordSource write Set_RecordSource;
    property Filter: WideString read Get_Filter write Set_Filter;
    property FilterOn: WordBool read Get_FilterOn write Set_FilterOn;
    property OrderBy: WideString read Get_OrderBy write Set_OrderBy;
    property OrderByOn: WordBool read Get_OrderByOn write Set_OrderByOn;
    property ServerFilter: WideString read Get_ServerFilter write Set_ServerFilter;
    property Caption: WideString read Get_Caption write Set_Caption;
    property RecordLocks: Byte read Get_RecordLocks write Set_RecordLocks;
    property PageHeader: Byte read Get_PageHeader write Set_PageHeader;
    property PageFooter: Byte read Get_PageFooter write Set_PageFooter;
    property DateGrouping: Byte read Get_DateGrouping write Set_DateGrouping;
    property GrpKeepTogether: Byte read Get_GrpKeepTogether write Set_GrpKeepTogether;
    property MinButton: WordBool read Get_MinButton write Set_MinButton;
    property MaxButton: WordBool read Get_MaxButton write Set_MaxButton;
    property Width: Smallint read Get_Width write Set_Width;
    property Picture: WideString read Get_Picture write Set_Picture;
    property PictureType: Byte read Get_PictureType write Set_PictureType;
    property PictureSizeMode: Byte read Get_PictureSizeMode write Set_PictureSizeMode;
    property PictureAlignment: Byte read Get_PictureAlignment write Set_PictureAlignment;
    property PictureTiling: WordBool read Get_PictureTiling write Set_PictureTiling;
    property PicturePages: Byte read Get_PicturePages write Set_PicturePages;
    property MenuBar: WideString read Get_MenuBar write Set_MenuBar;
    property Toolbar: WideString read Get_Toolbar write Set_Toolbar;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property GridX: Smallint read Get_GridX write Set_GridX;
    property GridY: Smallint read Get_GridY write Set_GridY;
    property LayoutForPrint: WordBool read Get_LayoutForPrint write Set_LayoutForPrint;
    property FastLaserPrinting: WordBool read Get_FastLaserPrinting write Set_FastLaserPrinting;
    property HelpFile: WideString read Get_HelpFile write Set_HelpFile;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property Hwnd: Integer read Get_Hwnd write Set_Hwnd;
    property Count: Smallint read Get_Count write Set_Count;
    property Page: Integer read Get_Page write Set_Page;
    property Pages: Smallint read Get_Pages write Set_Pages;
    property LogicalPageWidth: Integer read Get_LogicalPageWidth write Set_LogicalPageWidth;
    property LogicalPageHeight: Integer read Get_LogicalPageHeight write Set_LogicalPageHeight;
    property ZoomControl: Integer read Get_ZoomControl write Set_ZoomControl;
    property HasData: Integer read Get_HasData write Set_HasData;
    property Left: Integer read Get_Left write Set_Left;
    property Top: Integer read Get_Top write Set_Top;
    property Height: Integer read Get_Height write Set_Height;
    property PrintSection: WordBool read Get_PrintSection write Set_PrintSection;
    property NextRecord: WordBool read Get_NextRecord write Set_NextRecord;
    property MoveLayout: WordBool read Get_MoveLayout write Set_MoveLayout;
    property FormatCount: Smallint read Get_FormatCount write Set_FormatCount;
    property PrintCount: Smallint read Get_PrintCount write Set_PrintCount;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Painting: WordBool read Get_Painting write Set_Painting;
    property PrtMip: OleVariant read Get_PrtMip write Set_PrtMip;
    property PrtDevMode: OleVariant read Get_PrtDevMode write Set_PrtDevMode;
    property PrtDevNames: OleVariant read Get_PrtDevNames write Set_PrtDevNames;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property CurrentX: Single read Get_CurrentX write Set_CurrentX;
    property CurrentY: Single read Get_CurrentY write Set_CurrentY;
    property ScaleHeight: Single read Get_ScaleHeight write Set_ScaleHeight;
    property ScaleLeft: Single read Get_ScaleLeft write Set_ScaleLeft;
    property ScaleMode: Smallint read Get_ScaleMode write Set_ScaleMode;
    property ScaleTop: Single read Get_ScaleTop write Set_ScaleTop;
    property ScaleWidth: Single read Get_ScaleWidth write Set_ScaleWidth;
    property FontBold: Smallint read Get_FontBold write Set_FontBold;
    property FontItalic: Smallint read Get_FontItalic write Set_FontItalic;
    property FontName: WideString read Get_FontName write Set_FontName;
    property FontSize: Smallint read Get_FontSize write Set_FontSize;
    property FontUnderline: Smallint read Get_FontUnderline write Set_FontUnderline;
    property DrawMode: Smallint read Get_DrawMode write Set_DrawMode;
    property DrawStyle: Smallint read Get_DrawStyle write Set_DrawStyle;
    property DrawWidth: Smallint read Get_DrawWidth write Set_DrawWidth;
    property FillColor: Integer read Get_FillColor write Set_FillColor;
    property FillStyle: Smallint read Get_FillStyle write Set_FillStyle;
    property _Name: WideString read Get__Name write Set__Name;
    property PaletteSource: WideString read Get_PaletteSource write Set_PaletteSource;
    property Tag: WideString read Get_Tag write Set_Tag;
    property PaintPalette: OleVariant read Get_PaintPalette write Set_PaintPalette;
    property OnMenu: WideString read Get_OnMenu write Set_OnMenu;
    property OnOpen: WideString read Get_OnOpen write Set_OnOpen;
    property OnClose: WideString read Get_OnClose write Set_OnClose;
    property OnActivate: WideString read Get_OnActivate write Set_OnActivate;
    property OnDeactivate: WideString read Get_OnDeactivate write Set_OnDeactivate;
    property OnNoData: WideString read Get_OnNoData write Set_OnNoData;
    property OnPage: WideString read Get_OnPage write Set_OnPage;
    property OnError: WideString read Get_OnError write Set_OnError;
    property Dirty: WordBool read Get_Dirty write Set_Dirty;
    property CurrentRecord: Integer read Get_CurrentRecord write Set_CurrentRecord;
    property PictureData: OleVariant read Get_PictureData write Set_PictureData;
    property PicturePalette: OleVariant read Get_PicturePalette write Set_PicturePalette;
    property HasModule: WordBool read Get_HasModule write Set_HasModule;
    property acHiddenCurrentPage: Integer read Get_acHiddenCurrentPage write Set_acHiddenCurrentPage;
    property Orientation: Byte read Get_Orientation write Set_Orientation;
    property InputParameters: WideString read Get_InputParameters write Set_InputParameters;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property ActiveControl: AccessControl read Get_ActiveControl;
    property DefaultControl[ControlType: Integer]: AccessControl read Get_DefaultControl;
    property Section[Index: OleVariant]: AccessSection read Get_Section;
    property GroupLevel[Index: Integer]: AccessGroupLevel read Get_GroupLevel;
    property Report: AccessReport read Get_Report;
    property Module: Module read Get_Module;
    property Properties: Properties read Get_Properties;
    property Controls: Controls read Get_Controls;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  _ReportDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3E8B6B00-91FF-101B-AF4E-00AA003F0F07}
// *********************************************************************//
  _ReportDisp = dispinterface
    ['{3E8B6B00-91FF-101B-AF4E-00AA003F0F07}']
    property FormName: WideString dispid 39;
    property RecordSource: WideString dispid 156;
    property Filter: WideString dispid 245;
    property FilterOn: WordBool dispid 332;
    property OrderBy: WideString dispid 331;
    property OrderByOn: WordBool dispid 336;
    property ServerFilter: WideString dispid 246;
    property Caption: WideString dispid 17;
    property RecordLocks: Byte dispid 26;
    property PageHeader: Byte dispid 43;
    property PageFooter: Byte dispid 40;
    property DateGrouping: Byte dispid 282;
    property GrpKeepTogether: Byte dispid 283;
    property MinButton: WordBool dispid 95;
    property MaxButton: WordBool dispid 94;
    property Width: Smallint dispid 150;
    property Picture: WideString dispid 7;
    property PictureType: Byte dispid 341;
    property PictureSizeMode: Byte dispid 312;
    property PictureAlignment: Byte dispid 309;
    property PictureTiling: WordBool dispid 313;
    property PicturePages: Byte dispid 310;
    property MenuBar: WideString dispid 240;
    property Toolbar: WideString dispid 353;
    property ShortcutMenuBar: WideString dispid 304;
    property GridX: Smallint dispid 41;
    property GridY: Smallint dispid 42;
    property LayoutForPrint: WordBool dispid 143;
    property FastLaserPrinting: WordBool dispid 144;
    property HelpFile: WideString dispid 218;
    property HelpContextId: Integer dispid 219;
    property Hwnd: Integer dispid 192;
    property Count: Smallint dispid 195;
    property Page: Integer dispid 196;
    property Pages: Smallint dispid 197;
    property LogicalPageWidth: Integer dispid 198;
    property LogicalPageHeight: Integer dispid 199;
    property ZoomControl: Integer dispid 217;
    property HasData: Integer dispid 202;
    property Left: Integer dispid 54;
    property Top: Integer dispid 141;
    property Height: Integer dispid 44;
    property PrintSection: WordBool dispid 225;
    property NextRecord: WordBool dispid 226;
    property MoveLayout: WordBool dispid 227;
    property FormatCount: Smallint dispid 228;
    property PrintCount: Smallint dispid 229;
    property Visible: WordBool dispid 148;
    property Painting: WordBool dispid 241;
    property PrtMip: OleVariant dispid 189;
    property PrtDevMode: OleVariant dispid 190;
    property PrtDevNames: OleVariant dispid 191;
    property ForeColor: Integer dispid 204;
    property CurrentX: Single dispid 205;
    property CurrentY: Single dispid 206;
    property ScaleHeight: Single dispid 207;
    property ScaleLeft: Single dispid 208;
    property ScaleMode: Smallint dispid 209;
    property ScaleTop: Single dispid 210;
    property ScaleWidth: Single dispid 211;
    property FontBold: Smallint dispid 32;
    property FontItalic: Smallint dispid 33;
    property FontName: WideString dispid 34;
    property FontSize: Smallint dispid 35;
    property FontUnderline: Smallint dispid 36;
    property DrawMode: Smallint dispid 212;
    property DrawStyle: Smallint dispid 213;
    property DrawWidth: Smallint dispid 214;
    property FillColor: Integer dispid 216;
    property FillStyle: Smallint dispid 215;
    property _Name: WideString dispid 20;
    property PaletteSource: WideString dispid 98;
    property Tag: WideString dispid 266;
    property PaintPalette: OleVariant dispid 100;
    property OnMenu: WideString dispid 60;
    property OnOpen: WideString dispid 77;
    property OnClose: WideString dispid 78;
    property OnActivate: WideString dispid 112;
    property OnDeactivate: WideString dispid 113;
    property OnNoData: WideString dispid 121;
    property OnPage: WideString dispid 83;
    property OnError: WideString dispid 119;
    property Dirty: WordBool dispid 286;
    property CurrentRecord: Integer dispid 302;
    property PictureData: OleVariant dispid 188;
    property PicturePalette: OleVariant dispid 311;
    property HasModule: WordBool dispid 342;
    property acHiddenCurrentPage: Integer dispid 365;
    property Orientation: Byte dispid 370;
    property InputParameters: WideString dispid 66;
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property ActiveControl: AccessControl readonly dispid 2006;
    property DefaultControl[ControlType: Integer]: AccessControl readonly dispid 2150;
    procedure Circle(flags: Smallint; X: Single; Y: Single; radius: Single; color: Integer; 
                     start: Single; end_: Single; aspect: Single); dispid 2118;
    procedure Line(flags: Smallint; x1: Single; y1: Single; x2: Single; y2: Single; color: Integer); dispid 2152;
    procedure PSet(flags: Smallint; X: Single; Y: Single; color: Integer); dispid 2117;
    procedure Scale(flags: Smallint; x1: Single; y1: Single; x2: Single; y2: Single); dispid 2116;
    function TextWidth(const Expr: WideString): Single; dispid 2114;
    function TextHeight(const Expr: WideString): Single; dispid 2115;
    procedure Print(const Expr: WideString); dispid 2153;
    property Section[Index: OleVariant]: AccessSection readonly dispid 2088;
    property GroupLevel[Index: Integer]: AccessGroupLevel readonly dispid 2098;
    property Report: AccessReport readonly dispid 2097;
    property Module: Module readonly dispid 2090;
    property Properties: Properties readonly dispid 2091;
    property Controls: Controls readonly dispid 0;
    function _NewEnum: IUnknown; dispid -4;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Name: WideString dispid -2147418112;
  end;

// *********************************************************************//
// Interface: _ReportEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4357-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _ReportEvents = interface(IUnknown)
    ['{BC9E4357-F037-11CD-8701-00AA003F0F07}']
    function Open(out Cancel: Smallint): HResult; stdcall;
    function Close: HResult; stdcall;
    function Activate: HResult; stdcall;
    function Deactivate: HResult; stdcall;
    function Error(var DataErr: Smallint; out Response: Smallint): HResult; stdcall;
    function NoData(out Cancel: Smallint): HResult; stdcall;
    function Page: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Reports
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D1523700-6128-101B-AF4E-00AA003F0F07}
// *********************************************************************//
  Reports = interface(IDispatch)
    ['{D1523700-6128-101B-AF4E-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Item(Index: OleVariant): AccessReport; safecall;
    function Get_Count: Integer; safecall;
    function _NewEnum: IUnknown; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: AccessReport read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ReportsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D1523700-6128-101B-AF4E-00AA003F0F07}
// *********************************************************************//
  ReportsDisp = dispinterface
    ['{D1523700-6128-101B-AF4E-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Item[Index: OleVariant]: AccessReport readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function _NewEnum: IUnknown; dispid -4;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: Screen
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DC6B66C0-6128-101B-AF4E-00AA003F0F07}
// *********************************************************************//
  Screen = interface(IDispatch)
    ['{DC6B66C0-6128-101B-AF4E-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_ActiveDatasheet: AccessForm; safecall;
    function Get_ActiveControl: AccessControl; safecall;
    function Get_PreviousControl: AccessControl; safecall;
    function Get_ActiveForm: AccessForm; safecall;
    function Get_ActiveReport: AccessReport; safecall;
    function Get_MousePointer: Smallint; safecall;
    procedure Set_MousePointer(pRet: Smallint); safecall;
    function Get_ActiveDataAccessPage: DataAccessPage; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property ActiveDatasheet: AccessForm read Get_ActiveDatasheet;
    property ActiveControl: AccessControl read Get_ActiveControl;
    property PreviousControl: AccessControl read Get_PreviousControl;
    property ActiveForm: AccessForm read Get_ActiveForm;
    property ActiveReport: AccessReport read Get_ActiveReport;
    property MousePointer: Smallint read Get_MousePointer write Set_MousePointer;
    property ActiveDataAccessPage: DataAccessPage read Get_ActiveDataAccessPage;
  end;

// *********************************************************************//
// DispIntf:  ScreenDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DC6B66C0-6128-101B-AF4E-00AA003F0F07}
// *********************************************************************//
  ScreenDisp = dispinterface
    ['{DC6B66C0-6128-101B-AF4E-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property ActiveDatasheet: AccessForm readonly dispid 2146;
    property ActiveControl: AccessControl readonly dispid 2006;
    property PreviousControl: AccessControl readonly dispid 2007;
    property ActiveForm: AccessForm readonly dispid 2008;
    property ActiveReport: AccessReport readonly dispid 2009;
    property MousePointer: Smallint dispid 2106;
    property ActiveDataAccessPage: DataAccessPage readonly dispid 2214;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _Application
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {68CCE6C0-6129-101B-AF4E-00AA003F0F07}
// *********************************************************************//
  _Application = interface(IDispatch)
    ['{68CCE6C0-6129-101B-AF4E-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_CodeContextObject: IDispatch; safecall;
    procedure NewCurrentDatabaseOld(const filepath: WideString); safecall;
    procedure OpenCurrentDatabaseOld(const filepath: WideString; Exclusive: WordBool); safecall;
    function Get_MenuBar: WideString; safecall;
    procedure Set_MenuBar(const pRet: WideString); safecall;
    function Get_CurrentObjectType: AcObjectType; safecall;
    function Get_CurrentObjectName: WideString; safecall;
    function GetOption(const OptionName: WideString): OleVariant; safecall;
    procedure SetOption(const OptionName: WideString; Setting: OleVariant); safecall;
    procedure Echo(EchoOn: Smallint; const bstrStatusBarText: WideString); safecall;
    procedure CloseCurrentDatabase; safecall;
    procedure Quit(Option: AcQuitOption); safecall;
    function Get_Forms: Forms; safecall;
    function Get_Reports: Reports; safecall;
    function Get_Screen: Screen; safecall;
    function Get_DoCmd: DoCmd; safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pfVisible: WordBool); safecall;
    function Get_UserControl: WordBool; safecall;
    procedure Set_UserControl(pfUserCtrl: WordBool); safecall;
    function SysCmd(Action: AcSysCmdAction; Argument2: OleVariant; Argument3: OleVariant): OleVariant; safecall;
    function CreateForm(Database: OleVariant; FormTemplate: OleVariant): AccessForm; safecall;
    function CreateReport(Database: OleVariant; ReportTemplate: OleVariant): AccessReport; safecall;
    function CreateControlOld(const FormName: WideString; ControlType: AcControlType; 
                              Section: AcSection; Parent: OleVariant; ColumnName: OleVariant; 
                              Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                              Height: OleVariant): AccessControl; safecall;
    function CreateReportControlOld(const ReportName: WideString; ControlType: AcControlType; 
                                    Section: AcSection; Parent: OleVariant; ColumnName: OleVariant; 
                                    Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                                    Height: OleVariant): AccessControl; safecall;
    function CreateControlExOld(const FormName: WideString; ControlType: AcControlType; 
                                Section: AcSection; const Parent: WideString; 
                                const ControlSource: WideString; Left: Integer; Top: Integer; 
                                Width: Integer; Height: Integer): AccessControl; safecall;
    function CreateReportControlExOld(const ReportName: WideString; ControlType: AcControlType; 
                                      Section: AcSection; const Parent: WideString; 
                                      const ControlName: WideString; Left: Integer; Top: Integer; 
                                      Width: Integer; Height: Integer): AccessControl; safecall;
    procedure DeleteControl(const FormName: WideString; const ControlName: WideString); safecall;
    procedure DeleteReportControl(const ReportName: WideString; const ControlName: WideString); safecall;
    function CreateGroupLevel(const ReportName: WideString; const Expression: WideString; 
                              Header: Smallint; Footer: Smallint): Integer; safecall;
    function DMin(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; safecall;
    function DMax(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; safecall;
    function DSum(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; safecall;
    function DAvg(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; safecall;
    function DLookup(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; safecall;
    function DLast(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; safecall;
    function DVar(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; safecall;
    function DVarP(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; safecall;
    function DStDev(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; safecall;
    function DStDevP(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; safecall;
    function DFirst(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; safecall;
    function DCount(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; safecall;
    function Eval(const StringExpr: WideString): OleVariant; safecall;
    function CurrentUser: WideString; safecall;
    function DDEInitiate(const Application: WideString; const Topic: WideString): OleVariant; safecall;
    procedure DDEExecute(ChanNum: OleVariant; const Command: WideString); safecall;
    procedure DDEPoke(ChanNum: OleVariant; const Item: WideString; const Data: WideString); safecall;
    function DDERequest(ChanNum: OleVariant; const Item: WideString): WideString; safecall;
    procedure DDETerminate(ChanNum: OleVariant); safecall;
    procedure DDETerminateAll; safecall;
    function Get_DBEngine: DBEngine; safecall;
    function CurrentDb: Database; safecall;
    function CodeDb: Database; safecall;
    procedure BeginUndoable(Hwnd: Integer); safecall;
    procedure SetUndoRecording(yesno: Smallint); safecall;
    function BuildCriteria(const Field: WideString; FieldType: Smallint; 
                           const Expression: WideString): WideString; safecall;
    procedure InsertText(const Text: WideString; const ModuleName: WideString); safecall;
    procedure ReloadAddIns; safecall;
    function DefaultWorkspaceClone: Workspace; safecall;
    procedure RefreshTitleBar; safecall;
    procedure AddAutoCorrect(const ChangeFrom: WideString; const ChangeTo: WideString); safecall;
    procedure DelAutoCorrect(const ChangeFrom: WideString); safecall;
    function hWndAccessApp: SYSINT; safecall;
    function Run(const Procedure_: WideString; var Arg1: OleVariant; var Arg2: OleVariant; 
                 var Arg3: OleVariant; var Arg4: OleVariant; var Arg5: OleVariant; 
                 var Arg6: OleVariant; var Arg7: OleVariant; var Arg8: OleVariant; 
                 var Arg9: OleVariant; var Arg10: OleVariant; var Arg11: OleVariant; 
                 var Arg12: OleVariant; var Arg13: OleVariant; var Arg14: OleVariant; 
                 var Arg15: OleVariant; var Arg16: OleVariant; var Arg17: OleVariant; 
                 var Arg18: OleVariant; var Arg19: OleVariant; var Arg20: OleVariant; 
                 var Arg21: OleVariant; var Arg22: OleVariant; var Arg23: OleVariant; 
                 var Arg24: OleVariant; var Arg25: OleVariant; var Arg26: OleVariant; 
                 var Arg27: OleVariant; var Arg28: OleVariant; var Arg29: OleVariant; 
                 var Arg30: OleVariant): OleVariant; safecall;
    function Nz(Value: OleVariant; ValueIfNull: OleVariant): OleVariant; safecall;
    function LoadPicture(const FileName: WideString): IDispatch; safecall;
    procedure ReplaceModule(objtyp: Integer; const ModuleName: WideString; 
                            const FileName: WideString; token: Integer); safecall;
    function AccessError(ErrorNumber: OleVariant): OleVariant; safecall;
    function BuilderString: OleVariant; safecall;
    function StringFromGUID(Guid: OleVariant): OleVariant; safecall;
    function GUIDFromString(String_: OleVariant): OleVariant; safecall;
    function AppLoadString(id: Integer): OleVariant; safecall;
    function Get_CommandBars: CommandBars; safecall;
    function Get_Assistant: Assistant; safecall;
    procedure FollowHyperlink(const Address: WideString; const SubAddress: WideString; 
                              NewWindow: WordBool; AddHistory: WordBool; ExtraInfo: OleVariant; 
                              Method: MsoExtraInfoMethod; const HeaderInfo: WideString); safecall;
    procedure SaveAsText(ObjectType: AcObjectType; const ObjectName: WideString; 
                         const FileName: WideString); safecall;
    procedure LoadFromText(ObjectType: AcObjectType; const ObjectName: WideString; 
                           const FileName: WideString); safecall;
    procedure AddToFavorites; safecall;
    procedure RefreshDatabaseWindow; safecall;
    function Get_References: AccessReferences; safecall;
    function Get_Modules: Modules; safecall;
    function Get_FileSearch: FileSearch; safecall;
    function Get_IsCompiled: WordBool; safecall;
    procedure RunCommand(Command: AcCommand); safecall;
    function HyperlinkPart(Hyperlink: OleVariant; Part: AcHyperlinkPart): WideString; safecall;
    function GetHiddenAttribute(ObjectType: AcObjectType; const ObjectName: WideString): WordBool; safecall;
    procedure SetHiddenAttribute(ObjectType: AcObjectType; const ObjectName: WideString; 
                                 fHidden: WordBool); safecall;
    function Get_VBE: VBE; safecall;
    function Get_DataAccessPages: DataAccessPages; safecall;
    function CreateDataAccessPage(FileName: OleVariant; CreateNewFile: WordBool): DataAccessPage; safecall;
    function Get_ADOConnectString: WideString; safecall;
    function Get_CurrentProject: CurrentProject; safecall;
    function Get_CurrentData: CurrentData; safecall;
    function Get_CodeProject: CodeProject; safecall;
    function Get_CodeData: CodeData; safecall;
    procedure NewAccessProject(const filepath: WideString; Connect: OleVariant); safecall;
    procedure OpenAccessProject(const filepath: WideString; Exclusive: WordBool); safecall;
    procedure CreateAccessProject(const filepath: WideString; Connect: OleVariant); safecall;
    function Get_WizHook: WizHook; safecall;
    function Get_ProductCode: WideString; safecall;
    function Get_COMAddIns: COMAddIns; safecall;
    function Get_Name: WideString; safecall;
    function Get_DefaultWebOptions: DefaultWebOptions; safecall;
    function Get_LanguageSettings: LanguageSettings; safecall;
    function Get_AnswerWizard: AnswerWizard; safecall;
    function Get_FeatureInstall: MsoFeatureInstall; safecall;
    procedure Set_FeatureInstall(FeatureInstall: MsoFeatureInstall); safecall;
    function EuroConvert(Number: Double; const SourceCurrency: WideString; 
                         const TargetCurrency: WideString; FullPrecision: OleVariant; 
                         TriangulationPrecision: OleVariant): Double; safecall;
    function Get_VGXFrameInterval: OleVariant; safecall;
    function Get_FileDialog(dialogType: MsoFileDialogType): FileDialog; safecall;
    function Get_BrokenReference: WordBool; safecall;
    procedure CreateNewWorkgroupFile(const Path: WideString; const Name: WideString; 
                                     const Company: WideString; const WorkgroupID: WideString; 
                                     Replace: WordBool); safecall;
    procedure SetDefaultWorkgroupFile(const Path: WideString); safecall;
    function Get_Printers: Printers; safecall;
    function Get_Printer: _Printer; safecall;
    procedure Set_Printer(const pRet: _Printer); safecall;
    procedure _Set_Printer(const pRet: _Printer); safecall;
    function Get_MsoDebugOptions: MsoDebugOptions; safecall;
    procedure ConvertAccessProject(const SourceFilename: WideString; 
                                   const DestinationFilename: WideString; 
                                   DestinationFileFormat: AcFileFormat); safecall;
    function Get_Version: WideString; safecall;
    function Get_Build: Integer; safecall;
    procedure OpenCurrentDatabase(const filepath: WideString; Exclusive: WordBool; 
                                  const bstrPassword: WideString); safecall;
    function CompactRepair(const SourceFile: WideString; const DestinationFile: WideString; 
                           LogFile: WordBool): WordBool; safecall;
    procedure ExportXMLOld(ObjectType: AcExportXMLObjectType; const DataSource: WideString; 
                           const DataTarget: WideString; const SchemaTarget: WideString; 
                           const PresentationTarget: WideString; const ImageTarget: WideString; 
                           Encoding: AcExportXMLEncoding; OtherFlags: Integer); safecall;
    procedure ImportXML(const DataSource: WideString; ImportOptions: AcImportXMLOption); safecall;
    function Get_NewFileTaskPane: NewFile; safecall;
    procedure TransformXML(const DataSource: WideString; const TransformSource: WideString; 
                           const OutputTarget: WideString; WellFormedXMLOutput: WordBool; 
                           ScriptOption: AcTransformXMLScriptOption); safecall;
    function CreateAdditionalData: _AdditionalData; safecall;
    function Get_AutoCorrect: _AutoCorrect; safecall;
    procedure ExportXML(ObjectType: AcExportXMLObjectType; const DataSource: WideString; 
                        const DataTarget: WideString; const SchemaTarget: WideString; 
                        const PresentationTarget: WideString; const ImageTarget: WideString; 
                        Encoding: AcExportXMLEncoding; OtherFlags: AcExportXMLOtherFlags; 
                        const WhereCondition: WideString; AdditionalData: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_AutomationSecurity: MsoAutomationSecurity; safecall;
    procedure Set_AutomationSecurity(pAutomationSecurity: MsoAutomationSecurity); safecall;
    procedure NewCurrentDatabase(const filepath: WideString; FileFormat: AcNewDatabaseFormat; 
                                 Template: OleVariant; const SiteAddress: WideString; 
                                 const ListID: WideString); safecall;
    function PlainText(RichText: OleVariant; Length: OleVariant): WideString; safecall;
    function HtmlEncode(PlainText: OleVariant; Length: OleVariant): WideString; safecall;
    function Get_MacroError: MacroError; safecall;
    procedure LoadCustomUI(const CustomUIName: WideString; const CustomUIXML: WideString); safecall;
    function Get_TempVars: TempVars; safecall;
    procedure ExportNavigationPane(const Path: WideString); safecall;
    procedure ImportNavigationPane(const Path: WideString; fAppendOnly: WordBool); safecall;
    function ColumnHistory(const TableName: WideString; const ColumnName: WideString; 
                           const queryString: WideString): WideString; safecall;
    function Get_Assistance: IAssistance; safecall;
    function CreateControl(const FormName: WideString; ControlType: AcControlType; 
                           Section: AcSection; Parent: OleVariant; ColumnName: OleVariant; 
                           Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant): _Control; safecall;
    function CreateReportControl(const ReportName: WideString; ControlType: AcControlType; 
                                 Section: AcSection; Parent: OleVariant; ColumnName: OleVariant; 
                                 Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                                 Height: OleVariant): _Control; safecall;
    function CreateControlEx(const FormName: WideString; ControlType: AcControlType; 
                             Section: AcSection; const Parent: WideString; 
                             const ControlSource: WideString; Left: Integer; Top: Integer; 
                             Width: Integer; Height: Integer): _Control; safecall;
    function CreateReportControlEx(const ReportName: WideString; ControlType: AcControlType; 
                                   Section: AcSection; const Parent: WideString; 
                                   const ControlName: WideString; Left: Integer; Top: Integer; 
                                   Width: Integer; Height: Integer): _Control; safecall;
    procedure ExportCustomFixedFormat(ExternalExporter: OleVariant; 
                                      const OutputFileName: WideString; 
                                      const ObjectName: WideString; ObjectType: AcOutputObjectType; 
                                      SelectedRecords: WordBool; FromPage: Integer; ToPage: Integer); safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property CodeContextObject: IDispatch read Get_CodeContextObject;
    property MenuBar: WideString read Get_MenuBar write Set_MenuBar;
    property CurrentObjectType: AcObjectType read Get_CurrentObjectType;
    property CurrentObjectName: WideString read Get_CurrentObjectName;
    property Forms: Forms read Get_Forms;
    property Reports: Reports read Get_Reports;
    property Screen: Screen read Get_Screen;
    property DoCmd: DoCmd read Get_DoCmd;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property UserControl: WordBool read Get_UserControl write Set_UserControl;
    property DBEngine: DBEngine read Get_DBEngine;
    property CommandBars: CommandBars read Get_CommandBars;
    property Assistant: Assistant read Get_Assistant;
    property References: AccessReferences read Get_References;
    property Modules: Modules read Get_Modules;
    property FileSearch: FileSearch read Get_FileSearch;
    property IsCompiled: WordBool read Get_IsCompiled;
    property VBE: VBE read Get_VBE;
    property DataAccessPages: DataAccessPages read Get_DataAccessPages;
    property ADOConnectString: WideString read Get_ADOConnectString;
    property CurrentProject: CurrentProject read Get_CurrentProject;
    property CurrentData: CurrentData read Get_CurrentData;
    property CodeProject: CodeProject read Get_CodeProject;
    property CodeData: CodeData read Get_CodeData;
    property WizHook: WizHook read Get_WizHook;
    property ProductCode: WideString read Get_ProductCode;
    property COMAddIns: COMAddIns read Get_COMAddIns;
    property Name: WideString read Get_Name;
    property DefaultWebOptions: DefaultWebOptions read Get_DefaultWebOptions;
    property LanguageSettings: LanguageSettings read Get_LanguageSettings;
    property AnswerWizard: AnswerWizard read Get_AnswerWizard;
    property FeatureInstall: MsoFeatureInstall read Get_FeatureInstall write Set_FeatureInstall;
    property VGXFrameInterval: OleVariant read Get_VGXFrameInterval;
    property FileDialog[dialogType: MsoFileDialogType]: FileDialog read Get_FileDialog;
    property BrokenReference: WordBool read Get_BrokenReference;
    property Printers: Printers read Get_Printers;
    property Printer: _Printer read Get_Printer write Set_Printer;
    property MsoDebugOptions: MsoDebugOptions read Get_MsoDebugOptions;
    property Version: WideString read Get_Version;
    property Build: Integer read Get_Build;
    property NewFileTaskPane: NewFile read Get_NewFileTaskPane;
    property AutoCorrect: _AutoCorrect read Get_AutoCorrect;
    property AutomationSecurity: MsoAutomationSecurity read Get_AutomationSecurity write Set_AutomationSecurity;
    property MacroError: MacroError read Get_MacroError;
    property TempVars: TempVars read Get_TempVars;
    property Assistance: IAssistance read Get_Assistance;
  end;

// *********************************************************************//
// DispIntf:  _ApplicationDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {68CCE6C0-6129-101B-AF4E-00AA003F0F07}
// *********************************************************************//
  _ApplicationDisp = dispinterface
    ['{68CCE6C0-6129-101B-AF4E-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property CodeContextObject: IDispatch readonly dispid 2082;
    procedure NewCurrentDatabaseOld(const filepath: WideString); dispid 2142;
    procedure OpenCurrentDatabaseOld(const filepath: WideString; Exclusive: WordBool); dispid 2140;
    property MenuBar: WideString dispid 2010;
    property CurrentObjectType: AcObjectType readonly dispid 2011;
    property CurrentObjectName: WideString readonly dispid 2012;
    function GetOption(const OptionName: WideString): OleVariant; dispid 2013;
    procedure SetOption(const OptionName: WideString; Setting: OleVariant); dispid 2014;
    procedure Echo(EchoOn: Smallint; const bstrStatusBarText: WideString); dispid 2015;
    procedure CloseCurrentDatabase; dispid 2141;
    procedure Quit(Option: AcQuitOption); dispid 2016;
    property Forms: Forms readonly dispid 2002;
    property Reports: Reports readonly dispid 2003;
    property Screen: Screen readonly dispid 2004;
    property DoCmd: DoCmd readonly dispid 2025;
    property ShortcutMenuBar: WideString dispid 2107;
    property Visible: WordBool dispid 2148;
    property UserControl: WordBool dispid 2149;
    function SysCmd(Action: AcSysCmdAction; Argument2: OleVariant; Argument3: OleVariant): OleVariant; dispid 2028;
    function CreateForm(Database: OleVariant; FormTemplate: OleVariant): AccessForm; dispid 2029;
    function CreateReport(Database: OleVariant; ReportTemplate: OleVariant): AccessReport; dispid 2030;
    function CreateControlOld(const FormName: WideString; ControlType: AcControlType; 
                              Section: AcSection; Parent: OleVariant; ColumnName: OleVariant; 
                              Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                              Height: OleVariant): AccessControl; dispid 2031;
    function CreateReportControlOld(const ReportName: WideString; ControlType: AcControlType; 
                                    Section: AcSection; Parent: OleVariant; ColumnName: OleVariant; 
                                    Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                                    Height: OleVariant): AccessControl; dispid 2032;
    function CreateControlExOld(const FormName: WideString; ControlType: AcControlType; 
                                Section: AcSection; const Parent: WideString; 
                                const ControlSource: WideString; Left: Integer; Top: Integer; 
                                Width: Integer; Height: Integer): AccessControl; dispid 2164;
    function CreateReportControlExOld(const ReportName: WideString; ControlType: AcControlType; 
                                      Section: AcSection; const Parent: WideString; 
                                      const ControlName: WideString; Left: Integer; Top: Integer; 
                                      Width: Integer; Height: Integer): AccessControl; dispid 2165;
    procedure DeleteControl(const FormName: WideString; const ControlName: WideString); dispid 2033;
    procedure DeleteReportControl(const ReportName: WideString; const ControlName: WideString); dispid 2034;
    function CreateGroupLevel(const ReportName: WideString; const Expression: WideString; 
                              Header: Smallint; Footer: Smallint): Integer; dispid 2051;
    function DMin(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; dispid 2035;
    function DMax(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; dispid 2036;
    function DSum(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; dispid 2037;
    function DAvg(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; dispid 2038;
    function DLookup(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; dispid 2039;
    function DLast(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; dispid 2040;
    function DVar(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; dispid 2041;
    function DVarP(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; dispid 2042;
    function DStDev(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; dispid 2043;
    function DStDevP(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; dispid 2044;
    function DFirst(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; dispid 2045;
    function DCount(const Expr: WideString; const Domain: WideString; Criteria: OleVariant): OleVariant; dispid 2046;
    function Eval(const StringExpr: WideString): OleVariant; dispid 2047;
    function CurrentUser: WideString; dispid 2048;
    function DDEInitiate(const Application: WideString; const Topic: WideString): OleVariant; dispid 2052;
    procedure DDEExecute(ChanNum: OleVariant; const Command: WideString); dispid 2053;
    procedure DDEPoke(ChanNum: OleVariant; const Item: WideString; const Data: WideString); dispid 2054;
    function DDERequest(ChanNum: OleVariant; const Item: WideString): WideString; dispid 2055;
    procedure DDETerminate(ChanNum: OleVariant); dispid 2056;
    procedure DDETerminateAll; dispid 2057;
    property DBEngine: DBEngine readonly dispid 2110;
    function CurrentDb: Database; dispid 2049;
    function CodeDb: Database; dispid 2050;
    procedure BeginUndoable(Hwnd: Integer); dispid 2099;
    procedure SetUndoRecording(yesno: Smallint); dispid 2100;
    function BuildCriteria(const Field: WideString; FieldType: Smallint; 
                           const Expression: WideString): WideString; dispid 2138;
    procedure InsertText(const Text: WideString; const ModuleName: WideString); dispid 2093;
    procedure ReloadAddIns; dispid 2154;
    function DefaultWorkspaceClone: Workspace; dispid 2157;
    procedure RefreshTitleBar; dispid 2158;
    procedure AddAutoCorrect(const ChangeFrom: WideString; const ChangeTo: WideString); dispid 2159;
    procedure DelAutoCorrect(const ChangeFrom: WideString); dispid 2160;
    function hWndAccessApp: SYSINT; dispid 2163;
    function Run(const Procedure_: WideString; var Arg1: OleVariant; var Arg2: OleVariant; 
                 var Arg3: OleVariant; var Arg4: OleVariant; var Arg5: OleVariant; 
                 var Arg6: OleVariant; var Arg7: OleVariant; var Arg8: OleVariant; 
                 var Arg9: OleVariant; var Arg10: OleVariant; var Arg11: OleVariant; 
                 var Arg12: OleVariant; var Arg13: OleVariant; var Arg14: OleVariant; 
                 var Arg15: OleVariant; var Arg16: OleVariant; var Arg17: OleVariant; 
                 var Arg18: OleVariant; var Arg19: OleVariant; var Arg20: OleVariant; 
                 var Arg21: OleVariant; var Arg22: OleVariant; var Arg23: OleVariant; 
                 var Arg24: OleVariant; var Arg25: OleVariant; var Arg26: OleVariant; 
                 var Arg27: OleVariant; var Arg28: OleVariant; var Arg29: OleVariant; 
                 var Arg30: OleVariant): OleVariant; dispid 2134;
    function Nz(Value: OleVariant; ValueIfNull: OleVariant): OleVariant; dispid 2135;
    function LoadPicture(const FileName: WideString): IDispatch; dispid 2166;
    procedure ReplaceModule(objtyp: Integer; const ModuleName: WideString; 
                            const FileName: WideString; token: Integer); dispid 2168;
    function AccessError(ErrorNumber: OleVariant): OleVariant; dispid 2169;
    function BuilderString: OleVariant; dispid 2170;
    function StringFromGUID(Guid: OleVariant): OleVariant; dispid 2171;
    function GUIDFromString(String_: OleVariant): OleVariant; dispid 2172;
    function AppLoadString(id: Integer): OleVariant; dispid 2173;
    property CommandBars: CommandBars readonly dispid 2174;
    property Assistant: Assistant readonly dispid 2175;
    procedure FollowHyperlink(const Address: WideString; const SubAddress: WideString; 
                              NewWindow: WordBool; AddHistory: WordBool; ExtraInfo: OleVariant; 
                              Method: MsoExtraInfoMethod; const HeaderInfo: WideString); dispid 2176;
    procedure SaveAsText(ObjectType: AcObjectType; const ObjectName: WideString; 
                         const FileName: WideString); dispid 2178;
    procedure LoadFromText(ObjectType: AcObjectType; const ObjectName: WideString; 
                           const FileName: WideString); dispid 2179;
    procedure AddToFavorites; dispid 2184;
    procedure RefreshDatabaseWindow; dispid 2186;
    property References: AccessReferences readonly dispid 2187;
    property Modules: Modules readonly dispid 2188;
    property FileSearch: FileSearch readonly dispid 2189;
    property IsCompiled: WordBool readonly dispid 2193;
    procedure RunCommand(Command: AcCommand); dispid 2194;
    function HyperlinkPart(Hyperlink: OleVariant; Part: AcHyperlinkPart): WideString; dispid 2195;
    function GetHiddenAttribute(ObjectType: AcObjectType; const ObjectName: WideString): WordBool; dispid 2197;
    procedure SetHiddenAttribute(ObjectType: AcObjectType; const ObjectName: WideString; 
                                 fHidden: WordBool); dispid 2198;
    property VBE: VBE readonly dispid 2210;
    property DataAccessPages: DataAccessPages readonly dispid 2212;
    function CreateDataAccessPage(FileName: OleVariant; CreateNewFile: WordBool): DataAccessPage; dispid 2213;
    property ADOConnectString: WideString readonly dispid 2233;
    property CurrentProject: CurrentProject readonly dispid 2215;
    property CurrentData: CurrentData readonly dispid 2216;
    property CodeProject: CodeProject readonly dispid 2217;
    property CodeData: CodeData readonly dispid 2218;
    procedure NewAccessProject(const filepath: WideString; Connect: OleVariant); dispid 2262;
    procedure OpenAccessProject(const filepath: WideString; Exclusive: WordBool); dispid 2263;
    procedure CreateAccessProject(const filepath: WideString; Connect: OleVariant); dispid 2264;
    property WizHook: WizHook readonly dispid 2235;
    property ProductCode: WideString readonly dispid 2266;
    property COMAddIns: COMAddIns readonly dispid 2277;
    property Name: WideString readonly dispid 2094;
    property DefaultWebOptions: DefaultWebOptions readonly dispid 2278;
    property LanguageSettings: LanguageSettings readonly dispid 2301;
    property AnswerWizard: AnswerWizard readonly dispid 2304;
    property FeatureInstall: MsoFeatureInstall dispid 2322;
    function EuroConvert(Number: Double; const SourceCurrency: WideString; 
                         const TargetCurrency: WideString; FullPrecision: OleVariant; 
                         TriangulationPrecision: OleVariant): Double; dispid 2325;
    property VGXFrameInterval: OleVariant readonly dispid 2326;
    property FileDialog[dialogType: MsoFileDialogType]: FileDialog readonly dispid 2329;
    property BrokenReference: WordBool readonly dispid 2334;
    procedure CreateNewWorkgroupFile(const Path: WideString; const Name: WideString; 
                                     const Company: WideString; const WorkgroupID: WideString; 
                                     Replace: WordBool); dispid 2332;
    procedure SetDefaultWorkgroupFile(const Path: WideString); dispid 2333;
    property Printers: Printers readonly dispid 2364;
    property Printer: _Printer dispid 2365;
    property MsoDebugOptions: MsoDebugOptions readonly dispid 2335;
    procedure ConvertAccessProject(const SourceFilename: WideString; 
                                   const DestinationFilename: WideString; 
                                   DestinationFileFormat: AcFileFormat); dispid 2376;
    property Version: WideString readonly dispid 2377;
    property Build: Integer readonly dispid 2378;
    procedure OpenCurrentDatabase(const filepath: WideString; Exclusive: WordBool; 
                                  const bstrPassword: WideString); dispid 2382;
    function CompactRepair(const SourceFile: WideString; const DestinationFile: WideString; 
                           LogFile: WordBool): WordBool; dispid 2400;
    procedure ExportXMLOld(ObjectType: AcExportXMLObjectType; const DataSource: WideString; 
                           const DataTarget: WideString; const SchemaTarget: WideString; 
                           const PresentationTarget: WideString; const ImageTarget: WideString; 
                           Encoding: AcExportXMLEncoding; OtherFlags: Integer); dispid 2424;
    procedure ImportXML(const DataSource: WideString; ImportOptions: AcImportXMLOption); dispid 2425;
    property NewFileTaskPane: NewFile readonly dispid 2337;
    procedure TransformXML(const DataSource: WideString; const TransformSource: WideString; 
                           const OutputTarget: WideString; WellFormedXMLOutput: WordBool; 
                           ScriptOption: AcTransformXMLScriptOption); dispid 2430;
    function CreateAdditionalData: _AdditionalData; dispid 2431;
    property AutoCorrect: _AutoCorrect readonly dispid 2432;
    procedure ExportXML(ObjectType: AcExportXMLObjectType; const DataSource: WideString; 
                        const DataTarget: WideString; const SchemaTarget: WideString; 
                        const PresentationTarget: WideString; const ImageTarget: WideString; 
                        Encoding: AcExportXMLEncoding; OtherFlags: AcExportXMLOtherFlags; 
                        const WhereCondition: WideString; AdditionalData: OleVariant); dispid 2441;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property AutomationSecurity: MsoAutomationSecurity dispid 2449;
    procedure NewCurrentDatabase(const filepath: WideString; FileFormat: AcNewDatabaseFormat; 
                                 Template: OleVariant; const SiteAddress: WideString; 
                                 const ListID: WideString); dispid 2459;
    function PlainText(RichText: OleVariant; Length: OleVariant): WideString; dispid 2462;
    function HtmlEncode(PlainText: OleVariant; Length: OleVariant): WideString; dispid 2485;
    property MacroError: MacroError readonly dispid 2475;
    procedure LoadCustomUI(const CustomUIName: WideString; const CustomUIXML: WideString); dispid 2484;
    property TempVars: TempVars readonly dispid 2487;
    procedure ExportNavigationPane(const Path: WideString); dispid 2490;
    procedure ImportNavigationPane(const Path: WideString; fAppendOnly: WordBool); dispid 2491;
    function ColumnHistory(const TableName: WideString; const ColumnName: WideString; 
                           const queryString: WideString): WideString; dispid 2493;
    property Assistance: IAssistance readonly dispid 2494;
    function CreateControl(const FormName: WideString; ControlType: AcControlType; 
                           Section: AcSection; Parent: OleVariant; ColumnName: OleVariant; 
                           Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant): _Control; dispid 2495;
    function CreateReportControl(const ReportName: WideString; ControlType: AcControlType; 
                                 Section: AcSection; Parent: OleVariant; ColumnName: OleVariant; 
                                 Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                                 Height: OleVariant): _Control; dispid 2496;
    function CreateControlEx(const FormName: WideString; ControlType: AcControlType; 
                             Section: AcSection; const Parent: WideString; 
                             const ControlSource: WideString; Left: Integer; Top: Integer; 
                             Width: Integer; Height: Integer): _Control; dispid 2497;
    function CreateReportControlEx(const ReportName: WideString; ControlType: AcControlType; 
                                   Section: AcSection; const Parent: WideString; 
                                   const ControlName: WideString; Left: Integer; Top: Integer; 
                                   Width: Integer; Height: Integer): _Control; dispid 2498;
    procedure ExportCustomFixedFormat(ExternalExporter: OleVariant; 
                                      const OutputFileName: WideString; 
                                      const ObjectName: WideString; ObjectType: AcOutputObjectType; 
                                      SelectedRecords: WordBool; FromPage: Integer; ToPage: Integer); dispid 2499;
  end;

// *********************************************************************//
// Interface: Reference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EB106212-9C89-11CF-A2B3-00A0C90542FF}
// *********************************************************************//
  Reference = interface(IDispatch)
    ['{EB106212-9C89-11CF-A2B3-00A0C90542FF}']
    function Get_Collection: AccessReferences; safecall;
    function Get_Name: WideString; safecall;
    function Get_Guid: WideString; safecall;
    function Get_Major: Integer; safecall;
    function Get_Minor: Integer; safecall;
    function Get_FullPath: WideString; safecall;
    function Get_BuiltIn: WordBool; safecall;
    function Get_IsBroken: WordBool; safecall;
    function Get_Kind: vbext_RefKind; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Collection: AccessReferences read Get_Collection;
    property Name: WideString read Get_Name;
    property Guid: WideString read Get_Guid;
    property Major: Integer read Get_Major;
    property Minor: Integer read Get_Minor;
    property FullPath: WideString read Get_FullPath;
    property BuiltIn: WordBool read Get_BuiltIn;
    property IsBroken: WordBool read Get_IsBroken;
    property Kind: vbext_RefKind read Get_Kind;
  end;

// *********************************************************************//
// DispIntf:  ReferenceDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EB106212-9C89-11CF-A2B3-00A0C90542FF}
// *********************************************************************//
  ReferenceDisp = dispinterface
    ['{EB106212-9C89-11CF-A2B3-00A0C90542FF}']
    property Collection: AccessReferences readonly dispid 1610743808;
    property Name: WideString readonly dispid 1610743809;
    property Guid: WideString readonly dispid 1610743810;
    property Major: Integer readonly dispid 1610743811;
    property Minor: Integer readonly dispid 1610743812;
    property FullPath: WideString readonly dispid 1610743813;
    property BuiltIn: WordBool readonly dispid 1610743814;
    property IsBroken: WordBool readonly dispid 1610743815;
    property Kind: vbext_RefKind readonly dispid 1610743816;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _References
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EB106213-9C89-11CF-A2B3-00A0C90542FF}
// *********************************************************************//
  _References = interface(IDispatch)
    ['{EB106213-9C89-11CF-A2B3-00A0C90542FF}']
    function Get_Parent: IDispatch; safecall;
    function Item(var_: OleVariant): Reference; safecall;
    function Get_Count: Integer; safecall;
    function _NewEnum: IUnknown; safecall;
    function AddFromGuid(const Guid: WideString; Major: Integer; Minor: Integer): Reference; safecall;
    function AddFromFile(const FileName: WideString): Reference; safecall;
    procedure Remove(const Reference: Reference); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Parent: IDispatch read Get_Parent;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _ReferencesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EB106213-9C89-11CF-A2B3-00A0C90542FF}
// *********************************************************************//
  _ReferencesDisp = dispinterface
    ['{EB106213-9C89-11CF-A2B3-00A0C90542FF}']
    property Parent: IDispatch readonly dispid 1610743808;
    function Item(var_: OleVariant): Reference; dispid 0;
    property Count: Integer readonly dispid 1610743810;
    function _NewEnum: IUnknown; dispid -4;
    function AddFromGuid(const Guid: WideString; Major: Integer; Minor: Integer): Reference; dispid 1610743812;
    function AddFromFile(const FileName: WideString): Reference; dispid 1610743813;
    procedure Remove(const Reference: Reference); dispid 1610743814;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// DispIntf:  _References_Events
// Flags:     (4240) Hidden NonExtensible Dispatchable
// GUID:      {F163F201-ADA2-11CF-89A9-00A0C9054129}
// *********************************************************************//
  _References_Events = dispinterface
    ['{F163F201-ADA2-11CF-89A9-00A0C9054129}']
    procedure ItemAdded(const Reference: Reference); dispid 0;
    procedure ItemRemoved(const Reference: Reference); dispid 1;
  end;

// *********************************************************************//
// Interface: _Dummy
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8B06E320-B23C-11CF-89A8-00A0C9054129}
// *********************************************************************//
  _Dummy = interface(IDispatch)
    ['{8B06E320-B23C-11CF-89A8-00A0C9054129}']
  end;

// *********************************************************************//
// DispIntf:  _DummyDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8B06E320-B23C-11CF-89A8-00A0C9054129}
// *********************************************************************//
  _DummyDisp = dispinterface
    ['{8B06E320-B23C-11CF-89A8-00A0C9054129}']
  end;

// *********************************************************************//
// Interface: _DataAccessPage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {493D8A72-1DB1-11D1-98A2-006008197D41}
// *********************************************************************//
  _DataAccessPage = interface(IDispatch)
    ['{493D8A72-1DB1-11D1-98A2-006008197D41}']
    function Get__Name: WideString; safecall;
    function Get_Name: WideString; safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_WindowWidth: Integer; safecall;
    function Get_WindowHeight: Integer; safecall;
    function Get_CurrentView: Smallint; safecall;
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Document: IDispatch; safecall;
    procedure ApplyTheme(const ThemeName: WideString); safecall;
    function Get_WebOptions: AccessWebOptions; safecall;
    function Get_ConnectionString: WideString; safecall;
    procedure Set_ConnectionString(const pRet: WideString); safecall;
    function Get_FieldListConnection: IDispatch; safecall;
    function Get_MailEnvelope: MsoEnvelope; safecall;
    function Get_CurrentSelection: IDispatch; safecall;
    function Get_MSODSC: IDispatch; safecall;
    function Get_RemovePersonalInformation: WordBool; safecall;
    procedure Set_RemovePersonalInformation(pf: WordBool); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property _Name: WideString read Get__Name;
    property Name: WideString read Get_Name;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Tag: WideString read Get_Tag write Set_Tag;
    property WindowWidth: Integer read Get_WindowWidth;
    property WindowHeight: Integer read Get_WindowHeight;
    property CurrentView: Smallint read Get_CurrentView;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Document: IDispatch read Get_Document;
    property WebOptions: AccessWebOptions read Get_WebOptions;
    property ConnectionString: WideString read Get_ConnectionString write Set_ConnectionString;
    property FieldListConnection: IDispatch read Get_FieldListConnection;
    property MailEnvelope: MsoEnvelope read Get_MailEnvelope;
    property CurrentSelection: IDispatch read Get_CurrentSelection;
    property MSODSC: IDispatch read Get_MSODSC;
    property RemovePersonalInformation: WordBool read Get_RemovePersonalInformation write Set_RemovePersonalInformation;
  end;

// *********************************************************************//
// DispIntf:  _DataAccessPageDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {493D8A72-1DB1-11D1-98A2-006008197D41}
// *********************************************************************//
  _DataAccessPageDisp = dispinterface
    ['{493D8A72-1DB1-11D1-98A2-006008197D41}']
    property _Name: WideString readonly dispid 20;
    property Name: WideString readonly dispid -2147418112;
    property Visible: WordBool dispid 148;
    property Tag: WideString dispid 266;
    property WindowWidth: Integer readonly dispid 287;
    property WindowHeight: Integer readonly dispid 288;
    property CurrentView: Smallint readonly dispid 289;
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Document: IDispatch readonly dispid 0;
    procedure ApplyTheme(const ThemeName: WideString); dispid 2258;
    property WebOptions: AccessWebOptions readonly dispid 2293;
    property ConnectionString: WideString dispid 2268;
    property FieldListConnection: IDispatch readonly dispid 2298;
    property MailEnvelope: MsoEnvelope readonly dispid 2327;
    property CurrentSelection: IDispatch readonly dispid 2336;
    property MSODSC: IDispatch readonly dispid 2379;
    property RemovePersonalInformation: WordBool dispid 2367;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: DataAccessPages
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {493D8A71-1DB1-11D1-98A2-006008197D41}
// *********************************************************************//
  DataAccessPages = interface(IDispatch)
    ['{493D8A71-1DB1-11D1-98A2-006008197D41}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Item(var_: OleVariant): DataAccessPage; safecall;
    function Get_Count: Integer; safecall;
    function _NewEnum: IUnknown; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[var_: OleVariant]: DataAccessPage read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  DataAccessPagesDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {493D8A71-1DB1-11D1-98A2-006008197D41}
// *********************************************************************//
  DataAccessPagesDisp = dispinterface
    ['{493D8A71-1DB1-11D1-98A2-006008197D41}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Item[var_: OleVariant]: DataAccessPage readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function _NewEnum: IUnknown; dispid -4;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: AllObjects
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DDBD4001-44D5-11D1-98C0-006008197D41}
// *********************************************************************//
  AllObjects = interface(IDispatch)
    ['{DDBD4001-44D5-11D1-98C0-006008197D41}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Item(var_: OleVariant): AccessObject; safecall;
    function Get_Count: Integer; safecall;
    function _NewEnum: IUnknown; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[var_: OleVariant]: AccessObject read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  AllObjectsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DDBD4001-44D5-11D1-98C0-006008197D41}
// *********************************************************************//
  AllObjectsDisp = dispinterface
    ['{DDBD4001-44D5-11D1-98C0-006008197D41}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Item[var_: OleVariant]: AccessObject readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function _NewEnum: IUnknown; dispid -4;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: AccessObjectProperty
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1FE3E471-A7D0-11D1-9944-006008197D41}
// *********************************************************************//
  AccessObjectProperty = interface(IDispatch)
    ['{1FE3E471-A7D0-11D1-9944-006008197D41}']
    function Get__Value: OleVariant; safecall;
    function Get_Name: WideString; safecall;
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(pRet: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property _Value: OleVariant read Get__Value;
    property Name: WideString read Get_Name;
    property Value: OleVariant read Get_Value write Set_Value;
  end;

// *********************************************************************//
// DispIntf:  AccessObjectPropertyDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1FE3E471-A7D0-11D1-9944-006008197D41}
// *********************************************************************//
  AccessObjectPropertyDisp = dispinterface
    ['{1FE3E471-A7D0-11D1-9944-006008197D41}']
    property _Value: OleVariant readonly dispid 2103;
    property Name: WideString readonly dispid -2147418112;
    property Value: OleVariant dispid 0;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: AccessObjectProperties
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0921F331-A7C9-11D1-9944-006008197D41}
// *********************************************************************//
  AccessObjectProperties = interface(IDispatch)
    ['{0921F331-A7C9-11D1-9944-006008197D41}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Item(Index: OleVariant): AccessObjectProperty; safecall;
    function Get_Count: Integer; safecall;
    function _NewEnum: IUnknown; safecall;
    procedure Add(const PropertyName: WideString; Value: OleVariant); safecall;
    procedure Remove(Item: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: AccessObjectProperty read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  AccessObjectPropertiesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0921F331-A7C9-11D1-9944-006008197D41}
// *********************************************************************//
  AccessObjectPropertiesDisp = dispinterface
    ['{0921F331-A7C9-11D1-9944-006008197D41}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Item[Index: OleVariant]: AccessObjectProperty readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function _NewEnum: IUnknown; dispid -4;
    procedure Add(const PropertyName: WideString; Value: OleVariant); dispid 2191;
    procedure Remove(Item: OleVariant); dispid 2192;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _CurrentProject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9212BA71-3E79-11D1-98BD-006008197D41}
// *********************************************************************//
  _CurrentProject = interface(IDispatch)
    ['{9212BA71-3E79-11D1-98BD-006008197D41}']
    function Get_AllForms: AllForms; safecall;
    function Get_AllReports: AllReports; safecall;
    function Get_AllMacros: AllMacros; safecall;
    function Get_AllModules: AllModules; safecall;
    function Get_AllDataAccessPages: AllDataAccessPages; safecall;
    function Get_ProjectType: AcProjectType; safecall;
    function Get_BaseConnectionString: WideString; safecall;
    function Get_IsConnected: WordBool; safecall;
    procedure OpenConnection(BaseConnectionString: OleVariant; UserID: OleVariant; 
                             Password: OleVariant); safecall;
    procedure CloseConnection; safecall;
    function Get_Name: WideString; safecall;
    function Get_Path: WideString; safecall;
    function Get_FullName: WideString; safecall;
    function Get_Connection: Connection; safecall;
    function Get_Properties: AccessObjectProperties; safecall;
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_RemovePersonalInformation: WordBool; safecall;
    procedure Set_RemovePersonalInformation(pf: WordBool); safecall;
    function Get_FileFormat: AcFileFormat; safecall;
    function Get_AccessConnection: Connection; safecall;
    procedure UpdateDependencyInfo; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_ImportExportSpecifications: ImportExportSpecifications; safecall;
    function Get_IsTrusted: WordBool; safecall;
    property AllForms: AllForms read Get_AllForms;
    property AllReports: AllReports read Get_AllReports;
    property AllMacros: AllMacros read Get_AllMacros;
    property AllModules: AllModules read Get_AllModules;
    property AllDataAccessPages: AllDataAccessPages read Get_AllDataAccessPages;
    property ProjectType: AcProjectType read Get_ProjectType;
    property BaseConnectionString: WideString read Get_BaseConnectionString;
    property IsConnected: WordBool read Get_IsConnected;
    property Name: WideString read Get_Name;
    property Path: WideString read Get_Path;
    property FullName: WideString read Get_FullName;
    property Connection: Connection read Get_Connection;
    property Properties: AccessObjectProperties read Get_Properties;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property RemovePersonalInformation: WordBool read Get_RemovePersonalInformation write Set_RemovePersonalInformation;
    property FileFormat: AcFileFormat read Get_FileFormat;
    property AccessConnection: Connection read Get_AccessConnection;
    property ImportExportSpecifications: ImportExportSpecifications read Get_ImportExportSpecifications;
    property IsTrusted: WordBool read Get_IsTrusted;
  end;

// *********************************************************************//
// DispIntf:  _CurrentProjectDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9212BA71-3E79-11D1-98BD-006008197D41}
// *********************************************************************//
  _CurrentProjectDisp = dispinterface
    ['{9212BA71-3E79-11D1-98BD-006008197D41}']
    property AllForms: AllForms readonly dispid 2219;
    property AllReports: AllReports readonly dispid 2220;
    property AllMacros: AllMacros readonly dispid 2221;
    property AllModules: AllModules readonly dispid 2222;
    property AllDataAccessPages: AllDataAccessPages readonly dispid 2224;
    property ProjectType: AcProjectType readonly dispid 2271;
    property BaseConnectionString: WideString readonly dispid 2267;
    property IsConnected: WordBool readonly dispid 2269;
    procedure OpenConnection(BaseConnectionString: OleVariant; UserID: OleVariant; 
                             Password: OleVariant); dispid 2272;
    procedure CloseConnection; dispid 2270;
    property Name: WideString readonly dispid 2094;
    property Path: WideString readonly dispid 2275;
    property FullName: WideString readonly dispid 2260;
    property Connection: Connection readonly dispid 2274;
    property Properties: AccessObjectProperties readonly dispid 2091;
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property RemovePersonalInformation: WordBool dispid 2367;
    property FileFormat: AcFileFormat readonly dispid 2377;
    property AccessConnection: Connection readonly dispid 2428;
    procedure UpdateDependencyInfo; dispid 2447;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property ImportExportSpecifications: ImportExportSpecifications readonly dispid 2454;
    property IsTrusted: WordBool readonly dispid 2469;
  end;

// *********************************************************************//
// Interface: _CurrentData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9212BA73-3E79-11D1-98BD-006008197D41}
// *********************************************************************//
  _CurrentData = interface(IDispatch)
    ['{9212BA73-3E79-11D1-98BD-006008197D41}']
    function Get_AllTables: AllTables; safecall;
    function Get_AllQueries: AllQueries; safecall;
    function Get_AllViews: AllViews; safecall;
    function Get_AllStoredProcedures: AllStoredProcedures; safecall;
    function Get_AllDatabaseDiagrams: AllDatabaseDiagrams; safecall;
    function Get_AllFunctions: AllFunctions; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property AllTables: AllTables read Get_AllTables;
    property AllQueries: AllQueries read Get_AllQueries;
    property AllViews: AllViews read Get_AllViews;
    property AllStoredProcedures: AllStoredProcedures read Get_AllStoredProcedures;
    property AllDatabaseDiagrams: AllDatabaseDiagrams read Get_AllDatabaseDiagrams;
    property AllFunctions: AllFunctions read Get_AllFunctions;
  end;

// *********************************************************************//
// DispIntf:  _CurrentDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9212BA73-3E79-11D1-98BD-006008197D41}
// *********************************************************************//
  _CurrentDataDisp = dispinterface
    ['{9212BA73-3E79-11D1-98BD-006008197D41}']
    property AllTables: AllTables readonly dispid 2225;
    property AllQueries: AllQueries readonly dispid 2226;
    property AllViews: AllViews readonly dispid 2228;
    property AllStoredProcedures: AllStoredProcedures readonly dispid 2229;
    property AllDatabaseDiagrams: AllDatabaseDiagrams readonly dispid 2230;
    property AllFunctions: AllFunctions readonly dispid 2422;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: AccessObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ABE316B1-3FF6-11D1-98BD-006008197D41}
// *********************************************************************//
  AccessObject = interface(IDispatch)
    ['{ABE316B1-3FF6-11D1-98BD-006008197D41}']
    function Get_Parent: IDispatch; safecall;
    function Get__Name: WideString; safecall;
    function Get_Name: WideString; safecall;
    function Get_type_: AcObjectType; safecall;
    function Get_Attributes: Integer; safecall;
    function Get_Properties: AccessObjectProperties; safecall;
    function Get_IsLoaded: WordBool; safecall;
    function Get_FullName: WideString; safecall;
    procedure Set_FullName(const pbstrFullName: WideString); safecall;
    function Get_DateCreated: TDateTime; safecall;
    function Get_DateModified: TDateTime; safecall;
    function Get_CurrentView: AcCurrentView; safecall;
    function IsDependentUpon(ObjectType: AcObjectType; const ObjectName: WideString): WordBool; safecall;
    function GetDependencyInfo: _DependencyInfo; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Parent: IDispatch read Get_Parent;
    property _Name: WideString read Get__Name;
    property Name: WideString read Get_Name;
    property type_: AcObjectType read Get_type_;
    property Attributes: Integer read Get_Attributes;
    property Properties: AccessObjectProperties read Get_Properties;
    property IsLoaded: WordBool read Get_IsLoaded;
    property FullName: WideString read Get_FullName write Set_FullName;
    property DateCreated: TDateTime read Get_DateCreated;
    property DateModified: TDateTime read Get_DateModified;
    property CurrentView: AcCurrentView read Get_CurrentView;
  end;

// *********************************************************************//
// DispIntf:  AccessObjectDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ABE316B1-3FF6-11D1-98BD-006008197D41}
// *********************************************************************//
  AccessObjectDisp = dispinterface
    ['{ABE316B1-3FF6-11D1-98BD-006008197D41}']
    property Parent: IDispatch readonly dispid 2087;
    property _Name: WideString readonly dispid 20;
    property Name: WideString readonly dispid -2147418112;
    property type_: AcObjectType readonly dispid 2095;
    property Attributes: Integer readonly dispid 2257;
    property Properties: AccessObjectProperties readonly dispid 2091;
    property IsLoaded: WordBool readonly dispid 2276;
    property FullName: WideString dispid 2260;
    property DateCreated: TDateTime readonly dispid 2412;
    property DateModified: TDateTime readonly dispid 2413;
    property CurrentView: AcCurrentView readonly dispid 2414;
    function IsDependentUpon(ObjectType: AcObjectType; const ObjectName: WideString): WordBool; dispid 2434;
    function GetDependencyInfo: _DependencyInfo; dispid 2435;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _WizHook
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CB9D3171-4728-11D1-8334-006008197CC8}
// *********************************************************************//
  _WizHook = interface(IDispatch)
    ['{CB9D3171-4728-11D1-8334-006008197CC8}']
    procedure Set_Key(Param1: SYSINT); safecall;
    function NameFromActid(Actid: SYSINT): WideString; safecall;
    function ArgsOfActid(Actid: SYSINT): SYSINT; safecall;
    function OpenScript(const Script: WideString; const Label_: WideString; OpenMode: Integer; 
                        var Extra: SYSINT; var Version: Integer): Integer; safecall;
    function GetScriptString(HScr: Integer; ScriptColumn: Integer; var Value: WideString): WordBool; safecall;
    function SaveScriptString(HScr: Integer; ScriptColumn: Integer; const Value: WideString): WordBool; safecall;
    function GlobalProcExists(const Name: WideString): WordBool; safecall;
    function TableFieldHasUniqueIndex(const Table: WideString; const Columns: WideString): WordBool; safecall;
    function BracketString(var String_: WideString; flags: Integer): WordBool; safecall;
    function WizHelp(const HelpFile: WideString; wCmd: Integer; ContextID: Integer): WordBool; safecall;
    function OpenPictureFile(var File_: WideString; var Cancelled: WordBool): WordBool; safecall;
    function EnglishPictToLocal(const In_: WideString; var Out: WideString): WordBool; safecall;
    function TranslateExpression(const In_: WideString; var Out: WideString; ParseFlags: Integer; 
                                 TranslateFlags: Integer): WordBool; safecall;
    function FileExists(const File_: WideString): WordBool; safecall;
    function FullPath(const RelativePath: WideString; var FullPath: WideString): Smallint; safecall;
    procedure SplitPath(const Path: WideString; var Drive: WideString; var Dir: WideString; 
                        var File_: WideString; var Ext: WideString); safecall;
    function TwipsFromFont(const FontName: WideString; Size: Integer; Weight: Integer; 
                           Italic: WordBool; Underline: WordBool; Cch: Integer; 
                           const Caption: WideString; MaxWidthCch: Integer; var dx: Integer; 
                           var dy: Integer): WordBool; safecall;
    function ObjTypOfRecordSource(const RecordSource: WideString): Smallint; safecall;
    function IsValidIdent(const Identifier: WideString): WordBool; safecall;
    procedure SortStringArray(var Array_: PSafeArray); safecall;
    function AnalyzeTable(const Workspace: Workspace; const Database: Database; 
                          const Table: WideString; ReturnDebugInfo: WordBool; 
                          var Results: WideString): Integer; safecall;
    function AnalyzeQuery(const Workspace: Workspace; const Database: Database; 
                          const Query: WideString; var Results: WideString): Integer; safecall;
    function GetFileName(hwndOwner: Integer; const AppName: WideString; const DlgTitle: WideString; 
                         const OpenTitle: WideString; var File_: WideString; 
                         const InitialDir: WideString; const Filter: WideString; 
                         FilterIndex: Integer; View: Integer; flags: Integer; fOpen: WordBool): Integer; safecall;
    procedure CreateDataPageControl(const DpName: WideString; const CtlName: WideString; 
                                    Typ: Integer; const Section: WideString; SectionType: Integer; 
                                    const AppletCode: WideString; X: Integer; Y: Integer; 
                                    dx: Integer; dy: Integer); safecall;
    procedure KnownWizLeaks(fStart: WordBool); safecall;
    function SetVbaPassword(const bstrDbName: WideString; const bstrConnect: WideString; 
                            const bstrPasswd: WideString): WordBool; safecall;
    function LocalFont: WideString; safecall;
    procedure SaveObject(const bstrName: WideString; objtyp: Smallint); safecall;
    function CurrentLangID: Integer; safecall;
    function KeyboardLangID: Integer; safecall;
    function AccessUserDataDir: WideString; safecall;
    function OfficeAddInDir: WideString; safecall;
    function EmbedFileOnDataPage(const DpName: WideString; const FileToInsert: WideString): WideString; safecall;
    function Get_DbcVbProject: _VBProject; safecall;
    procedure ReportLeaksToFile(fRptToFile: WordBool; const bstrFileOut: WideString); safecall;
    function Get_IsMatchToDbcConnectString(const bstrConnectionString: WideString): WordBool; safecall;
    procedure LoadImexSpecSolution(const bstrFilename: WideString); safecall;
    procedure SetDpBlockKeyInput(fBlockKeys: WordBool); safecall;
    function FirstDbcDataObject(var Name: WideString; var ObjType: AcObjectType; 
                                var Attribs: Integer): WordBool; safecall;
    function CloseCurrentDatabase: WordBool; safecall;
    function AccessWizFilePath(const bstrWhich: WideString): WideString; safecall;
    function HideDates: WordBool; safecall;
    function GetColumns(const bstrBase: WideString): WideString; safecall;
    function GetFileOdso(const bstrExt: WideString; var bstrFilename: WideString): Integer; safecall;
    function GetInfoForColumns(const bstrBase: WideString): WideString; safecall;
    function GetFileName2(hwndOwner: Integer; const AppName: WideString; 
                          const DlgTitle: WideString; const OpenTitle: WideString; 
                          var File_: WideString; const InitialDir: WideString; 
                          const Filter: WideString; FilterIndex: Integer; View: Integer; 
                          flags: Integer; fOpen: WordBool; fFileSystem: OleVariant): Integer; safecall;
    function FGetMSDE(fBlockKeys: WordBool): WordBool; safecall;
    function WizMsgBox(const bstrText: WideString; const bstrCaption: WideString; wStyle: SYSINT; 
                       idHelpID: SYSINT; const bstrHelpFileName: WideString): SYSINT; safecall;
    function AdpUIDPwd(var pbstrUID: WideString; var pbstrPwd: WideString): WordBool; safecall;
    procedure SetWizGlob(lWhich: Integer; vValue: OleVariant); safecall;
    function GetWizGlob(lWhich: Integer): OleVariant; safecall;
    procedure WizCopyCmdbars(const bstrADPName: WideString); safecall;
    function GetCurrentView(const bstrTableName: WideString): SYSINT; safecall;
    function FIsFEWch(wch: Integer): WordBool; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function GetAccWizRCPath: WideString; safecall;
    function FCreateNameMap(objtyp: Smallint; const bstrObjName: WideString): WordBool; safecall;
    function GetAdeRegistryPath: WideString; safecall;
    procedure ExecuteTempImexSpec(const bstrSpecXML: WideString); safecall;
    function FCacheStatus: WordBool; safecall;
    procedure CacheStatus(const bstrStatus: WideString); safecall;
    procedure SetDefaultSpecName(const bstrSpecName: WideString); safecall;
    function GetImexTblName: WideString; safecall;
    function GetLinkedListProperty(const bstrTableName: WideString; 
                                   const bstrPropertyName: WideString; fServer: WordBool): WideString; safecall;
    function OpenEmScript(const pProperty: _AccessProperty; OpenMode: Integer; var Extra: SYSINT; 
                          var Version: Integer): Integer; safecall;
    property Key: SYSINT write Set_Key;
    property DbcVbProject: _VBProject read Get_DbcVbProject;
    property IsMatchToDbcConnectString[const bstrConnectionString: WideString]: WordBool read Get_IsMatchToDbcConnectString;
  end;

// *********************************************************************//
// DispIntf:  _WizHookDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CB9D3171-4728-11D1-8334-006008197CC8}
// *********************************************************************//
  _WizHookDisp = dispinterface
    ['{CB9D3171-4728-11D1-8334-006008197CC8}']
    property Key: SYSINT writeonly dispid 2237;
    function NameFromActid(Actid: SYSINT): WideString; dispid 2234;
    function ArgsOfActid(Actid: SYSINT): SYSINT; dispid 2236;
    function OpenScript(const Script: WideString; const Label_: WideString; OpenMode: Integer; 
                        var Extra: SYSINT; var Version: Integer): Integer; dispid 2238;
    function GetScriptString(HScr: Integer; ScriptColumn: Integer; var Value: WideString): WordBool; dispid 2239;
    function SaveScriptString(HScr: Integer; ScriptColumn: Integer; const Value: WideString): WordBool; dispid 2240;
    function GlobalProcExists(const Name: WideString): WordBool; dispid 2241;
    function TableFieldHasUniqueIndex(const Table: WideString; const Columns: WideString): WordBool; dispid 2242;
    function BracketString(var String_: WideString; flags: Integer): WordBool; dispid 2243;
    function WizHelp(const HelpFile: WideString; wCmd: Integer; ContextID: Integer): WordBool; dispid 2244;
    function OpenPictureFile(var File_: WideString; var Cancelled: WordBool): WordBool; dispid 2245;
    function EnglishPictToLocal(const In_: WideString; var Out: WideString): WordBool; dispid 2246;
    function TranslateExpression(const In_: WideString; var Out: WideString; ParseFlags: Integer; 
                                 TranslateFlags: Integer): WordBool; dispid 2247;
    function FileExists(const File_: WideString): WordBool; dispid 2248;
    function FullPath(const RelativePath: WideString; var FullPath: WideString): Smallint; dispid 2249;
    procedure SplitPath(const Path: WideString; var Drive: WideString; var Dir: WideString; 
                        var File_: WideString; var Ext: WideString); dispid 2250;
    function TwipsFromFont(const FontName: WideString; Size: Integer; Weight: Integer; 
                           Italic: WordBool; Underline: WordBool; Cch: Integer; 
                           const Caption: WideString; MaxWidthCch: Integer; var dx: Integer; 
                           var dy: Integer): WordBool; dispid 2251;
    function ObjTypOfRecordSource(const RecordSource: WideString): Smallint; dispid 2252;
    function IsValidIdent(const Identifier: WideString): WordBool; dispid 2253;
    procedure SortStringArray(var Array_: {??PSafeArray}OleVariant); dispid 2254;
    function AnalyzeTable(const Workspace: Workspace; const Database: Database; 
                          const Table: WideString; ReturnDebugInfo: WordBool; 
                          var Results: WideString): Integer; dispid 2255;
    function AnalyzeQuery(const Workspace: Workspace; const Database: Database; 
                          const Query: WideString; var Results: WideString): Integer; dispid 2256;
    function GetFileName(hwndOwner: Integer; const AppName: WideString; const DlgTitle: WideString; 
                         const OpenTitle: WideString; var File_: WideString; 
                         const InitialDir: WideString; const Filter: WideString; 
                         FilterIndex: Integer; View: Integer; flags: Integer; fOpen: WordBool): Integer; dispid 2261;
    procedure CreateDataPageControl(const DpName: WideString; const CtlName: WideString; 
                                    Typ: Integer; const Section: WideString; SectionType: Integer; 
                                    const AppletCode: WideString; X: Integer; Y: Integer; 
                                    dx: Integer; dy: Integer); dispid 2265;
    procedure KnownWizLeaks(fStart: WordBool); dispid 2273;
    function SetVbaPassword(const bstrDbName: WideString; const bstrConnect: WideString; 
                            const bstrPasswd: WideString): WordBool; dispid 2294;
    function LocalFont: WideString; dispid 2295;
    procedure SaveObject(const bstrName: WideString; objtyp: Smallint); dispid 2296;
    function CurrentLangID: Integer; dispid 2299;
    function KeyboardLangID: Integer; dispid 2300;
    function AccessUserDataDir: WideString; dispid 2302;
    function OfficeAddInDir: WideString; dispid 2303;
    function EmbedFileOnDataPage(const DpName: WideString; const FileToInsert: WideString): WideString; dispid 2305;
    property DbcVbProject: _VBProject readonly dispid 2306;
    procedure ReportLeaksToFile(fRptToFile: WordBool; const bstrFileOut: WideString); dispid 2292;
    property IsMatchToDbcConnectString[const bstrConnectionString: WideString]: WordBool readonly dispid 2291;
    procedure LoadImexSpecSolution(const bstrFilename: WideString); dispid 2282;
    procedure SetDpBlockKeyInput(fBlockKeys: WordBool); dispid 2283;
    function FirstDbcDataObject(var Name: WideString; var ObjType: AcObjectType; 
                                var Attribs: Integer): WordBool; dispid 2323;
    function CloseCurrentDatabase: WordBool; dispid 2324;
    function AccessWizFilePath(const bstrWhich: WideString): WideString; dispid 2330;
    function HideDates: WordBool; dispid 2333;
    function GetColumns(const bstrBase: WideString): WideString; dispid 2338;
    function GetFileOdso(const bstrExt: WideString; var bstrFilename: WideString): Integer; dispid 2339;
    function GetInfoForColumns(const bstrBase: WideString): WideString; dispid 2366;
    function GetFileName2(hwndOwner: Integer; const AppName: WideString; 
                          const DlgTitle: WideString; const OpenTitle: WideString; 
                          var File_: WideString; const InitialDir: WideString; 
                          const Filter: WideString; FilterIndex: Integer; View: Integer; 
                          flags: Integer; fOpen: WordBool; fFileSystem: OleVariant): Integer; dispid 2368;
    function FGetMSDE(fBlockKeys: WordBool): WordBool; dispid 2411;
    function WizMsgBox(const bstrText: WideString; const bstrCaption: WideString; wStyle: SYSINT; 
                       idHelpID: SYSINT; const bstrHelpFileName: WideString): SYSINT; dispid 2416;
    function AdpUIDPwd(var pbstrUID: WideString; var pbstrPwd: WideString): WordBool; dispid 2417;
    procedure SetWizGlob(lWhich: Integer; vValue: OleVariant); dispid 2419;
    function GetWizGlob(lWhich: Integer): OleVariant; dispid 2420;
    procedure WizCopyCmdbars(const bstrADPName: WideString); dispid 2421;
    function GetCurrentView(const bstrTableName: WideString): SYSINT; dispid 2426;
    function FIsFEWch(wch: Integer): WordBool; dispid 2427;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    function GetAccWizRCPath: WideString; dispid 2450;
    function FCreateNameMap(objtyp: Smallint; const bstrObjName: WideString): WordBool; dispid 2451;
    function GetAdeRegistryPath: WideString; dispid 2458;
    procedure ExecuteTempImexSpec(const bstrSpecXML: WideString); dispid 2461;
    function FCacheStatus: WordBool; dispid 2463;
    procedure CacheStatus(const bstrStatus: WideString); dispid 2464;
    procedure SetDefaultSpecName(const bstrSpecName: WideString); dispid 2465;
    function GetImexTblName: WideString; dispid 2466;
    function GetLinkedListProperty(const bstrTableName: WideString; 
                                   const bstrPropertyName: WideString; fServer: WordBool): WideString; dispid 2467;
    function OpenEmScript(const pProperty: _AccessProperty; OpenMode: Integer; var Extra: SYSINT; 
                          var Version: Integer): Integer; dispid 2504;
  end;

// *********************************************************************//
// Interface: _DefaultWebOptions
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {416ED4F0-AB31-11D1-BF72-0060083E43CF}
// *********************************************************************//
  _DefaultWebOptions = interface(IDispatch)
    ['{416ED4F0-AB31-11D1-BF72-0060083E43CF}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_HyperlinkColor: AcColorIndex; safecall;
    procedure Set_HyperlinkColor(pl: AcColorIndex); safecall;
    function Get_FollowedHyperlinkColor: AcColorIndex; safecall;
    procedure Set_FollowedHyperlinkColor(pl: AcColorIndex); safecall;
    function Get_UnderlineHyperlinks: WordBool; safecall;
    procedure Set_UnderlineHyperlinks(pf: WordBool); safecall;
    function Get_OrganizeInFolder: WordBool; safecall;
    procedure Set_OrganizeInFolder(pf: WordBool); safecall;
    function Get_UseLongFileNames: WordBool; safecall;
    procedure Set_UseLongFileNames(pf: WordBool); safecall;
    function Get_CheckIfOfficeIsHTMLEditor: WordBool; safecall;
    procedure Set_CheckIfOfficeIsHTMLEditor(pf: WordBool); safecall;
    function Get_DownloadComponents: WordBool; safecall;
    procedure Set_DownloadComponents(pf: WordBool); safecall;
    function Get_LocationOfComponents: WideString; safecall;
    procedure Set_LocationOfComponents(const pstr: WideString); safecall;
    function Get_Encoding: MsoEncoding; safecall;
    procedure Set_Encoding(penc: MsoEncoding); safecall;
    function Get_AlwaysSaveInDefaultEncoding: WordBool; safecall;
    procedure Set_AlwaysSaveInDefaultEncoding(pf: WordBool); safecall;
    function Get_FolderSuffix: WideString; safecall;
    function Get_TargetBrowser: MsoTargetBrowser; safecall;
    procedure Set_TargetBrowser(ptb: MsoTargetBrowser); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property HyperlinkColor: AcColorIndex read Get_HyperlinkColor write Set_HyperlinkColor;
    property FollowedHyperlinkColor: AcColorIndex read Get_FollowedHyperlinkColor write Set_FollowedHyperlinkColor;
    property UnderlineHyperlinks: WordBool read Get_UnderlineHyperlinks write Set_UnderlineHyperlinks;
    property OrganizeInFolder: WordBool read Get_OrganizeInFolder write Set_OrganizeInFolder;
    property UseLongFileNames: WordBool read Get_UseLongFileNames write Set_UseLongFileNames;
    property CheckIfOfficeIsHTMLEditor: WordBool read Get_CheckIfOfficeIsHTMLEditor write Set_CheckIfOfficeIsHTMLEditor;
    property DownloadComponents: WordBool read Get_DownloadComponents write Set_DownloadComponents;
    property LocationOfComponents: WideString read Get_LocationOfComponents write Set_LocationOfComponents;
    property Encoding: MsoEncoding read Get_Encoding write Set_Encoding;
    property AlwaysSaveInDefaultEncoding: WordBool read Get_AlwaysSaveInDefaultEncoding write Set_AlwaysSaveInDefaultEncoding;
    property FolderSuffix: WideString read Get_FolderSuffix;
    property TargetBrowser: MsoTargetBrowser read Get_TargetBrowser write Set_TargetBrowser;
  end;

// *********************************************************************//
// DispIntf:  _DefaultWebOptionsDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {416ED4F0-AB31-11D1-BF72-0060083E43CF}
// *********************************************************************//
  _DefaultWebOptionsDisp = dispinterface
    ['{416ED4F0-AB31-11D1-BF72-0060083E43CF}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property HyperlinkColor: AcColorIndex dispid 2279;
    property FollowedHyperlinkColor: AcColorIndex dispid 2280;
    property UnderlineHyperlinks: WordBool dispid 2281;
    property OrganizeInFolder: WordBool dispid 2284;
    property UseLongFileNames: WordBool dispid 2285;
    property CheckIfOfficeIsHTMLEditor: WordBool dispid 2286;
    property DownloadComponents: WordBool dispid 2287;
    property LocationOfComponents: WideString dispid 2288;
    property Encoding: MsoEncoding dispid 2289;
    property AlwaysSaveInDefaultEncoding: WordBool dispid 2290;
    property FolderSuffix: WideString readonly dispid 2307;
    property TargetBrowser: MsoTargetBrowser dispid 2331;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _WebOptions
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {416ED4F6-AB31-11D1-BF72-0060083E43CF}
// *********************************************************************//
  _WebOptions = interface(IDispatch)
    ['{416ED4F6-AB31-11D1-BF72-0060083E43CF}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_OrganizeInFolder: WordBool; safecall;
    procedure Set_OrganizeInFolder(pf: WordBool); safecall;
    function Get_UseLongFileNames: WordBool; safecall;
    procedure Set_UseLongFileNames(pf: WordBool); safecall;
    function Get_DownloadComponents: WordBool; safecall;
    procedure Set_DownloadComponents(pf: WordBool); safecall;
    function Get_LocationOfComponents: WideString; safecall;
    procedure Set_LocationOfComponents(const pstr: WideString); safecall;
    function Get_Encoding: MsoEncoding; safecall;
    procedure Set_Encoding(penc: MsoEncoding); safecall;
    function Get_FolderSuffix: WideString; safecall;
    procedure UseDefaultFolderSuffix; safecall;
    function Get_TargetBrowser: MsoTargetBrowser; safecall;
    procedure Set_TargetBrowser(ptb: MsoTargetBrowser); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property OrganizeInFolder: WordBool read Get_OrganizeInFolder write Set_OrganizeInFolder;
    property UseLongFileNames: WordBool read Get_UseLongFileNames write Set_UseLongFileNames;
    property DownloadComponents: WordBool read Get_DownloadComponents write Set_DownloadComponents;
    property LocationOfComponents: WideString read Get_LocationOfComponents write Set_LocationOfComponents;
    property Encoding: MsoEncoding read Get_Encoding write Set_Encoding;
    property FolderSuffix: WideString read Get_FolderSuffix;
    property TargetBrowser: MsoTargetBrowser read Get_TargetBrowser write Set_TargetBrowser;
  end;

// *********************************************************************//
// DispIntf:  _WebOptionsDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {416ED4F6-AB31-11D1-BF72-0060083E43CF}
// *********************************************************************//
  _WebOptionsDisp = dispinterface
    ['{416ED4F6-AB31-11D1-BF72-0060083E43CF}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property OrganizeInFolder: WordBool dispid 2284;
    property UseLongFileNames: WordBool dispid 2285;
    property DownloadComponents: WordBool dispid 2287;
    property LocationOfComponents: WideString dispid 2288;
    property Encoding: MsoEncoding dispid 2289;
    property FolderSuffix: WideString readonly dispid 2307;
    procedure UseDefaultFolderSuffix; dispid 2308;
    property TargetBrowser: MsoTargetBrowser dispid 2331;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _DummyEvents
// Flags:     (16) Hidden
// GUID:      {58BF3100-B580-11CF-89A8-00A0C9054129}
// *********************************************************************//
  _DummyEvents = interface(IUnknown)
    ['{58BF3100-B580-11CF-89A8-00A0C9054129}']
    function Initialize: HResult; stdcall;
    function Terminate: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: _Printer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DBC5175F-A8ED-11D3-A0DD-00C04F68712B}
// *********************************************************************//
  _Printer = interface(IDispatch)
    ['{DBC5175F-A8ED-11D3-A0DD-00C04F68712B}']
    function Get_ColorMode: AcPrintColor; safecall;
    procedure Set_ColorMode(pRet: AcPrintColor); safecall;
    function Get_Copies: Integer; safecall;
    procedure Set_Copies(pRet: Integer); safecall;
    function Get_DeviceName: WideString; safecall;
    function Get_DriverName: WideString; safecall;
    function Get_Duplex: AcPrintDuplex; safecall;
    procedure Set_Duplex(pRet: AcPrintDuplex); safecall;
    function Get_Orientation: AcPrintOrientation; safecall;
    procedure Set_Orientation(pRet: AcPrintOrientation); safecall;
    function Get_PaperBin: AcPrintPaperBin; safecall;
    procedure Set_PaperBin(pRet: AcPrintPaperBin); safecall;
    function Get_PaperSize: AcPrintPaperSize; safecall;
    procedure Set_PaperSize(pRet: AcPrintPaperSize); safecall;
    function Get_Port: WideString; safecall;
    function Get_PrintQuality: AcPrintObjQuality; safecall;
    procedure Set_PrintQuality(pRet: AcPrintObjQuality); safecall;
    function Get_LeftMargin: Integer; safecall;
    procedure Set_LeftMargin(pRet: Integer); safecall;
    function Get_RightMargin: Integer; safecall;
    procedure Set_RightMargin(pRet: Integer); safecall;
    function Get_TopMargin: Integer; safecall;
    procedure Set_TopMargin(pRet: Integer); safecall;
    function Get_BottomMargin: Integer; safecall;
    procedure Set_BottomMargin(pRet: Integer); safecall;
    function Get_DataOnly: WordBool; safecall;
    procedure Set_DataOnly(pRet: WordBool); safecall;
    function Get_ItemsAcross: Integer; safecall;
    procedure Set_ItemsAcross(pRet: Integer); safecall;
    function Get_RowSpacing: Integer; safecall;
    procedure Set_RowSpacing(pRet: Integer); safecall;
    function Get_ColumnSpacing: Integer; safecall;
    procedure Set_ColumnSpacing(pRet: Integer); safecall;
    function Get_DefaultSize: WordBool; safecall;
    procedure Set_DefaultSize(pRet: WordBool); safecall;
    function Get_ItemSizeWidth: Integer; safecall;
    procedure Set_ItemSizeWidth(pRet: Integer); safecall;
    function Get_ItemSizeHeight: Integer; safecall;
    procedure Set_ItemSizeHeight(pRet: Integer); safecall;
    function Get_ItemLayout: AcPrintItemLayout; safecall;
    procedure Set_ItemLayout(pRet: AcPrintItemLayout); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property ColorMode: AcPrintColor read Get_ColorMode write Set_ColorMode;
    property Copies: Integer read Get_Copies write Set_Copies;
    property DeviceName: WideString read Get_DeviceName;
    property DriverName: WideString read Get_DriverName;
    property Duplex: AcPrintDuplex read Get_Duplex write Set_Duplex;
    property Orientation: AcPrintOrientation read Get_Orientation write Set_Orientation;
    property PaperBin: AcPrintPaperBin read Get_PaperBin write Set_PaperBin;
    property PaperSize: AcPrintPaperSize read Get_PaperSize write Set_PaperSize;
    property Port: WideString read Get_Port;
    property PrintQuality: AcPrintObjQuality read Get_PrintQuality write Set_PrintQuality;
    property LeftMargin: Integer read Get_LeftMargin write Set_LeftMargin;
    property RightMargin: Integer read Get_RightMargin write Set_RightMargin;
    property TopMargin: Integer read Get_TopMargin write Set_TopMargin;
    property BottomMargin: Integer read Get_BottomMargin write Set_BottomMargin;
    property DataOnly: WordBool read Get_DataOnly write Set_DataOnly;
    property ItemsAcross: Integer read Get_ItemsAcross write Set_ItemsAcross;
    property RowSpacing: Integer read Get_RowSpacing write Set_RowSpacing;
    property ColumnSpacing: Integer read Get_ColumnSpacing write Set_ColumnSpacing;
    property DefaultSize: WordBool read Get_DefaultSize write Set_DefaultSize;
    property ItemSizeWidth: Integer read Get_ItemSizeWidth write Set_ItemSizeWidth;
    property ItemSizeHeight: Integer read Get_ItemSizeHeight write Set_ItemSizeHeight;
    property ItemLayout: AcPrintItemLayout read Get_ItemLayout write Set_ItemLayout;
  end;

// *********************************************************************//
// DispIntf:  _PrinterDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DBC5175F-A8ED-11D3-A0DD-00C04F68712B}
// *********************************************************************//
  _PrinterDisp = dispinterface
    ['{DBC5175F-A8ED-11D3-A0DD-00C04F68712B}']
    property ColorMode: AcPrintColor dispid 2342;
    property Copies: Integer dispid 2343;
    property DeviceName: WideString readonly dispid 2344;
    property DriverName: WideString readonly dispid 2345;
    property Duplex: AcPrintDuplex dispid 2346;
    property Orientation: AcPrintOrientation dispid 2347;
    property PaperBin: AcPrintPaperBin dispid 2348;
    property PaperSize: AcPrintPaperSize dispid 2349;
    property Port: WideString readonly dispid 2350;
    property PrintQuality: AcPrintObjQuality dispid 2351;
    property LeftMargin: Integer dispid 2352;
    property RightMargin: Integer dispid 2353;
    property TopMargin: Integer dispid 2354;
    property BottomMargin: Integer dispid 2355;
    property DataOnly: WordBool dispid 2356;
    property ItemsAcross: Integer dispid 2357;
    property RowSpacing: Integer dispid 2358;
    property ColumnSpacing: Integer dispid 2359;
    property DefaultSize: WordBool dispid 2360;
    property ItemSizeWidth: Integer dispid 2361;
    property ItemSizeHeight: Integer dispid 2362;
    property ItemLayout: AcPrintItemLayout dispid 2363;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: Printers
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DBC51760-A8ED-11D3-A0DD-00C04F68712B}
// *********************************************************************//
  Printers = interface(IDispatch)
    ['{DBC51760-A8ED-11D3-A0DD-00C04F68712B}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Item(Index: OleVariant): _Printer; safecall;
    function Get_Count: Integer; safecall;
    function _NewEnum: IUnknown; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: _Printer read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  PrintersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DBC51760-A8ED-11D3-A0DD-00C04F68712B}
// *********************************************************************//
  PrintersDisp = dispinterface
    ['{DBC51760-A8ED-11D3-A0DD-00C04F68712B}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Item[Index: OleVariant]: _Printer readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function _NewEnum: IUnknown; dispid -4;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _Form2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3F4A878E-C395-11D3-8D1F-0050048383FB}
// *********************************************************************//
  _Form2 = interface(IAccessible)
    ['{3F4A878E-C395-11D3-8D1F-0050048383FB}']
    function Get_FormName: WideString; safecall;
    procedure Set_FormName(const pRet: WideString); safecall;
    function Get_RecordSource: WideString; safecall;
    procedure Set_RecordSource(const pRet: WideString); safecall;
    function Get_Filter: WideString; safecall;
    procedure Set_Filter(const pRet: WideString); safecall;
    function Get_FilterOn: WordBool; safecall;
    procedure Set_FilterOn(pRet: WordBool); safecall;
    function Get_OrderBy: WideString; safecall;
    procedure Set_OrderBy(const pRet: WideString); safecall;
    function Get_OrderByOn: WordBool; safecall;
    procedure Set_OrderByOn(pRet: WordBool); safecall;
    function Get_AllowFilters: WordBool; safecall;
    procedure Set_AllowFilters(pRet: WordBool); safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const pRet: WideString); safecall;
    function Get_DefaultView: Byte; safecall;
    procedure Set_DefaultView(pRet: Byte); safecall;
    function Get_ViewsAllowed: Byte; safecall;
    procedure Set_ViewsAllowed(pRet: Byte); safecall;
    function Get_AllowEditing: WordBool; safecall;
    procedure Set_AllowEditing(pRet: WordBool); safecall;
    function Get_DefaultEditing: Smallint; safecall;
    procedure Set_DefaultEditing(pRet: Smallint); safecall;
    function Get_AllowEdits: WordBool; safecall;
    procedure Set_AllowEdits(pRet: WordBool); safecall;
    function Get_AllowDeletions: WordBool; safecall;
    procedure Set_AllowDeletions(pRet: WordBool); safecall;
    function Get_AllowAdditions: WordBool; safecall;
    procedure Set_AllowAdditions(pRet: WordBool); safecall;
    function Get_DataEntry: WordBool; safecall;
    procedure Set_DataEntry(pRet: WordBool); safecall;
    function Get_AllowUpdating: Byte; safecall;
    procedure Set_AllowUpdating(pRet: Byte); safecall;
    function Get_RecordsetType: Byte; safecall;
    procedure Set_RecordsetType(pRet: Byte); safecall;
    function Get_RecordLocks: Byte; safecall;
    procedure Set_RecordLocks(pRet: Byte); safecall;
    function Get_ScrollBars: Byte; safecall;
    procedure Set_ScrollBars(pRet: Byte); safecall;
    function Get_RecordSelectors: WordBool; safecall;
    procedure Set_RecordSelectors(pRet: WordBool); safecall;
    function Get_NavigationButtons: WordBool; safecall;
    procedure Set_NavigationButtons(pRet: WordBool); safecall;
    function Get_DividingLines: WordBool; safecall;
    procedure Set_DividingLines(pRet: WordBool); safecall;
    function Get_AutoResize: WordBool; safecall;
    procedure Set_AutoResize(pRet: WordBool); safecall;
    function Get_AutoCenter: WordBool; safecall;
    procedure Set_AutoCenter(pRet: WordBool); safecall;
    function Get_PopUp: WordBool; safecall;
    procedure Set_PopUp(pRet: WordBool); safecall;
    function Get_Modal: WordBool; safecall;
    procedure Set_Modal(pRet: WordBool); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_ControlBox: WordBool; safecall;
    procedure Set_ControlBox(pRet: WordBool); safecall;
    function Get_MinButton: WordBool; safecall;
    procedure Set_MinButton(pRet: WordBool); safecall;
    function Get_MaxButton: WordBool; safecall;
    procedure Set_MaxButton(pRet: WordBool); safecall;
    function Get_MinMaxButtons: Byte; safecall;
    procedure Set_MinMaxButtons(pRet: Byte); safecall;
    function Get_CloseButton: WordBool; safecall;
    procedure Set_CloseButton(pRet: WordBool); safecall;
    function Get_WhatsThisButton: WordBool; safecall;
    procedure Set_WhatsThisButton(pRet: WordBool); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Picture: WideString; safecall;
    procedure Set_Picture(const pRet: WideString); safecall;
    function Get_PictureType: Byte; safecall;
    procedure Set_PictureType(pRet: Byte); safecall;
    function Get_PictureSizeMode: Byte; safecall;
    procedure Set_PictureSizeMode(pRet: Byte); safecall;
    function Get_PictureAlignment: Byte; safecall;
    procedure Set_PictureAlignment(pRet: Byte); safecall;
    function Get_PictureTiling: WordBool; safecall;
    procedure Set_PictureTiling(pRet: WordBool); safecall;
    function Get_Cycle: Byte; safecall;
    procedure Set_Cycle(pRet: Byte); safecall;
    function Get_MenuBar: WideString; safecall;
    procedure Set_MenuBar(const pRet: WideString); safecall;
    function Get_Toolbar: WideString; safecall;
    procedure Set_Toolbar(const pRet: WideString); safecall;
    function Get_ShortcutMenu: WordBool; safecall;
    procedure Set_ShortcutMenu(pRet: WordBool); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_GridX: Smallint; safecall;
    procedure Set_GridX(pRet: Smallint); safecall;
    function Get_GridY: Smallint; safecall;
    procedure Set_GridY(pRet: Smallint); safecall;
    function Get_LayoutForPrint: WordBool; safecall;
    procedure Set_LayoutForPrint(pRet: WordBool); safecall;
    function Get_FastLaserPrinting: WordBool; safecall;
    procedure Set_FastLaserPrinting(pRet: WordBool); safecall;
    function Get_HelpFile: WideString; safecall;
    procedure Set_HelpFile(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_RowHeight: Smallint; safecall;
    procedure Set_RowHeight(pRet: Smallint); safecall;
    function Get_DatasheetFontName: WideString; safecall;
    procedure Set_DatasheetFontName(const pRet: WideString); safecall;
    function Get_DatasheetFontHeight: Smallint; safecall;
    procedure Set_DatasheetFontHeight(pRet: Smallint); safecall;
    function Get_DatasheetFontWeight: Smallint; safecall;
    procedure Set_DatasheetFontWeight(pRet: Smallint); safecall;
    function Get_DatasheetFontItalic: WordBool; safecall;
    procedure Set_DatasheetFontItalic(pRet: WordBool); safecall;
    function Get_DatasheetFontUnderline: WordBool; safecall;
    procedure Set_DatasheetFontUnderline(pRet: WordBool); safecall;
    function Get_TabularCharSet: Byte; safecall;
    procedure Set_TabularCharSet(pRet: Byte); safecall;
    function Get_DatasheetGridlinesBehavior: Byte; safecall;
    procedure Set_DatasheetGridlinesBehavior(pRet: Byte); safecall;
    function Get_DatasheetGridlinesColor: Integer; safecall;
    procedure Set_DatasheetGridlinesColor(pRet: Integer); safecall;
    function Get_DatasheetCellsEffect: Byte; safecall;
    procedure Set_DatasheetCellsEffect(pRet: Byte); safecall;
    function Get_DatasheetForeColor: Integer; safecall;
    procedure Set_DatasheetForeColor(pRet: Integer); safecall;
    function Get_ShowGrid: WordBool; safecall;
    procedure Set_ShowGrid(pRet: WordBool); safecall;
    function Get_DatasheetBackColor: Integer; safecall;
    procedure Set_DatasheetBackColor(pRet: Integer); safecall;
    function Get_Hwnd: Integer; safecall;
    procedure Set_Hwnd(pRet: Integer); safecall;
    function Get_Count: Smallint; safecall;
    procedure Set_Count(pRet: Smallint); safecall;
    function Get_Page: Integer; safecall;
    procedure Set_Page(pRet: Integer); safecall;
    function Get_Pages: Smallint; safecall;
    procedure Set_Pages(pRet: Smallint); safecall;
    function Get_LogicalPageWidth: Integer; safecall;
    procedure Set_LogicalPageWidth(pRet: Integer); safecall;
    function Get_LogicalPageHeight: Integer; safecall;
    procedure Set_LogicalPageHeight(pRet: Integer); safecall;
    function Get_ZoomControl: Integer; safecall;
    procedure Set_ZoomControl(pRet: Integer); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_Painting: WordBool; safecall;
    procedure Set_Painting(pRet: WordBool); safecall;
    function Get_PrtMip: OleVariant; safecall;
    procedure Set_PrtMip(pRet: OleVariant); safecall;
    function Get_PrtDevMode: OleVariant; safecall;
    procedure Set_PrtDevMode(pRet: OleVariant); safecall;
    function Get_PrtDevNames: OleVariant; safecall;
    procedure Set_PrtDevNames(pRet: OleVariant); safecall;
    function Get_FrozenColumns: Smallint; safecall;
    procedure Set_FrozenColumns(pRet: Smallint); safecall;
    function Get_Bookmark: OleVariant; safecall;
    procedure Set_Bookmark(pRet: OleVariant); safecall;
    function Get_TabularFamily: Byte; safecall;
    procedure Set_TabularFamily(pRet: Byte); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_PaletteSource: WideString; safecall;
    procedure Set_PaletteSource(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_PaintPalette: OleVariant; safecall;
    procedure Set_PaintPalette(pRet: OleVariant); safecall;
    function Get_OnMenu: WideString; safecall;
    procedure Set_OnMenu(const pRet: WideString); safecall;
    function Get_OpenArgs: OleVariant; safecall;
    procedure Set_OpenArgs(pRet: OleVariant); safecall;
    function Get_ConnectSynch: Smallint; safecall;
    procedure Set_ConnectSynch(pRet: Smallint); safecall;
    function Get_OnCurrent: WideString; safecall;
    procedure Set_OnCurrent(const pRet: WideString); safecall;
    function Get_OnInsert: WideString; safecall;
    procedure Set_OnInsert(const pRet: WideString); safecall;
    function Get_BeforeInsert: WideString; safecall;
    procedure Set_BeforeInsert(const pRet: WideString); safecall;
    function Get_AfterInsert: WideString; safecall;
    procedure Set_AfterInsert(const pRet: WideString); safecall;
    function Get_BeforeUpdate: WideString; safecall;
    procedure Set_BeforeUpdate(const pRet: WideString); safecall;
    function Get_AfterUpdate: WideString; safecall;
    procedure Set_AfterUpdate(const pRet: WideString); safecall;
    function Get_OnDirty: WideString; safecall;
    procedure Set_OnDirty(const pRet: WideString); safecall;
    function Get_OnDelete: WideString; safecall;
    procedure Set_OnDelete(const pRet: WideString); safecall;
    function Get_BeforeDelConfirm: WideString; safecall;
    procedure Set_BeforeDelConfirm(const pRet: WideString); safecall;
    function Get_AfterDelConfirm: WideString; safecall;
    procedure Set_AfterDelConfirm(const pRet: WideString); safecall;
    function Get_OnOpen: WideString; safecall;
    procedure Set_OnOpen(const pRet: WideString); safecall;
    function Get_OnLoad: WideString; safecall;
    procedure Set_OnLoad(const pRet: WideString); safecall;
    function Get_OnResize: WideString; safecall;
    procedure Set_OnResize(const pRet: WideString); safecall;
    function Get_OnUnload: WideString; safecall;
    procedure Set_OnUnload(const pRet: WideString); safecall;
    function Get_OnClose: WideString; safecall;
    procedure Set_OnClose(const pRet: WideString); safecall;
    function Get_OnActivate: WideString; safecall;
    procedure Set_OnActivate(const pRet: WideString); safecall;
    function Get_OnDeactivate: WideString; safecall;
    procedure Set_OnDeactivate(const pRet: WideString); safecall;
    function Get_OnGotFocus: WideString; safecall;
    procedure Set_OnGotFocus(const pRet: WideString); safecall;
    function Get_OnLostFocus: WideString; safecall;
    procedure Set_OnLostFocus(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_OnKeyDown: WideString; safecall;
    procedure Set_OnKeyDown(const pRet: WideString); safecall;
    function Get_OnKeyUp: WideString; safecall;
    procedure Set_OnKeyUp(const pRet: WideString); safecall;
    function Get_OnKeyPress: WideString; safecall;
    procedure Set_OnKeyPress(const pRet: WideString); safecall;
    function Get_KeyPreview: WordBool; safecall;
    procedure Set_KeyPreview(pRet: WordBool); safecall;
    function Get_OnError: WideString; safecall;
    procedure Set_OnError(const pRet: WideString); safecall;
    function Get_OnFilter: WideString; safecall;
    procedure Set_OnFilter(const pRet: WideString); safecall;
    function Get_OnApplyFilter: WideString; safecall;
    procedure Set_OnApplyFilter(const pRet: WideString); safecall;
    function Get_OnTimer: WideString; safecall;
    procedure Set_OnTimer(const pRet: WideString); safecall;
    function Get_TimerInterval: Integer; safecall;
    procedure Set_TimerInterval(pRet: Integer); safecall;
    function Get_Dirty: WordBool; safecall;
    procedure Set_Dirty(pRet: WordBool); safecall;
    function Get_WindowWidth: Smallint; safecall;
    procedure Set_WindowWidth(pRet: Smallint); safecall;
    function Get_WindowHeight: Smallint; safecall;
    procedure Set_WindowHeight(pRet: Smallint); safecall;
    function Get_CurrentView: Smallint; safecall;
    procedure Set_CurrentView(pRet: Smallint); safecall;
    function Get_CurrentSectionTop: Smallint; safecall;
    procedure Set_CurrentSectionTop(pRet: Smallint); safecall;
    function Get_CurrentSectionLeft: Smallint; safecall;
    procedure Set_CurrentSectionLeft(pRet: Smallint); safecall;
    function Get_SelLeft: Integer; safecall;
    procedure Set_SelLeft(pRet: Integer); safecall;
    function Get_SelTop: Integer; safecall;
    procedure Set_SelTop(pRet: Integer); safecall;
    function Get_SelWidth: Integer; safecall;
    procedure Set_SelWidth(pRet: Integer); safecall;
    function Get_SelHeight: Integer; safecall;
    procedure Set_SelHeight(pRet: Integer); safecall;
    function Get_CurrentRecord: Integer; safecall;
    procedure Set_CurrentRecord(pRet: Integer); safecall;
    function Get_PictureData: OleVariant; safecall;
    procedure Set_PictureData(pRet: OleVariant); safecall;
    function Get_InsideHeight: Integer; safecall;
    procedure Set_InsideHeight(pRet: Integer); safecall;
    function Get_InsideWidth: Integer; safecall;
    procedure Set_InsideWidth(pRet: Integer); safecall;
    function Get_PicturePalette: OleVariant; safecall;
    procedure Set_PicturePalette(pRet: OleVariant); safecall;
    function Get_HasModule: WordBool; safecall;
    procedure Set_HasModule(pRet: WordBool); safecall;
    function Get_acHiddenCurrentPage: Integer; safecall;
    procedure Set_acHiddenCurrentPage(pRet: Integer); safecall;
    function Get_Orientation: Byte; safecall;
    procedure Set_Orientation(pRet: Byte); safecall;
    function Get_AllowDesignChanges: WordBool; safecall;
    procedure Set_AllowDesignChanges(pRet: WordBool); safecall;
    function Get_ServerFilter: WideString; safecall;
    procedure Set_ServerFilter(const pRet: WideString); safecall;
    function Get_ServerFilterByForm: WordBool; safecall;
    procedure Set_ServerFilterByForm(pRet: WordBool); safecall;
    function Get_MaxRecords: Integer; safecall;
    procedure Set_MaxRecords(pRet: Integer); safecall;
    function Get_UniqueTable: WideString; safecall;
    procedure Set_UniqueTable(const pRet: WideString); safecall;
    function Get_ResyncCommand: WideString; safecall;
    procedure Set_ResyncCommand(const pRet: WideString); safecall;
    function Get_InputParameters: WideString; safecall;
    procedure Set_InputParameters(const pRet: WideString); safecall;
    function Get_MaxRecButton: WordBool; safecall;
    procedure Set_MaxRecButton(pRet: WordBool); safecall;
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_NewRecord: Smallint; safecall;
    procedure Undo; safecall;
    function Get_ActiveControl: AccessControl; safecall;
    function Get_DefaultControl(ControlType: Integer): AccessControl; safecall;
    function Get_Dynaset: IDispatch; safecall;
    function Get_RecordsetClone: IDispatch; safecall;
    function Get_Recordset: IDispatch; safecall;
    procedure _Set_Recordset(const pRet: IDispatch); safecall;
    function Get_Section(Index: OleVariant): AccessSection; safecall;
    function Get_Form: AccessForm; safecall;
    function Get_Module: Module; safecall;
    function Get_Properties: Properties; safecall;
    function Get_ConnectControl: AccessControl; safecall;
    procedure Recalc; safecall;
    procedure Requery; safecall;
    procedure Refresh; safecall;
    procedure Repaint; safecall;
    procedure GoToPage(PageNumber: Integer; Right: Integer; Down: Integer); safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Controls; safecall;
    function _NewEnum: IUnknown; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    function Get_SubdatasheetHeight: Smallint; safecall;
    procedure Set_SubdatasheetHeight(pRet: Smallint); safecall;
    function Get_SubdatasheetExpanded: WordBool; safecall;
    procedure Set_SubdatasheetExpanded(pRet: WordBool); safecall;
    function Get_DatasheetBorderLineStyle: Byte; safecall;
    procedure Set_DatasheetBorderLineStyle(pRet: Byte); safecall;
    function Get_DatasheetColumnHeaderUnderlineStyle: Byte; safecall;
    procedure Set_DatasheetColumnHeaderUnderlineStyle(pRet: Byte); safecall;
    function Get_HorizontalDatasheetGridlineStyle: Byte; safecall;
    procedure Set_HorizontalDatasheetGridlineStyle(pRet: Byte); safecall;
    function Get_VerticalDatasheetGridlineStyle: Byte; safecall;
    procedure Set_VerticalDatasheetGridlineStyle(pRet: Byte); safecall;
    function Get_WindowTop: Smallint; safecall;
    function Get_WindowLeft: Smallint; safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function Get_OnUndo: WideString; safecall;
    procedure Set_OnUndo(const pRet: WideString); safecall;
    function Get_OnRecordExit: WideString; safecall;
    procedure Set_OnRecordExit(const pRet: WideString); safecall;
    function Get_PivotTable: IDispatch; safecall;
    function Get_ChartSpace: IDispatch; safecall;
    function Get_Printer: _Printer; safecall;
    procedure Set_Printer(const pRet: _Printer); safecall;
    procedure _Set_Printer(const pRet: _Printer); safecall;
    function Get_Moveable: WordBool; safecall;
    procedure Set_Moveable(pRet: WordBool); safecall;
    function Get_BeginBatchEdit: WideString; safecall;
    procedure Set_BeginBatchEdit(const pRet: WideString); safecall;
    function Get_UndoBatchEdit: WideString; safecall;
    procedure Set_UndoBatchEdit(const pRet: WideString); safecall;
    function Get_BeforeBeginTransaction: WideString; safecall;
    procedure Set_BeforeBeginTransaction(const pRet: WideString); safecall;
    function Get_AfterBeginTransaction: WideString; safecall;
    procedure Set_AfterBeginTransaction(const pRet: WideString); safecall;
    function Get_BeforeCommitTransaction: WideString; safecall;
    procedure Set_BeforeCommitTransaction(const pRet: WideString); safecall;
    function Get_AfterCommitTransaction: WideString; safecall;
    procedure Set_AfterCommitTransaction(const pRet: WideString); safecall;
    function Get_RollbackTransaction: WideString; safecall;
    procedure Set_RollbackTransaction(const pRet: WideString); safecall;
    function Get_AllowFormView: WordBool; safecall;
    procedure Set_AllowFormView(pRet: WordBool); safecall;
    function Get_AllowDatasheetView: WordBool; safecall;
    procedure Set_AllowDatasheetView(pRet: WordBool); safecall;
    function Get_AllowPivotTableView: WordBool; safecall;
    procedure Set_AllowPivotTableView(pRet: WordBool); safecall;
    function Get_AllowPivotChartView: WordBool; safecall;
    procedure Set_AllowPivotChartView(pRet: WordBool); safecall;
    function Get_OnConnect: WideString; safecall;
    procedure Set_OnConnect(const pRet: WideString); safecall;
    function Get_OnDisconnect: WideString; safecall;
    procedure Set_OnDisconnect(const pRet: WideString); safecall;
    function Get_PivotTableChange: WideString; safecall;
    procedure Set_PivotTableChange(const pRet: WideString); safecall;
    function Get_Query: WideString; safecall;
    procedure Set_Query(const pRet: WideString); safecall;
    function Get_BeforeQuery: WideString; safecall;
    procedure Set_BeforeQuery(const pRet: WideString); safecall;
    function Get_SelectionChange: WideString; safecall;
    procedure Set_SelectionChange(const pRet: WideString); safecall;
    function Get_CommandBeforeExecute: WideString; safecall;
    procedure Set_CommandBeforeExecute(const pRet: WideString); safecall;
    function Get_CommandChecked: WideString; safecall;
    procedure Set_CommandChecked(const pRet: WideString); safecall;
    function Get_CommandEnabled: WideString; safecall;
    procedure Set_CommandEnabled(const pRet: WideString); safecall;
    function Get_CommandExecute: WideString; safecall;
    procedure Set_CommandExecute(const pRet: WideString); safecall;
    function Get_DataSetChange: WideString; safecall;
    procedure Set_DataSetChange(const pRet: WideString); safecall;
    function Get_BeforeScreenTip: WideString; safecall;
    procedure Set_BeforeScreenTip(const pRet: WideString); safecall;
    function Get_AfterFinalRender: WideString; safecall;
    procedure Set_AfterFinalRender(const pRet: WideString); safecall;
    function Get_AfterRender: WideString; safecall;
    procedure Set_AfterRender(const pRet: WideString); safecall;
    function Get_AfterLayout: WideString; safecall;
    procedure Set_AfterLayout(const pRet: WideString); safecall;
    function Get_BeforeRender: WideString; safecall;
    procedure Set_BeforeRender(const pRet: WideString); safecall;
    function Get_MouseWheel: WideString; safecall;
    procedure Set_MouseWheel(const pRet: WideString); safecall;
    function Get_ViewChange: WideString; safecall;
    procedure Set_ViewChange(const pRet: WideString); safecall;
    function Get_DataChange: WideString; safecall;
    procedure Set_DataChange(const pRet: WideString); safecall;
    function Get_FetchDefaults: WordBool; safecall;
    procedure Set_FetchDefaults(pRet: WordBool); safecall;
    function Get_BatchUpdates: WordBool; safecall;
    procedure Set_BatchUpdates(pRet: WordBool); safecall;
    function Get_CommitOnClose: Byte; safecall;
    procedure Set_CommitOnClose(pRet: Byte); safecall;
    function Get_CommitOnNavigation: WordBool; safecall;
    procedure Set_CommitOnNavigation(pRet: WordBool); safecall;
    function Get_UseDefaultPrinter: WordBool; safecall;
    procedure Set_UseDefaultPrinter(pRet: WordBool); safecall;
    function Get_RecordSourceQualifier: WideString; safecall;
    procedure Set_RecordSourceQualifier(const pRet: WideString); safecall;
    property FormName: WideString read Get_FormName write Set_FormName;
    property RecordSource: WideString read Get_RecordSource write Set_RecordSource;
    property Filter: WideString read Get_Filter write Set_Filter;
    property FilterOn: WordBool read Get_FilterOn write Set_FilterOn;
    property OrderBy: WideString read Get_OrderBy write Set_OrderBy;
    property OrderByOn: WordBool read Get_OrderByOn write Set_OrderByOn;
    property AllowFilters: WordBool read Get_AllowFilters write Set_AllowFilters;
    property Caption: WideString read Get_Caption write Set_Caption;
    property DefaultView: Byte read Get_DefaultView write Set_DefaultView;
    property ViewsAllowed: Byte read Get_ViewsAllowed write Set_ViewsAllowed;
    property AllowEditing: WordBool read Get_AllowEditing write Set_AllowEditing;
    property DefaultEditing: Smallint read Get_DefaultEditing write Set_DefaultEditing;
    property AllowEdits: WordBool read Get_AllowEdits write Set_AllowEdits;
    property AllowDeletions: WordBool read Get_AllowDeletions write Set_AllowDeletions;
    property AllowAdditions: WordBool read Get_AllowAdditions write Set_AllowAdditions;
    property DataEntry: WordBool read Get_DataEntry write Set_DataEntry;
    property AllowUpdating: Byte read Get_AllowUpdating write Set_AllowUpdating;
    property RecordsetType: Byte read Get_RecordsetType write Set_RecordsetType;
    property RecordLocks: Byte read Get_RecordLocks write Set_RecordLocks;
    property ScrollBars: Byte read Get_ScrollBars write Set_ScrollBars;
    property RecordSelectors: WordBool read Get_RecordSelectors write Set_RecordSelectors;
    property NavigationButtons: WordBool read Get_NavigationButtons write Set_NavigationButtons;
    property DividingLines: WordBool read Get_DividingLines write Set_DividingLines;
    property AutoResize: WordBool read Get_AutoResize write Set_AutoResize;
    property AutoCenter: WordBool read Get_AutoCenter write Set_AutoCenter;
    property PopUp: WordBool read Get_PopUp write Set_PopUp;
    property Modal: WordBool read Get_Modal write Set_Modal;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property ControlBox: WordBool read Get_ControlBox write Set_ControlBox;
    property MinButton: WordBool read Get_MinButton write Set_MinButton;
    property MaxButton: WordBool read Get_MaxButton write Set_MaxButton;
    property MinMaxButtons: Byte read Get_MinMaxButtons write Set_MinMaxButtons;
    property CloseButton: WordBool read Get_CloseButton write Set_CloseButton;
    property WhatsThisButton: WordBool read Get_WhatsThisButton write Set_WhatsThisButton;
    property Width: Smallint read Get_Width write Set_Width;
    property Picture: WideString read Get_Picture write Set_Picture;
    property PictureType: Byte read Get_PictureType write Set_PictureType;
    property PictureSizeMode: Byte read Get_PictureSizeMode write Set_PictureSizeMode;
    property PictureAlignment: Byte read Get_PictureAlignment write Set_PictureAlignment;
    property PictureTiling: WordBool read Get_PictureTiling write Set_PictureTiling;
    property Cycle: Byte read Get_Cycle write Set_Cycle;
    property MenuBar: WideString read Get_MenuBar write Set_MenuBar;
    property Toolbar: WideString read Get_Toolbar write Set_Toolbar;
    property ShortcutMenu: WordBool read Get_ShortcutMenu write Set_ShortcutMenu;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property GridX: Smallint read Get_GridX write Set_GridX;
    property GridY: Smallint read Get_GridY write Set_GridY;
    property LayoutForPrint: WordBool read Get_LayoutForPrint write Set_LayoutForPrint;
    property FastLaserPrinting: WordBool read Get_FastLaserPrinting write Set_FastLaserPrinting;
    property HelpFile: WideString read Get_HelpFile write Set_HelpFile;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property RowHeight: Smallint read Get_RowHeight write Set_RowHeight;
    property DatasheetFontName: WideString read Get_DatasheetFontName write Set_DatasheetFontName;
    property DatasheetFontHeight: Smallint read Get_DatasheetFontHeight write Set_DatasheetFontHeight;
    property DatasheetFontWeight: Smallint read Get_DatasheetFontWeight write Set_DatasheetFontWeight;
    property DatasheetFontItalic: WordBool read Get_DatasheetFontItalic write Set_DatasheetFontItalic;
    property DatasheetFontUnderline: WordBool read Get_DatasheetFontUnderline write Set_DatasheetFontUnderline;
    property TabularCharSet: Byte read Get_TabularCharSet write Set_TabularCharSet;
    property DatasheetGridlinesBehavior: Byte read Get_DatasheetGridlinesBehavior write Set_DatasheetGridlinesBehavior;
    property DatasheetGridlinesColor: Integer read Get_DatasheetGridlinesColor write Set_DatasheetGridlinesColor;
    property DatasheetCellsEffect: Byte read Get_DatasheetCellsEffect write Set_DatasheetCellsEffect;
    property DatasheetForeColor: Integer read Get_DatasheetForeColor write Set_DatasheetForeColor;
    property ShowGrid: WordBool read Get_ShowGrid write Set_ShowGrid;
    property DatasheetBackColor: Integer read Get_DatasheetBackColor write Set_DatasheetBackColor;
    property Hwnd: Integer read Get_Hwnd write Set_Hwnd;
    property Count: Smallint read Get_Count write Set_Count;
    property Page: Integer read Get_Page write Set_Page;
    property Pages: Smallint read Get_Pages write Set_Pages;
    property LogicalPageWidth: Integer read Get_LogicalPageWidth write Set_LogicalPageWidth;
    property LogicalPageHeight: Integer read Get_LogicalPageHeight write Set_LogicalPageHeight;
    property ZoomControl: Integer read Get_ZoomControl write Set_ZoomControl;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Painting: WordBool read Get_Painting write Set_Painting;
    property PrtMip: OleVariant read Get_PrtMip write Set_PrtMip;
    property PrtDevMode: OleVariant read Get_PrtDevMode write Set_PrtDevMode;
    property PrtDevNames: OleVariant read Get_PrtDevNames write Set_PrtDevNames;
    property FrozenColumns: Smallint read Get_FrozenColumns write Set_FrozenColumns;
    property Bookmark: OleVariant read Get_Bookmark write Set_Bookmark;
    property TabularFamily: Byte read Get_TabularFamily write Set_TabularFamily;
    property _Name: WideString read Get__Name write Set__Name;
    property PaletteSource: WideString read Get_PaletteSource write Set_PaletteSource;
    property Tag: WideString read Get_Tag write Set_Tag;
    property PaintPalette: OleVariant read Get_PaintPalette write Set_PaintPalette;
    property OnMenu: WideString read Get_OnMenu write Set_OnMenu;
    property OpenArgs: OleVariant read Get_OpenArgs write Set_OpenArgs;
    property ConnectSynch: Smallint read Get_ConnectSynch write Set_ConnectSynch;
    property OnCurrent: WideString read Get_OnCurrent write Set_OnCurrent;
    property OnInsert: WideString read Get_OnInsert write Set_OnInsert;
    property BeforeInsert: WideString read Get_BeforeInsert write Set_BeforeInsert;
    property AfterInsert: WideString read Get_AfterInsert write Set_AfterInsert;
    property BeforeUpdate: WideString read Get_BeforeUpdate write Set_BeforeUpdate;
    property AfterUpdate: WideString read Get_AfterUpdate write Set_AfterUpdate;
    property OnDirty: WideString read Get_OnDirty write Set_OnDirty;
    property OnDelete: WideString read Get_OnDelete write Set_OnDelete;
    property BeforeDelConfirm: WideString read Get_BeforeDelConfirm write Set_BeforeDelConfirm;
    property AfterDelConfirm: WideString read Get_AfterDelConfirm write Set_AfterDelConfirm;
    property OnOpen: WideString read Get_OnOpen write Set_OnOpen;
    property OnLoad: WideString read Get_OnLoad write Set_OnLoad;
    property OnResize: WideString read Get_OnResize write Set_OnResize;
    property OnUnload: WideString read Get_OnUnload write Set_OnUnload;
    property OnClose: WideString read Get_OnClose write Set_OnClose;
    property OnActivate: WideString read Get_OnActivate write Set_OnActivate;
    property OnDeactivate: WideString read Get_OnDeactivate write Set_OnDeactivate;
    property OnGotFocus: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property KeyPreview: WordBool read Get_KeyPreview write Set_KeyPreview;
    property OnError: WideString read Get_OnError write Set_OnError;
    property OnFilter: WideString read Get_OnFilter write Set_OnFilter;
    property OnApplyFilter: WideString read Get_OnApplyFilter write Set_OnApplyFilter;
    property OnTimer: WideString read Get_OnTimer write Set_OnTimer;
    property TimerInterval: Integer read Get_TimerInterval write Set_TimerInterval;
    property Dirty: WordBool read Get_Dirty write Set_Dirty;
    property WindowWidth: Smallint read Get_WindowWidth write Set_WindowWidth;
    property WindowHeight: Smallint read Get_WindowHeight write Set_WindowHeight;
    property CurrentView: Smallint read Get_CurrentView write Set_CurrentView;
    property CurrentSectionTop: Smallint read Get_CurrentSectionTop write Set_CurrentSectionTop;
    property CurrentSectionLeft: Smallint read Get_CurrentSectionLeft write Set_CurrentSectionLeft;
    property SelLeft: Integer read Get_SelLeft write Set_SelLeft;
    property SelTop: Integer read Get_SelTop write Set_SelTop;
    property SelWidth: Integer read Get_SelWidth write Set_SelWidth;
    property SelHeight: Integer read Get_SelHeight write Set_SelHeight;
    property CurrentRecord: Integer read Get_CurrentRecord write Set_CurrentRecord;
    property PictureData: OleVariant read Get_PictureData write Set_PictureData;
    property InsideHeight: Integer read Get_InsideHeight write Set_InsideHeight;
    property InsideWidth: Integer read Get_InsideWidth write Set_InsideWidth;
    property PicturePalette: OleVariant read Get_PicturePalette write Set_PicturePalette;
    property HasModule: WordBool read Get_HasModule write Set_HasModule;
    property acHiddenCurrentPage: Integer read Get_acHiddenCurrentPage write Set_acHiddenCurrentPage;
    property Orientation: Byte read Get_Orientation write Set_Orientation;
    property AllowDesignChanges: WordBool read Get_AllowDesignChanges write Set_AllowDesignChanges;
    property ServerFilter: WideString read Get_ServerFilter write Set_ServerFilter;
    property ServerFilterByForm: WordBool read Get_ServerFilterByForm write Set_ServerFilterByForm;
    property MaxRecords: Integer read Get_MaxRecords write Set_MaxRecords;
    property UniqueTable: WideString read Get_UniqueTable write Set_UniqueTable;
    property ResyncCommand: WideString read Get_ResyncCommand write Set_ResyncCommand;
    property InputParameters: WideString read Get_InputParameters write Set_InputParameters;
    property MaxRecButton: WordBool read Get_MaxRecButton write Set_MaxRecButton;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property NewRecord: Smallint read Get_NewRecord;
    property ActiveControl: AccessControl read Get_ActiveControl;
    property DefaultControl[ControlType: Integer]: AccessControl read Get_DefaultControl;
    property Dynaset: IDispatch read Get_Dynaset;
    property RecordsetClone: IDispatch read Get_RecordsetClone;
    property Recordset: IDispatch read Get_Recordset write _Set_Recordset;
    property Section[Index: OleVariant]: AccessSection read Get_Section;
    property Form: AccessForm read Get_Form;
    property Module: Module read Get_Module;
    property Properties: Properties read Get_Properties;
    property ConnectControl: AccessControl read Get_ConnectControl;
    property Controls: Controls read Get_Controls;
    property Name: WideString read Get_Name write Set_Name;
    property SubdatasheetHeight: Smallint read Get_SubdatasheetHeight write Set_SubdatasheetHeight;
    property SubdatasheetExpanded: WordBool read Get_SubdatasheetExpanded write Set_SubdatasheetExpanded;
    property DatasheetBorderLineStyle: Byte read Get_DatasheetBorderLineStyle write Set_DatasheetBorderLineStyle;
    property DatasheetColumnHeaderUnderlineStyle: Byte read Get_DatasheetColumnHeaderUnderlineStyle write Set_DatasheetColumnHeaderUnderlineStyle;
    property HorizontalDatasheetGridlineStyle: Byte read Get_HorizontalDatasheetGridlineStyle write Set_HorizontalDatasheetGridlineStyle;
    property VerticalDatasheetGridlineStyle: Byte read Get_VerticalDatasheetGridlineStyle write Set_VerticalDatasheetGridlineStyle;
    property WindowTop: Smallint read Get_WindowTop;
    property WindowLeft: Smallint read Get_WindowLeft;
    property OnUndo: WideString read Get_OnUndo write Set_OnUndo;
    property OnRecordExit: WideString read Get_OnRecordExit write Set_OnRecordExit;
    property PivotTable: IDispatch read Get_PivotTable;
    property ChartSpace: IDispatch read Get_ChartSpace;
    property Printer: _Printer read Get_Printer write Set_Printer;
    property Moveable: WordBool read Get_Moveable write Set_Moveable;
    property BeginBatchEdit: WideString read Get_BeginBatchEdit write Set_BeginBatchEdit;
    property UndoBatchEdit: WideString read Get_UndoBatchEdit write Set_UndoBatchEdit;
    property BeforeBeginTransaction: WideString read Get_BeforeBeginTransaction write Set_BeforeBeginTransaction;
    property AfterBeginTransaction: WideString read Get_AfterBeginTransaction write Set_AfterBeginTransaction;
    property BeforeCommitTransaction: WideString read Get_BeforeCommitTransaction write Set_BeforeCommitTransaction;
    property AfterCommitTransaction: WideString read Get_AfterCommitTransaction write Set_AfterCommitTransaction;
    property RollbackTransaction: WideString read Get_RollbackTransaction write Set_RollbackTransaction;
    property AllowFormView: WordBool read Get_AllowFormView write Set_AllowFormView;
    property AllowDatasheetView: WordBool read Get_AllowDatasheetView write Set_AllowDatasheetView;
    property AllowPivotTableView: WordBool read Get_AllowPivotTableView write Set_AllowPivotTableView;
    property AllowPivotChartView: WordBool read Get_AllowPivotChartView write Set_AllowPivotChartView;
    property OnConnect: WideString read Get_OnConnect write Set_OnConnect;
    property OnDisconnect: WideString read Get_OnDisconnect write Set_OnDisconnect;
    property PivotTableChange: WideString read Get_PivotTableChange write Set_PivotTableChange;
    property Query: WideString read Get_Query write Set_Query;
    property BeforeQuery: WideString read Get_BeforeQuery write Set_BeforeQuery;
    property SelectionChange: WideString read Get_SelectionChange write Set_SelectionChange;
    property CommandBeforeExecute: WideString read Get_CommandBeforeExecute write Set_CommandBeforeExecute;
    property CommandChecked: WideString read Get_CommandChecked write Set_CommandChecked;
    property CommandEnabled: WideString read Get_CommandEnabled write Set_CommandEnabled;
    property CommandExecute: WideString read Get_CommandExecute write Set_CommandExecute;
    property DataSetChange: WideString read Get_DataSetChange write Set_DataSetChange;
    property BeforeScreenTip: WideString read Get_BeforeScreenTip write Set_BeforeScreenTip;
    property AfterFinalRender: WideString read Get_AfterFinalRender write Set_AfterFinalRender;
    property AfterRender: WideString read Get_AfterRender write Set_AfterRender;
    property AfterLayout: WideString read Get_AfterLayout write Set_AfterLayout;
    property BeforeRender: WideString read Get_BeforeRender write Set_BeforeRender;
    property MouseWheel: WideString read Get_MouseWheel write Set_MouseWheel;
    property ViewChange: WideString read Get_ViewChange write Set_ViewChange;
    property DataChange: WideString read Get_DataChange write Set_DataChange;
    property FetchDefaults: WordBool read Get_FetchDefaults write Set_FetchDefaults;
    property BatchUpdates: WordBool read Get_BatchUpdates write Set_BatchUpdates;
    property CommitOnClose: Byte read Get_CommitOnClose write Set_CommitOnClose;
    property CommitOnNavigation: WordBool read Get_CommitOnNavigation write Set_CommitOnNavigation;
    property UseDefaultPrinter: WordBool read Get_UseDefaultPrinter write Set_UseDefaultPrinter;
    property RecordSourceQualifier: WideString read Get_RecordSourceQualifier write Set_RecordSourceQualifier;
  end;

// *********************************************************************//
// DispIntf:  _Form2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3F4A878E-C395-11D3-8D1F-0050048383FB}
// *********************************************************************//
  _Form2Disp = dispinterface
    ['{3F4A878E-C395-11D3-8D1F-0050048383FB}']
    property FormName: WideString dispid 39;
    property RecordSource: WideString dispid 156;
    property Filter: WideString dispid 245;
    property FilterOn: WordBool dispid 332;
    property OrderBy: WideString dispid 331;
    property OrderByOn: WordBool dispid 336;
    property AllowFilters: WordBool dispid 30;
    property Caption: WideString dispid 17;
    property DefaultView: Byte dispid 147;
    property ViewsAllowed: Byte dispid 146;
    property AllowEditing: WordBool dispid 24;
    property DefaultEditing: Smallint dispid 134;
    property AllowEdits: WordBool dispid 339;
    property AllowDeletions: WordBool dispid 292;
    property AllowAdditions: WordBool dispid 326;
    property DataEntry: WordBool dispid 338;
    property AllowUpdating: Byte dispid 45;
    property RecordsetType: Byte dispid 337;
    property RecordLocks: Byte dispid 26;
    property ScrollBars: Byte dispid 152;
    property RecordSelectors: WordBool dispid 19;
    property NavigationButtons: WordBool dispid 279;
    property DividingLines: WordBool dispid 314;
    property AutoResize: WordBool dispid 6;
    property AutoCenter: WordBool dispid 278;
    property PopUp: WordBool dispid 90;
    property Modal: WordBool dispid 62;
    property BorderStyle: Byte dispid 9;
    property ControlBox: WordBool dispid 97;
    property MinButton: WordBool dispid 95;
    property MaxButton: WordBool dispid 94;
    property MinMaxButtons: Byte dispid 328;
    property CloseButton: WordBool dispid 303;
    property WhatsThisButton: WordBool dispid 96;
    property Width: Smallint dispid 150;
    property Picture: WideString dispid 7;
    property PictureType: Byte dispid 341;
    property PictureSizeMode: Byte dispid 312;
    property PictureAlignment: Byte dispid 309;
    property PictureTiling: WordBool dispid 313;
    property Cycle: Byte dispid 330;
    property MenuBar: WideString dispid 240;
    property Toolbar: WideString dispid 353;
    property ShortcutMenu: WordBool dispid 31;
    property ShortcutMenuBar: WideString dispid 304;
    property GridX: Smallint dispid 41;
    property GridY: Smallint dispid 42;
    property LayoutForPrint: WordBool dispid 143;
    property FastLaserPrinting: WordBool dispid 144;
    property HelpFile: WideString dispid 218;
    property HelpContextId: Integer dispid 219;
    property RowHeight: Smallint dispid 168;
    property DatasheetFontName: WideString dispid 160;
    property DatasheetFontHeight: Smallint dispid 161;
    property DatasheetFontWeight: Smallint dispid 162;
    property DatasheetFontItalic: WordBool dispid 163;
    property DatasheetFontUnderline: WordBool dispid 164;
    property TabularCharSet: Byte dispid 194;
    property DatasheetGridlinesBehavior: Byte dispid 318;
    property DatasheetGridlinesColor: Integer dispid 319;
    property DatasheetCellsEffect: Byte dispid 320;
    property DatasheetForeColor: Integer dispid 306;
    property ShowGrid: WordBool dispid 169;
    property DatasheetBackColor: Integer dispid 321;
    property Hwnd: Integer dispid 192;
    property Count: Smallint dispid 195;
    property Page: Integer dispid 196;
    property Pages: Smallint dispid 197;
    property LogicalPageWidth: Integer dispid 198;
    property LogicalPageHeight: Integer dispid 199;
    property ZoomControl: Integer dispid 217;
    property Visible: WordBool dispid 148;
    property Painting: WordBool dispid 241;
    property PrtMip: OleVariant dispid 189;
    property PrtDevMode: OleVariant dispid 190;
    property PrtDevNames: OleVariant dispid 191;
    property FrozenColumns: Smallint dispid 170;
    property Bookmark: OleVariant dispid 230;
    property TabularFamily: Byte dispid 244;
    property _Name: WideString dispid 20;
    property PaletteSource: WideString dispid 98;
    property Tag: WideString dispid 266;
    property PaintPalette: OleVariant dispid 100;
    property OnMenu: WideString dispid 60;
    property OpenArgs: OleVariant dispid 284;
    property ConnectSynch: Smallint dispid 285;
    property OnCurrent: WideString dispid 87;
    property OnInsert: WideString dispid 81;
    property BeforeInsert: WideString dispid 122;
    property AfterInsert: WideString dispid 123;
    property BeforeUpdate: WideString dispid 85;
    property AfterUpdate: WideString dispid 86;
    property OnDirty: WideString dispid 375;
    property OnDelete: WideString dispid 79;
    property BeforeDelConfirm: WideString dispid 124;
    property AfterDelConfirm: WideString dispid 125;
    property OnOpen: WideString dispid 77;
    property OnLoad: WideString dispid 127;
    property OnResize: WideString dispid 117;
    property OnUnload: WideString dispid 128;
    property OnClose: WideString dispid 78;
    property OnActivate: WideString dispid 112;
    property OnDeactivate: WideString dispid 113;
    property OnGotFocus: WideString dispid 115;
    property OnLostFocus: WideString dispid 116;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property OnKeyDown: WideString dispid 104;
    property OnKeyUp: WideString dispid 105;
    property OnKeyPress: WideString dispid 106;
    property KeyPreview: WordBool dispid 327;
    property OnError: WideString dispid 119;
    property OnFilter: WideString dispid 333;
    property OnApplyFilter: WideString dispid 334;
    property OnTimer: WideString dispid 110;
    property TimerInterval: Integer dispid 111;
    property Dirty: WordBool dispid 286;
    property WindowWidth: Smallint dispid 287;
    property WindowHeight: Smallint dispid 288;
    property CurrentView: Smallint dispid 289;
    property CurrentSectionTop: Smallint dispid 291;
    property CurrentSectionLeft: Smallint dispid 290;
    property SelLeft: Integer dispid 298;
    property SelTop: Integer dispid 299;
    property SelWidth: Integer dispid 300;
    property SelHeight: Integer dispid 301;
    property CurrentRecord: Integer dispid 302;
    property PictureData: OleVariant dispid 188;
    property InsideHeight: Integer dispid 315;
    property InsideWidth: Integer dispid 316;
    property PicturePalette: OleVariant dispid 311;
    property HasModule: WordBool dispid 342;
    property acHiddenCurrentPage: Integer dispid 365;
    property Orientation: Byte dispid 370;
    property AllowDesignChanges: WordBool dispid 373;
    property ServerFilter: WideString dispid 246;
    property ServerFilterByForm: WordBool dispid 247;
    property MaxRecords: Integer dispid 361;
    property UniqueTable: WideString dispid 65;
    property ResyncCommand: WideString dispid 64;
    property InputParameters: WideString dispid 66;
    property MaxRecButton: WordBool dispid 63;
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property NewRecord: Smallint readonly dispid 2147;
    procedure Undo; dispid 2145;
    property ActiveControl: AccessControl readonly dispid 2006;
    property DefaultControl[ControlType: Integer]: AccessControl readonly dispid 2150;
    property Dynaset: IDispatch readonly dispid 2085;
    property RecordsetClone: IDispatch readonly dispid 2086;
    property Recordset: IDispatch dispid 2196;
    property Section[Index: OleVariant]: AccessSection readonly dispid 2088;
    property Form: AccessForm readonly dispid 2089;
    property Module: Module readonly dispid 2090;
    property Properties: Properties readonly dispid 2091;
    property ConnectControl: AccessControl readonly dispid 2092;
    procedure Recalc; dispid 2017;
    procedure Requery; dispid 2018;
    procedure Refresh; dispid -550;
    procedure Repaint; dispid 2020;
    procedure GoToPage(PageNumber: Integer; Right: Integer; Down: Integer); dispid 2021;
    procedure SetFocus; dispid 2022;
    property Controls: Controls readonly dispid 0;
    function _NewEnum: IUnknown; dispid -4;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Name: WideString dispid -2147418112;
    property SubdatasheetHeight: Smallint dispid 387;
    property SubdatasheetExpanded: WordBool dispid 390;
    property DatasheetBorderLineStyle: Byte dispid 322;
    property DatasheetColumnHeaderUnderlineStyle: Byte dispid 325;
    property HorizontalDatasheetGridlineStyle: Byte dispid 323;
    property VerticalDatasheetGridlineStyle: Byte dispid 324;
    property WindowTop: Smallint readonly dispid 402;
    property WindowLeft: Smallint readonly dispid 403;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    property OnUndo: WideString dispid 404;
    property OnRecordExit: WideString dispid 405;
    property PivotTable: IDispatch readonly dispid 2340;
    property ChartSpace: IDispatch readonly dispid 2341;
    property Printer: _Printer dispid 2365;
    property Moveable: WordBool dispid 410;
    property BeginBatchEdit: WideString dispid 412;
    property UndoBatchEdit: WideString dispid 413;
    property BeforeBeginTransaction: WideString dispid 414;
    property AfterBeginTransaction: WideString dispid 415;
    property BeforeCommitTransaction: WideString dispid 416;
    property AfterCommitTransaction: WideString dispid 417;
    property RollbackTransaction: WideString dispid 418;
    property AllowFormView: WordBool dispid 421;
    property AllowDatasheetView: WordBool dispid 422;
    property AllowPivotTableView: WordBool dispid 423;
    property AllowPivotChartView: WordBool dispid 424;
    property OnConnect: WideString dispid 425;
    property OnDisconnect: WideString dispid 426;
    property PivotTableChange: WideString dispid 427;
    property Query: WideString dispid 428;
    property BeforeQuery: WideString dispid 429;
    property SelectionChange: WideString dispid 430;
    property CommandBeforeExecute: WideString dispid 431;
    property CommandChecked: WideString dispid 432;
    property CommandEnabled: WideString dispid 433;
    property CommandExecute: WideString dispid 434;
    property DataSetChange: WideString dispid 435;
    property BeforeScreenTip: WideString dispid 436;
    property AfterFinalRender: WideString dispid 437;
    property AfterRender: WideString dispid 438;
    property AfterLayout: WideString dispid 439;
    property BeforeRender: WideString dispid 440;
    property MouseWheel: WideString dispid 441;
    property ViewChange: WideString dispid 442;
    property DataChange: WideString dispid 443;
    property FetchDefaults: WordBool dispid 444;
    property BatchUpdates: WordBool dispid 409;
    property CommitOnClose: Byte dispid 419;
    property CommitOnNavigation: WordBool dispid 420;
    property UseDefaultPrinter: WordBool dispid 2418;
    property RecordSourceQualifier: WideString dispid 445;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// Interface: _Report2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {32A1C62A-D374-11D3-8D21-0050048383FB}
// *********************************************************************//
  _Report2 = interface(IDispatch)
    ['{32A1C62A-D374-11D3-8D21-0050048383FB}']
    function Get_FormName: WideString; safecall;
    procedure Set_FormName(const pRet: WideString); safecall;
    function Get_RecordSource: WideString; safecall;
    procedure Set_RecordSource(const pRet: WideString); safecall;
    function Get_Filter: WideString; safecall;
    procedure Set_Filter(const pRet: WideString); safecall;
    function Get_FilterOn: WordBool; safecall;
    procedure Set_FilterOn(pRet: WordBool); safecall;
    function Get_OrderBy: WideString; safecall;
    procedure Set_OrderBy(const pRet: WideString); safecall;
    function Get_OrderByOn: WordBool; safecall;
    procedure Set_OrderByOn(pRet: WordBool); safecall;
    function Get_ServerFilter: WideString; safecall;
    procedure Set_ServerFilter(const pRet: WideString); safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const pRet: WideString); safecall;
    function Get_RecordLocks: Byte; safecall;
    procedure Set_RecordLocks(pRet: Byte); safecall;
    function Get_PageHeader: Byte; safecall;
    procedure Set_PageHeader(pRet: Byte); safecall;
    function Get_PageFooter: Byte; safecall;
    procedure Set_PageFooter(pRet: Byte); safecall;
    function Get_DateGrouping: Byte; safecall;
    procedure Set_DateGrouping(pRet: Byte); safecall;
    function Get_GrpKeepTogether: Byte; safecall;
    procedure Set_GrpKeepTogether(pRet: Byte); safecall;
    function Get_MinButton: WordBool; safecall;
    procedure Set_MinButton(pRet: WordBool); safecall;
    function Get_MaxButton: WordBool; safecall;
    procedure Set_MaxButton(pRet: WordBool); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Picture: WideString; safecall;
    procedure Set_Picture(const pRet: WideString); safecall;
    function Get_PictureType: Byte; safecall;
    procedure Set_PictureType(pRet: Byte); safecall;
    function Get_PictureSizeMode: Byte; safecall;
    procedure Set_PictureSizeMode(pRet: Byte); safecall;
    function Get_PictureAlignment: Byte; safecall;
    procedure Set_PictureAlignment(pRet: Byte); safecall;
    function Get_PictureTiling: WordBool; safecall;
    procedure Set_PictureTiling(pRet: WordBool); safecall;
    function Get_PicturePages: Byte; safecall;
    procedure Set_PicturePages(pRet: Byte); safecall;
    function Get_MenuBar: WideString; safecall;
    procedure Set_MenuBar(const pRet: WideString); safecall;
    function Get_Toolbar: WideString; safecall;
    procedure Set_Toolbar(const pRet: WideString); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_GridX: Smallint; safecall;
    procedure Set_GridX(pRet: Smallint); safecall;
    function Get_GridY: Smallint; safecall;
    procedure Set_GridY(pRet: Smallint); safecall;
    function Get_LayoutForPrint: WordBool; safecall;
    procedure Set_LayoutForPrint(pRet: WordBool); safecall;
    function Get_FastLaserPrinting: WordBool; safecall;
    procedure Set_FastLaserPrinting(pRet: WordBool); safecall;
    function Get_HelpFile: WideString; safecall;
    procedure Set_HelpFile(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_Hwnd: Integer; safecall;
    procedure Set_Hwnd(pRet: Integer); safecall;
    function Get_Count: Smallint; safecall;
    procedure Set_Count(pRet: Smallint); safecall;
    function Get_Page: Integer; safecall;
    procedure Set_Page(pRet: Integer); safecall;
    function Get_Pages: Smallint; safecall;
    procedure Set_Pages(pRet: Smallint); safecall;
    function Get_LogicalPageWidth: Integer; safecall;
    procedure Set_LogicalPageWidth(pRet: Integer); safecall;
    function Get_LogicalPageHeight: Integer; safecall;
    procedure Set_LogicalPageHeight(pRet: Integer); safecall;
    function Get_ZoomControl: Integer; safecall;
    procedure Set_ZoomControl(pRet: Integer); safecall;
    function Get_HasData: Integer; safecall;
    procedure Set_HasData(pRet: Integer); safecall;
    function Get_Left: Integer; safecall;
    procedure Set_Left(pRet: Integer); safecall;
    function Get_Top: Integer; safecall;
    procedure Set_Top(pRet: Integer); safecall;
    function Get_Height: Integer; safecall;
    procedure Set_Height(pRet: Integer); safecall;
    function Get_PrintSection: WordBool; safecall;
    procedure Set_PrintSection(pRet: WordBool); safecall;
    function Get_NextRecord: WordBool; safecall;
    procedure Set_NextRecord(pRet: WordBool); safecall;
    function Get_MoveLayout: WordBool; safecall;
    procedure Set_MoveLayout(pRet: WordBool); safecall;
    function Get_FormatCount: Smallint; safecall;
    procedure Set_FormatCount(pRet: Smallint); safecall;
    function Get_PrintCount: Smallint; safecall;
    procedure Set_PrintCount(pRet: Smallint); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_Painting: WordBool; safecall;
    procedure Set_Painting(pRet: WordBool); safecall;
    function Get_PrtMip: OleVariant; safecall;
    procedure Set_PrtMip(pRet: OleVariant); safecall;
    function Get_PrtDevMode: OleVariant; safecall;
    procedure Set_PrtDevMode(pRet: OleVariant); safecall;
    function Get_PrtDevNames: OleVariant; safecall;
    procedure Set_PrtDevNames(pRet: OleVariant); safecall;
    function Get_ForeColor: Integer; safecall;
    procedure Set_ForeColor(pRet: Integer); safecall;
    function Get_CurrentX: Single; safecall;
    procedure Set_CurrentX(pRet: Single); safecall;
    function Get_CurrentY: Single; safecall;
    procedure Set_CurrentY(pRet: Single); safecall;
    function Get_ScaleHeight: Single; safecall;
    procedure Set_ScaleHeight(pRet: Single); safecall;
    function Get_ScaleLeft: Single; safecall;
    procedure Set_ScaleLeft(pRet: Single); safecall;
    function Get_ScaleMode: Smallint; safecall;
    procedure Set_ScaleMode(pRet: Smallint); safecall;
    function Get_ScaleTop: Single; safecall;
    procedure Set_ScaleTop(pRet: Single); safecall;
    function Get_ScaleWidth: Single; safecall;
    procedure Set_ScaleWidth(pRet: Single); safecall;
    function Get_FontBold: Smallint; safecall;
    procedure Set_FontBold(pRet: Smallint); safecall;
    function Get_FontItalic: Smallint; safecall;
    procedure Set_FontItalic(pRet: Smallint); safecall;
    function Get_FontName: WideString; safecall;
    procedure Set_FontName(const pRet: WideString); safecall;
    function Get_FontSize: Smallint; safecall;
    procedure Set_FontSize(pRet: Smallint); safecall;
    function Get_FontUnderline: Smallint; safecall;
    procedure Set_FontUnderline(pRet: Smallint); safecall;
    function Get_DrawMode: Smallint; safecall;
    procedure Set_DrawMode(pRet: Smallint); safecall;
    function Get_DrawStyle: Smallint; safecall;
    procedure Set_DrawStyle(pRet: Smallint); safecall;
    function Get_DrawWidth: Smallint; safecall;
    procedure Set_DrawWidth(pRet: Smallint); safecall;
    function Get_FillColor: Integer; safecall;
    procedure Set_FillColor(pRet: Integer); safecall;
    function Get_FillStyle: Smallint; safecall;
    procedure Set_FillStyle(pRet: Smallint); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_PaletteSource: WideString; safecall;
    procedure Set_PaletteSource(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_PaintPalette: OleVariant; safecall;
    procedure Set_PaintPalette(pRet: OleVariant); safecall;
    function Get_OnMenu: WideString; safecall;
    procedure Set_OnMenu(const pRet: WideString); safecall;
    function Get_OnOpen: WideString; safecall;
    procedure Set_OnOpen(const pRet: WideString); safecall;
    function Get_OnClose: WideString; safecall;
    procedure Set_OnClose(const pRet: WideString); safecall;
    function Get_OnActivate: WideString; safecall;
    procedure Set_OnActivate(const pRet: WideString); safecall;
    function Get_OnDeactivate: WideString; safecall;
    procedure Set_OnDeactivate(const pRet: WideString); safecall;
    function Get_OnNoData: WideString; safecall;
    procedure Set_OnNoData(const pRet: WideString); safecall;
    function Get_OnPage: WideString; safecall;
    procedure Set_OnPage(const pRet: WideString); safecall;
    function Get_OnError: WideString; safecall;
    procedure Set_OnError(const pRet: WideString); safecall;
    function Get_Dirty: WordBool; safecall;
    procedure Set_Dirty(pRet: WordBool); safecall;
    function Get_CurrentRecord: Integer; safecall;
    procedure Set_CurrentRecord(pRet: Integer); safecall;
    function Get_PictureData: OleVariant; safecall;
    procedure Set_PictureData(pRet: OleVariant); safecall;
    function Get_PicturePalette: OleVariant; safecall;
    procedure Set_PicturePalette(pRet: OleVariant); safecall;
    function Get_HasModule: WordBool; safecall;
    procedure Set_HasModule(pRet: WordBool); safecall;
    function Get_acHiddenCurrentPage: Integer; safecall;
    procedure Set_acHiddenCurrentPage(pRet: Integer); safecall;
    function Get_Orientation: Byte; safecall;
    procedure Set_Orientation(pRet: Byte); safecall;
    function Get_InputParameters: WideString; safecall;
    procedure Set_InputParameters(const pRet: WideString); safecall;
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_ActiveControl: AccessControl; safecall;
    function Get_DefaultControl(ControlType: Integer): AccessControl; safecall;
    procedure Circle(flags: Smallint; X: Single; Y: Single; radius: Single; color: Integer; 
                     start: Single; end_: Single; aspect: Single); safecall;
    procedure Line(flags: Smallint; x1: Single; y1: Single; x2: Single; y2: Single; color: Integer); safecall;
    procedure PSet(flags: Smallint; X: Single; Y: Single; color: Integer); safecall;
    procedure Scale(flags: Smallint; x1: Single; y1: Single; x2: Single; y2: Single); safecall;
    function TextWidth(const Expr: WideString): Single; safecall;
    function TextHeight(const Expr: WideString): Single; safecall;
    procedure Print(const Expr: WideString); safecall;
    function Get_Section(Index: OleVariant): AccessSection; safecall;
    function Get_GroupLevel(Index: Integer): AccessGroupLevel; safecall;
    function Get_Report: AccessReport; safecall;
    function Get_Module: Module; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Controls: Controls; safecall;
    function _NewEnum: IUnknown; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    function Get_AutoResize: WordBool; safecall;
    procedure Set_AutoResize(pRet: WordBool); safecall;
    function Get_AutoCenter: WordBool; safecall;
    procedure Set_AutoCenter(pRet: WordBool); safecall;
    function Get_PopUp: WordBool; safecall;
    procedure Set_PopUp(pRet: WordBool); safecall;
    function Get_Modal: WordBool; safecall;
    procedure Set_Modal(pRet: WordBool); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_ControlBox: WordBool; safecall;
    procedure Set_ControlBox(pRet: WordBool); safecall;
    function Get_MinMaxButtons: Byte; safecall;
    procedure Set_MinMaxButtons(pRet: Byte); safecall;
    function Get_CloseButton: WordBool; safecall;
    procedure Set_CloseButton(pRet: WordBool); safecall;
    function Get_WindowWidth: Smallint; safecall;
    procedure Set_WindowWidth(pRet: Smallint); safecall;
    function Get_WindowHeight: Smallint; safecall;
    procedure Set_WindowHeight(pRet: Smallint); safecall;
    function Get_WindowTop: Smallint; safecall;
    function Get_WindowLeft: Smallint; safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function Get_OpenArgs: OleVariant; safecall;
    procedure Set_OpenArgs(pRet: OleVariant); safecall;
    function Get_Printer: _Printer; safecall;
    procedure Set_Printer(const pRet: _Printer); safecall;
    procedure _Set_Printer(const pRet: _Printer); safecall;
    function Get_Moveable: WordBool; safecall;
    procedure Set_Moveable(pRet: WordBool); safecall;
    function Get_UseDefaultPrinter: WordBool; safecall;
    procedure Set_UseDefaultPrinter(pRet: WordBool); safecall;
    function Get_Recordset: IDispatch; safecall;
    procedure _Set_Recordset(const pRet: IDispatch); safecall;
    function Get_RecordSourceQualifier: WideString; safecall;
    procedure Set_RecordSourceQualifier(const pRet: WideString); safecall;
    function Get_Shape: WideString; safecall;
    property FormName: WideString read Get_FormName write Set_FormName;
    property RecordSource: WideString read Get_RecordSource write Set_RecordSource;
    property Filter: WideString read Get_Filter write Set_Filter;
    property FilterOn: WordBool read Get_FilterOn write Set_FilterOn;
    property OrderBy: WideString read Get_OrderBy write Set_OrderBy;
    property OrderByOn: WordBool read Get_OrderByOn write Set_OrderByOn;
    property ServerFilter: WideString read Get_ServerFilter write Set_ServerFilter;
    property Caption: WideString read Get_Caption write Set_Caption;
    property RecordLocks: Byte read Get_RecordLocks write Set_RecordLocks;
    property PageHeader: Byte read Get_PageHeader write Set_PageHeader;
    property PageFooter: Byte read Get_PageFooter write Set_PageFooter;
    property DateGrouping: Byte read Get_DateGrouping write Set_DateGrouping;
    property GrpKeepTogether: Byte read Get_GrpKeepTogether write Set_GrpKeepTogether;
    property MinButton: WordBool read Get_MinButton write Set_MinButton;
    property MaxButton: WordBool read Get_MaxButton write Set_MaxButton;
    property Width: Smallint read Get_Width write Set_Width;
    property Picture: WideString read Get_Picture write Set_Picture;
    property PictureType: Byte read Get_PictureType write Set_PictureType;
    property PictureSizeMode: Byte read Get_PictureSizeMode write Set_PictureSizeMode;
    property PictureAlignment: Byte read Get_PictureAlignment write Set_PictureAlignment;
    property PictureTiling: WordBool read Get_PictureTiling write Set_PictureTiling;
    property PicturePages: Byte read Get_PicturePages write Set_PicturePages;
    property MenuBar: WideString read Get_MenuBar write Set_MenuBar;
    property Toolbar: WideString read Get_Toolbar write Set_Toolbar;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property GridX: Smallint read Get_GridX write Set_GridX;
    property GridY: Smallint read Get_GridY write Set_GridY;
    property LayoutForPrint: WordBool read Get_LayoutForPrint write Set_LayoutForPrint;
    property FastLaserPrinting: WordBool read Get_FastLaserPrinting write Set_FastLaserPrinting;
    property HelpFile: WideString read Get_HelpFile write Set_HelpFile;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property Hwnd: Integer read Get_Hwnd write Set_Hwnd;
    property Count: Smallint read Get_Count write Set_Count;
    property Page: Integer read Get_Page write Set_Page;
    property Pages: Smallint read Get_Pages write Set_Pages;
    property LogicalPageWidth: Integer read Get_LogicalPageWidth write Set_LogicalPageWidth;
    property LogicalPageHeight: Integer read Get_LogicalPageHeight write Set_LogicalPageHeight;
    property ZoomControl: Integer read Get_ZoomControl write Set_ZoomControl;
    property HasData: Integer read Get_HasData write Set_HasData;
    property Left: Integer read Get_Left write Set_Left;
    property Top: Integer read Get_Top write Set_Top;
    property Height: Integer read Get_Height write Set_Height;
    property PrintSection: WordBool read Get_PrintSection write Set_PrintSection;
    property NextRecord: WordBool read Get_NextRecord write Set_NextRecord;
    property MoveLayout: WordBool read Get_MoveLayout write Set_MoveLayout;
    property FormatCount: Smallint read Get_FormatCount write Set_FormatCount;
    property PrintCount: Smallint read Get_PrintCount write Set_PrintCount;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Painting: WordBool read Get_Painting write Set_Painting;
    property PrtMip: OleVariant read Get_PrtMip write Set_PrtMip;
    property PrtDevMode: OleVariant read Get_PrtDevMode write Set_PrtDevMode;
    property PrtDevNames: OleVariant read Get_PrtDevNames write Set_PrtDevNames;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property CurrentX: Single read Get_CurrentX write Set_CurrentX;
    property CurrentY: Single read Get_CurrentY write Set_CurrentY;
    property ScaleHeight: Single read Get_ScaleHeight write Set_ScaleHeight;
    property ScaleLeft: Single read Get_ScaleLeft write Set_ScaleLeft;
    property ScaleMode: Smallint read Get_ScaleMode write Set_ScaleMode;
    property ScaleTop: Single read Get_ScaleTop write Set_ScaleTop;
    property ScaleWidth: Single read Get_ScaleWidth write Set_ScaleWidth;
    property FontBold: Smallint read Get_FontBold write Set_FontBold;
    property FontItalic: Smallint read Get_FontItalic write Set_FontItalic;
    property FontName: WideString read Get_FontName write Set_FontName;
    property FontSize: Smallint read Get_FontSize write Set_FontSize;
    property FontUnderline: Smallint read Get_FontUnderline write Set_FontUnderline;
    property DrawMode: Smallint read Get_DrawMode write Set_DrawMode;
    property DrawStyle: Smallint read Get_DrawStyle write Set_DrawStyle;
    property DrawWidth: Smallint read Get_DrawWidth write Set_DrawWidth;
    property FillColor: Integer read Get_FillColor write Set_FillColor;
    property FillStyle: Smallint read Get_FillStyle write Set_FillStyle;
    property _Name: WideString read Get__Name write Set__Name;
    property PaletteSource: WideString read Get_PaletteSource write Set_PaletteSource;
    property Tag: WideString read Get_Tag write Set_Tag;
    property PaintPalette: OleVariant read Get_PaintPalette write Set_PaintPalette;
    property OnMenu: WideString read Get_OnMenu write Set_OnMenu;
    property OnOpen: WideString read Get_OnOpen write Set_OnOpen;
    property OnClose: WideString read Get_OnClose write Set_OnClose;
    property OnActivate: WideString read Get_OnActivate write Set_OnActivate;
    property OnDeactivate: WideString read Get_OnDeactivate write Set_OnDeactivate;
    property OnNoData: WideString read Get_OnNoData write Set_OnNoData;
    property OnPage: WideString read Get_OnPage write Set_OnPage;
    property OnError: WideString read Get_OnError write Set_OnError;
    property Dirty: WordBool read Get_Dirty write Set_Dirty;
    property CurrentRecord: Integer read Get_CurrentRecord write Set_CurrentRecord;
    property PictureData: OleVariant read Get_PictureData write Set_PictureData;
    property PicturePalette: OleVariant read Get_PicturePalette write Set_PicturePalette;
    property HasModule: WordBool read Get_HasModule write Set_HasModule;
    property acHiddenCurrentPage: Integer read Get_acHiddenCurrentPage write Set_acHiddenCurrentPage;
    property Orientation: Byte read Get_Orientation write Set_Orientation;
    property InputParameters: WideString read Get_InputParameters write Set_InputParameters;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property ActiveControl: AccessControl read Get_ActiveControl;
    property DefaultControl[ControlType: Integer]: AccessControl read Get_DefaultControl;
    property Section[Index: OleVariant]: AccessSection read Get_Section;
    property GroupLevel[Index: Integer]: AccessGroupLevel read Get_GroupLevel;
    property Report: AccessReport read Get_Report;
    property Module: Module read Get_Module;
    property Properties: Properties read Get_Properties;
    property Controls: Controls read Get_Controls;
    property Name: WideString read Get_Name write Set_Name;
    property AutoResize: WordBool read Get_AutoResize write Set_AutoResize;
    property AutoCenter: WordBool read Get_AutoCenter write Set_AutoCenter;
    property PopUp: WordBool read Get_PopUp write Set_PopUp;
    property Modal: WordBool read Get_Modal write Set_Modal;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property ControlBox: WordBool read Get_ControlBox write Set_ControlBox;
    property MinMaxButtons: Byte read Get_MinMaxButtons write Set_MinMaxButtons;
    property CloseButton: WordBool read Get_CloseButton write Set_CloseButton;
    property WindowWidth: Smallint read Get_WindowWidth write Set_WindowWidth;
    property WindowHeight: Smallint read Get_WindowHeight write Set_WindowHeight;
    property WindowTop: Smallint read Get_WindowTop;
    property WindowLeft: Smallint read Get_WindowLeft;
    property OpenArgs: OleVariant read Get_OpenArgs write Set_OpenArgs;
    property Printer: _Printer read Get_Printer write Set_Printer;
    property Moveable: WordBool read Get_Moveable write Set_Moveable;
    property UseDefaultPrinter: WordBool read Get_UseDefaultPrinter write Set_UseDefaultPrinter;
    property Recordset: IDispatch read Get_Recordset write _Set_Recordset;
    property RecordSourceQualifier: WideString read Get_RecordSourceQualifier write Set_RecordSourceQualifier;
    property Shape: WideString read Get_Shape;
  end;

// *********************************************************************//
// DispIntf:  _Report2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {32A1C62A-D374-11D3-8D21-0050048383FB}
// *********************************************************************//
  _Report2Disp = dispinterface
    ['{32A1C62A-D374-11D3-8D21-0050048383FB}']
    property FormName: WideString dispid 39;
    property RecordSource: WideString dispid 156;
    property Filter: WideString dispid 245;
    property FilterOn: WordBool dispid 332;
    property OrderBy: WideString dispid 331;
    property OrderByOn: WordBool dispid 336;
    property ServerFilter: WideString dispid 246;
    property Caption: WideString dispid 17;
    property RecordLocks: Byte dispid 26;
    property PageHeader: Byte dispid 43;
    property PageFooter: Byte dispid 40;
    property DateGrouping: Byte dispid 282;
    property GrpKeepTogether: Byte dispid 283;
    property MinButton: WordBool dispid 95;
    property MaxButton: WordBool dispid 94;
    property Width: Smallint dispid 150;
    property Picture: WideString dispid 7;
    property PictureType: Byte dispid 341;
    property PictureSizeMode: Byte dispid 312;
    property PictureAlignment: Byte dispid 309;
    property PictureTiling: WordBool dispid 313;
    property PicturePages: Byte dispid 310;
    property MenuBar: WideString dispid 240;
    property Toolbar: WideString dispid 353;
    property ShortcutMenuBar: WideString dispid 304;
    property GridX: Smallint dispid 41;
    property GridY: Smallint dispid 42;
    property LayoutForPrint: WordBool dispid 143;
    property FastLaserPrinting: WordBool dispid 144;
    property HelpFile: WideString dispid 218;
    property HelpContextId: Integer dispid 219;
    property Hwnd: Integer dispid 192;
    property Count: Smallint dispid 195;
    property Page: Integer dispid 196;
    property Pages: Smallint dispid 197;
    property LogicalPageWidth: Integer dispid 198;
    property LogicalPageHeight: Integer dispid 199;
    property ZoomControl: Integer dispid 217;
    property HasData: Integer dispid 202;
    property Left: Integer dispid 54;
    property Top: Integer dispid 141;
    property Height: Integer dispid 44;
    property PrintSection: WordBool dispid 225;
    property NextRecord: WordBool dispid 226;
    property MoveLayout: WordBool dispid 227;
    property FormatCount: Smallint dispid 228;
    property PrintCount: Smallint dispid 229;
    property Visible: WordBool dispid 148;
    property Painting: WordBool dispid 241;
    property PrtMip: OleVariant dispid 189;
    property PrtDevMode: OleVariant dispid 190;
    property PrtDevNames: OleVariant dispid 191;
    property ForeColor: Integer dispid 204;
    property CurrentX: Single dispid 205;
    property CurrentY: Single dispid 206;
    property ScaleHeight: Single dispid 207;
    property ScaleLeft: Single dispid 208;
    property ScaleMode: Smallint dispid 209;
    property ScaleTop: Single dispid 210;
    property ScaleWidth: Single dispid 211;
    property FontBold: Smallint dispid 32;
    property FontItalic: Smallint dispid 33;
    property FontName: WideString dispid 34;
    property FontSize: Smallint dispid 35;
    property FontUnderline: Smallint dispid 36;
    property DrawMode: Smallint dispid 212;
    property DrawStyle: Smallint dispid 213;
    property DrawWidth: Smallint dispid 214;
    property FillColor: Integer dispid 216;
    property FillStyle: Smallint dispid 215;
    property _Name: WideString dispid 20;
    property PaletteSource: WideString dispid 98;
    property Tag: WideString dispid 266;
    property PaintPalette: OleVariant dispid 100;
    property OnMenu: WideString dispid 60;
    property OnOpen: WideString dispid 77;
    property OnClose: WideString dispid 78;
    property OnActivate: WideString dispid 112;
    property OnDeactivate: WideString dispid 113;
    property OnNoData: WideString dispid 121;
    property OnPage: WideString dispid 83;
    property OnError: WideString dispid 119;
    property Dirty: WordBool dispid 286;
    property CurrentRecord: Integer dispid 302;
    property PictureData: OleVariant dispid 188;
    property PicturePalette: OleVariant dispid 311;
    property HasModule: WordBool dispid 342;
    property acHiddenCurrentPage: Integer dispid 365;
    property Orientation: Byte dispid 370;
    property InputParameters: WideString dispid 66;
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property ActiveControl: AccessControl readonly dispid 2006;
    property DefaultControl[ControlType: Integer]: AccessControl readonly dispid 2150;
    procedure Circle(flags: Smallint; X: Single; Y: Single; radius: Single; color: Integer; 
                     start: Single; end_: Single; aspect: Single); dispid 2118;
    procedure Line(flags: Smallint; x1: Single; y1: Single; x2: Single; y2: Single; color: Integer); dispid 2152;
    procedure PSet(flags: Smallint; X: Single; Y: Single; color: Integer); dispid 2117;
    procedure Scale(flags: Smallint; x1: Single; y1: Single; x2: Single; y2: Single); dispid 2116;
    function TextWidth(const Expr: WideString): Single; dispid 2114;
    function TextHeight(const Expr: WideString): Single; dispid 2115;
    procedure Print(const Expr: WideString); dispid 2153;
    property Section[Index: OleVariant]: AccessSection readonly dispid 2088;
    property GroupLevel[Index: Integer]: AccessGroupLevel readonly dispid 2098;
    property Report: AccessReport readonly dispid 2097;
    property Module: Module readonly dispid 2090;
    property Properties: Properties readonly dispid 2091;
    property Controls: Controls readonly dispid 0;
    function _NewEnum: IUnknown; dispid -4;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Name: WideString dispid -2147418112;
    property AutoResize: WordBool dispid 6;
    property AutoCenter: WordBool dispid 278;
    property PopUp: WordBool dispid 90;
    property Modal: WordBool dispid 62;
    property BorderStyle: Byte dispid 9;
    property ControlBox: WordBool dispid 97;
    property MinMaxButtons: Byte dispid 328;
    property CloseButton: WordBool dispid 303;
    property WindowWidth: Smallint dispid 287;
    property WindowHeight: Smallint dispid 288;
    property WindowTop: Smallint readonly dispid 402;
    property WindowLeft: Smallint readonly dispid 403;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    property OpenArgs: OleVariant dispid 284;
    property Printer: _Printer dispid 2365;
    property Moveable: WordBool dispid 410;
    property UseDefaultPrinter: WordBool dispid 2418;
    property Recordset: IDispatch dispid 2196;
    property RecordSourceQualifier: WideString dispid 445;
    property Shape: WideString readonly dispid 2423;
  end;

// *********************************************************************//
// Interface: _AdditionalData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DBC51762-A8ED-11D3-A0DD-00C04F68712B}
// *********************************************************************//
  _AdditionalData = interface(IDispatch)
    ['{DBC51762-A8ED-11D3-A0DD-00C04F68712B}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRet: WideString); safecall;
    function Get_Item(Index: OleVariant): _AdditionalData; safecall;
    function Get_Count: Integer; safecall;
    function Add(const var_: WideString): _AdditionalData; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function _NewEnum: IUnknown; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Item[Index: OleVariant]: _AdditionalData read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _AdditionalDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DBC51762-A8ED-11D3-A0DD-00C04F68712B}
// *********************************************************************//
  _AdditionalDataDisp = dispinterface
    ['{DBC51762-A8ED-11D3-A0DD-00C04F68712B}']
    property Name: WideString dispid 20;
    property Item[Index: OleVariant]: _AdditionalData readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function Add(const var_: WideString): _AdditionalData; dispid 2191;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    function _NewEnum: IUnknown; dispid -4;
  end;

// *********************************************************************//
// Interface: _AutoCorrect
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {063A8DE5-E2C5-44EA-A90E-6D42207D25C8}
// *********************************************************************//
  _AutoCorrect = interface(IDispatch)
    ['{063A8DE5-E2C5-44EA-A90E-6D42207D25C8}']
    function Get_DisplayAutoCorrectOptions: WordBool; safecall;
    procedure Set_DisplayAutoCorrectOptions(pRet: WordBool); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property DisplayAutoCorrectOptions: WordBool read Get_DisplayAutoCorrectOptions write Set_DisplayAutoCorrectOptions;
  end;

// *********************************************************************//
// DispIntf:  _AutoCorrectDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {063A8DE5-E2C5-44EA-A90E-6D42207D25C8}
// *********************************************************************//
  _AutoCorrectDisp = dispinterface
    ['{063A8DE5-E2C5-44EA-A90E-6D42207D25C8}']
    property DisplayAutoCorrectOptions: WordBool dispid 2433;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _DependencyObjects
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {79F41340-18C4-4AA1-86EE-5CDE9D2CE600}
// *********************************************************************//
  _DependencyObjects = interface(IDispatch)
    ['{79F41340-18C4-4AA1-86EE-5CDE9D2CE600}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Item(Index: OleVariant): AccessObject; safecall;
    function Get_Count: Integer; safecall;
    function _NewEnum: IUnknown; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: AccessObject read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _DependencyObjectsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {79F41340-18C4-4AA1-86EE-5CDE9D2CE600}
// *********************************************************************//
  _DependencyObjectsDisp = dispinterface
    ['{79F41340-18C4-4AA1-86EE-5CDE9D2CE600}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Item[Index: OleVariant]: AccessObject readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function _NewEnum: IUnknown; dispid -4;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _DependencyInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D05819C6-8859-418B-A82F-18B6CB743C8E}
// *********************************************************************//
  _DependencyInfo = interface(IDispatch)
    ['{D05819C6-8859-418B-A82F-18B6CB743C8E}']
    function Get_Parent: IDispatch; safecall;
    function Get_Dependants: _DependencyObjects; safecall;
    function Get_Dependencies: _DependencyObjects; safecall;
    function Get_OutOfDateObjects: _DependencyObjects; safecall;
    function Get_InsufficientPermissions: _DependencyObjects; safecall;
    function Get_UnsupportedObjects: _DependencyObjects; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Parent: IDispatch read Get_Parent;
    property Dependants: _DependencyObjects read Get_Dependants;
    property Dependencies: _DependencyObjects read Get_Dependencies;
    property OutOfDateObjects: _DependencyObjects read Get_OutOfDateObjects;
    property InsufficientPermissions: _DependencyObjects read Get_InsufficientPermissions;
    property UnsupportedObjects: _DependencyObjects read Get_UnsupportedObjects;
  end;

// *********************************************************************//
// DispIntf:  _DependencyInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D05819C6-8859-418B-A82F-18B6CB743C8E}
// *********************************************************************//
  _DependencyInfoDisp = dispinterface
    ['{D05819C6-8859-418B-A82F-18B6CB743C8E}']
    property Parent: IDispatch readonly dispid 2087;
    property Dependants: _DependencyObjects readonly dispid 2436;
    property Dependencies: _DependencyObjects readonly dispid 2437;
    property OutOfDateObjects: _DependencyObjects readonly dispid 2438;
    property InsufficientPermissions: _DependencyObjects readonly dispid 2439;
    property UnsupportedObjects: _DependencyObjects readonly dispid 2440;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _SmartTags
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B1F7DE76-AE97-48D9-A4FD-2C172B2BD7A9}
// *********************************************************************//
  _SmartTags = interface(IDispatch)
    ['{B1F7DE76-AE97-48D9-A4FD-2C172B2BD7A9}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Item(Index: OleVariant): _SmartTag; safecall;
    function Get_Count: Integer; safecall;
    function Add(const Name: WideString): _SmartTag; safecall;
    function _NewEnum: IUnknown; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: _SmartTag read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _SmartTagsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B1F7DE76-AE97-48D9-A4FD-2C172B2BD7A9}
// *********************************************************************//
  _SmartTagsDisp = dispinterface
    ['{B1F7DE76-AE97-48D9-A4FD-2C172B2BD7A9}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Item[Index: OleVariant]: _SmartTag readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function Add(const Name: WideString): _SmartTag; dispid 2191;
    function _NewEnum: IUnknown; dispid -4;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _SmartTagAction
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1560BE9F-0718-42BE-BB2B-D6706593AC40}
// *********************************************************************//
  _SmartTagAction = interface(IDispatch)
    ['{1560BE9F-0718-42BE-BB2B-D6706593AC40}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Name: WideString; safecall;
    procedure Execute; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Name: WideString read Get_Name;
  end;

// *********************************************************************//
// DispIntf:  _SmartTagActionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1560BE9F-0718-42BE-BB2B-D6706593AC40}
// *********************************************************************//
  _SmartTagActionDisp = dispinterface
    ['{1560BE9F-0718-42BE-BB2B-D6706593AC40}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Name: WideString readonly dispid -2147418112;
    procedure Execute; dispid 2444;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _SmartTagActions
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3836C9EC-E9CB-4817-A738-50B4DD3DDD8D}
// *********************************************************************//
  _SmartTagActions = interface(IDispatch)
    ['{3836C9EC-E9CB-4817-A738-50B4DD3DDD8D}']
    function Get_Application: AccessApplication; safecall;
    function Get_Count: Integer; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Item(Index: OleVariant): _SmartTagAction; safecall;
    function _NewEnum: IUnknown; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Count: Integer read Get_Count;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: _SmartTagAction read Get_Item; default;
  end;

// *********************************************************************//
// DispIntf:  _SmartTagActionsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3836C9EC-E9CB-4817-A738-50B4DD3DDD8D}
// *********************************************************************//
  _SmartTagActionsDisp = dispinterface
    ['{3836C9EC-E9CB-4817-A738-50B4DD3DDD8D}']
    property Application: AccessApplication readonly dispid 2005;
    property Count: Integer readonly dispid 2001;
    property Parent: IDispatch readonly dispid 2087;
    property Item[Index: OleVariant]: _SmartTagAction readonly dispid 0; default;
    function _NewEnum: IUnknown; dispid -4;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _SmartTagProperty
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6A3308EA-73DF-436A-A826-41A1F02186C4}
// *********************************************************************//
  _SmartTagProperty = interface(IDispatch)
    ['{6A3308EA-73DF-436A-A826-41A1F02186C4}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRet: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRet: WideString); safecall;
    procedure Delete; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
  end;

// *********************************************************************//
// DispIntf:  _SmartTagPropertyDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6A3308EA-73DF-436A-A826-41A1F02186C4}
// *********************************************************************//
  _SmartTagPropertyDisp = dispinterface
    ['{6A3308EA-73DF-436A-A826-41A1F02186C4}']
    property Name: WideString dispid 2094;
    property Value: WideString dispid 0;
    procedure Delete; dispid 2063;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _SmartTagProperties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3A6A13FF-1162-461D-899C-768D025119FB}
// *********************************************************************//
  _SmartTagProperties = interface(IDispatch)
    ['{3A6A13FF-1162-461D-899C-768D025119FB}']
    function Get_Application: AccessApplication; safecall;
    function Get_Count: Integer; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Item(Index: OleVariant): _SmartTagProperty; safecall;
    function Add(const Name: WideString; Value: OleVariant): _SmartTagProperty; safecall;
    function _NewEnum: IUnknown; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Count: Integer read Get_Count;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: _SmartTagProperty read Get_Item; default;
  end;

// *********************************************************************//
// DispIntf:  _SmartTagPropertiesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3A6A13FF-1162-461D-899C-768D025119FB}
// *********************************************************************//
  _SmartTagPropertiesDisp = dispinterface
    ['{3A6A13FF-1162-461D-899C-768D025119FB}']
    property Application: AccessApplication readonly dispid 2005;
    property Count: Integer readonly dispid 2001;
    property Parent: IDispatch readonly dispid 2087;
    property Item[Index: OleVariant]: _SmartTagProperty readonly dispid 0; default;
    function Add(const Name: WideString; Value: OleVariant): _SmartTagProperty; dispid 2191;
    function _NewEnum: IUnknown; dispid -4;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _SmartTag
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9D2AB5D3-CD72-4A9A-A72E-2B3492CBD0AE}
// *********************************************************************//
  _SmartTag = interface(IDispatch)
    ['{9D2AB5D3-CD72-4A9A-A72E-2B3492CBD0AE}']
    function Get_Application: AccessApplication; safecall;
    function Get_Name: WideString; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Properties: _SmartTagProperties; safecall;
    function Get_SmartTagActions: _SmartTagActions; safecall;
    function Get_XML: WideString; safecall;
    procedure Delete; safecall;
    function Get_IsMissing: WordBool; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Name: WideString read Get_Name;
    property Parent: IDispatch read Get_Parent;
    property Properties: _SmartTagProperties read Get_Properties;
    property SmartTagActions: _SmartTagActions read Get_SmartTagActions;
    property XML: WideString read Get_XML;
    property IsMissing: WordBool read Get_IsMissing;
  end;

// *********************************************************************//
// DispIntf:  _SmartTagDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9D2AB5D3-CD72-4A9A-A72E-2B3492CBD0AE}
// *********************************************************************//
  _SmartTagDisp = dispinterface
    ['{9D2AB5D3-CD72-4A9A-A72E-2B3492CBD0AE}']
    property Application: AccessApplication readonly dispid 2005;
    property Name: WideString readonly dispid -2147418112;
    property Parent: IDispatch readonly dispid 2087;
    property Properties: _SmartTagProperties readonly dispid 2091;
    property SmartTagActions: _SmartTagActions readonly dispid 2442;
    property XML: WideString readonly dispid 2443;
    procedure Delete; dispid 2063;
    property IsMissing: WordBool readonly dispid 2446;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: ImportExportSpecification
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {55B0E0C9-C75D-4F42-AD20-6939C1D05B70}
// *********************************************************************//
  ImportExportSpecification = interface(IDispatch)
    ['{55B0E0C9-C75D-4F42-AD20-6939C1D05B70}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    procedure Execute(Prompt: OleVariant); safecall;
    procedure Delete; safecall;
    function Get_XML: WideString; safecall;
    procedure Set_XML(const pRet: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRet: WideString); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Name: WideString read Get_Name write Set_Name;
    property XML: WideString read Get_XML write Set_XML;
    property Description: WideString read Get_Description write Set_Description;
  end;

// *********************************************************************//
// DispIntf:  ImportExportSpecificationDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {55B0E0C9-C75D-4F42-AD20-6939C1D05B70}
// *********************************************************************//
  ImportExportSpecificationDisp = dispinterface
    ['{55B0E0C9-C75D-4F42-AD20-6939C1D05B70}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Name: WideString dispid -2147418112;
    procedure Execute(Prompt: OleVariant); dispid 2452;
    procedure Delete; dispid 2453;
    property XML: WideString dispid 2456;
    property Description: WideString dispid 2457;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: ImportExportSpecifications
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {77DC8648-F725-4371-88C3-6EB6C4894CA4}
// *********************************************************************//
  ImportExportSpecifications = interface(IDispatch)
    ['{77DC8648-F725-4371-88C3-6EB6C4894CA4}']
    function Get_Application: AccessApplication; safecall;
    function Get_Count: Integer; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Item(Index: OleVariant): ImportExportSpecification; safecall;
    function _NewEnum: IUnknown; safecall;
    function Add(const Name: WideString; const SpecificationDefinition: WideString): ImportExportSpecification; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Count: Integer read Get_Count;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: ImportExportSpecification read Get_Item; default;
  end;

// *********************************************************************//
// DispIntf:  ImportExportSpecificationsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {77DC8648-F725-4371-88C3-6EB6C4894CA4}
// *********************************************************************//
  ImportExportSpecificationsDisp = dispinterface
    ['{77DC8648-F725-4371-88C3-6EB6C4894CA4}']
    property Application: AccessApplication readonly dispid 2005;
    property Count: Integer readonly dispid 2001;
    property Parent: IDispatch readonly dispid 2087;
    property Item[Index: OleVariant]: ImportExportSpecification readonly dispid 0; default;
    function _NewEnum: IUnknown; dispid -4;
    function Add(const Name: WideString; const SpecificationDefinition: WideString): ImportExportSpecification; dispid 2455;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _Form3
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {66B22FB4-F70E-4F03-A00A-F76E9ADBBF10}
// *********************************************************************//
  _Form3 = interface(IAccessible)
    ['{66B22FB4-F70E-4F03-A00A-F76E9ADBBF10}']
    function Get_FormName: WideString; safecall;
    procedure Set_FormName(const pRet: WideString); safecall;
    function Get_RecordSource: WideString; safecall;
    procedure Set_RecordSource(const pRet: WideString); safecall;
    function Get_Filter: WideString; safecall;
    procedure Set_Filter(const pRet: WideString); safecall;
    function Get_FilterOn: WordBool; safecall;
    procedure Set_FilterOn(pRet: WordBool); safecall;
    function Get_OrderBy: WideString; safecall;
    procedure Set_OrderBy(const pRet: WideString); safecall;
    function Get_OrderByOn: WordBool; safecall;
    procedure Set_OrderByOn(pRet: WordBool); safecall;
    function Get_AllowFilters: WordBool; safecall;
    procedure Set_AllowFilters(pRet: WordBool); safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const pRet: WideString); safecall;
    function Get_DefaultView: Byte; safecall;
    procedure Set_DefaultView(pRet: Byte); safecall;
    function Get_ViewsAllowed: Byte; safecall;
    procedure Set_ViewsAllowed(pRet: Byte); safecall;
    function Get_AllowEditing: WordBool; safecall;
    procedure Set_AllowEditing(pRet: WordBool); safecall;
    function Get_DefaultEditing: Smallint; safecall;
    procedure Set_DefaultEditing(pRet: Smallint); safecall;
    function Get_AllowEdits: WordBool; safecall;
    procedure Set_AllowEdits(pRet: WordBool); safecall;
    function Get_AllowDeletions: WordBool; safecall;
    procedure Set_AllowDeletions(pRet: WordBool); safecall;
    function Get_AllowAdditions: WordBool; safecall;
    procedure Set_AllowAdditions(pRet: WordBool); safecall;
    function Get_DataEntry: WordBool; safecall;
    procedure Set_DataEntry(pRet: WordBool); safecall;
    function Get_AllowUpdating: Byte; safecall;
    procedure Set_AllowUpdating(pRet: Byte); safecall;
    function Get_RecordsetType: Byte; safecall;
    procedure Set_RecordsetType(pRet: Byte); safecall;
    function Get_RecordLocks: Byte; safecall;
    procedure Set_RecordLocks(pRet: Byte); safecall;
    function Get_ScrollBars: Byte; safecall;
    procedure Set_ScrollBars(pRet: Byte); safecall;
    function Get_RecordSelectors: WordBool; safecall;
    procedure Set_RecordSelectors(pRet: WordBool); safecall;
    function Get_NavigationButtons: WordBool; safecall;
    procedure Set_NavigationButtons(pRet: WordBool); safecall;
    function Get_DividingLines: WordBool; safecall;
    procedure Set_DividingLines(pRet: WordBool); safecall;
    function Get_AutoResize: WordBool; safecall;
    procedure Set_AutoResize(pRet: WordBool); safecall;
    function Get_AutoCenter: WordBool; safecall;
    procedure Set_AutoCenter(pRet: WordBool); safecall;
    function Get_PopUp: WordBool; safecall;
    procedure Set_PopUp(pRet: WordBool); safecall;
    function Get_Modal: WordBool; safecall;
    procedure Set_Modal(pRet: WordBool); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_ControlBox: WordBool; safecall;
    procedure Set_ControlBox(pRet: WordBool); safecall;
    function Get_MinButton: WordBool; safecall;
    procedure Set_MinButton(pRet: WordBool); safecall;
    function Get_MaxButton: WordBool; safecall;
    procedure Set_MaxButton(pRet: WordBool); safecall;
    function Get_MinMaxButtons: Byte; safecall;
    procedure Set_MinMaxButtons(pRet: Byte); safecall;
    function Get_CloseButton: WordBool; safecall;
    procedure Set_CloseButton(pRet: WordBool); safecall;
    function Get_WhatsThisButton: WordBool; safecall;
    procedure Set_WhatsThisButton(pRet: WordBool); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Picture: WideString; safecall;
    procedure Set_Picture(const pRet: WideString); safecall;
    function Get_PictureType: Byte; safecall;
    procedure Set_PictureType(pRet: Byte); safecall;
    function Get_PictureSizeMode: Byte; safecall;
    procedure Set_PictureSizeMode(pRet: Byte); safecall;
    function Get_PictureAlignment: Byte; safecall;
    procedure Set_PictureAlignment(pRet: Byte); safecall;
    function Get_PictureTiling: WordBool; safecall;
    procedure Set_PictureTiling(pRet: WordBool); safecall;
    function Get_Cycle: Byte; safecall;
    procedure Set_Cycle(pRet: Byte); safecall;
    function Get_MenuBar: WideString; safecall;
    procedure Set_MenuBar(const pRet: WideString); safecall;
    function Get_Toolbar: WideString; safecall;
    procedure Set_Toolbar(const pRet: WideString); safecall;
    function Get_ShortcutMenu: WordBool; safecall;
    procedure Set_ShortcutMenu(pRet: WordBool); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_GridX: Smallint; safecall;
    procedure Set_GridX(pRet: Smallint); safecall;
    function Get_GridY: Smallint; safecall;
    procedure Set_GridY(pRet: Smallint); safecall;
    function Get_LayoutForPrint: WordBool; safecall;
    procedure Set_LayoutForPrint(pRet: WordBool); safecall;
    function Get_FastLaserPrinting: WordBool; safecall;
    procedure Set_FastLaserPrinting(pRet: WordBool); safecall;
    function Get_HelpFile: WideString; safecall;
    procedure Set_HelpFile(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_RowHeight: Smallint; safecall;
    procedure Set_RowHeight(pRet: Smallint); safecall;
    function Get_DatasheetFontName: WideString; safecall;
    procedure Set_DatasheetFontName(const pRet: WideString); safecall;
    function Get_DatasheetFontHeight: Smallint; safecall;
    procedure Set_DatasheetFontHeight(pRet: Smallint); safecall;
    function Get_DatasheetFontWeight: Smallint; safecall;
    procedure Set_DatasheetFontWeight(pRet: Smallint); safecall;
    function Get_DatasheetFontItalic: WordBool; safecall;
    procedure Set_DatasheetFontItalic(pRet: WordBool); safecall;
    function Get_DatasheetFontUnderline: WordBool; safecall;
    procedure Set_DatasheetFontUnderline(pRet: WordBool); safecall;
    function Get_TabularCharSet: Byte; safecall;
    procedure Set_TabularCharSet(pRet: Byte); safecall;
    function Get_DatasheetGridlinesBehavior: Byte; safecall;
    procedure Set_DatasheetGridlinesBehavior(pRet: Byte); safecall;
    function Get_DatasheetGridlinesColor: Integer; safecall;
    procedure Set_DatasheetGridlinesColor(pRet: Integer); safecall;
    function Get_DatasheetCellsEffect: Byte; safecall;
    procedure Set_DatasheetCellsEffect(pRet: Byte); safecall;
    function Get_DatasheetForeColor: Integer; safecall;
    procedure Set_DatasheetForeColor(pRet: Integer); safecall;
    function Get_ShowGrid: WordBool; safecall;
    procedure Set_ShowGrid(pRet: WordBool); safecall;
    function Get_DatasheetBackColor: Integer; safecall;
    procedure Set_DatasheetBackColor(pRet: Integer); safecall;
    function Get_Hwnd: Integer; safecall;
    procedure Set_Hwnd(pRet: Integer); safecall;
    function Get_Count: Smallint; safecall;
    procedure Set_Count(pRet: Smallint); safecall;
    function Get_Page: Integer; safecall;
    procedure Set_Page(pRet: Integer); safecall;
    function Get_Pages: Smallint; safecall;
    procedure Set_Pages(pRet: Smallint); safecall;
    function Get_LogicalPageWidth: Integer; safecall;
    procedure Set_LogicalPageWidth(pRet: Integer); safecall;
    function Get_LogicalPageHeight: Integer; safecall;
    procedure Set_LogicalPageHeight(pRet: Integer); safecall;
    function Get_ZoomControl: Integer; safecall;
    procedure Set_ZoomControl(pRet: Integer); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_Painting: WordBool; safecall;
    procedure Set_Painting(pRet: WordBool); safecall;
    function Get_PrtMip: OleVariant; safecall;
    procedure Set_PrtMip(pRet: OleVariant); safecall;
    function Get_PrtDevMode: OleVariant; safecall;
    procedure Set_PrtDevMode(pRet: OleVariant); safecall;
    function Get_PrtDevNames: OleVariant; safecall;
    procedure Set_PrtDevNames(pRet: OleVariant); safecall;
    function Get_FrozenColumns: Smallint; safecall;
    procedure Set_FrozenColumns(pRet: Smallint); safecall;
    function Get_Bookmark: OleVariant; safecall;
    procedure Set_Bookmark(pRet: OleVariant); safecall;
    function Get_TabularFamily: Byte; safecall;
    procedure Set_TabularFamily(pRet: Byte); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_PaletteSource: WideString; safecall;
    procedure Set_PaletteSource(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_PaintPalette: OleVariant; safecall;
    procedure Set_PaintPalette(pRet: OleVariant); safecall;
    function Get_OnMenu: WideString; safecall;
    procedure Set_OnMenu(const pRet: WideString); safecall;
    function Get_OpenArgs: OleVariant; safecall;
    procedure Set_OpenArgs(pRet: OleVariant); safecall;
    function Get_ConnectSynch: Smallint; safecall;
    procedure Set_ConnectSynch(pRet: Smallint); safecall;
    function Get_OnCurrent: WideString; safecall;
    procedure Set_OnCurrent(const pRet: WideString); safecall;
    function Get_OnInsert: WideString; safecall;
    procedure Set_OnInsert(const pRet: WideString); safecall;
    function Get_BeforeInsert: WideString; safecall;
    procedure Set_BeforeInsert(const pRet: WideString); safecall;
    function Get_AfterInsert: WideString; safecall;
    procedure Set_AfterInsert(const pRet: WideString); safecall;
    function Get_BeforeUpdate: WideString; safecall;
    procedure Set_BeforeUpdate(const pRet: WideString); safecall;
    function Get_AfterUpdate: WideString; safecall;
    procedure Set_AfterUpdate(const pRet: WideString); safecall;
    function Get_OnDirty: WideString; safecall;
    procedure Set_OnDirty(const pRet: WideString); safecall;
    function Get_OnDelete: WideString; safecall;
    procedure Set_OnDelete(const pRet: WideString); safecall;
    function Get_BeforeDelConfirm: WideString; safecall;
    procedure Set_BeforeDelConfirm(const pRet: WideString); safecall;
    function Get_AfterDelConfirm: WideString; safecall;
    procedure Set_AfterDelConfirm(const pRet: WideString); safecall;
    function Get_OnOpen: WideString; safecall;
    procedure Set_OnOpen(const pRet: WideString); safecall;
    function Get_OnLoad: WideString; safecall;
    procedure Set_OnLoad(const pRet: WideString); safecall;
    function Get_OnResize: WideString; safecall;
    procedure Set_OnResize(const pRet: WideString); safecall;
    function Get_OnUnload: WideString; safecall;
    procedure Set_OnUnload(const pRet: WideString); safecall;
    function Get_OnClose: WideString; safecall;
    procedure Set_OnClose(const pRet: WideString); safecall;
    function Get_OnActivate: WideString; safecall;
    procedure Set_OnActivate(const pRet: WideString); safecall;
    function Get_OnDeactivate: WideString; safecall;
    procedure Set_OnDeactivate(const pRet: WideString); safecall;
    function Get_OnGotFocus: WideString; safecall;
    procedure Set_OnGotFocus(const pRet: WideString); safecall;
    function Get_OnLostFocus: WideString; safecall;
    procedure Set_OnLostFocus(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_OnKeyDown: WideString; safecall;
    procedure Set_OnKeyDown(const pRet: WideString); safecall;
    function Get_OnKeyUp: WideString; safecall;
    procedure Set_OnKeyUp(const pRet: WideString); safecall;
    function Get_OnKeyPress: WideString; safecall;
    procedure Set_OnKeyPress(const pRet: WideString); safecall;
    function Get_KeyPreview: WordBool; safecall;
    procedure Set_KeyPreview(pRet: WordBool); safecall;
    function Get_OnError: WideString; safecall;
    procedure Set_OnError(const pRet: WideString); safecall;
    function Get_OnFilter: WideString; safecall;
    procedure Set_OnFilter(const pRet: WideString); safecall;
    function Get_OnApplyFilter: WideString; safecall;
    procedure Set_OnApplyFilter(const pRet: WideString); safecall;
    function Get_OnTimer: WideString; safecall;
    procedure Set_OnTimer(const pRet: WideString); safecall;
    function Get_TimerInterval: Integer; safecall;
    procedure Set_TimerInterval(pRet: Integer); safecall;
    function Get_Dirty: WordBool; safecall;
    procedure Set_Dirty(pRet: WordBool); safecall;
    function Get_WindowWidth: Smallint; safecall;
    procedure Set_WindowWidth(pRet: Smallint); safecall;
    function Get_WindowHeight: Smallint; safecall;
    procedure Set_WindowHeight(pRet: Smallint); safecall;
    function Get_CurrentView: Smallint; safecall;
    procedure Set_CurrentView(pRet: Smallint); safecall;
    function Get_CurrentSectionTop: Smallint; safecall;
    procedure Set_CurrentSectionTop(pRet: Smallint); safecall;
    function Get_CurrentSectionLeft: Smallint; safecall;
    procedure Set_CurrentSectionLeft(pRet: Smallint); safecall;
    function Get_SelLeft: Integer; safecall;
    procedure Set_SelLeft(pRet: Integer); safecall;
    function Get_SelTop: Integer; safecall;
    procedure Set_SelTop(pRet: Integer); safecall;
    function Get_SelWidth: Integer; safecall;
    procedure Set_SelWidth(pRet: Integer); safecall;
    function Get_SelHeight: Integer; safecall;
    procedure Set_SelHeight(pRet: Integer); safecall;
    function Get_CurrentRecord: Integer; safecall;
    procedure Set_CurrentRecord(pRet: Integer); safecall;
    function Get_PictureData: OleVariant; safecall;
    procedure Set_PictureData(pRet: OleVariant); safecall;
    function Get_InsideHeight: Integer; safecall;
    procedure Set_InsideHeight(pRet: Integer); safecall;
    function Get_InsideWidth: Integer; safecall;
    procedure Set_InsideWidth(pRet: Integer); safecall;
    function Get_PicturePalette: OleVariant; safecall;
    procedure Set_PicturePalette(pRet: OleVariant); safecall;
    function Get_HasModule: WordBool; safecall;
    procedure Set_HasModule(pRet: WordBool); safecall;
    function Get_acHiddenCurrentPage: Integer; safecall;
    procedure Set_acHiddenCurrentPage(pRet: Integer); safecall;
    function Get_Orientation: Byte; safecall;
    procedure Set_Orientation(pRet: Byte); safecall;
    function Get_AllowDesignChanges: WordBool; safecall;
    procedure Set_AllowDesignChanges(pRet: WordBool); safecall;
    function Get_ServerFilter: WideString; safecall;
    procedure Set_ServerFilter(const pRet: WideString); safecall;
    function Get_ServerFilterByForm: WordBool; safecall;
    procedure Set_ServerFilterByForm(pRet: WordBool); safecall;
    function Get_MaxRecords: Integer; safecall;
    procedure Set_MaxRecords(pRet: Integer); safecall;
    function Get_UniqueTable: WideString; safecall;
    procedure Set_UniqueTable(const pRet: WideString); safecall;
    function Get_ResyncCommand: WideString; safecall;
    procedure Set_ResyncCommand(const pRet: WideString); safecall;
    function Get_InputParameters: WideString; safecall;
    procedure Set_InputParameters(const pRet: WideString); safecall;
    function Get_MaxRecButton: WordBool; safecall;
    procedure Set_MaxRecButton(pRet: WordBool); safecall;
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_NewRecord: Smallint; safecall;
    procedure Undo; safecall;
    function Get_ActiveControl: AccessControl; safecall;
    function Get_DefaultControl(ControlType: Integer): AccessControl; safecall;
    function Get_Dynaset: IDispatch; safecall;
    function Get_RecordsetClone: IDispatch; safecall;
    function Get_Recordset: IDispatch; safecall;
    procedure _Set_Recordset(const pRet: IDispatch); safecall;
    function Get__SectionOld(Index: OleVariant): AccessSection; safecall;
    function Get_Form: AccessForm; safecall;
    function Get_Module: Module; safecall;
    function Get_Properties: Properties; safecall;
    function Get_ConnectControl: AccessControl; safecall;
    procedure Recalc; safecall;
    procedure Requery; safecall;
    procedure Refresh; safecall;
    procedure Repaint; safecall;
    procedure GoToPage(PageNumber: Integer; Right: Integer; Down: Integer); safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Controls; safecall;
    function _NewEnum: IUnknown; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    function Get_SubdatasheetHeight: Smallint; safecall;
    procedure Set_SubdatasheetHeight(pRet: Smallint); safecall;
    function Get_SubdatasheetExpanded: WordBool; safecall;
    procedure Set_SubdatasheetExpanded(pRet: WordBool); safecall;
    function Get_DatasheetBorderLineStyle: Byte; safecall;
    procedure Set_DatasheetBorderLineStyle(pRet: Byte); safecall;
    function Get_DatasheetColumnHeaderUnderlineStyle: Byte; safecall;
    procedure Set_DatasheetColumnHeaderUnderlineStyle(pRet: Byte); safecall;
    function Get_HorizontalDatasheetGridlineStyle: Byte; safecall;
    procedure Set_HorizontalDatasheetGridlineStyle(pRet: Byte); safecall;
    function Get_VerticalDatasheetGridlineStyle: Byte; safecall;
    procedure Set_VerticalDatasheetGridlineStyle(pRet: Byte); safecall;
    function Get_WindowTop: Smallint; safecall;
    function Get_WindowLeft: Smallint; safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function Get_OnUndo: WideString; safecall;
    procedure Set_OnUndo(const pRet: WideString); safecall;
    function Get_OnRecordExit: WideString; safecall;
    procedure Set_OnRecordExit(const pRet: WideString); safecall;
    function Get_PivotTable: IDispatch; safecall;
    function Get_ChartSpace: IDispatch; safecall;
    function Get_Printer: _Printer; safecall;
    procedure Set_Printer(const pRet: _Printer); safecall;
    procedure _Set_Printer(const pRet: _Printer); safecall;
    function Get_Moveable: WordBool; safecall;
    procedure Set_Moveable(pRet: WordBool); safecall;
    function Get_BeginBatchEdit: WideString; safecall;
    procedure Set_BeginBatchEdit(const pRet: WideString); safecall;
    function Get_UndoBatchEdit: WideString; safecall;
    procedure Set_UndoBatchEdit(const pRet: WideString); safecall;
    function Get_BeforeBeginTransaction: WideString; safecall;
    procedure Set_BeforeBeginTransaction(const pRet: WideString); safecall;
    function Get_AfterBeginTransaction: WideString; safecall;
    procedure Set_AfterBeginTransaction(const pRet: WideString); safecall;
    function Get_BeforeCommitTransaction: WideString; safecall;
    procedure Set_BeforeCommitTransaction(const pRet: WideString); safecall;
    function Get_AfterCommitTransaction: WideString; safecall;
    procedure Set_AfterCommitTransaction(const pRet: WideString); safecall;
    function Get_RollbackTransaction: WideString; safecall;
    procedure Set_RollbackTransaction(const pRet: WideString); safecall;
    function Get_AllowFormView: WordBool; safecall;
    procedure Set_AllowFormView(pRet: WordBool); safecall;
    function Get_AllowDatasheetView: WordBool; safecall;
    procedure Set_AllowDatasheetView(pRet: WordBool); safecall;
    function Get_AllowPivotTableView: WordBool; safecall;
    procedure Set_AllowPivotTableView(pRet: WordBool); safecall;
    function Get_AllowPivotChartView: WordBool; safecall;
    procedure Set_AllowPivotChartView(pRet: WordBool); safecall;
    function Get_OnConnect: WideString; safecall;
    procedure Set_OnConnect(const pRet: WideString); safecall;
    function Get_OnDisconnect: WideString; safecall;
    procedure Set_OnDisconnect(const pRet: WideString); safecall;
    function Get_PivotTableChange: WideString; safecall;
    procedure Set_PivotTableChange(const pRet: WideString); safecall;
    function Get_Query: WideString; safecall;
    procedure Set_Query(const pRet: WideString); safecall;
    function Get_BeforeQuery: WideString; safecall;
    procedure Set_BeforeQuery(const pRet: WideString); safecall;
    function Get_SelectionChange: WideString; safecall;
    procedure Set_SelectionChange(const pRet: WideString); safecall;
    function Get_CommandBeforeExecute: WideString; safecall;
    procedure Set_CommandBeforeExecute(const pRet: WideString); safecall;
    function Get_CommandChecked: WideString; safecall;
    procedure Set_CommandChecked(const pRet: WideString); safecall;
    function Get_CommandEnabled: WideString; safecall;
    procedure Set_CommandEnabled(const pRet: WideString); safecall;
    function Get_CommandExecute: WideString; safecall;
    procedure Set_CommandExecute(const pRet: WideString); safecall;
    function Get_DataSetChange: WideString; safecall;
    procedure Set_DataSetChange(const pRet: WideString); safecall;
    function Get_BeforeScreenTip: WideString; safecall;
    procedure Set_BeforeScreenTip(const pRet: WideString); safecall;
    function Get_AfterFinalRender: WideString; safecall;
    procedure Set_AfterFinalRender(const pRet: WideString); safecall;
    function Get_AfterRender: WideString; safecall;
    procedure Set_AfterRender(const pRet: WideString); safecall;
    function Get_AfterLayout: WideString; safecall;
    procedure Set_AfterLayout(const pRet: WideString); safecall;
    function Get_BeforeRender: WideString; safecall;
    procedure Set_BeforeRender(const pRet: WideString); safecall;
    function Get_MouseWheel: WideString; safecall;
    procedure Set_MouseWheel(const pRet: WideString); safecall;
    function Get_ViewChange: WideString; safecall;
    procedure Set_ViewChange(const pRet: WideString); safecall;
    function Get_DataChange: WideString; safecall;
    procedure Set_DataChange(const pRet: WideString); safecall;
    function Get_FetchDefaults: WordBool; safecall;
    procedure Set_FetchDefaults(pRet: WordBool); safecall;
    function Get_BatchUpdates: WordBool; safecall;
    procedure Set_BatchUpdates(pRet: WordBool); safecall;
    function Get_CommitOnClose: Byte; safecall;
    procedure Set_CommitOnClose(pRet: Byte); safecall;
    function Get_CommitOnNavigation: WordBool; safecall;
    procedure Set_CommitOnNavigation(pRet: WordBool); safecall;
    function Get_UseDefaultPrinter: WordBool; safecall;
    procedure Set_UseDefaultPrinter(pRet: WordBool); safecall;
    function Get_RecordSourceQualifier: WideString; safecall;
    procedure Set_RecordSourceQualifier(const pRet: WideString); safecall;
    function Get_FilterOnLoad: WordBool; safecall;
    procedure Set_FilterOnLoad(pRet: WordBool); safecall;
    function Get_OrderByOnLoad: WordBool; safecall;
    procedure Set_OrderByOnLoad(pRet: WordBool); safecall;
    function Get_SplitFormOrientation: AcSplitFormOrientation; safecall;
    procedure Set_SplitFormOrientation(pRet: AcSplitFormOrientation); safecall;
    function Get_SplitFormDatasheet: AcSplitFormDatasheet; safecall;
    procedure Set_SplitFormDatasheet(pRet: AcSplitFormDatasheet); safecall;
    function Get_SplitFormSplitterBar: WordBool; safecall;
    procedure Set_SplitFormSplitterBar(pRet: WordBool); safecall;
    function Get_SplitFormPrinting: AcSplitFormPrinting; safecall;
    procedure Set_SplitFormPrinting(pRet: AcSplitFormPrinting); safecall;
    function Get_SplitFormSplitterBarSave: WordBool; safecall;
    procedure Set_SplitFormSplitterBarSave(pRet: WordBool); safecall;
    function Get_NavigationCaption: WideString; safecall;
    procedure Set_NavigationCaption(const pRet: WideString); safecall;
    function Get_OnCurrentMacro: WideString; safecall;
    procedure Set_OnCurrentMacro(const pRet: WideString); safecall;
    function Get_BeforeInsertMacro: WideString; safecall;
    procedure Set_BeforeInsertMacro(const pRet: WideString); safecall;
    function Get_AfterInsertMacro: WideString; safecall;
    procedure Set_AfterInsertMacro(const pRet: WideString); safecall;
    function Get_BeforeUpdateMacro: WideString; safecall;
    procedure Set_BeforeUpdateMacro(const pRet: WideString); safecall;
    function Get_AfterUpdateMacro: WideString; safecall;
    procedure Set_AfterUpdateMacro(const pRet: WideString); safecall;
    function Get_OnDirtyMacro: WideString; safecall;
    procedure Set_OnDirtyMacro(const pRet: WideString); safecall;
    function Get_OnDeleteMacro: WideString; safecall;
    procedure Set_OnDeleteMacro(const pRet: WideString); safecall;
    function Get_BeforeDelConfirmMacro: WideString; safecall;
    procedure Set_BeforeDelConfirmMacro(const pRet: WideString); safecall;
    function Get_AfterDelConfirmMacro: WideString; safecall;
    procedure Set_AfterDelConfirmMacro(const pRet: WideString); safecall;
    function Get_OnOpenMacro: WideString; safecall;
    procedure Set_OnOpenMacro(const pRet: WideString); safecall;
    function Get_OnLoadMacro: WideString; safecall;
    procedure Set_OnLoadMacro(const pRet: WideString); safecall;
    function Get_OnResizeMacro: WideString; safecall;
    procedure Set_OnResizeMacro(const pRet: WideString); safecall;
    function Get_OnUnloadMacro: WideString; safecall;
    procedure Set_OnUnloadMacro(const pRet: WideString); safecall;
    function Get_OnCloseMacro: WideString; safecall;
    procedure Set_OnCloseMacro(const pRet: WideString); safecall;
    function Get_OnActivateMacro: WideString; safecall;
    procedure Set_OnActivateMacro(const pRet: WideString); safecall;
    function Get_OnDeactivateMacro: WideString; safecall;
    procedure Set_OnDeactivateMacro(const pRet: WideString); safecall;
    function Get_OnGotFocusMacro: WideString; safecall;
    procedure Set_OnGotFocusMacro(const pRet: WideString); safecall;
    function Get_OnLostFocusMacro: WideString; safecall;
    procedure Set_OnLostFocusMacro(const pRet: WideString); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyDownMacro: WideString; safecall;
    procedure Set_OnKeyDownMacro(const pRet: WideString); safecall;
    function Get_OnKeyUpMacro: WideString; safecall;
    procedure Set_OnKeyUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyPressMacro: WideString; safecall;
    procedure Set_OnKeyPressMacro(const pRet: WideString); safecall;
    function Get_OnErrorMacro: WideString; safecall;
    procedure Set_OnErrorMacro(const pRet: WideString); safecall;
    function Get_OnFilterMacro: WideString; safecall;
    procedure Set_OnFilterMacro(const pRet: WideString); safecall;
    function Get_OnApplyFilterMacro: WideString; safecall;
    procedure Set_OnApplyFilterMacro(const pRet: WideString); safecall;
    function Get_OnTimerMacro: WideString; safecall;
    procedure Set_OnTimerMacro(const pRet: WideString); safecall;
    function Get_OnUndoMacro: WideString; safecall;
    procedure Set_OnUndoMacro(const pRet: WideString); safecall;
    function Get_OnRecordExitMacro: WideString; safecall;
    procedure Set_OnRecordExitMacro(const pRet: WideString); safecall;
    function Get_BeginBatchEditMacro: WideString; safecall;
    procedure Set_BeginBatchEditMacro(const pRet: WideString); safecall;
    function Get_UndoBatchEditMacro: WideString; safecall;
    procedure Set_UndoBatchEditMacro(const pRet: WideString); safecall;
    function Get_BeforeBeginTransactionMacro: WideString; safecall;
    procedure Set_BeforeBeginTransactionMacro(const pRet: WideString); safecall;
    function Get_AfterBeginTransactionMacro: WideString; safecall;
    procedure Set_AfterBeginTransactionMacro(const pRet: WideString); safecall;
    function Get_BeforeCommitTransactionMacro: WideString; safecall;
    procedure Set_BeforeCommitTransactionMacro(const pRet: WideString); safecall;
    function Get_AfterCommitTransactionMacro: WideString; safecall;
    procedure Set_AfterCommitTransactionMacro(const pRet: WideString); safecall;
    function Get_RollbackTransactionMacro: WideString; safecall;
    procedure Set_RollbackTransactionMacro(const pRet: WideString); safecall;
    function Get_OnConnectMacro: WideString; safecall;
    procedure Set_OnConnectMacro(const pRet: WideString); safecall;
    function Get_OnDisconnectMacro: WideString; safecall;
    procedure Set_OnDisconnectMacro(const pRet: WideString); safecall;
    function Get_PivotTableChangeMacro: WideString; safecall;
    procedure Set_PivotTableChangeMacro(const pRet: WideString); safecall;
    function Get_QueryMacro: WideString; safecall;
    procedure Set_QueryMacro(const pRet: WideString); safecall;
    function Get_BeforeQueryMacro: WideString; safecall;
    procedure Set_BeforeQueryMacro(const pRet: WideString); safecall;
    function Get_SelectionChangeMacro: WideString; safecall;
    procedure Set_SelectionChangeMacro(const pRet: WideString); safecall;
    function Get_CommandBeforeExecuteMacro: WideString; safecall;
    procedure Set_CommandBeforeExecuteMacro(const pRet: WideString); safecall;
    function Get_CommandCheckedMacro: WideString; safecall;
    procedure Set_CommandCheckedMacro(const pRet: WideString); safecall;
    function Get_CommandEnabledMacro: WideString; safecall;
    procedure Set_CommandEnabledMacro(const pRet: WideString); safecall;
    function Get_CommandExecuteMacro: WideString; safecall;
    procedure Set_CommandExecuteMacro(const pRet: WideString); safecall;
    function Get_DataSetChangeMacro: WideString; safecall;
    procedure Set_DataSetChangeMacro(const pRet: WideString); safecall;
    function Get_BeforeScreenTipMacro: WideString; safecall;
    procedure Set_BeforeScreenTipMacro(const pRet: WideString); safecall;
    function Get_AfterFinalRenderMacro: WideString; safecall;
    procedure Set_AfterFinalRenderMacro(const pRet: WideString); safecall;
    function Get_AfterRenderMacro: WideString; safecall;
    procedure Set_AfterRenderMacro(const pRet: WideString); safecall;
    function Get_AfterLayoutMacro: WideString; safecall;
    procedure Set_AfterLayoutMacro(const pRet: WideString); safecall;
    function Get_BeforeRenderMacro: WideString; safecall;
    procedure Set_BeforeRenderMacro(const pRet: WideString); safecall;
    function Get_MouseWheelMacro: WideString; safecall;
    procedure Set_MouseWheelMacro(const pRet: WideString); safecall;
    function Get_ViewChangeMacro: WideString; safecall;
    procedure Set_ViewChangeMacro(const pRet: WideString); safecall;
    function Get_DataChangeMacro: WideString; safecall;
    procedure Set_DataChangeMacro(const pRet: WideString); safecall;
    function Get_AllowLayoutView: WordBool; safecall;
    procedure Set_AllowLayoutView(pRet: WordBool); safecall;
    function Get_DatasheetAlternateBackColor: Integer; safecall;
    procedure Set_DatasheetAlternateBackColor(pRet: Integer); safecall;
    function Get_DisplayOnSharePointSite: Byte; safecall;
    procedure Set_DisplayOnSharePointSite(pRet: Byte); safecall;
    function Get_SplitFormSize: Integer; safecall;
    procedure Set_SplitFormSize(pRet: Integer); safecall;
    function Get_Section(Index: OleVariant): _Section; safecall;
    function Get_RibbonName: WideString; safecall;
    procedure Set_RibbonName(const pRet: WideString); safecall;
    function Get_FitToScreen: WordBool; safecall;
    procedure Set_FitToScreen(pRet: WordBool); safecall;
    property FormName: WideString read Get_FormName write Set_FormName;
    property RecordSource: WideString read Get_RecordSource write Set_RecordSource;
    property Filter: WideString read Get_Filter write Set_Filter;
    property FilterOn: WordBool read Get_FilterOn write Set_FilterOn;
    property OrderBy: WideString read Get_OrderBy write Set_OrderBy;
    property OrderByOn: WordBool read Get_OrderByOn write Set_OrderByOn;
    property AllowFilters: WordBool read Get_AllowFilters write Set_AllowFilters;
    property Caption: WideString read Get_Caption write Set_Caption;
    property DefaultView: Byte read Get_DefaultView write Set_DefaultView;
    property ViewsAllowed: Byte read Get_ViewsAllowed write Set_ViewsAllowed;
    property AllowEditing: WordBool read Get_AllowEditing write Set_AllowEditing;
    property DefaultEditing: Smallint read Get_DefaultEditing write Set_DefaultEditing;
    property AllowEdits: WordBool read Get_AllowEdits write Set_AllowEdits;
    property AllowDeletions: WordBool read Get_AllowDeletions write Set_AllowDeletions;
    property AllowAdditions: WordBool read Get_AllowAdditions write Set_AllowAdditions;
    property DataEntry: WordBool read Get_DataEntry write Set_DataEntry;
    property AllowUpdating: Byte read Get_AllowUpdating write Set_AllowUpdating;
    property RecordsetType: Byte read Get_RecordsetType write Set_RecordsetType;
    property RecordLocks: Byte read Get_RecordLocks write Set_RecordLocks;
    property ScrollBars: Byte read Get_ScrollBars write Set_ScrollBars;
    property RecordSelectors: WordBool read Get_RecordSelectors write Set_RecordSelectors;
    property NavigationButtons: WordBool read Get_NavigationButtons write Set_NavigationButtons;
    property DividingLines: WordBool read Get_DividingLines write Set_DividingLines;
    property AutoResize: WordBool read Get_AutoResize write Set_AutoResize;
    property AutoCenter: WordBool read Get_AutoCenter write Set_AutoCenter;
    property PopUp: WordBool read Get_PopUp write Set_PopUp;
    property Modal: WordBool read Get_Modal write Set_Modal;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property ControlBox: WordBool read Get_ControlBox write Set_ControlBox;
    property MinButton: WordBool read Get_MinButton write Set_MinButton;
    property MaxButton: WordBool read Get_MaxButton write Set_MaxButton;
    property MinMaxButtons: Byte read Get_MinMaxButtons write Set_MinMaxButtons;
    property CloseButton: WordBool read Get_CloseButton write Set_CloseButton;
    property WhatsThisButton: WordBool read Get_WhatsThisButton write Set_WhatsThisButton;
    property Width: Smallint read Get_Width write Set_Width;
    property Picture: WideString read Get_Picture write Set_Picture;
    property PictureType: Byte read Get_PictureType write Set_PictureType;
    property PictureSizeMode: Byte read Get_PictureSizeMode write Set_PictureSizeMode;
    property PictureAlignment: Byte read Get_PictureAlignment write Set_PictureAlignment;
    property PictureTiling: WordBool read Get_PictureTiling write Set_PictureTiling;
    property Cycle: Byte read Get_Cycle write Set_Cycle;
    property MenuBar: WideString read Get_MenuBar write Set_MenuBar;
    property Toolbar: WideString read Get_Toolbar write Set_Toolbar;
    property ShortcutMenu: WordBool read Get_ShortcutMenu write Set_ShortcutMenu;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property GridX: Smallint read Get_GridX write Set_GridX;
    property GridY: Smallint read Get_GridY write Set_GridY;
    property LayoutForPrint: WordBool read Get_LayoutForPrint write Set_LayoutForPrint;
    property FastLaserPrinting: WordBool read Get_FastLaserPrinting write Set_FastLaserPrinting;
    property HelpFile: WideString read Get_HelpFile write Set_HelpFile;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property RowHeight: Smallint read Get_RowHeight write Set_RowHeight;
    property DatasheetFontName: WideString read Get_DatasheetFontName write Set_DatasheetFontName;
    property DatasheetFontHeight: Smallint read Get_DatasheetFontHeight write Set_DatasheetFontHeight;
    property DatasheetFontWeight: Smallint read Get_DatasheetFontWeight write Set_DatasheetFontWeight;
    property DatasheetFontItalic: WordBool read Get_DatasheetFontItalic write Set_DatasheetFontItalic;
    property DatasheetFontUnderline: WordBool read Get_DatasheetFontUnderline write Set_DatasheetFontUnderline;
    property TabularCharSet: Byte read Get_TabularCharSet write Set_TabularCharSet;
    property DatasheetGridlinesBehavior: Byte read Get_DatasheetGridlinesBehavior write Set_DatasheetGridlinesBehavior;
    property DatasheetGridlinesColor: Integer read Get_DatasheetGridlinesColor write Set_DatasheetGridlinesColor;
    property DatasheetCellsEffect: Byte read Get_DatasheetCellsEffect write Set_DatasheetCellsEffect;
    property DatasheetForeColor: Integer read Get_DatasheetForeColor write Set_DatasheetForeColor;
    property ShowGrid: WordBool read Get_ShowGrid write Set_ShowGrid;
    property DatasheetBackColor: Integer read Get_DatasheetBackColor write Set_DatasheetBackColor;
    property Hwnd: Integer read Get_Hwnd write Set_Hwnd;
    property Count: Smallint read Get_Count write Set_Count;
    property Page: Integer read Get_Page write Set_Page;
    property Pages: Smallint read Get_Pages write Set_Pages;
    property LogicalPageWidth: Integer read Get_LogicalPageWidth write Set_LogicalPageWidth;
    property LogicalPageHeight: Integer read Get_LogicalPageHeight write Set_LogicalPageHeight;
    property ZoomControl: Integer read Get_ZoomControl write Set_ZoomControl;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Painting: WordBool read Get_Painting write Set_Painting;
    property PrtMip: OleVariant read Get_PrtMip write Set_PrtMip;
    property PrtDevMode: OleVariant read Get_PrtDevMode write Set_PrtDevMode;
    property PrtDevNames: OleVariant read Get_PrtDevNames write Set_PrtDevNames;
    property FrozenColumns: Smallint read Get_FrozenColumns write Set_FrozenColumns;
    property Bookmark: OleVariant read Get_Bookmark write Set_Bookmark;
    property TabularFamily: Byte read Get_TabularFamily write Set_TabularFamily;
    property _Name: WideString read Get__Name write Set__Name;
    property PaletteSource: WideString read Get_PaletteSource write Set_PaletteSource;
    property Tag: WideString read Get_Tag write Set_Tag;
    property PaintPalette: OleVariant read Get_PaintPalette write Set_PaintPalette;
    property OnMenu: WideString read Get_OnMenu write Set_OnMenu;
    property OpenArgs: OleVariant read Get_OpenArgs write Set_OpenArgs;
    property ConnectSynch: Smallint read Get_ConnectSynch write Set_ConnectSynch;
    property OnCurrent: WideString read Get_OnCurrent write Set_OnCurrent;
    property OnInsert: WideString read Get_OnInsert write Set_OnInsert;
    property BeforeInsert: WideString read Get_BeforeInsert write Set_BeforeInsert;
    property AfterInsert: WideString read Get_AfterInsert write Set_AfterInsert;
    property BeforeUpdate: WideString read Get_BeforeUpdate write Set_BeforeUpdate;
    property AfterUpdate: WideString read Get_AfterUpdate write Set_AfterUpdate;
    property OnDirty: WideString read Get_OnDirty write Set_OnDirty;
    property OnDelete: WideString read Get_OnDelete write Set_OnDelete;
    property BeforeDelConfirm: WideString read Get_BeforeDelConfirm write Set_BeforeDelConfirm;
    property AfterDelConfirm: WideString read Get_AfterDelConfirm write Set_AfterDelConfirm;
    property OnOpen: WideString read Get_OnOpen write Set_OnOpen;
    property OnLoad: WideString read Get_OnLoad write Set_OnLoad;
    property OnResize: WideString read Get_OnResize write Set_OnResize;
    property OnUnload: WideString read Get_OnUnload write Set_OnUnload;
    property OnClose: WideString read Get_OnClose write Set_OnClose;
    property OnActivate: WideString read Get_OnActivate write Set_OnActivate;
    property OnDeactivate: WideString read Get_OnDeactivate write Set_OnDeactivate;
    property OnGotFocus: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property KeyPreview: WordBool read Get_KeyPreview write Set_KeyPreview;
    property OnError: WideString read Get_OnError write Set_OnError;
    property OnFilter: WideString read Get_OnFilter write Set_OnFilter;
    property OnApplyFilter: WideString read Get_OnApplyFilter write Set_OnApplyFilter;
    property OnTimer: WideString read Get_OnTimer write Set_OnTimer;
    property TimerInterval: Integer read Get_TimerInterval write Set_TimerInterval;
    property Dirty: WordBool read Get_Dirty write Set_Dirty;
    property WindowWidth: Smallint read Get_WindowWidth write Set_WindowWidth;
    property WindowHeight: Smallint read Get_WindowHeight write Set_WindowHeight;
    property CurrentView: Smallint read Get_CurrentView write Set_CurrentView;
    property CurrentSectionTop: Smallint read Get_CurrentSectionTop write Set_CurrentSectionTop;
    property CurrentSectionLeft: Smallint read Get_CurrentSectionLeft write Set_CurrentSectionLeft;
    property SelLeft: Integer read Get_SelLeft write Set_SelLeft;
    property SelTop: Integer read Get_SelTop write Set_SelTop;
    property SelWidth: Integer read Get_SelWidth write Set_SelWidth;
    property SelHeight: Integer read Get_SelHeight write Set_SelHeight;
    property CurrentRecord: Integer read Get_CurrentRecord write Set_CurrentRecord;
    property PictureData: OleVariant read Get_PictureData write Set_PictureData;
    property InsideHeight: Integer read Get_InsideHeight write Set_InsideHeight;
    property InsideWidth: Integer read Get_InsideWidth write Set_InsideWidth;
    property PicturePalette: OleVariant read Get_PicturePalette write Set_PicturePalette;
    property HasModule: WordBool read Get_HasModule write Set_HasModule;
    property acHiddenCurrentPage: Integer read Get_acHiddenCurrentPage write Set_acHiddenCurrentPage;
    property Orientation: Byte read Get_Orientation write Set_Orientation;
    property AllowDesignChanges: WordBool read Get_AllowDesignChanges write Set_AllowDesignChanges;
    property ServerFilter: WideString read Get_ServerFilter write Set_ServerFilter;
    property ServerFilterByForm: WordBool read Get_ServerFilterByForm write Set_ServerFilterByForm;
    property MaxRecords: Integer read Get_MaxRecords write Set_MaxRecords;
    property UniqueTable: WideString read Get_UniqueTable write Set_UniqueTable;
    property ResyncCommand: WideString read Get_ResyncCommand write Set_ResyncCommand;
    property InputParameters: WideString read Get_InputParameters write Set_InputParameters;
    property MaxRecButton: WordBool read Get_MaxRecButton write Set_MaxRecButton;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property NewRecord: Smallint read Get_NewRecord;
    property ActiveControl: AccessControl read Get_ActiveControl;
    property DefaultControl[ControlType: Integer]: AccessControl read Get_DefaultControl;
    property Dynaset: IDispatch read Get_Dynaset;
    property RecordsetClone: IDispatch read Get_RecordsetClone;
    property Recordset: IDispatch read Get_Recordset write _Set_Recordset;
    property _SectionOld[Index: OleVariant]: AccessSection read Get__SectionOld;
    property Form: AccessForm read Get_Form;
    property Module: Module read Get_Module;
    property Properties: Properties read Get_Properties;
    property ConnectControl: AccessControl read Get_ConnectControl;
    property Controls: Controls read Get_Controls;
    property Name: WideString read Get_Name write Set_Name;
    property SubdatasheetHeight: Smallint read Get_SubdatasheetHeight write Set_SubdatasheetHeight;
    property SubdatasheetExpanded: WordBool read Get_SubdatasheetExpanded write Set_SubdatasheetExpanded;
    property DatasheetBorderLineStyle: Byte read Get_DatasheetBorderLineStyle write Set_DatasheetBorderLineStyle;
    property DatasheetColumnHeaderUnderlineStyle: Byte read Get_DatasheetColumnHeaderUnderlineStyle write Set_DatasheetColumnHeaderUnderlineStyle;
    property HorizontalDatasheetGridlineStyle: Byte read Get_HorizontalDatasheetGridlineStyle write Set_HorizontalDatasheetGridlineStyle;
    property VerticalDatasheetGridlineStyle: Byte read Get_VerticalDatasheetGridlineStyle write Set_VerticalDatasheetGridlineStyle;
    property WindowTop: Smallint read Get_WindowTop;
    property WindowLeft: Smallint read Get_WindowLeft;
    property OnUndo: WideString read Get_OnUndo write Set_OnUndo;
    property OnRecordExit: WideString read Get_OnRecordExit write Set_OnRecordExit;
    property PivotTable: IDispatch read Get_PivotTable;
    property ChartSpace: IDispatch read Get_ChartSpace;
    property Printer: _Printer read Get_Printer write Set_Printer;
    property Moveable: WordBool read Get_Moveable write Set_Moveable;
    property BeginBatchEdit: WideString read Get_BeginBatchEdit write Set_BeginBatchEdit;
    property UndoBatchEdit: WideString read Get_UndoBatchEdit write Set_UndoBatchEdit;
    property BeforeBeginTransaction: WideString read Get_BeforeBeginTransaction write Set_BeforeBeginTransaction;
    property AfterBeginTransaction: WideString read Get_AfterBeginTransaction write Set_AfterBeginTransaction;
    property BeforeCommitTransaction: WideString read Get_BeforeCommitTransaction write Set_BeforeCommitTransaction;
    property AfterCommitTransaction: WideString read Get_AfterCommitTransaction write Set_AfterCommitTransaction;
    property RollbackTransaction: WideString read Get_RollbackTransaction write Set_RollbackTransaction;
    property AllowFormView: WordBool read Get_AllowFormView write Set_AllowFormView;
    property AllowDatasheetView: WordBool read Get_AllowDatasheetView write Set_AllowDatasheetView;
    property AllowPivotTableView: WordBool read Get_AllowPivotTableView write Set_AllowPivotTableView;
    property AllowPivotChartView: WordBool read Get_AllowPivotChartView write Set_AllowPivotChartView;
    property OnConnect: WideString read Get_OnConnect write Set_OnConnect;
    property OnDisconnect: WideString read Get_OnDisconnect write Set_OnDisconnect;
    property PivotTableChange: WideString read Get_PivotTableChange write Set_PivotTableChange;
    property Query: WideString read Get_Query write Set_Query;
    property BeforeQuery: WideString read Get_BeforeQuery write Set_BeforeQuery;
    property SelectionChange: WideString read Get_SelectionChange write Set_SelectionChange;
    property CommandBeforeExecute: WideString read Get_CommandBeforeExecute write Set_CommandBeforeExecute;
    property CommandChecked: WideString read Get_CommandChecked write Set_CommandChecked;
    property CommandEnabled: WideString read Get_CommandEnabled write Set_CommandEnabled;
    property CommandExecute: WideString read Get_CommandExecute write Set_CommandExecute;
    property DataSetChange: WideString read Get_DataSetChange write Set_DataSetChange;
    property BeforeScreenTip: WideString read Get_BeforeScreenTip write Set_BeforeScreenTip;
    property AfterFinalRender: WideString read Get_AfterFinalRender write Set_AfterFinalRender;
    property AfterRender: WideString read Get_AfterRender write Set_AfterRender;
    property AfterLayout: WideString read Get_AfterLayout write Set_AfterLayout;
    property BeforeRender: WideString read Get_BeforeRender write Set_BeforeRender;
    property MouseWheel: WideString read Get_MouseWheel write Set_MouseWheel;
    property ViewChange: WideString read Get_ViewChange write Set_ViewChange;
    property DataChange: WideString read Get_DataChange write Set_DataChange;
    property FetchDefaults: WordBool read Get_FetchDefaults write Set_FetchDefaults;
    property BatchUpdates: WordBool read Get_BatchUpdates write Set_BatchUpdates;
    property CommitOnClose: Byte read Get_CommitOnClose write Set_CommitOnClose;
    property CommitOnNavigation: WordBool read Get_CommitOnNavigation write Set_CommitOnNavigation;
    property UseDefaultPrinter: WordBool read Get_UseDefaultPrinter write Set_UseDefaultPrinter;
    property RecordSourceQualifier: WideString read Get_RecordSourceQualifier write Set_RecordSourceQualifier;
    property FilterOnLoad: WordBool read Get_FilterOnLoad write Set_FilterOnLoad;
    property OrderByOnLoad: WordBool read Get_OrderByOnLoad write Set_OrderByOnLoad;
    property SplitFormOrientation: AcSplitFormOrientation read Get_SplitFormOrientation write Set_SplitFormOrientation;
    property SplitFormDatasheet: AcSplitFormDatasheet read Get_SplitFormDatasheet write Set_SplitFormDatasheet;
    property SplitFormSplitterBar: WordBool read Get_SplitFormSplitterBar write Set_SplitFormSplitterBar;
    property SplitFormPrinting: AcSplitFormPrinting read Get_SplitFormPrinting write Set_SplitFormPrinting;
    property SplitFormSplitterBarSave: WordBool read Get_SplitFormSplitterBarSave write Set_SplitFormSplitterBarSave;
    property NavigationCaption: WideString read Get_NavigationCaption write Set_NavigationCaption;
    property OnCurrentMacro: WideString read Get_OnCurrentMacro write Set_OnCurrentMacro;
    property BeforeInsertMacro: WideString read Get_BeforeInsertMacro write Set_BeforeInsertMacro;
    property AfterInsertMacro: WideString read Get_AfterInsertMacro write Set_AfterInsertMacro;
    property BeforeUpdateMacro: WideString read Get_BeforeUpdateMacro write Set_BeforeUpdateMacro;
    property AfterUpdateMacro: WideString read Get_AfterUpdateMacro write Set_AfterUpdateMacro;
    property OnDirtyMacro: WideString read Get_OnDirtyMacro write Set_OnDirtyMacro;
    property OnDeleteMacro: WideString read Get_OnDeleteMacro write Set_OnDeleteMacro;
    property BeforeDelConfirmMacro: WideString read Get_BeforeDelConfirmMacro write Set_BeforeDelConfirmMacro;
    property AfterDelConfirmMacro: WideString read Get_AfterDelConfirmMacro write Set_AfterDelConfirmMacro;
    property OnOpenMacro: WideString read Get_OnOpenMacro write Set_OnOpenMacro;
    property OnLoadMacro: WideString read Get_OnLoadMacro write Set_OnLoadMacro;
    property OnResizeMacro: WideString read Get_OnResizeMacro write Set_OnResizeMacro;
    property OnUnloadMacro: WideString read Get_OnUnloadMacro write Set_OnUnloadMacro;
    property OnCloseMacro: WideString read Get_OnCloseMacro write Set_OnCloseMacro;
    property OnActivateMacro: WideString read Get_OnActivateMacro write Set_OnActivateMacro;
    property OnDeactivateMacro: WideString read Get_OnDeactivateMacro write Set_OnDeactivateMacro;
    property OnGotFocusMacro: WideString read Get_OnGotFocusMacro write Set_OnGotFocusMacro;
    property OnLostFocusMacro: WideString read Get_OnLostFocusMacro write Set_OnLostFocusMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property OnKeyDownMacro: WideString read Get_OnKeyDownMacro write Set_OnKeyDownMacro;
    property OnKeyUpMacro: WideString read Get_OnKeyUpMacro write Set_OnKeyUpMacro;
    property OnKeyPressMacro: WideString read Get_OnKeyPressMacro write Set_OnKeyPressMacro;
    property OnErrorMacro: WideString read Get_OnErrorMacro write Set_OnErrorMacro;
    property OnFilterMacro: WideString read Get_OnFilterMacro write Set_OnFilterMacro;
    property OnApplyFilterMacro: WideString read Get_OnApplyFilterMacro write Set_OnApplyFilterMacro;
    property OnTimerMacro: WideString read Get_OnTimerMacro write Set_OnTimerMacro;
    property OnUndoMacro: WideString read Get_OnUndoMacro write Set_OnUndoMacro;
    property OnRecordExitMacro: WideString read Get_OnRecordExitMacro write Set_OnRecordExitMacro;
    property BeginBatchEditMacro: WideString read Get_BeginBatchEditMacro write Set_BeginBatchEditMacro;
    property UndoBatchEditMacro: WideString read Get_UndoBatchEditMacro write Set_UndoBatchEditMacro;
    property BeforeBeginTransactionMacro: WideString read Get_BeforeBeginTransactionMacro write Set_BeforeBeginTransactionMacro;
    property AfterBeginTransactionMacro: WideString read Get_AfterBeginTransactionMacro write Set_AfterBeginTransactionMacro;
    property BeforeCommitTransactionMacro: WideString read Get_BeforeCommitTransactionMacro write Set_BeforeCommitTransactionMacro;
    property AfterCommitTransactionMacro: WideString read Get_AfterCommitTransactionMacro write Set_AfterCommitTransactionMacro;
    property RollbackTransactionMacro: WideString read Get_RollbackTransactionMacro write Set_RollbackTransactionMacro;
    property OnConnectMacro: WideString read Get_OnConnectMacro write Set_OnConnectMacro;
    property OnDisconnectMacro: WideString read Get_OnDisconnectMacro write Set_OnDisconnectMacro;
    property PivotTableChangeMacro: WideString read Get_PivotTableChangeMacro write Set_PivotTableChangeMacro;
    property QueryMacro: WideString read Get_QueryMacro write Set_QueryMacro;
    property BeforeQueryMacro: WideString read Get_BeforeQueryMacro write Set_BeforeQueryMacro;
    property SelectionChangeMacro: WideString read Get_SelectionChangeMacro write Set_SelectionChangeMacro;
    property CommandBeforeExecuteMacro: WideString read Get_CommandBeforeExecuteMacro write Set_CommandBeforeExecuteMacro;
    property CommandCheckedMacro: WideString read Get_CommandCheckedMacro write Set_CommandCheckedMacro;
    property CommandEnabledMacro: WideString read Get_CommandEnabledMacro write Set_CommandEnabledMacro;
    property CommandExecuteMacro: WideString read Get_CommandExecuteMacro write Set_CommandExecuteMacro;
    property DataSetChangeMacro: WideString read Get_DataSetChangeMacro write Set_DataSetChangeMacro;
    property BeforeScreenTipMacro: WideString read Get_BeforeScreenTipMacro write Set_BeforeScreenTipMacro;
    property AfterFinalRenderMacro: WideString read Get_AfterFinalRenderMacro write Set_AfterFinalRenderMacro;
    property AfterRenderMacro: WideString read Get_AfterRenderMacro write Set_AfterRenderMacro;
    property AfterLayoutMacro: WideString read Get_AfterLayoutMacro write Set_AfterLayoutMacro;
    property BeforeRenderMacro: WideString read Get_BeforeRenderMacro write Set_BeforeRenderMacro;
    property MouseWheelMacro: WideString read Get_MouseWheelMacro write Set_MouseWheelMacro;
    property ViewChangeMacro: WideString read Get_ViewChangeMacro write Set_ViewChangeMacro;
    property DataChangeMacro: WideString read Get_DataChangeMacro write Set_DataChangeMacro;
    property AllowLayoutView: WordBool read Get_AllowLayoutView write Set_AllowLayoutView;
    property DatasheetAlternateBackColor: Integer read Get_DatasheetAlternateBackColor write Set_DatasheetAlternateBackColor;
    property DisplayOnSharePointSite: Byte read Get_DisplayOnSharePointSite write Set_DisplayOnSharePointSite;
    property SplitFormSize: Integer read Get_SplitFormSize write Set_SplitFormSize;
    property Section[Index: OleVariant]: _Section read Get_Section;
    property RibbonName: WideString read Get_RibbonName write Set_RibbonName;
    property FitToScreen: WordBool read Get_FitToScreen write Set_FitToScreen;
  end;

// *********************************************************************//
// DispIntf:  _Form3Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {66B22FB4-F70E-4F03-A00A-F76E9ADBBF10}
// *********************************************************************//
  _Form3Disp = dispinterface
    ['{66B22FB4-F70E-4F03-A00A-F76E9ADBBF10}']
    property FormName: WideString dispid 39;
    property RecordSource: WideString dispid 156;
    property Filter: WideString dispid 245;
    property FilterOn: WordBool dispid 332;
    property OrderBy: WideString dispid 331;
    property OrderByOn: WordBool dispid 336;
    property AllowFilters: WordBool dispid 30;
    property Caption: WideString dispid 17;
    property DefaultView: Byte dispid 147;
    property ViewsAllowed: Byte dispid 146;
    property AllowEditing: WordBool dispid 24;
    property DefaultEditing: Smallint dispid 134;
    property AllowEdits: WordBool dispid 339;
    property AllowDeletions: WordBool dispid 292;
    property AllowAdditions: WordBool dispid 326;
    property DataEntry: WordBool dispid 338;
    property AllowUpdating: Byte dispid 45;
    property RecordsetType: Byte dispid 337;
    property RecordLocks: Byte dispid 26;
    property ScrollBars: Byte dispid 152;
    property RecordSelectors: WordBool dispid 19;
    property NavigationButtons: WordBool dispid 279;
    property DividingLines: WordBool dispid 314;
    property AutoResize: WordBool dispid 6;
    property AutoCenter: WordBool dispid 278;
    property PopUp: WordBool dispid 90;
    property Modal: WordBool dispid 62;
    property BorderStyle: Byte dispid 9;
    property ControlBox: WordBool dispid 97;
    property MinButton: WordBool dispid 95;
    property MaxButton: WordBool dispid 94;
    property MinMaxButtons: Byte dispid 328;
    property CloseButton: WordBool dispid 303;
    property WhatsThisButton: WordBool dispid 96;
    property Width: Smallint dispid 150;
    property Picture: WideString dispid 7;
    property PictureType: Byte dispid 341;
    property PictureSizeMode: Byte dispid 312;
    property PictureAlignment: Byte dispid 309;
    property PictureTiling: WordBool dispid 313;
    property Cycle: Byte dispid 330;
    property MenuBar: WideString dispid 240;
    property Toolbar: WideString dispid 353;
    property ShortcutMenu: WordBool dispid 31;
    property ShortcutMenuBar: WideString dispid 304;
    property GridX: Smallint dispid 41;
    property GridY: Smallint dispid 42;
    property LayoutForPrint: WordBool dispid 143;
    property FastLaserPrinting: WordBool dispid 144;
    property HelpFile: WideString dispid 218;
    property HelpContextId: Integer dispid 219;
    property RowHeight: Smallint dispid 168;
    property DatasheetFontName: WideString dispid 160;
    property DatasheetFontHeight: Smallint dispid 161;
    property DatasheetFontWeight: Smallint dispid 162;
    property DatasheetFontItalic: WordBool dispid 163;
    property DatasheetFontUnderline: WordBool dispid 164;
    property TabularCharSet: Byte dispid 194;
    property DatasheetGridlinesBehavior: Byte dispid 318;
    property DatasheetGridlinesColor: Integer dispid 319;
    property DatasheetCellsEffect: Byte dispid 320;
    property DatasheetForeColor: Integer dispid 306;
    property ShowGrid: WordBool dispid 169;
    property DatasheetBackColor: Integer dispid 321;
    property Hwnd: Integer dispid 192;
    property Count: Smallint dispid 195;
    property Page: Integer dispid 196;
    property Pages: Smallint dispid 197;
    property LogicalPageWidth: Integer dispid 198;
    property LogicalPageHeight: Integer dispid 199;
    property ZoomControl: Integer dispid 217;
    property Visible: WordBool dispid 148;
    property Painting: WordBool dispid 241;
    property PrtMip: OleVariant dispid 189;
    property PrtDevMode: OleVariant dispid 190;
    property PrtDevNames: OleVariant dispid 191;
    property FrozenColumns: Smallint dispid 170;
    property Bookmark: OleVariant dispid 230;
    property TabularFamily: Byte dispid 244;
    property _Name: WideString dispid 20;
    property PaletteSource: WideString dispid 98;
    property Tag: WideString dispid 266;
    property PaintPalette: OleVariant dispid 100;
    property OnMenu: WideString dispid 60;
    property OpenArgs: OleVariant dispid 284;
    property ConnectSynch: Smallint dispid 285;
    property OnCurrent: WideString dispid 87;
    property OnInsert: WideString dispid 81;
    property BeforeInsert: WideString dispid 122;
    property AfterInsert: WideString dispid 123;
    property BeforeUpdate: WideString dispid 85;
    property AfterUpdate: WideString dispid 86;
    property OnDirty: WideString dispid 375;
    property OnDelete: WideString dispid 79;
    property BeforeDelConfirm: WideString dispid 124;
    property AfterDelConfirm: WideString dispid 125;
    property OnOpen: WideString dispid 77;
    property OnLoad: WideString dispid 127;
    property OnResize: WideString dispid 117;
    property OnUnload: WideString dispid 128;
    property OnClose: WideString dispid 78;
    property OnActivate: WideString dispid 112;
    property OnDeactivate: WideString dispid 113;
    property OnGotFocus: WideString dispid 115;
    property OnLostFocus: WideString dispid 116;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property OnKeyDown: WideString dispid 104;
    property OnKeyUp: WideString dispid 105;
    property OnKeyPress: WideString dispid 106;
    property KeyPreview: WordBool dispid 327;
    property OnError: WideString dispid 119;
    property OnFilter: WideString dispid 333;
    property OnApplyFilter: WideString dispid 334;
    property OnTimer: WideString dispid 110;
    property TimerInterval: Integer dispid 111;
    property Dirty: WordBool dispid 286;
    property WindowWidth: Smallint dispid 287;
    property WindowHeight: Smallint dispid 288;
    property CurrentView: Smallint dispid 289;
    property CurrentSectionTop: Smallint dispid 291;
    property CurrentSectionLeft: Smallint dispid 290;
    property SelLeft: Integer dispid 298;
    property SelTop: Integer dispid 299;
    property SelWidth: Integer dispid 300;
    property SelHeight: Integer dispid 301;
    property CurrentRecord: Integer dispid 302;
    property PictureData: OleVariant dispid 188;
    property InsideHeight: Integer dispid 315;
    property InsideWidth: Integer dispid 316;
    property PicturePalette: OleVariant dispid 311;
    property HasModule: WordBool dispid 342;
    property acHiddenCurrentPage: Integer dispid 365;
    property Orientation: Byte dispid 370;
    property AllowDesignChanges: WordBool dispid 373;
    property ServerFilter: WideString dispid 246;
    property ServerFilterByForm: WordBool dispid 247;
    property MaxRecords: Integer dispid 361;
    property UniqueTable: WideString dispid 65;
    property ResyncCommand: WideString dispid 64;
    property InputParameters: WideString dispid 66;
    property MaxRecButton: WordBool dispid 63;
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property NewRecord: Smallint readonly dispid 2147;
    procedure Undo; dispid 2145;
    property ActiveControl: AccessControl readonly dispid 2006;
    property DefaultControl[ControlType: Integer]: AccessControl readonly dispid 2150;
    property Dynaset: IDispatch readonly dispid 2085;
    property RecordsetClone: IDispatch readonly dispid 2086;
    property Recordset: IDispatch dispid 2196;
    property _SectionOld[Index: OleVariant]: AccessSection readonly dispid 2088;
    property Form: AccessForm readonly dispid 2089;
    property Module: Module readonly dispid 2090;
    property Properties: Properties readonly dispid 2091;
    property ConnectControl: AccessControl readonly dispid 2092;
    procedure Recalc; dispid 2017;
    procedure Requery; dispid 2018;
    procedure Refresh; dispid -550;
    procedure Repaint; dispid 2020;
    procedure GoToPage(PageNumber: Integer; Right: Integer; Down: Integer); dispid 2021;
    procedure SetFocus; dispid 2022;
    property Controls: Controls readonly dispid 0;
    function _NewEnum: IUnknown; dispid -4;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Name: WideString dispid -2147418112;
    property SubdatasheetHeight: Smallint dispid 387;
    property SubdatasheetExpanded: WordBool dispid 390;
    property DatasheetBorderLineStyle: Byte dispid 322;
    property DatasheetColumnHeaderUnderlineStyle: Byte dispid 325;
    property HorizontalDatasheetGridlineStyle: Byte dispid 323;
    property VerticalDatasheetGridlineStyle: Byte dispid 324;
    property WindowTop: Smallint readonly dispid 402;
    property WindowLeft: Smallint readonly dispid 403;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    property OnUndo: WideString dispid 404;
    property OnRecordExit: WideString dispid 405;
    property PivotTable: IDispatch readonly dispid 2340;
    property ChartSpace: IDispatch readonly dispid 2341;
    property Printer: _Printer dispid 2365;
    property Moveable: WordBool dispid 410;
    property BeginBatchEdit: WideString dispid 412;
    property UndoBatchEdit: WideString dispid 413;
    property BeforeBeginTransaction: WideString dispid 414;
    property AfterBeginTransaction: WideString dispid 415;
    property BeforeCommitTransaction: WideString dispid 416;
    property AfterCommitTransaction: WideString dispid 417;
    property RollbackTransaction: WideString dispid 418;
    property AllowFormView: WordBool dispid 421;
    property AllowDatasheetView: WordBool dispid 422;
    property AllowPivotTableView: WordBool dispid 423;
    property AllowPivotChartView: WordBool dispid 424;
    property OnConnect: WideString dispid 425;
    property OnDisconnect: WideString dispid 426;
    property PivotTableChange: WideString dispid 427;
    property Query: WideString dispid 428;
    property BeforeQuery: WideString dispid 429;
    property SelectionChange: WideString dispid 430;
    property CommandBeforeExecute: WideString dispid 431;
    property CommandChecked: WideString dispid 432;
    property CommandEnabled: WideString dispid 433;
    property CommandExecute: WideString dispid 434;
    property DataSetChange: WideString dispid 435;
    property BeforeScreenTip: WideString dispid 436;
    property AfterFinalRender: WideString dispid 437;
    property AfterRender: WideString dispid 438;
    property AfterLayout: WideString dispid 439;
    property BeforeRender: WideString dispid 440;
    property MouseWheel: WideString dispid 441;
    property ViewChange: WideString dispid 442;
    property DataChange: WideString dispid 443;
    property FetchDefaults: WordBool dispid 444;
    property BatchUpdates: WordBool dispid 409;
    property CommitOnClose: Byte dispid 419;
    property CommitOnNavigation: WordBool dispid 420;
    property UseDefaultPrinter: WordBool dispid 2418;
    property RecordSourceQualifier: WideString dispid 445;
    property FilterOnLoad: WordBool dispid 452;
    property OrderByOnLoad: WordBool dispid 453;
    property SplitFormOrientation: AcSplitFormOrientation dispid 467;
    property SplitFormDatasheet: AcSplitFormDatasheet dispid 469;
    property SplitFormSplitterBar: WordBool dispid 470;
    property SplitFormPrinting: AcSplitFormPrinting dispid 468;
    property SplitFormSplitterBarSave: WordBool dispid 471;
    property NavigationCaption: WideString dispid 483;
    property OnCurrentMacro: WideString dispid 497;
    property BeforeInsertMacro: WideString dispid 515;
    property AfterInsertMacro: WideString dispid 516;
    property BeforeUpdateMacro: WideString dispid 496;
    property AfterUpdateMacro: WideString dispid 505;
    property OnDirtyMacro: WideString dispid 528;
    property OnDeleteMacro: WideString dispid 517;
    property BeforeDelConfirmMacro: WideString dispid 518;
    property AfterDelConfirmMacro: WideString dispid 519;
    property OnOpenMacro: WideString dispid 510;
    property OnLoadMacro: WideString dispid 512;
    property OnResizeMacro: WideString dispid 523;
    property OnUnloadMacro: WideString dispid 513;
    property OnCloseMacro: WideString dispid 511;
    property OnActivateMacro: WideString dispid 521;
    property OnDeactivateMacro: WideString dispid 522;
    property OnGotFocusMacro: WideString dispid 502;
    property OnLostFocusMacro: WideString dispid 503;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property OnKeyDownMacro: WideString dispid 500;
    property OnKeyUpMacro: WideString dispid 501;
    property OnKeyPressMacro: WideString dispid 499;
    property OnErrorMacro: WideString dispid 514;
    property OnFilterMacro: WideString dispid 526;
    property OnApplyFilterMacro: WideString dispid 527;
    property OnTimerMacro: WideString dispid 520;
    property OnUndoMacro: WideString dispid 529;
    property OnRecordExitMacro: WideString dispid 530;
    property BeginBatchEditMacro: WideString dispid 531;
    property UndoBatchEditMacro: WideString dispid 532;
    property BeforeBeginTransactionMacro: WideString dispid 533;
    property AfterBeginTransactionMacro: WideString dispid 534;
    property BeforeCommitTransactionMacro: WideString dispid 535;
    property AfterCommitTransactionMacro: WideString dispid 536;
    property RollbackTransactionMacro: WideString dispid 537;
    property OnConnectMacro: WideString dispid 538;
    property OnDisconnectMacro: WideString dispid 539;
    property PivotTableChangeMacro: WideString dispid 540;
    property QueryMacro: WideString dispid 542;
    property BeforeQueryMacro: WideString dispid 541;
    property SelectionChangeMacro: WideString dispid 545;
    property CommandBeforeExecuteMacro: WideString dispid 546;
    property CommandCheckedMacro: WideString dispid 547;
    property CommandEnabledMacro: WideString dispid 548;
    property CommandExecuteMacro: WideString dispid 549;
    property DataSetChangeMacro: WideString dispid 550;
    property BeforeScreenTipMacro: WideString dispid 551;
    property AfterFinalRenderMacro: WideString dispid 554;
    property AfterRenderMacro: WideString dispid 553;
    property AfterLayoutMacro: WideString dispid 555;
    property BeforeRenderMacro: WideString dispid 552;
    property MouseWheelMacro: WideString dispid 492;
    property ViewChangeMacro: WideString dispid 543;
    property DataChangeMacro: WideString dispid 544;
    property AllowLayoutView: WordBool dispid 563;
    property DatasheetAlternateBackColor: Integer dispid 572;
    property DisplayOnSharePointSite: Byte dispid 561;
    property SplitFormSize: Integer dispid 472;
    property Section[Index: OleVariant]: _Section readonly dispid 2500;
    property RibbonName: WideString dispid 585;
    property FitToScreen: WordBool dispid 592;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// DispIntf:  _FormEvents2
// Flags:     (4112) Hidden Dispatchable
// GUID:      {0EA530DD-5B30-4278-BD28-47C4D11619BD}
// *********************************************************************//
  _FormEvents2 = dispinterface
    ['{0EA530DD-5B30-4278-BD28-47C4D11619BD}']
    procedure Load; dispid 2067;
    procedure Current; dispid 2058;
    procedure BeforeInsert(out Cancel: Smallint); dispid 2059;
    procedure AfterInsert; dispid 2060;
    procedure BeforeUpdate(out Cancel: Smallint); dispid 2061;
    procedure AfterUpdate; dispid 2062;
    procedure Delete(out Cancel: Smallint); dispid 2063;
    procedure BeforeDelConfirm(out Cancel: Smallint; out Response: Smallint); dispid 2064;
    procedure AfterDelConfirm(var Status: Smallint); dispid 2065;
    procedure Open(out Cancel: Smallint); dispid 2066;
    procedure Resize; dispid 2068;
    procedure Unload(out Cancel: Smallint); dispid 2069;
    procedure Close; dispid 2070;
    procedure Activate; dispid 2071;
    procedure Deactivate; dispid 2072;
    procedure GotFocus; dispid 2073;
    procedure LostFocus; dispid 2074;
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid -602;
    procedure KeyPress(var KeyAscii: Smallint); dispid -603;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid -604;
    procedure Error(var DataErr: Smallint; out Response: Smallint); dispid 2083;
    procedure Timer; dispid 2084;
    procedure Filter(out Cancel: Smallint; var FilterType: Smallint); dispid 2155;
    procedure ApplyFilter(out Cancel: Smallint; var ApplyType: Smallint); dispid 2156;
    procedure Dirty(out Cancel: Smallint); dispid 2205;
    procedure Undo(out Cancel: Smallint); dispid 2145;
    procedure RecordExit(out Cancel: Smallint); dispid 2334;
    procedure BeginBatchEdit(out Cancel: Smallint); dispid 2369;
    procedure UndoBatchEdit(out Cancel: Smallint); dispid 2370;
    procedure OnConnect; dispid 2383;
    procedure OnDisconnect; dispid 2384;
    procedure PivotTableChange(Reason: Integer); dispid 2385;
    procedure Query; dispid 2386;
    procedure BeforeQuery; dispid 2387;
    procedure SelectionChange; dispid 2388;
    procedure CommandBeforeExecute(Command: OleVariant; const Cancel: IDispatch); dispid 2389;
    procedure CommandChecked(Command: OleVariant; const Checked: IDispatch); dispid 2390;
    procedure CommandEnabled(Command: OleVariant; const Enabled: IDispatch); dispid 2391;
    procedure CommandExecute(Command: OleVariant); dispid 2392;
    procedure DataSetChange; dispid 2394;
    procedure BeforeScreenTip(const ScreenTipText: IDispatch; const SourceObject: IDispatch); dispid 2395;
    procedure BeforeRender(const drawObject: IDispatch; const chartObject: IDispatch; 
                           const Cancel: IDispatch); dispid 2399;
    procedure AfterRender(const drawObject: IDispatch; const chartObject: IDispatch); dispid 2397;
    procedure AfterFinalRender(const drawObject: IDispatch); dispid 2396;
    procedure AfterLayout(const drawObject: IDispatch); dispid 2398;
    procedure MouseWheel(Page: WordBool; Count: Integer); dispid 2401;
    procedure ViewChange(Reason: Integer); dispid 2402;
    procedure DataChange(Reason: Integer); dispid 2403;
  end;

// *********************************************************************//
// Interface: _Report3
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B0E35B78-55B0-47FB-8951-CA616F25CEAF}
// *********************************************************************//
  _Report3 = interface(IDispatch)
    ['{B0E35B78-55B0-47FB-8951-CA616F25CEAF}']
    function Get_FormName: WideString; safecall;
    procedure Set_FormName(const pRet: WideString); safecall;
    function Get_RecordSource: WideString; safecall;
    procedure Set_RecordSource(const pRet: WideString); safecall;
    function Get_Filter: WideString; safecall;
    procedure Set_Filter(const pRet: WideString); safecall;
    function Get_FilterOn: WordBool; safecall;
    procedure Set_FilterOn(pRet: WordBool); safecall;
    function Get_OrderBy: WideString; safecall;
    procedure Set_OrderBy(const pRet: WideString); safecall;
    function Get_OrderByOn: WordBool; safecall;
    procedure Set_OrderByOn(pRet: WordBool); safecall;
    function Get_ServerFilter: WideString; safecall;
    procedure Set_ServerFilter(const pRet: WideString); safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const pRet: WideString); safecall;
    function Get_RecordLocks: Byte; safecall;
    procedure Set_RecordLocks(pRet: Byte); safecall;
    function Get_PageHeader: Byte; safecall;
    procedure Set_PageHeader(pRet: Byte); safecall;
    function Get_PageFooter: Byte; safecall;
    procedure Set_PageFooter(pRet: Byte); safecall;
    function Get_DateGrouping: Byte; safecall;
    procedure Set_DateGrouping(pRet: Byte); safecall;
    function Get_GrpKeepTogether: Byte; safecall;
    procedure Set_GrpKeepTogether(pRet: Byte); safecall;
    function Get_MinButton: WordBool; safecall;
    procedure Set_MinButton(pRet: WordBool); safecall;
    function Get_MaxButton: WordBool; safecall;
    procedure Set_MaxButton(pRet: WordBool); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Picture: WideString; safecall;
    procedure Set_Picture(const pRet: WideString); safecall;
    function Get_PictureType: Byte; safecall;
    procedure Set_PictureType(pRet: Byte); safecall;
    function Get_PictureSizeMode: Byte; safecall;
    procedure Set_PictureSizeMode(pRet: Byte); safecall;
    function Get_PictureAlignment: Byte; safecall;
    procedure Set_PictureAlignment(pRet: Byte); safecall;
    function Get_PictureTiling: WordBool; safecall;
    procedure Set_PictureTiling(pRet: WordBool); safecall;
    function Get_PicturePages: Byte; safecall;
    procedure Set_PicturePages(pRet: Byte); safecall;
    function Get_MenuBar: WideString; safecall;
    procedure Set_MenuBar(const pRet: WideString); safecall;
    function Get_Toolbar: WideString; safecall;
    procedure Set_Toolbar(const pRet: WideString); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_GridX: Smallint; safecall;
    procedure Set_GridX(pRet: Smallint); safecall;
    function Get_GridY: Smallint; safecall;
    procedure Set_GridY(pRet: Smallint); safecall;
    function Get_LayoutForPrint: WordBool; safecall;
    procedure Set_LayoutForPrint(pRet: WordBool); safecall;
    function Get_FastLaserPrinting: WordBool; safecall;
    procedure Set_FastLaserPrinting(pRet: WordBool); safecall;
    function Get_HelpFile: WideString; safecall;
    procedure Set_HelpFile(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_Hwnd: Integer; safecall;
    procedure Set_Hwnd(pRet: Integer); safecall;
    function Get_Count: Smallint; safecall;
    procedure Set_Count(pRet: Smallint); safecall;
    function Get_Page: Integer; safecall;
    procedure Set_Page(pRet: Integer); safecall;
    function Get_Pages: Smallint; safecall;
    procedure Set_Pages(pRet: Smallint); safecall;
    function Get_LogicalPageWidth: Integer; safecall;
    procedure Set_LogicalPageWidth(pRet: Integer); safecall;
    function Get_LogicalPageHeight: Integer; safecall;
    procedure Set_LogicalPageHeight(pRet: Integer); safecall;
    function Get_ZoomControl: Integer; safecall;
    procedure Set_ZoomControl(pRet: Integer); safecall;
    function Get_HasData: Integer; safecall;
    procedure Set_HasData(pRet: Integer); safecall;
    function Get_Left: Integer; safecall;
    procedure Set_Left(pRet: Integer); safecall;
    function Get_Top: Integer; safecall;
    procedure Set_Top(pRet: Integer); safecall;
    function Get_Height: Integer; safecall;
    procedure Set_Height(pRet: Integer); safecall;
    function Get_PrintSection: WordBool; safecall;
    procedure Set_PrintSection(pRet: WordBool); safecall;
    function Get_NextRecord: WordBool; safecall;
    procedure Set_NextRecord(pRet: WordBool); safecall;
    function Get_MoveLayout: WordBool; safecall;
    procedure Set_MoveLayout(pRet: WordBool); safecall;
    function Get_FormatCount: Smallint; safecall;
    procedure Set_FormatCount(pRet: Smallint); safecall;
    function Get_PrintCount: Smallint; safecall;
    procedure Set_PrintCount(pRet: Smallint); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_Painting: WordBool; safecall;
    procedure Set_Painting(pRet: WordBool); safecall;
    function Get_PrtMip: OleVariant; safecall;
    procedure Set_PrtMip(pRet: OleVariant); safecall;
    function Get_PrtDevMode: OleVariant; safecall;
    procedure Set_PrtDevMode(pRet: OleVariant); safecall;
    function Get_PrtDevNames: OleVariant; safecall;
    procedure Set_PrtDevNames(pRet: OleVariant); safecall;
    function Get_ForeColor: Integer; safecall;
    procedure Set_ForeColor(pRet: Integer); safecall;
    function Get_CurrentX: Single; safecall;
    procedure Set_CurrentX(pRet: Single); safecall;
    function Get_CurrentY: Single; safecall;
    procedure Set_CurrentY(pRet: Single); safecall;
    function Get_ScaleHeight: Single; safecall;
    procedure Set_ScaleHeight(pRet: Single); safecall;
    function Get_ScaleLeft: Single; safecall;
    procedure Set_ScaleLeft(pRet: Single); safecall;
    function Get_ScaleMode: Smallint; safecall;
    procedure Set_ScaleMode(pRet: Smallint); safecall;
    function Get_ScaleTop: Single; safecall;
    procedure Set_ScaleTop(pRet: Single); safecall;
    function Get_ScaleWidth: Single; safecall;
    procedure Set_ScaleWidth(pRet: Single); safecall;
    function Get_FontBold: Smallint; safecall;
    procedure Set_FontBold(pRet: Smallint); safecall;
    function Get_FontItalic: Smallint; safecall;
    procedure Set_FontItalic(pRet: Smallint); safecall;
    function Get_FontName: WideString; safecall;
    procedure Set_FontName(const pRet: WideString); safecall;
    function Get_FontSize: Smallint; safecall;
    procedure Set_FontSize(pRet: Smallint); safecall;
    function Get_FontUnderline: Smallint; safecall;
    procedure Set_FontUnderline(pRet: Smallint); safecall;
    function Get_DrawMode: Smallint; safecall;
    procedure Set_DrawMode(pRet: Smallint); safecall;
    function Get_DrawStyle: Smallint; safecall;
    procedure Set_DrawStyle(pRet: Smallint); safecall;
    function Get_DrawWidth: Smallint; safecall;
    procedure Set_DrawWidth(pRet: Smallint); safecall;
    function Get_FillColor: Integer; safecall;
    procedure Set_FillColor(pRet: Integer); safecall;
    function Get_FillStyle: Smallint; safecall;
    procedure Set_FillStyle(pRet: Smallint); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_PaletteSource: WideString; safecall;
    procedure Set_PaletteSource(const pRet: WideString); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_PaintPalette: OleVariant; safecall;
    procedure Set_PaintPalette(pRet: OleVariant); safecall;
    function Get_OnMenu: WideString; safecall;
    procedure Set_OnMenu(const pRet: WideString); safecall;
    function Get_OnOpen: WideString; safecall;
    procedure Set_OnOpen(const pRet: WideString); safecall;
    function Get_OnClose: WideString; safecall;
    procedure Set_OnClose(const pRet: WideString); safecall;
    function Get_OnActivate: WideString; safecall;
    procedure Set_OnActivate(const pRet: WideString); safecall;
    function Get_OnDeactivate: WideString; safecall;
    procedure Set_OnDeactivate(const pRet: WideString); safecall;
    function Get_OnNoData: WideString; safecall;
    procedure Set_OnNoData(const pRet: WideString); safecall;
    function Get_OnPage: WideString; safecall;
    procedure Set_OnPage(const pRet: WideString); safecall;
    function Get_OnError: WideString; safecall;
    procedure Set_OnError(const pRet: WideString); safecall;
    function Get_Dirty: WordBool; safecall;
    procedure Set_Dirty(pRet: WordBool); safecall;
    function Get_CurrentRecord: Integer; safecall;
    procedure Set_CurrentRecord(pRet: Integer); safecall;
    function Get_PictureData: OleVariant; safecall;
    procedure Set_PictureData(pRet: OleVariant); safecall;
    function Get_PicturePalette: OleVariant; safecall;
    procedure Set_PicturePalette(pRet: OleVariant); safecall;
    function Get_HasModule: WordBool; safecall;
    procedure Set_HasModule(pRet: WordBool); safecall;
    function Get_acHiddenCurrentPage: Integer; safecall;
    procedure Set_acHiddenCurrentPage(pRet: Integer); safecall;
    function Get_Orientation: Byte; safecall;
    procedure Set_Orientation(pRet: Byte); safecall;
    function Get_InputParameters: WideString; safecall;
    procedure Set_InputParameters(const pRet: WideString); safecall;
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_ActiveControl: AccessControl; safecall;
    function Get_DefaultControl(ControlType: Integer): AccessControl; safecall;
    procedure Circle(flags: Smallint; X: Single; Y: Single; radius: Single; color: Integer; 
                     start: Single; end_: Single; aspect: Single); safecall;
    procedure Line(flags: Smallint; x1: Single; y1: Single; x2: Single; y2: Single; color: Integer); safecall;
    procedure PSet(flags: Smallint; X: Single; Y: Single; color: Integer); safecall;
    procedure Scale(flags: Smallint; x1: Single; y1: Single; x2: Single; y2: Single); safecall;
    function TextWidth(const Expr: WideString): Single; safecall;
    function TextHeight(const Expr: WideString): Single; safecall;
    procedure Print(const Expr: WideString); safecall;
    function Get__SectionOld(Index: OleVariant): AccessSection; safecall;
    function Get_GroupLevel(Index: Integer): AccessGroupLevel; safecall;
    function Get_Report: AccessReport; safecall;
    function Get_Module: Module; safecall;
    function Get_Properties: Properties; safecall;
    function Get_Controls: Controls; safecall;
    function _NewEnum: IUnknown; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    function Get_AutoResize: WordBool; safecall;
    procedure Set_AutoResize(pRet: WordBool); safecall;
    function Get_AutoCenter: WordBool; safecall;
    procedure Set_AutoCenter(pRet: WordBool); safecall;
    function Get_PopUp: WordBool; safecall;
    procedure Set_PopUp(pRet: WordBool); safecall;
    function Get_Modal: WordBool; safecall;
    procedure Set_Modal(pRet: WordBool); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_ControlBox: WordBool; safecall;
    procedure Set_ControlBox(pRet: WordBool); safecall;
    function Get_MinMaxButtons: Byte; safecall;
    procedure Set_MinMaxButtons(pRet: Byte); safecall;
    function Get_CloseButton: WordBool; safecall;
    procedure Set_CloseButton(pRet: WordBool); safecall;
    function Get_WindowWidth: Smallint; safecall;
    procedure Set_WindowWidth(pRet: Smallint); safecall;
    function Get_WindowHeight: Smallint; safecall;
    procedure Set_WindowHeight(pRet: Smallint); safecall;
    function Get_WindowTop: Smallint; safecall;
    function Get_WindowLeft: Smallint; safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    function Get_OpenArgs: OleVariant; safecall;
    procedure Set_OpenArgs(pRet: OleVariant); safecall;
    function Get_Printer: _Printer; safecall;
    procedure Set_Printer(const pRet: _Printer); safecall;
    procedure _Set_Printer(const pRet: _Printer); safecall;
    function Get_Moveable: WordBool; safecall;
    procedure Set_Moveable(pRet: WordBool); safecall;
    function Get_UseDefaultPrinter: WordBool; safecall;
    procedure Set_UseDefaultPrinter(pRet: WordBool); safecall;
    function Get_Recordset: IDispatch; safecall;
    procedure _Set_Recordset(const pRet: IDispatch); safecall;
    function Get_RecordSourceQualifier: WideString; safecall;
    procedure Set_RecordSourceQualifier(const pRet: WideString); safecall;
    function Get_Shape: WideString; safecall;
    function Get_FilterOnLoad: WordBool; safecall;
    procedure Set_FilterOnLoad(pRet: WordBool); safecall;
    function Get_OrderByOnLoad: WordBool; safecall;
    procedure Set_OrderByOnLoad(pRet: WordBool); safecall;
    function Get_DefaultView: Byte; safecall;
    procedure Set_DefaultView(pRet: Byte); safecall;
    function Get_AllowReportView: WordBool; safecall;
    procedure Set_AllowReportView(pRet: WordBool); safecall;
    function Get_ScrollBars: Byte; safecall;
    procedure Set_ScrollBars(pRet: Byte); safecall;
    function Get_Cycle: Byte; safecall;
    procedure Set_Cycle(pRet: Byte); safecall;
    function Get_AllowDesignChanges: WordBool; safecall;
    procedure Set_AllowDesignChanges(pRet: WordBool); safecall;
    function Get_OnCurrent: WideString; safecall;
    procedure Set_OnCurrent(const pRet: WideString); safecall;
    function Get_KeyPreview: WordBool; safecall;
    procedure Set_KeyPreview(pRet: WordBool); safecall;
    function Get_TimerInterval: Integer; safecall;
    procedure Set_TimerInterval(pRet: Integer); safecall;
    function Get_CurrentView: Smallint; safecall;
    procedure Set_CurrentView(pRet: Smallint); safecall;
    procedure Requery; safecall;
    function Get_OnOpenMacro: WideString; safecall;
    procedure Set_OnOpenMacro(const pRet: WideString); safecall;
    function Get_OnCloseMacro: WideString; safecall;
    procedure Set_OnCloseMacro(const pRet: WideString); safecall;
    function Get_OnActivateMacro: WideString; safecall;
    procedure Set_OnActivateMacro(const pRet: WideString); safecall;
    function Get_OnDeactivateMacro: WideString; safecall;
    procedure Set_OnDeactivateMacro(const pRet: WideString); safecall;
    function Get_OnNoDataMacro: WideString; safecall;
    procedure Set_OnNoDataMacro(const pRet: WideString); safecall;
    function Get_OnPageMacro: WideString; safecall;
    procedure Set_OnPageMacro(const pRet: WideString); safecall;
    function Get_OnErrorMacro: WideString; safecall;
    procedure Set_OnErrorMacro(const pRet: WideString); safecall;
    function Get_OnCurrentMacro: WideString; safecall;
    procedure Set_OnCurrentMacro(const pRet: WideString); safecall;
    function Get_OnLoadMacro: WideString; safecall;
    procedure Set_OnLoadMacro(const pRet: WideString); safecall;
    function Get_OnResizeMacro: WideString; safecall;
    procedure Set_OnResizeMacro(const pRet: WideString); safecall;
    function Get_OnUnloadMacro: WideString; safecall;
    procedure Set_OnUnloadMacro(const pRet: WideString); safecall;
    function Get_OnGotFocusMacro: WideString; safecall;
    procedure Set_OnGotFocusMacro(const pRet: WideString); safecall;
    function Get_OnLostFocusMacro: WideString; safecall;
    procedure Set_OnLostFocusMacro(const pRet: WideString); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyDownMacro: WideString; safecall;
    procedure Set_OnKeyDownMacro(const pRet: WideString); safecall;
    function Get_OnKeyUpMacro: WideString; safecall;
    procedure Set_OnKeyUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyPressMacro: WideString; safecall;
    procedure Set_OnKeyPressMacro(const pRet: WideString); safecall;
    function Get_OnFilterMacro: WideString; safecall;
    procedure Set_OnFilterMacro(const pRet: WideString); safecall;
    function Get_OnApplyFilterMacro: WideString; safecall;
    procedure Set_OnApplyFilterMacro(const pRet: WideString); safecall;
    function Get_OnTimerMacro: WideString; safecall;
    procedure Set_OnTimerMacro(const pRet: WideString); safecall;
    function Get_MouseWheelMacro: WideString; safecall;
    procedure Set_MouseWheelMacro(const pRet: WideString); safecall;
    function Get_ShowPageMargins: WordBool; safecall;
    procedure Set_ShowPageMargins(pRet: WordBool); safecall;
    function Get_FitToPage: WordBool; safecall;
    procedure Set_FitToPage(pRet: WordBool); safecall;
    function Get_AllowLayoutView: WordBool; safecall;
    procedure Set_AllowLayoutView(pRet: WordBool); safecall;
    function Get_OnLoad: WideString; safecall;
    procedure Set_OnLoad(const pRet: WideString); safecall;
    function Get_OnResize: WideString; safecall;
    procedure Set_OnResize(const pRet: WideString); safecall;
    function Get_OnUnload: WideString; safecall;
    procedure Set_OnUnload(const pRet: WideString); safecall;
    function Get_OnGotFocus: WideString; safecall;
    procedure Set_OnGotFocus(const pRet: WideString); safecall;
    function Get_OnLostFocus: WideString; safecall;
    procedure Set_OnLostFocus(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_OnKeyDown: WideString; safecall;
    procedure Set_OnKeyDown(const pRet: WideString); safecall;
    function Get_OnKeyUp: WideString; safecall;
    procedure Set_OnKeyUp(const pRet: WideString); safecall;
    function Get_OnKeyPress: WideString; safecall;
    procedure Set_OnKeyPress(const pRet: WideString); safecall;
    function Get_OnFilter: WideString; safecall;
    procedure Set_OnFilter(const pRet: WideString); safecall;
    function Get_OnApplyFilter: WideString; safecall;
    procedure Set_OnApplyFilter(const pRet: WideString); safecall;
    function Get_OnTimer: WideString; safecall;
    procedure Set_OnTimer(const pRet: WideString); safecall;
    function Get_MouseWheel: WideString; safecall;
    procedure Set_MouseWheel(const pRet: WideString); safecall;
    function Get_DisplayOnSharePointSite: Byte; safecall;
    procedure Set_DisplayOnSharePointSite(pRet: Byte); safecall;
    function Get_Section(Index: OleVariant): _Section; safecall;
    function Get_RibbonName: WideString; safecall;
    procedure Set_RibbonName(const pRet: WideString); safecall;
    property FormName: WideString read Get_FormName write Set_FormName;
    property RecordSource: WideString read Get_RecordSource write Set_RecordSource;
    property Filter: WideString read Get_Filter write Set_Filter;
    property FilterOn: WordBool read Get_FilterOn write Set_FilterOn;
    property OrderBy: WideString read Get_OrderBy write Set_OrderBy;
    property OrderByOn: WordBool read Get_OrderByOn write Set_OrderByOn;
    property ServerFilter: WideString read Get_ServerFilter write Set_ServerFilter;
    property Caption: WideString read Get_Caption write Set_Caption;
    property RecordLocks: Byte read Get_RecordLocks write Set_RecordLocks;
    property PageHeader: Byte read Get_PageHeader write Set_PageHeader;
    property PageFooter: Byte read Get_PageFooter write Set_PageFooter;
    property DateGrouping: Byte read Get_DateGrouping write Set_DateGrouping;
    property GrpKeepTogether: Byte read Get_GrpKeepTogether write Set_GrpKeepTogether;
    property MinButton: WordBool read Get_MinButton write Set_MinButton;
    property MaxButton: WordBool read Get_MaxButton write Set_MaxButton;
    property Width: Smallint read Get_Width write Set_Width;
    property Picture: WideString read Get_Picture write Set_Picture;
    property PictureType: Byte read Get_PictureType write Set_PictureType;
    property PictureSizeMode: Byte read Get_PictureSizeMode write Set_PictureSizeMode;
    property PictureAlignment: Byte read Get_PictureAlignment write Set_PictureAlignment;
    property PictureTiling: WordBool read Get_PictureTiling write Set_PictureTiling;
    property PicturePages: Byte read Get_PicturePages write Set_PicturePages;
    property MenuBar: WideString read Get_MenuBar write Set_MenuBar;
    property Toolbar: WideString read Get_Toolbar write Set_Toolbar;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property GridX: Smallint read Get_GridX write Set_GridX;
    property GridY: Smallint read Get_GridY write Set_GridY;
    property LayoutForPrint: WordBool read Get_LayoutForPrint write Set_LayoutForPrint;
    property FastLaserPrinting: WordBool read Get_FastLaserPrinting write Set_FastLaserPrinting;
    property HelpFile: WideString read Get_HelpFile write Set_HelpFile;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property Hwnd: Integer read Get_Hwnd write Set_Hwnd;
    property Count: Smallint read Get_Count write Set_Count;
    property Page: Integer read Get_Page write Set_Page;
    property Pages: Smallint read Get_Pages write Set_Pages;
    property LogicalPageWidth: Integer read Get_LogicalPageWidth write Set_LogicalPageWidth;
    property LogicalPageHeight: Integer read Get_LogicalPageHeight write Set_LogicalPageHeight;
    property ZoomControl: Integer read Get_ZoomControl write Set_ZoomControl;
    property HasData: Integer read Get_HasData write Set_HasData;
    property Left: Integer read Get_Left write Set_Left;
    property Top: Integer read Get_Top write Set_Top;
    property Height: Integer read Get_Height write Set_Height;
    property PrintSection: WordBool read Get_PrintSection write Set_PrintSection;
    property NextRecord: WordBool read Get_NextRecord write Set_NextRecord;
    property MoveLayout: WordBool read Get_MoveLayout write Set_MoveLayout;
    property FormatCount: Smallint read Get_FormatCount write Set_FormatCount;
    property PrintCount: Smallint read Get_PrintCount write Set_PrintCount;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Painting: WordBool read Get_Painting write Set_Painting;
    property PrtMip: OleVariant read Get_PrtMip write Set_PrtMip;
    property PrtDevMode: OleVariant read Get_PrtDevMode write Set_PrtDevMode;
    property PrtDevNames: OleVariant read Get_PrtDevNames write Set_PrtDevNames;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property CurrentX: Single read Get_CurrentX write Set_CurrentX;
    property CurrentY: Single read Get_CurrentY write Set_CurrentY;
    property ScaleHeight: Single read Get_ScaleHeight write Set_ScaleHeight;
    property ScaleLeft: Single read Get_ScaleLeft write Set_ScaleLeft;
    property ScaleMode: Smallint read Get_ScaleMode write Set_ScaleMode;
    property ScaleTop: Single read Get_ScaleTop write Set_ScaleTop;
    property ScaleWidth: Single read Get_ScaleWidth write Set_ScaleWidth;
    property FontBold: Smallint read Get_FontBold write Set_FontBold;
    property FontItalic: Smallint read Get_FontItalic write Set_FontItalic;
    property FontName: WideString read Get_FontName write Set_FontName;
    property FontSize: Smallint read Get_FontSize write Set_FontSize;
    property FontUnderline: Smallint read Get_FontUnderline write Set_FontUnderline;
    property DrawMode: Smallint read Get_DrawMode write Set_DrawMode;
    property DrawStyle: Smallint read Get_DrawStyle write Set_DrawStyle;
    property DrawWidth: Smallint read Get_DrawWidth write Set_DrawWidth;
    property FillColor: Integer read Get_FillColor write Set_FillColor;
    property FillStyle: Smallint read Get_FillStyle write Set_FillStyle;
    property _Name: WideString read Get__Name write Set__Name;
    property PaletteSource: WideString read Get_PaletteSource write Set_PaletteSource;
    property Tag: WideString read Get_Tag write Set_Tag;
    property PaintPalette: OleVariant read Get_PaintPalette write Set_PaintPalette;
    property OnMenu: WideString read Get_OnMenu write Set_OnMenu;
    property OnOpen: WideString read Get_OnOpen write Set_OnOpen;
    property OnClose: WideString read Get_OnClose write Set_OnClose;
    property OnActivate: WideString read Get_OnActivate write Set_OnActivate;
    property OnDeactivate: WideString read Get_OnDeactivate write Set_OnDeactivate;
    property OnNoData: WideString read Get_OnNoData write Set_OnNoData;
    property OnPage: WideString read Get_OnPage write Set_OnPage;
    property OnError: WideString read Get_OnError write Set_OnError;
    property Dirty: WordBool read Get_Dirty write Set_Dirty;
    property CurrentRecord: Integer read Get_CurrentRecord write Set_CurrentRecord;
    property PictureData: OleVariant read Get_PictureData write Set_PictureData;
    property PicturePalette: OleVariant read Get_PicturePalette write Set_PicturePalette;
    property HasModule: WordBool read Get_HasModule write Set_HasModule;
    property acHiddenCurrentPage: Integer read Get_acHiddenCurrentPage write Set_acHiddenCurrentPage;
    property Orientation: Byte read Get_Orientation write Set_Orientation;
    property InputParameters: WideString read Get_InputParameters write Set_InputParameters;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property ActiveControl: AccessControl read Get_ActiveControl;
    property DefaultControl[ControlType: Integer]: AccessControl read Get_DefaultControl;
    property _SectionOld[Index: OleVariant]: AccessSection read Get__SectionOld;
    property GroupLevel[Index: Integer]: AccessGroupLevel read Get_GroupLevel;
    property Report: AccessReport read Get_Report;
    property Module: Module read Get_Module;
    property Properties: Properties read Get_Properties;
    property Controls: Controls read Get_Controls;
    property Name: WideString read Get_Name write Set_Name;
    property AutoResize: WordBool read Get_AutoResize write Set_AutoResize;
    property AutoCenter: WordBool read Get_AutoCenter write Set_AutoCenter;
    property PopUp: WordBool read Get_PopUp write Set_PopUp;
    property Modal: WordBool read Get_Modal write Set_Modal;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property ControlBox: WordBool read Get_ControlBox write Set_ControlBox;
    property MinMaxButtons: Byte read Get_MinMaxButtons write Set_MinMaxButtons;
    property CloseButton: WordBool read Get_CloseButton write Set_CloseButton;
    property WindowWidth: Smallint read Get_WindowWidth write Set_WindowWidth;
    property WindowHeight: Smallint read Get_WindowHeight write Set_WindowHeight;
    property WindowTop: Smallint read Get_WindowTop;
    property WindowLeft: Smallint read Get_WindowLeft;
    property OpenArgs: OleVariant read Get_OpenArgs write Set_OpenArgs;
    property Printer: _Printer read Get_Printer write Set_Printer;
    property Moveable: WordBool read Get_Moveable write Set_Moveable;
    property UseDefaultPrinter: WordBool read Get_UseDefaultPrinter write Set_UseDefaultPrinter;
    property Recordset: IDispatch read Get_Recordset write _Set_Recordset;
    property RecordSourceQualifier: WideString read Get_RecordSourceQualifier write Set_RecordSourceQualifier;
    property Shape: WideString read Get_Shape;
    property FilterOnLoad: WordBool read Get_FilterOnLoad write Set_FilterOnLoad;
    property OrderByOnLoad: WordBool read Get_OrderByOnLoad write Set_OrderByOnLoad;
    property DefaultView: Byte read Get_DefaultView write Set_DefaultView;
    property AllowReportView: WordBool read Get_AllowReportView write Set_AllowReportView;
    property ScrollBars: Byte read Get_ScrollBars write Set_ScrollBars;
    property Cycle: Byte read Get_Cycle write Set_Cycle;
    property AllowDesignChanges: WordBool read Get_AllowDesignChanges write Set_AllowDesignChanges;
    property OnCurrent: WideString read Get_OnCurrent write Set_OnCurrent;
    property KeyPreview: WordBool read Get_KeyPreview write Set_KeyPreview;
    property TimerInterval: Integer read Get_TimerInterval write Set_TimerInterval;
    property CurrentView: Smallint read Get_CurrentView write Set_CurrentView;
    property OnOpenMacro: WideString read Get_OnOpenMacro write Set_OnOpenMacro;
    property OnCloseMacro: WideString read Get_OnCloseMacro write Set_OnCloseMacro;
    property OnActivateMacro: WideString read Get_OnActivateMacro write Set_OnActivateMacro;
    property OnDeactivateMacro: WideString read Get_OnDeactivateMacro write Set_OnDeactivateMacro;
    property OnNoDataMacro: WideString read Get_OnNoDataMacro write Set_OnNoDataMacro;
    property OnPageMacro: WideString read Get_OnPageMacro write Set_OnPageMacro;
    property OnErrorMacro: WideString read Get_OnErrorMacro write Set_OnErrorMacro;
    property OnCurrentMacro: WideString read Get_OnCurrentMacro write Set_OnCurrentMacro;
    property OnLoadMacro: WideString read Get_OnLoadMacro write Set_OnLoadMacro;
    property OnResizeMacro: WideString read Get_OnResizeMacro write Set_OnResizeMacro;
    property OnUnloadMacro: WideString read Get_OnUnloadMacro write Set_OnUnloadMacro;
    property OnGotFocusMacro: WideString read Get_OnGotFocusMacro write Set_OnGotFocusMacro;
    property OnLostFocusMacro: WideString read Get_OnLostFocusMacro write Set_OnLostFocusMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property OnKeyDownMacro: WideString read Get_OnKeyDownMacro write Set_OnKeyDownMacro;
    property OnKeyUpMacro: WideString read Get_OnKeyUpMacro write Set_OnKeyUpMacro;
    property OnKeyPressMacro: WideString read Get_OnKeyPressMacro write Set_OnKeyPressMacro;
    property OnFilterMacro: WideString read Get_OnFilterMacro write Set_OnFilterMacro;
    property OnApplyFilterMacro: WideString read Get_OnApplyFilterMacro write Set_OnApplyFilterMacro;
    property OnTimerMacro: WideString read Get_OnTimerMacro write Set_OnTimerMacro;
    property MouseWheelMacro: WideString read Get_MouseWheelMacro write Set_MouseWheelMacro;
    property ShowPageMargins: WordBool read Get_ShowPageMargins write Set_ShowPageMargins;
    property FitToPage: WordBool read Get_FitToPage write Set_FitToPage;
    property AllowLayoutView: WordBool read Get_AllowLayoutView write Set_AllowLayoutView;
    property OnLoad: WideString read Get_OnLoad write Set_OnLoad;
    property OnResize: WideString read Get_OnResize write Set_OnResize;
    property OnUnload: WideString read Get_OnUnload write Set_OnUnload;
    property OnGotFocus: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property OnFilter: WideString read Get_OnFilter write Set_OnFilter;
    property OnApplyFilter: WideString read Get_OnApplyFilter write Set_OnApplyFilter;
    property OnTimer: WideString read Get_OnTimer write Set_OnTimer;
    property MouseWheel: WideString read Get_MouseWheel write Set_MouseWheel;
    property DisplayOnSharePointSite: Byte read Get_DisplayOnSharePointSite write Set_DisplayOnSharePointSite;
    property Section[Index: OleVariant]: _Section read Get_Section;
    property RibbonName: WideString read Get_RibbonName write Set_RibbonName;
  end;

// *********************************************************************//
// DispIntf:  _Report3Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B0E35B78-55B0-47FB-8951-CA616F25CEAF}
// *********************************************************************//
  _Report3Disp = dispinterface
    ['{B0E35B78-55B0-47FB-8951-CA616F25CEAF}']
    property FormName: WideString dispid 39;
    property RecordSource: WideString dispid 156;
    property Filter: WideString dispid 245;
    property FilterOn: WordBool dispid 332;
    property OrderBy: WideString dispid 331;
    property OrderByOn: WordBool dispid 336;
    property ServerFilter: WideString dispid 246;
    property Caption: WideString dispid 17;
    property RecordLocks: Byte dispid 26;
    property PageHeader: Byte dispid 43;
    property PageFooter: Byte dispid 40;
    property DateGrouping: Byte dispid 282;
    property GrpKeepTogether: Byte dispid 283;
    property MinButton: WordBool dispid 95;
    property MaxButton: WordBool dispid 94;
    property Width: Smallint dispid 150;
    property Picture: WideString dispid 7;
    property PictureType: Byte dispid 341;
    property PictureSizeMode: Byte dispid 312;
    property PictureAlignment: Byte dispid 309;
    property PictureTiling: WordBool dispid 313;
    property PicturePages: Byte dispid 310;
    property MenuBar: WideString dispid 240;
    property Toolbar: WideString dispid 353;
    property ShortcutMenuBar: WideString dispid 304;
    property GridX: Smallint dispid 41;
    property GridY: Smallint dispid 42;
    property LayoutForPrint: WordBool dispid 143;
    property FastLaserPrinting: WordBool dispid 144;
    property HelpFile: WideString dispid 218;
    property HelpContextId: Integer dispid 219;
    property Hwnd: Integer dispid 192;
    property Count: Smallint dispid 195;
    property Page: Integer dispid 196;
    property Pages: Smallint dispid 197;
    property LogicalPageWidth: Integer dispid 198;
    property LogicalPageHeight: Integer dispid 199;
    property ZoomControl: Integer dispid 217;
    property HasData: Integer dispid 202;
    property Left: Integer dispid 54;
    property Top: Integer dispid 141;
    property Height: Integer dispid 44;
    property PrintSection: WordBool dispid 225;
    property NextRecord: WordBool dispid 226;
    property MoveLayout: WordBool dispid 227;
    property FormatCount: Smallint dispid 228;
    property PrintCount: Smallint dispid 229;
    property Visible: WordBool dispid 148;
    property Painting: WordBool dispid 241;
    property PrtMip: OleVariant dispid 189;
    property PrtDevMode: OleVariant dispid 190;
    property PrtDevNames: OleVariant dispid 191;
    property ForeColor: Integer dispid 204;
    property CurrentX: Single dispid 205;
    property CurrentY: Single dispid 206;
    property ScaleHeight: Single dispid 207;
    property ScaleLeft: Single dispid 208;
    property ScaleMode: Smallint dispid 209;
    property ScaleTop: Single dispid 210;
    property ScaleWidth: Single dispid 211;
    property FontBold: Smallint dispid 32;
    property FontItalic: Smallint dispid 33;
    property FontName: WideString dispid 34;
    property FontSize: Smallint dispid 35;
    property FontUnderline: Smallint dispid 36;
    property DrawMode: Smallint dispid 212;
    property DrawStyle: Smallint dispid 213;
    property DrawWidth: Smallint dispid 214;
    property FillColor: Integer dispid 216;
    property FillStyle: Smallint dispid 215;
    property _Name: WideString dispid 20;
    property PaletteSource: WideString dispid 98;
    property Tag: WideString dispid 266;
    property PaintPalette: OleVariant dispid 100;
    property OnMenu: WideString dispid 60;
    property OnOpen: WideString dispid 77;
    property OnClose: WideString dispid 78;
    property OnActivate: WideString dispid 112;
    property OnDeactivate: WideString dispid 113;
    property OnNoData: WideString dispid 121;
    property OnPage: WideString dispid 83;
    property OnError: WideString dispid 119;
    property Dirty: WordBool dispid 286;
    property CurrentRecord: Integer dispid 302;
    property PictureData: OleVariant dispid 188;
    property PicturePalette: OleVariant dispid 311;
    property HasModule: WordBool dispid 342;
    property acHiddenCurrentPage: Integer dispid 365;
    property Orientation: Byte dispid 370;
    property InputParameters: WideString dispid 66;
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property ActiveControl: AccessControl readonly dispid 2006;
    property DefaultControl[ControlType: Integer]: AccessControl readonly dispid 2150;
    procedure Circle(flags: Smallint; X: Single; Y: Single; radius: Single; color: Integer; 
                     start: Single; end_: Single; aspect: Single); dispid 2118;
    procedure Line(flags: Smallint; x1: Single; y1: Single; x2: Single; y2: Single; color: Integer); dispid 2152;
    procedure PSet(flags: Smallint; X: Single; Y: Single; color: Integer); dispid 2117;
    procedure Scale(flags: Smallint; x1: Single; y1: Single; x2: Single; y2: Single); dispid 2116;
    function TextWidth(const Expr: WideString): Single; dispid 2114;
    function TextHeight(const Expr: WideString): Single; dispid 2115;
    procedure Print(const Expr: WideString); dispid 2153;
    property _SectionOld[Index: OleVariant]: AccessSection readonly dispid 2088;
    property GroupLevel[Index: Integer]: AccessGroupLevel readonly dispid 2098;
    property Report: AccessReport readonly dispid 2097;
    property Module: Module readonly dispid 2090;
    property Properties: Properties readonly dispid 2091;
    property Controls: Controls readonly dispid 0;
    function _NewEnum: IUnknown; dispid -4;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Name: WideString dispid -2147418112;
    property AutoResize: WordBool dispid 6;
    property AutoCenter: WordBool dispid 278;
    property PopUp: WordBool dispid 90;
    property Modal: WordBool dispid 62;
    property BorderStyle: Byte dispid 9;
    property ControlBox: WordBool dispid 97;
    property MinMaxButtons: Byte dispid 328;
    property CloseButton: WordBool dispid 303;
    property WindowWidth: Smallint dispid 287;
    property WindowHeight: Smallint dispid 288;
    property WindowTop: Smallint readonly dispid 402;
    property WindowLeft: Smallint readonly dispid 403;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    property OpenArgs: OleVariant dispid 284;
    property Printer: _Printer dispid 2365;
    property Moveable: WordBool dispid 410;
    property UseDefaultPrinter: WordBool dispid 2418;
    property Recordset: IDispatch dispid 2196;
    property RecordSourceQualifier: WideString dispid 445;
    property Shape: WideString readonly dispid 2423;
    property FilterOnLoad: WordBool dispid 452;
    property OrderByOnLoad: WordBool dispid 453;
    property DefaultView: Byte dispid 147;
    property AllowReportView: WordBool dispid 474;
    property ScrollBars: Byte dispid 152;
    property Cycle: Byte dispid 330;
    property AllowDesignChanges: WordBool dispid 373;
    property OnCurrent: WideString dispid 87;
    property KeyPreview: WordBool dispid 327;
    property TimerInterval: Integer dispid 111;
    property CurrentView: Smallint dispid 289;
    procedure Requery; dispid 2018;
    property OnOpenMacro: WideString dispid 510;
    property OnCloseMacro: WideString dispid 511;
    property OnActivateMacro: WideString dispid 521;
    property OnDeactivateMacro: WideString dispid 522;
    property OnNoDataMacro: WideString dispid 524;
    property OnPageMacro: WideString dispid 525;
    property OnErrorMacro: WideString dispid 514;
    property OnCurrentMacro: WideString dispid 497;
    property OnLoadMacro: WideString dispid 512;
    property OnResizeMacro: WideString dispid 523;
    property OnUnloadMacro: WideString dispid 513;
    property OnGotFocusMacro: WideString dispid 502;
    property OnLostFocusMacro: WideString dispid 503;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property OnKeyDownMacro: WideString dispid 500;
    property OnKeyUpMacro: WideString dispid 501;
    property OnKeyPressMacro: WideString dispid 499;
    property OnFilterMacro: WideString dispid 526;
    property OnApplyFilterMacro: WideString dispid 527;
    property OnTimerMacro: WideString dispid 520;
    property MouseWheelMacro: WideString dispid 492;
    property ShowPageMargins: WordBool dispid 559;
    property FitToPage: WordBool dispid 560;
    property AllowLayoutView: WordBool dispid 563;
    property OnLoad: WideString dispid 127;
    property OnResize: WideString dispid 117;
    property OnUnload: WideString dispid 128;
    property OnGotFocus: WideString dispid 115;
    property OnLostFocus: WideString dispid 116;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property OnKeyDown: WideString dispid 104;
    property OnKeyUp: WideString dispid 105;
    property OnKeyPress: WideString dispid 106;
    property OnFilter: WideString dispid 333;
    property OnApplyFilter: WideString dispid 334;
    property OnTimer: WideString dispid 110;
    property MouseWheel: WideString dispid 441;
    property DisplayOnSharePointSite: Byte dispid 561;
    property Section[Index: OleVariant]: _Section readonly dispid 2500;
    property RibbonName: WideString dispid 585;
  end;

// *********************************************************************//
// DispIntf:  _ReportEvents2
// Flags:     (4112) Hidden Dispatchable
// GUID:      {D7281A87-4B30-41C5-AB7B-FABF9A35442A}
// *********************************************************************//
  _ReportEvents2 = dispinterface
    ['{D7281A87-4B30-41C5-AB7B-FABF9A35442A}']
    procedure Open(out Cancel: Smallint); dispid 2066;
    procedure Close; dispid 2070;
    procedure Activate; dispid 2071;
    procedure Deactivate; dispid 2072;
    procedure Error(var DataErr: Smallint; out Response: Smallint); dispid 2083;
    procedure NoData(out Cancel: Smallint); dispid 2161;
    procedure Page; dispid 2162;
    procedure Current; dispid 2058;
    procedure Load; dispid 2067;
    procedure Resize; dispid 2068;
    procedure Unload(out Cancel: Smallint); dispid 2069;
    procedure GotFocus; dispid 2073;
    procedure LostFocus; dispid 2074;
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid -602;
    procedure KeyPress(var KeyAscii: Smallint); dispid -603;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid -604;
    procedure Timer; dispid 2084;
    procedure Filter(out Cancel: Smallint; var FilterType: Smallint); dispid 2155;
    procedure ApplyFilter(out Cancel: Smallint; var ApplyType: Smallint); dispid 2156;
    procedure MouseWheel(Page: WordBool; Count: Integer); dispid 2401;
  end;

// *********************************************************************//
// Interface: _Attachment
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E980-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _Attachment = interface(IAccessible)
    ['{3B06E980-E47C-11CD-8701-00AA003F0F07}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_OldValue: OleVariant; safecall;
    function Get_Properties: Properties; safecall;
    procedure SizeToFit; safecall;
    procedure Requery; safecall;
    procedure Goto_; safecall;
    procedure SetFocus; safecall;
    function Get_Controls: Children; safecall;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant; safecall;
    function Get_Hyperlink: _Hyperlink; safecall;
    function Get_EventProcPrefix: WideString; safecall;
    procedure Set_EventProcPrefix(const pRet: WideString); safecall;
    function Get__Name: WideString; safecall;
    procedure Set__Name(const pRet: WideString); safecall;
    function Get_ControlType: Byte; safecall;
    procedure Set_ControlType(pRet: Byte); safecall;
    function Get_PictureSizeMode: Byte; safecall;
    procedure Set_PictureSizeMode(pRet: Byte); safecall;
    function Get_PictureAlignment: Byte; safecall;
    procedure Set_PictureAlignment(pRet: Byte); safecall;
    function Get_PictureTiling: WordBool; safecall;
    procedure Set_PictureTiling(pRet: WordBool); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(pRet: WordBool); safecall;
    function Get_DisplayWhen: Byte; safecall;
    procedure Set_DisplayWhen(pRet: Byte); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(pRet: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(pRet: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(pRet: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(pRet: Smallint); safecall;
    function Get_BackStyle: Byte; safecall;
    procedure Set_BackStyle(pRet: Byte); safecall;
    function Get_BackColor: Integer; safecall;
    procedure Set_BackColor(pRet: Integer); safecall;
    function Get_SpecialEffect: Byte; safecall;
    procedure Set_SpecialEffect(pRet: Byte); safecall;
    function Get_BorderStyle: Byte; safecall;
    procedure Set_BorderStyle(pRet: Byte); safecall;
    function Get_OldBorderStyle: Byte; safecall;
    procedure Set_OldBorderStyle(pRet: Byte); safecall;
    function Get_BorderColor: Integer; safecall;
    procedure Set_BorderColor(pRet: Integer); safecall;
    function Get_BorderWidth: Byte; safecall;
    procedure Set_BorderWidth(pRet: Byte); safecall;
    function Get_BorderLineStyle: Byte; safecall;
    procedure Set_BorderLineStyle(pRet: Byte); safecall;
    function Get_ControlTipText: WideString; safecall;
    procedure Set_ControlTipText(const pRet: WideString); safecall;
    function Get_HelpContextId: Integer; safecall;
    procedure Set_HelpContextId(pRet: Integer); safecall;
    function Get_Section: Smallint; safecall;
    procedure Set_Section(pRet: Smallint); safecall;
    function Get_ControlName: WideString; safecall;
    procedure Set_ControlName(const pRet: WideString); safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Set_IsVisible(pRet: WordBool); safecall;
    function Get_BeforeUpdate: WideString; safecall;
    procedure Set_BeforeUpdate(const pRet: WideString); safecall;
    function Get_AfterUpdate: WideString; safecall;
    procedure Set_AfterUpdate(const pRet: WideString); safecall;
    function Get_OnEnter: WideString; safecall;
    procedure Set_OnEnter(const pRet: WideString); safecall;
    function Get_OnExit: WideString; safecall;
    procedure Set_OnExit(const pRet: WideString); safecall;
    function Get_OnDirty: WideString; safecall;
    procedure Set_OnDirty(const pRet: WideString); safecall;
    function Get_OnChange: WideString; safecall;
    procedure Set_OnChange(const pRet: WideString); safecall;
    function Get_OnGotFocus: WideString; safecall;
    procedure Set_OnGotFocus(const pRet: WideString); safecall;
    function Get_OnLostFocus: WideString; safecall;
    procedure Set_OnLostFocus(const pRet: WideString); safecall;
    function Get_OnClick: WideString; safecall;
    procedure Set_OnClick(const pRet: WideString); safecall;
    function Get_OnDblClick: WideString; safecall;
    procedure Set_OnDblClick(const pRet: WideString); safecall;
    function Get_OnMouseDown: WideString; safecall;
    procedure Set_OnMouseDown(const pRet: WideString); safecall;
    function Get_OnMouseMove: WideString; safecall;
    procedure Set_OnMouseMove(const pRet: WideString); safecall;
    function Get_OnMouseUp: WideString; safecall;
    procedure Set_OnMouseUp(const pRet: WideString); safecall;
    function Get_OnKeyDown: WideString; safecall;
    procedure Set_OnKeyDown(const pRet: WideString); safecall;
    function Get_OnKeyUp: WideString; safecall;
    procedure Set_OnKeyUp(const pRet: WideString); safecall;
    function Get_OnKeyPress: WideString; safecall;
    procedure Set_OnKeyPress(const pRet: WideString); safecall;
    function Get_OnAttachmentCurrent: WideString; safecall;
    procedure Set_OnAttachmentCurrent(const pRet: WideString); safecall;
    function Get_BeforeUpdateMacro: WideString; safecall;
    procedure Set_BeforeUpdateMacro(const pRet: WideString); safecall;
    function Get_AfterUpdateMacro: WideString; safecall;
    procedure Set_AfterUpdateMacro(const pRet: WideString); safecall;
    function Get_OnEnterMacro: WideString; safecall;
    procedure Set_OnEnterMacro(const pRet: WideString); safecall;
    function Get_OnExitMacro: WideString; safecall;
    procedure Set_OnExitMacro(const pRet: WideString); safecall;
    function Get_OnDirtyMacro: WideString; safecall;
    procedure Set_OnDirtyMacro(const pRet: WideString); safecall;
    function Get_OnChangeMacro: WideString; safecall;
    procedure Set_OnChangeMacro(const pRet: WideString); safecall;
    function Get_OnGotFocusMacro: WideString; safecall;
    procedure Set_OnGotFocusMacro(const pRet: WideString); safecall;
    function Get_OnLostFocusMacro: WideString; safecall;
    procedure Set_OnLostFocusMacro(const pRet: WideString); safecall;
    function Get_OnClickMacro: WideString; safecall;
    procedure Set_OnClickMacro(const pRet: WideString); safecall;
    function Get_OnDblClickMacro: WideString; safecall;
    procedure Set_OnDblClickMacro(const pRet: WideString); safecall;
    function Get_OnMouseDownMacro: WideString; safecall;
    procedure Set_OnMouseDownMacro(const pRet: WideString); safecall;
    function Get_OnMouseMoveMacro: WideString; safecall;
    procedure Set_OnMouseMoveMacro(const pRet: WideString); safecall;
    function Get_OnMouseUpMacro: WideString; safecall;
    procedure Set_OnMouseUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyDownMacro: WideString; safecall;
    procedure Set_OnKeyDownMacro(const pRet: WideString); safecall;
    function Get_OnKeyUpMacro: WideString; safecall;
    procedure Set_OnKeyUpMacro(const pRet: WideString); safecall;
    function Get_OnKeyPressMacro: WideString; safecall;
    procedure Set_OnKeyPressMacro(const pRet: WideString); safecall;
    function Get_OnAttachmentCurrentMacro: WideString; safecall;
    procedure Set_OnAttachmentCurrentMacro(const pRet: WideString); safecall;
    function Get_ShortcutMenuBar: WideString; safecall;
    procedure Set_ShortcutMenuBar(const pRet: WideString); safecall;
    function Get_InSelection: WordBool; safecall;
    procedure Set_InSelection(pRet: WordBool); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pRet: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pbstrName: WideString); safecall;
    function Get_DisplayAs: AcDisplayAs; safecall;
    procedure Set_DisplayAs(pRet: AcDisplayAs); safecall;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); safecall;
    procedure Forward; safecall;
    procedure Back; safecall;
    function Get_AttachmentCount: Integer; safecall;
    function Get_CurrentAttachment: Integer; safecall;
    procedure Set_CurrentAttachment(pRet: Integer); safecall;
    function Get_FileName(var_: OleVariant): WideString; safecall;
    function Get_FileType(var_: OleVariant): WideString; safecall;
    function Get_FileURL(var_: OleVariant): WideString; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    function Get_HorizontalAnchor: AcHorizontalAnchor; safecall;
    procedure Set_HorizontalAnchor(pRet: AcHorizontalAnchor); safecall;
    function Get_VerticalAnchor: AcVerticalAnchor; safecall;
    procedure Set_VerticalAnchor(pRet: AcVerticalAnchor); safecall;
    function Get_Layout: AcLayoutType; safecall;
    function Get_LeftPadding: Smallint; safecall;
    procedure Set_LeftPadding(pRet: Smallint); safecall;
    function Get_TopPadding: Smallint; safecall;
    procedure Set_TopPadding(pRet: Smallint); safecall;
    function Get_RightPadding: Smallint; safecall;
    procedure Set_RightPadding(pRet: Smallint); safecall;
    function Get_BottomPadding: Smallint; safecall;
    procedure Set_BottomPadding(pRet: Smallint); safecall;
    function Get_GridlineStyleLeft: Byte; safecall;
    procedure Set_GridlineStyleLeft(pRet: Byte); safecall;
    function Get_GridlineStyleTop: Byte; safecall;
    procedure Set_GridlineStyleTop(pRet: Byte); safecall;
    function Get_GridlineStyleRight: Byte; safecall;
    procedure Set_GridlineStyleRight(pRet: Byte); safecall;
    function Get_GridlineStyleBottom: Byte; safecall;
    procedure Set_GridlineStyleBottom(pRet: Byte); safecall;
    function Get_GridlineWidthLeft: Byte; safecall;
    procedure Set_GridlineWidthLeft(pRet: Byte); safecall;
    function Get_GridlineWidthTop: Byte; safecall;
    procedure Set_GridlineWidthTop(pRet: Byte); safecall;
    function Get_GridlineWidthRight: Byte; safecall;
    procedure Set_GridlineWidthRight(pRet: Byte); safecall;
    function Get_GridlineWidthBottom: Byte; safecall;
    procedure Set_GridlineWidthBottom(pRet: Byte); safecall;
    function Get_GridlineColor: Integer; safecall;
    procedure Set_GridlineColor(pRet: Integer); safecall;
    function Get_DefaultPicture: WideString; safecall;
    procedure Set_DefaultPicture(const pRet: WideString); safecall;
    function Get_LayoutID: Integer; safecall;
    function Get_AutoLabel: WordBool; safecall;
    procedure Set_AutoLabel(pRet: WordBool); safecall;
    function Get_AddColon: WordBool; safecall;
    procedure Set_AddColon(pRet: WordBool); safecall;
    function Get_LabelX: Smallint; safecall;
    procedure Set_LabelX(pRet: Smallint); safecall;
    function Get_LabelY: Smallint; safecall;
    procedure Set_LabelY(pRet: Smallint); safecall;
    function Get_LabelAlign: Byte; safecall;
    procedure Set_LabelAlign(pRet: Byte); safecall;
    function Get_ColumnWidth: Smallint; safecall;
    procedure Set_ColumnWidth(pRet: Smallint); safecall;
    function Get_ColumnOrder: Smallint; safecall;
    procedure Set_ColumnOrder(pRet: Smallint); safecall;
    function Get_ColumnHidden: WordBool; safecall;
    procedure Set_ColumnHidden(pRet: WordBool); safecall;
    function Get_ControlSource: WideString; safecall;
    procedure Set_ControlSource(const pRet: WideString); safecall;
    function Get_StatusBarText: WideString; safecall;
    procedure Set_StatusBarText(const pRet: WideString); safecall;
    function Get_TabStop: WordBool; safecall;
    procedure Set_TabStop(pRet: WordBool); safecall;
    function Get_TabIndex: Smallint; safecall;
    procedure Set_TabIndex(pRet: Smallint); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRet: WordBool); safecall;
    function Get_Locked: WordBool; safecall;
    procedure Set_Locked(pRet: WordBool); safecall;
    function Get_FileData(var_: OleVariant): OleVariant; safecall;
    function Get_PictureDisp(var_: OleVariant): OleVariant; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property OldValue: OleVariant read Get_OldValue;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Hyperlink: _Hyperlink read Get_Hyperlink;
    property EventProcPrefix: WideString read Get_EventProcPrefix write Set_EventProcPrefix;
    property _Name: WideString read Get__Name write Set__Name;
    property ControlType: Byte read Get_ControlType write Set_ControlType;
    property PictureSizeMode: Byte read Get_PictureSizeMode write Set_PictureSizeMode;
    property PictureAlignment: Byte read Get_PictureAlignment write Set_PictureAlignment;
    property PictureTiling: WordBool read Get_PictureTiling write Set_PictureTiling;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property DisplayWhen: Byte read Get_DisplayWhen write Set_DisplayWhen;
    property Left: Smallint read Get_Left write Set_Left;
    property Top: Smallint read Get_Top write Set_Top;
    property Width: Smallint read Get_Width write Set_Width;
    property Height: Smallint read Get_Height write Set_Height;
    property BackStyle: Byte read Get_BackStyle write Set_BackStyle;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property SpecialEffect: Byte read Get_SpecialEffect write Set_SpecialEffect;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property OldBorderStyle: Byte read Get_OldBorderStyle write Set_OldBorderStyle;
    property BorderColor: Integer read Get_BorderColor write Set_BorderColor;
    property BorderWidth: Byte read Get_BorderWidth write Set_BorderWidth;
    property BorderLineStyle: Byte read Get_BorderLineStyle write Set_BorderLineStyle;
    property ControlTipText: WideString read Get_ControlTipText write Set_ControlTipText;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property Section: Smallint read Get_Section write Set_Section;
    property ControlName: WideString read Get_ControlName write Set_ControlName;
    property IsVisible: WordBool read Get_IsVisible write Set_IsVisible;
    property BeforeUpdate: WideString read Get_BeforeUpdate write Set_BeforeUpdate;
    property AfterUpdate: WideString read Get_AfterUpdate write Set_AfterUpdate;
    property OnEnter: WideString read Get_OnEnter write Set_OnEnter;
    property OnExit: WideString read Get_OnExit write Set_OnExit;
    property OnDirty: WideString read Get_OnDirty write Set_OnDirty;
    property OnChange: WideString read Get_OnChange write Set_OnChange;
    property OnGotFocus: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property OnAttachmentCurrent: WideString read Get_OnAttachmentCurrent write Set_OnAttachmentCurrent;
    property BeforeUpdateMacro: WideString read Get_BeforeUpdateMacro write Set_BeforeUpdateMacro;
    property AfterUpdateMacro: WideString read Get_AfterUpdateMacro write Set_AfterUpdateMacro;
    property OnEnterMacro: WideString read Get_OnEnterMacro write Set_OnEnterMacro;
    property OnExitMacro: WideString read Get_OnExitMacro write Set_OnExitMacro;
    property OnDirtyMacro: WideString read Get_OnDirtyMacro write Set_OnDirtyMacro;
    property OnChangeMacro: WideString read Get_OnChangeMacro write Set_OnChangeMacro;
    property OnGotFocusMacro: WideString read Get_OnGotFocusMacro write Set_OnGotFocusMacro;
    property OnLostFocusMacro: WideString read Get_OnLostFocusMacro write Set_OnLostFocusMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property OnKeyDownMacro: WideString read Get_OnKeyDownMacro write Set_OnKeyDownMacro;
    property OnKeyUpMacro: WideString read Get_OnKeyUpMacro write Set_OnKeyUpMacro;
    property OnKeyPressMacro: WideString read Get_OnKeyPressMacro write Set_OnKeyPressMacro;
    property OnAttachmentCurrentMacro: WideString read Get_OnAttachmentCurrentMacro write Set_OnAttachmentCurrentMacro;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property InSelection: WordBool read Get_InSelection write Set_InSelection;
    property Tag: WideString read Get_Tag write Set_Tag;
    property Name: WideString read Get_Name write Set_Name;
    property DisplayAs: AcDisplayAs read Get_DisplayAs write Set_DisplayAs;
    property AttachmentCount: Integer read Get_AttachmentCount;
    property CurrentAttachment: Integer read Get_CurrentAttachment write Set_CurrentAttachment;
    property FileName[var_: OleVariant]: WideString read Get_FileName;
    property FileType[var_: OleVariant]: WideString read Get_FileType;
    property FileURL[var_: OleVariant]: WideString read Get_FileURL;
    property HorizontalAnchor: AcHorizontalAnchor read Get_HorizontalAnchor write Set_HorizontalAnchor;
    property VerticalAnchor: AcVerticalAnchor read Get_VerticalAnchor write Set_VerticalAnchor;
    property Layout: AcLayoutType read Get_Layout;
    property LeftPadding: Smallint read Get_LeftPadding write Set_LeftPadding;
    property TopPadding: Smallint read Get_TopPadding write Set_TopPadding;
    property RightPadding: Smallint read Get_RightPadding write Set_RightPadding;
    property BottomPadding: Smallint read Get_BottomPadding write Set_BottomPadding;
    property GridlineStyleLeft: Byte read Get_GridlineStyleLeft write Set_GridlineStyleLeft;
    property GridlineStyleTop: Byte read Get_GridlineStyleTop write Set_GridlineStyleTop;
    property GridlineStyleRight: Byte read Get_GridlineStyleRight write Set_GridlineStyleRight;
    property GridlineStyleBottom: Byte read Get_GridlineStyleBottom write Set_GridlineStyleBottom;
    property GridlineWidthLeft: Byte read Get_GridlineWidthLeft write Set_GridlineWidthLeft;
    property GridlineWidthTop: Byte read Get_GridlineWidthTop write Set_GridlineWidthTop;
    property GridlineWidthRight: Byte read Get_GridlineWidthRight write Set_GridlineWidthRight;
    property GridlineWidthBottom: Byte read Get_GridlineWidthBottom write Set_GridlineWidthBottom;
    property GridlineColor: Integer read Get_GridlineColor write Set_GridlineColor;
    property DefaultPicture: WideString read Get_DefaultPicture write Set_DefaultPicture;
    property LayoutID: Integer read Get_LayoutID;
    property AutoLabel: WordBool read Get_AutoLabel write Set_AutoLabel;
    property AddColon: WordBool read Get_AddColon write Set_AddColon;
    property LabelX: Smallint read Get_LabelX write Set_LabelX;
    property LabelY: Smallint read Get_LabelY write Set_LabelY;
    property LabelAlign: Byte read Get_LabelAlign write Set_LabelAlign;
    property ColumnWidth: Smallint read Get_ColumnWidth write Set_ColumnWidth;
    property ColumnOrder: Smallint read Get_ColumnOrder write Set_ColumnOrder;
    property ColumnHidden: WordBool read Get_ColumnHidden write Set_ColumnHidden;
    property ControlSource: WideString read Get_ControlSource write Set_ControlSource;
    property StatusBarText: WideString read Get_StatusBarText write Set_StatusBarText;
    property TabStop: WordBool read Get_TabStop write Set_TabStop;
    property TabIndex: Smallint read Get_TabIndex write Set_TabIndex;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Locked: WordBool read Get_Locked write Set_Locked;
    property FileData[var_: OleVariant]: OleVariant read Get_FileData;
    property PictureDisp[var_: OleVariant]: OleVariant read Get_PictureDisp;
  end;

// *********************************************************************//
// DispIntf:  _AttachmentDisp
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E980-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  _AttachmentDisp = dispinterface
    ['{3B06E980-E47C-11CD-8701-00AA003F0F07}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property OldValue: OleVariant readonly dispid 2102;
    property Properties: Properties readonly dispid 2091;
    procedure SizeToFit; dispid 2151;
    procedure Requery; dispid 2018;
    procedure Goto_; dispid 2023;
    procedure SetFocus; dispid 2022;
    property Controls: Children readonly dispid 2190;
    function _Evaluate(const bstrExpr: WideString; var ppsa: {??PSafeArray}OleVariant): OleVariant; dispid -5;
    property Hyperlink: _Hyperlink readonly dispid 2181;
    property EventProcPrefix: WideString dispid 22;
    property _Name: WideString dispid 20;
    property ControlType: Byte dispid 21;
    property PictureSizeMode: Byte dispid 481;
    property PictureAlignment: Byte dispid 480;
    property PictureTiling: WordBool dispid 482;
    property Visible: WordBool dispid 148;
    property DisplayWhen: Byte dispid 149;
    property Left: Smallint dispid 54;
    property Top: Smallint dispid 141;
    property Width: Smallint dispid 150;
    property Height: Smallint dispid 44;
    property BackStyle: Byte dispid 29;
    property BackColor: Integer dispid 28;
    property SpecialEffect: Byte dispid 4;
    property BorderStyle: Byte dispid 9;
    property OldBorderStyle: Byte dispid 329;
    property BorderColor: Integer dispid 8;
    property BorderWidth: Byte dispid 10;
    property BorderLineStyle: Byte dispid 11;
    property ControlTipText: WideString dispid 317;
    property HelpContextId: Integer dispid 219;
    property Section: Smallint dispid 237;
    property ControlName: WideString dispid 265;
    property IsVisible: WordBool dispid 140;
    property BeforeUpdate: WideString dispid 85;
    property AfterUpdate: WideString dispid 86;
    property OnEnter: WideString dispid 222;
    property OnExit: WideString dispid 223;
    property OnDirty: WideString dispid 375;
    property OnChange: WideString dispid 114;
    property OnGotFocus: WideString dispid 115;
    property OnLostFocus: WideString dispid 116;
    property OnClick: WideString dispid 126;
    property OnDblClick: WideString dispid 224;
    property OnMouseDown: WideString dispid 107;
    property OnMouseMove: WideString dispid 109;
    property OnMouseUp: WideString dispid 108;
    property OnKeyDown: WideString dispid 104;
    property OnKeyUp: WideString dispid 105;
    property OnKeyPress: WideString dispid 106;
    property OnAttachmentCurrent: WideString dispid 484;
    property BeforeUpdateMacro: WideString dispid 496;
    property AfterUpdateMacro: WideString dispid 505;
    property OnEnterMacro: WideString dispid 497;
    property OnExitMacro: WideString dispid 498;
    property OnDirtyMacro: WideString dispid 528;
    property OnChangeMacro: WideString dispid 506;
    property OnGotFocusMacro: WideString dispid 502;
    property OnLostFocusMacro: WideString dispid 503;
    property OnClickMacro: WideString dispid 490;
    property OnDblClickMacro: WideString dispid 491;
    property OnMouseDownMacro: WideString dispid 487;
    property OnMouseMoveMacro: WideString dispid 489;
    property OnMouseUpMacro: WideString dispid 488;
    property OnKeyDownMacro: WideString dispid 500;
    property OnKeyUpMacro: WideString dispid 501;
    property OnKeyPressMacro: WideString dispid 499;
    property OnAttachmentCurrentMacro: WideString dispid 558;
    property ShortcutMenuBar: WideString dispid 304;
    property InSelection: WordBool dispid 280;
    property Tag: WideString dispid 266;
    property Name: WideString dispid -2147418112;
    property DisplayAs: AcDisplayAs dispid 479;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); dispid 2328;
    procedure Forward; dispid 2476;
    procedure Back; dispid 2477;
    property AttachmentCount: Integer readonly dispid 2478;
    property CurrentAttachment: Integer dispid 2479;
    property FileName[var_: OleVariant]: WideString readonly dispid 2480;
    property FileType[var_: OleVariant]: WideString readonly dispid 2481;
    property FileURL[var_: OleVariant]: WideString readonly dispid 2482;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
    property HorizontalAnchor: AcHorizontalAnchor dispid 478;
    property VerticalAnchor: AcVerticalAnchor dispid 477;
    property Layout: AcLayoutType readonly dispid 2460;
    property LeftPadding: Smallint dispid 454;
    property TopPadding: Smallint dispid 455;
    property RightPadding: Smallint dispid 456;
    property BottomPadding: Smallint dispid 457;
    property GridlineStyleLeft: Byte dispid 458;
    property GridlineStyleTop: Byte dispid 459;
    property GridlineStyleRight: Byte dispid 460;
    property GridlineStyleBottom: Byte dispid 461;
    property GridlineWidthLeft: Byte dispid 463;
    property GridlineWidthTop: Byte dispid 464;
    property GridlineWidthRight: Byte dispid 465;
    property GridlineWidthBottom: Byte dispid 466;
    property GridlineColor: Integer dispid 462;
    property DefaultPicture: WideString dispid 575;
    property LayoutID: Integer readonly dispid 2492;
    property AutoLabel: WordBool dispid 57;
    property AddColon: WordBool dispid 3;
    property LabelX: Smallint dispid 52;
    property LabelY: Smallint dispid 53;
    property LabelAlign: Byte dispid 51;
    property ColumnWidth: Smallint dispid 166;
    property ColumnOrder: Smallint dispid 165;
    property ColumnHidden: WordBool dispid 167;
    property ControlSource: WideString dispid 27;
    property StatusBarText: WideString dispid 135;
    property TabStop: WordBool dispid 262;
    property TabIndex: Smallint dispid 261;
    property Enabled: WordBool dispid 25;
    property Locked: WordBool dispid 56;
    property FileData[var_: OleVariant]: OleVariant readonly dispid 2501;
    property PictureDisp[var_: OleVariant]: OleVariant readonly dispid 2502;
    property accParent: IDispatch readonly dispid -5000;
    property accChildCount: Integer readonly dispid -5001;
    property accChild[varChild: OleVariant]: IDispatch readonly dispid -5002;
    property accName[varChild: OleVariant]: WideString dispid -5003;
    property accValue[varChild: OleVariant]: WideString dispid -5004;
    property accDescription[varChild: OleVariant]: WideString readonly dispid -5005;
    property accRole[varChild: OleVariant]: OleVariant readonly dispid -5006;
    property accState[varChild: OleVariant]: OleVariant readonly dispid -5007;
    property accHelp[varChild: OleVariant]: WideString readonly dispid -5008;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer readonly dispid -5009;
    property accKeyboardShortcut[varChild: OleVariant]: WideString readonly dispid -5010;
    property accFocus: OleVariant readonly dispid -5011;
    property accSelection: OleVariant readonly dispid -5012;
    property accDefaultAction[varChild: OleVariant]: WideString readonly dispid -5013;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); dispid -5014;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); dispid -5015;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; dispid -5016;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant; dispid -5017;
    procedure accDoDefaultAction(varChild: OleVariant); dispid -5018;
  end;

// *********************************************************************//
// DispIntf:  DispAttachmentEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {3B06E981-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
  DispAttachmentEvents = dispinterface
    ['{3B06E981-E47C-11CD-8701-00AA003F0F07}']
    procedure BeforeUpdate(out Cancel: Smallint); dispid 2061;
    procedure AfterUpdate; dispid 2062;
    procedure Enter; dispid 2019;
    procedure Exit(out Cancel: Smallint); dispid 2075;
    procedure Dirty(out Cancel: Smallint); dispid 2205;
    procedure Change; dispid 2077;
    procedure GotFocus; dispid 2073;
    procedure LostFocus; dispid 2074;
    procedure Click; dispid -600;
    procedure DblClick(out Cancel: Smallint); dispid -601;
    procedure MouseDown(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -605;
    procedure MouseMove(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -606;
    procedure MouseUp(var Button: Smallint; var Shift: Smallint; var X: Single; var Y: Single); dispid -607;
    procedure KeyDown(var KeyCode: Smallint; var Shift: Smallint); dispid -602;
    procedure KeyPress(var KeyAscii: Smallint); dispid -603;
    procedure KeyUp(var KeyCode: Smallint; var Shift: Smallint); dispid -604;
    procedure AttachmentCurrent; dispid 2483;
  end;

// *********************************************************************//
// Interface: _MacroError
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {22585BA1-7BD1-40AF-8095-E688176CDEB0}
// *********************************************************************//
  _MacroError = interface(IDispatch)
    ['{22585BA1-7BD1-40AF-8095-E688176CDEB0}']
    function Get_Condition: WideString; safecall;
    function Get_ActionName: WideString; safecall;
    function Get_Arguments: WideString; safecall;
    function Get_Description: WideString; safecall;
    function Get_Number: Integer; safecall;
    function Get_MacroName: WideString; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Condition: WideString read Get_Condition;
    property ActionName: WideString read Get_ActionName;
    property Arguments: WideString read Get_Arguments;
    property Description: WideString read Get_Description;
    property Number: Integer read Get_Number;
    property MacroName: WideString read Get_MacroName;
  end;

// *********************************************************************//
// DispIntf:  _MacroErrorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {22585BA1-7BD1-40AF-8095-E688176CDEB0}
// *********************************************************************//
  _MacroErrorDisp = dispinterface
    ['{22585BA1-7BD1-40AF-8095-E688176CDEB0}']
    property Condition: WideString readonly dispid 2470;
    property ActionName: WideString readonly dispid 2471;
    property Arguments: WideString readonly dispid 2472;
    property Description: WideString readonly dispid 2473;
    property Number: Integer readonly dispid 0;
    property MacroName: WideString readonly dispid 2474;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _TempVar
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FB74F43A-9732-4552-B1C2-269ABF082492}
// *********************************************************************//
  _TempVar = interface(IDispatch)
    ['{FB74F43A-9732-4552-B1C2-269ABF082492}']
    function Get__Value: OleVariant; safecall;
    procedure Set__Value(pRet: OleVariant); safecall;
    function Get_Name: WideString; safecall;
    function Get_Value: OleVariant; safecall;
    procedure Set_Value(pRet: OleVariant); safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property _Value: OleVariant read Get__Value write Set__Value;
    property Name: WideString read Get_Name;
    property Value: OleVariant read Get_Value write Set_Value;
  end;

// *********************************************************************//
// DispIntf:  _TempVarDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FB74F43A-9732-4552-B1C2-269ABF082492}
// *********************************************************************//
  _TempVarDisp = dispinterface
    ['{FB74F43A-9732-4552-B1C2-269ABF082492}']
    property _Value: OleVariant dispid 2103;
    property Name: WideString readonly dispid -2147418112;
    property Value: OleVariant dispid 0;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// Interface: _TempVars
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9E3F602F-BA36-4865-B3CD-F2EB008F62DE}
// *********************************************************************//
  _TempVars = interface(IDispatch)
    ['{9E3F602F-BA36-4865-B3CD-F2EB008F62DE}']
    function Get_Application: AccessApplication; safecall;
    function Get_Parent: IDispatch; safecall;
    function Get_Item(Index: OleVariant): TempVar; safecall;
    function Get_Count: Integer; safecall;
    function _NewEnum: IUnknown; safecall;
    procedure Add(const Name: WideString; Value: OleVariant); safecall;
    procedure Remove(var_: OleVariant); safecall;
    procedure RemoveAll; safecall;
    function IsMemberSafe(dispid: Integer): WordBool; safecall;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: TempVar read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _TempVarsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9E3F602F-BA36-4865-B3CD-F2EB008F62DE}
// *********************************************************************//
  _TempVarsDisp = dispinterface
    ['{9E3F602F-BA36-4865-B3CD-F2EB008F62DE}']
    property Application: AccessApplication readonly dispid 2005;
    property Parent: IDispatch readonly dispid 2087;
    property Item[Index: OleVariant]: TempVar readonly dispid 0; default;
    property Count: Integer readonly dispid 2001;
    function _NewEnum: IUnknown; dispid -4;
    procedure Add(const Name: WideString; Value: OleVariant); dispid 2191;
    procedure Remove(var_: OleVariant); dispid 2192;
    procedure RemoveAll; dispid 2488;
    function IsMemberSafe(dispid: Integer): WordBool; dispid 2448;
  end;

// *********************************************************************//
// The Class CoFormatCondition provides a Create and CreateRemote method to          
// create instances of the default interface _FormatCondition exposed by              
// the CoClass FormatCondition. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFormatCondition = class
    class function Create: _FormatCondition;
    class function CreateRemote(const MachineName: string): _FormatCondition;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFormatCondition
// Help String      : 
// Default Interface: _FormatCondition
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFormatConditionProperties= class;
{$ENDIF}
  TFormatCondition = class(TOleServer)
  private
    FIntf:        _FormatCondition;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFormatConditionProperties;
    function      GetServerProperties: TFormatConditionProperties;
{$ENDIF}
    function      GetDefaultInterface: _FormatCondition;
  protected
    procedure InitServerData; override;
    function Get_ForeColor: Integer;
    procedure Set_ForeColor(plResult: Integer);
    function Get_BackColor: Integer;
    procedure Set_BackColor(plResult: Integer);
    function Get_FontBold: WordBool;
    procedure Set_FontBold(pfResult: WordBool);
    function Get_FontItalic: WordBool;
    procedure Set_FontItalic(pfResult: WordBool);
    function Get_FontUnderline: WordBool;
    procedure Set_FontUnderline(pfResult: WordBool);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pfResult: WordBool);
    function Get_type_: AcFormatConditionType;
    function Get_Operator: AcFormatConditionOperator;
    function Get_Expression1: WideString;
    function Get_Expression2: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _FormatCondition);
    procedure Disconnect; override;
    procedure Modify(Type_: AcFormatConditionType; Operator: AcFormatConditionOperator); overload;
    procedure Modify(Type_: AcFormatConditionType; Operator: AcFormatConditionOperator; 
                     Expression1: OleVariant); overload;
    procedure Modify(Type_: AcFormatConditionType; Operator: AcFormatConditionOperator; 
                     Expression1: OleVariant; Expression2: OleVariant); overload;
    procedure Delete;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _FormatCondition read GetDefaultInterface;
    property type_: AcFormatConditionType read Get_type_;
    property Operator: AcFormatConditionOperator read Get_Operator;
    property Expression1: WideString read Get_Expression1;
    property Expression2: WideString read Get_Expression2;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property FontBold: WordBool read Get_FontBold write Set_FontBold;
    property FontItalic: WordBool read Get_FontItalic write Set_FontItalic;
    property FontUnderline: WordBool read Get_FontUnderline write Set_FontUnderline;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFormatConditionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFormatCondition
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFormatConditionProperties = class(TPersistent)
  private
    FServer:    TFormatCondition;
    function    GetDefaultInterface: _FormatCondition;
    constructor Create(AServer: TFormatCondition);
  protected
    function Get_ForeColor: Integer;
    procedure Set_ForeColor(plResult: Integer);
    function Get_BackColor: Integer;
    procedure Set_BackColor(plResult: Integer);
    function Get_FontBold: WordBool;
    procedure Set_FontBold(pfResult: WordBool);
    function Get_FontItalic: WordBool;
    procedure Set_FontItalic(pfResult: WordBool);
    function Get_FontUnderline: WordBool;
    procedure Set_FontUnderline(pfResult: WordBool);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pfResult: WordBool);
    function Get_type_: AcFormatConditionType;
    function Get_Operator: AcFormatConditionOperator;
    function Get_Expression1: WideString;
    function Get_Expression2: WideString;
  public
    property DefaultInterface: _FormatCondition read GetDefaultInterface;
  published
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property BackColor: Integer read Get_BackColor write Set_BackColor;
    property FontBold: WordBool read Get_FontBold write Set_FontBold;
    property FontItalic: WordBool read Get_FontItalic write Set_FontItalic;
    property FontUnderline: WordBool read Get_FontUnderline write Set_FontUnderline;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAccessHyperlink provides a Create and CreateRemote method to          
// create instances of the default interface _Hyperlink exposed by              
// the CoClass AccessHyperlink. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAccessHyperlink = class
    class function Create: _Hyperlink;
    class function CreateRemote(const MachineName: string): _Hyperlink;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAccessHyperlink
// Help String      : 
// Default Interface: _Hyperlink
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAccessHyperlinkProperties= class;
{$ENDIF}
  TAccessHyperlink = class(TOleServer)
  private
    FIntf:        _Hyperlink;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAccessHyperlinkProperties;
    function      GetServerProperties: TAccessHyperlinkProperties;
{$ENDIF}
    function      GetDefaultInterface: _Hyperlink;
  protected
    procedure InitServerData; override;
    function Get_SubAddress: WideString;
    procedure Set_SubAddress(pbstrResult: OleVariant);
    function Get_Address: WideString;
    procedure Set_Address(pbstrResult: OleVariant);
    function Get_EmailSubject: WideString;
    procedure Set_EmailSubject(pbstrResult: OleVariant);
    function Get_ScreenTip: WideString;
    procedure Set_ScreenTip(pbstrResult: OleVariant);
    function Get_TextToDisplay: WideString;
    procedure Set_TextToDisplay(pbstrResult: OleVariant);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Hyperlink);
    procedure Disconnect; override;
    procedure AddToFavorites;
    procedure Follow(NewWindow: WordBool; AddHistory: WordBool; ExtraInfo: OleVariant; 
                     Method: MsoExtraInfoMethod; const HeaderInfo: WideString);
    procedure CreateNewDocument(const FileName: WideString; EditNow: WordBool; Overwrite: WordBool);
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _Hyperlink read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAccessHyperlinkProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAccessHyperlink
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAccessHyperlinkProperties = class(TPersistent)
  private
    FServer:    TAccessHyperlink;
    function    GetDefaultInterface: _Hyperlink;
    constructor Create(AServer: TAccessHyperlink);
  protected
    function Get_SubAddress: WideString;
    procedure Set_SubAddress(pbstrResult: OleVariant);
    function Get_Address: WideString;
    procedure Set_Address(pbstrResult: OleVariant);
    function Get_EmailSubject: WideString;
    procedure Set_EmailSubject(pbstrResult: OleVariant);
    function Get_ScreenTip: WideString;
    procedure Set_ScreenTip(pbstrResult: OleVariant);
    function Get_TextToDisplay: WideString;
    procedure Set_TextToDisplay(pbstrResult: OleVariant);
  public
    property DefaultInterface: _Hyperlink read GetDefaultInterface;
  published
  end;
{$ENDIF}



// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessControl
// Help String      : 
// Default Interface: _Control
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessControl = class(TOleControl)
  private
    FIntf: _Control;
    function  GetControlInterface: _Control;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Column(Index: Integer; Row: OleVariant): OleVariant;
    function Get_Selected(lRow: Integer): Integer;
    procedure Set_Selected(lRow: Integer; pRet: Integer);
    function Get_OldValue: OleVariant;
    function Get_Form: AccessForm;
    function Get_Report: AccessReport;
    function Get_ItemData(Index: Integer): OleVariant;
    function Get_Object_: IDispatch;
    function Get_ObjectVerbs(Index: Integer): WideString;
    function Get_Properties: Properties;
    function Get_ItemsSelected: _ItemsSelected;
    function Get_Pages: Pages;
    function Get_Controls: Children;
    function Get_Hyperlink: _Hyperlink;
    function Get_SmartTags: _SmartTags;
  public
    procedure Undo;
    procedure Dropdown;
    procedure Requery;
    procedure SizeToFit;
    procedure Goto_;
    procedure SetFocus;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _Control read GetControlInterface;
    property  DefaultInterface: _Control read GetControlInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property Column[Index: Integer; Row: OleVariant]: OleVariant read Get_Column;
    property Selected[lRow: Integer]: Integer read Get_Selected write Set_Selected;
    property OldValue: OleVariant index 2102 read GetOleVariantProp;
    property Form: AccessForm read Get_Form;
    property Report: AccessReport read Get_Report;
    property ItemData[Index: Integer]: OleVariant read Get_ItemData;
    property Object_: IDispatch index 2104 read GetIDispatchProp;
    property ObjectVerbs[Index: Integer]: WideString read Get_ObjectVerbs;
    property Properties: Properties read Get_Properties;
    property ItemsSelected: _ItemsSelected read Get_ItemsSelected;
    property Pages: Pages read Get_Pages;
    property Controls: Children read Get_Controls;
    property Hyperlink: _Hyperlink read Get_Hyperlink;
    property SmartTags: _SmartTags read Get_SmartTags;
    property Layout: TOleEnum index 2460 read GetTOleEnumProp;
    property LayoutID: Integer index 2492 read GetIntegerProp;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
  published
    property Anchors;
    property LeftPadding: Smallint index 454 read GetSmallintProp write SetSmallintProp stored False;
    property TopPadding: Smallint index 455 read GetSmallintProp write SetSmallintProp stored False;
    property RightPadding: Smallint index 456 read GetSmallintProp write SetSmallintProp stored False;
    property BottomPadding: Smallint index 457 read GetSmallintProp write SetSmallintProp stored False;
    property GridlineStyleLeft: Byte index 458 read GetByteProp write SetByteProp stored False;
    property GridlineStyleTop: Byte index 459 read GetByteProp write SetByteProp stored False;
    property GridlineStyleRight: Byte index 460 read GetByteProp write SetByteProp stored False;
    property GridlineStyleBottom: Byte index 461 read GetByteProp write SetByteProp stored False;
    property GridlineWidthLeft: Byte index 463 read GetByteProp write SetByteProp stored False;
    property GridlineWidthTop: Byte index 464 read GetByteProp write SetByteProp stored False;
    property GridlineWidthRight: Byte index 465 read GetByteProp write SetByteProp stored False;
    property GridlineWidthBottom: Byte index 466 read GetByteProp write SetByteProp stored False;
    property GridlineColor: Integer index 462 read GetIntegerProp write SetIntegerProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessGroupLevel
// Help String      : 
// Default Interface: _GroupLevel
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessGroupLevel = class(TOleControl)
  private
    FIntf: _GroupLevel;
    function  GetControlInterface: _GroupLevel;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Properties: Properties;
  public
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _GroupLevel read GetControlInterface;
    property  DefaultInterface: _GroupLevel read GetControlInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property Properties: Properties read Get_Properties;
  published
    property Anchors;
    property ControlSource: WideString index 27 read GetWideStringProp write SetWideStringProp stored False;
    property SortOrder: WordBool index 174 read GetWordBoolProp write SetWordBoolProp stored False;
    property GroupHeader: WordBool index 175 read GetWordBoolProp write SetWordBoolProp stored False;
    property GroupFooter: WordBool index 176 read GetWordBoolProp write SetWordBoolProp stored False;
    property GroupOn: Smallint index 177 read GetSmallintProp write SetSmallintProp stored False;
    property GroupInterval: Integer index 178 read GetIntegerProp write SetIntegerProp stored False;
    property KeepTogether: Byte index 75 read GetByteProp write SetByteProp stored False;
  end;

// *********************************************************************//
// The Class CoFormOld provides a Create and CreateRemote method to          
// create instances of the default interface _Form exposed by              
// the CoClass FormOld. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFormOld = class
    class function Create: _Form;
    class function CreateRemote(const MachineName: string): _Form;
  end;

// *********************************************************************//
// The Class CoReportOld provides a Create and CreateRemote method to          
// create instances of the default interface _Report exposed by              
// the CoClass ReportOld. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReportOld = class
    class function Create: _Report;
    class function CreateRemote(const MachineName: string): _Report;
  end;

// *********************************************************************//
// The Class CoAccessApplication provides a Create and CreateRemote method to          
// create instances of the default interface _Application exposed by              
// the CoClass AccessApplication. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAccessApplication = class
    class function Create: _Application;
    class function CreateRemote(const MachineName: string): _Application;
  end;

// *********************************************************************//
// The Class CoAccessReferences provides a Create and CreateRemote method to          
// create instances of the default interface _References exposed by              
// the CoClass AccessReferences. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAccessReferences = class
    class function Create: _References;
    class function CreateRemote(const MachineName: string): _References;
  end;

  TAccessReferencesItemAdded = procedure(ASender: TObject; const Reference: Reference) of object;
  TAccessReferencesItemRemoved = procedure(ASender: TObject; const Reference: Reference) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAccessReferences
// Help String      : 
// Default Interface: _References
// Def. Intf. DISP? : No
// Event   Interface: _References_Events
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAccessReferencesProperties= class;
{$ENDIF}
  TAccessReferences = class(TOleServer)
  private
    FOnItemAdded: TAccessReferencesItemAdded;
    FOnItemRemoved: TAccessReferencesItemRemoved;
    FIntf:        _References;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAccessReferencesProperties;
    function      GetServerProperties: TAccessReferencesProperties;
{$ENDIF}
    function      GetDefaultInterface: _References;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Parent: IDispatch;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _References);
    procedure Disconnect; override;
    function Item(var_: OleVariant): Reference;
    function _NewEnum: IUnknown;
    function AddFromGuid(const Guid: WideString; Major: Integer; Minor: Integer): Reference;
    function AddFromFile(const FileName: WideString): Reference;
    procedure Remove(const Reference: Reference);
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _References read GetDefaultInterface;
    property Parent: IDispatch read Get_Parent;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAccessReferencesProperties read GetServerProperties;
{$ENDIF}
    property OnItemAdded: TAccessReferencesItemAdded read FOnItemAdded write FOnItemAdded;
    property OnItemRemoved: TAccessReferencesItemRemoved read FOnItemRemoved write FOnItemRemoved;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAccessReferences
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAccessReferencesProperties = class(TPersistent)
  private
    FServer:    TAccessReferences;
    function    GetDefaultInterface: _References;
    constructor Create(AServer: TAccessReferences);
  protected
    function Get_Parent: IDispatch;
    function Get_Count: Integer;
  public
    property DefaultInterface: _References read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDataAccessPage provides a Create and CreateRemote method to          
// create instances of the default interface _DataAccessPage exposed by              
// the CoClass DataAccessPage. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDataAccessPage = class
    class function Create: _DataAccessPage;
    class function CreateRemote(const MachineName: string): _DataAccessPage;
  end;

// *********************************************************************//
// The Class CoAllForms provides a Create and CreateRemote method to          
// create instances of the default interface AllObjects exposed by              
// the CoClass AllForms. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAllForms = class
    class function Create: AllObjects;
    class function CreateRemote(const MachineName: string): AllObjects;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAllForms
// Help String      : 
// Default Interface: AllObjects
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAllFormsProperties= class;
{$ENDIF}
  TAllForms = class(TOleServer)
  private
    FIntf:        AllObjects;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAllFormsProperties;
    function      GetServerProperties: TAllFormsProperties;
{$ENDIF}
    function      GetDefaultInterface: AllObjects;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: AllObjects);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: AllObjects read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[var_: OleVariant]: AccessObject read Get_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAllFormsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAllForms
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAllFormsProperties = class(TPersistent)
  private
    FServer:    TAllForms;
    function    GetDefaultInterface: AllObjects;
    constructor Create(AServer: TAllForms);
  protected
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    property DefaultInterface: AllObjects read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAllReports provides a Create and CreateRemote method to          
// create instances of the default interface AllObjects exposed by              
// the CoClass AllReports. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAllReports = class
    class function Create: AllObjects;
    class function CreateRemote(const MachineName: string): AllObjects;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAllReports
// Help String      : 
// Default Interface: AllObjects
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAllReportsProperties= class;
{$ENDIF}
  TAllReports = class(TOleServer)
  private
    FIntf:        AllObjects;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAllReportsProperties;
    function      GetServerProperties: TAllReportsProperties;
{$ENDIF}
    function      GetDefaultInterface: AllObjects;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: AllObjects);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: AllObjects read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[var_: OleVariant]: AccessObject read Get_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAllReportsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAllReports
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAllReportsProperties = class(TPersistent)
  private
    FServer:    TAllReports;
    function    GetDefaultInterface: AllObjects;
    constructor Create(AServer: TAllReports);
  protected
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    property DefaultInterface: AllObjects read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAllMacros provides a Create and CreateRemote method to          
// create instances of the default interface AllObjects exposed by              
// the CoClass AllMacros. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAllMacros = class
    class function Create: AllObjects;
    class function CreateRemote(const MachineName: string): AllObjects;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAllMacros
// Help String      : 
// Default Interface: AllObjects
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAllMacrosProperties= class;
{$ENDIF}
  TAllMacros = class(TOleServer)
  private
    FIntf:        AllObjects;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAllMacrosProperties;
    function      GetServerProperties: TAllMacrosProperties;
{$ENDIF}
    function      GetDefaultInterface: AllObjects;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: AllObjects);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: AllObjects read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[var_: OleVariant]: AccessObject read Get_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAllMacrosProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAllMacros
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAllMacrosProperties = class(TPersistent)
  private
    FServer:    TAllMacros;
    function    GetDefaultInterface: AllObjects;
    constructor Create(AServer: TAllMacros);
  protected
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    property DefaultInterface: AllObjects read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAllModules provides a Create and CreateRemote method to          
// create instances of the default interface AllObjects exposed by              
// the CoClass AllModules. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAllModules = class
    class function Create: AllObjects;
    class function CreateRemote(const MachineName: string): AllObjects;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAllModules
// Help String      : 
// Default Interface: AllObjects
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAllModulesProperties= class;
{$ENDIF}
  TAllModules = class(TOleServer)
  private
    FIntf:        AllObjects;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAllModulesProperties;
    function      GetServerProperties: TAllModulesProperties;
{$ENDIF}
    function      GetDefaultInterface: AllObjects;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: AllObjects);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: AllObjects read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[var_: OleVariant]: AccessObject read Get_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAllModulesProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAllModules
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAllModulesProperties = class(TPersistent)
  private
    FServer:    TAllModules;
    function    GetDefaultInterface: AllObjects;
    constructor Create(AServer: TAllModules);
  protected
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    property DefaultInterface: AllObjects read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAllDataAccessPages provides a Create and CreateRemote method to          
// create instances of the default interface AllObjects exposed by              
// the CoClass AllDataAccessPages. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAllDataAccessPages = class
    class function Create: AllObjects;
    class function CreateRemote(const MachineName: string): AllObjects;
  end;

// *********************************************************************//
// The Class CoAllTables provides a Create and CreateRemote method to          
// create instances of the default interface AllObjects exposed by              
// the CoClass AllTables. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAllTables = class
    class function Create: AllObjects;
    class function CreateRemote(const MachineName: string): AllObjects;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAllTables
// Help String      : 
// Default Interface: AllObjects
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAllTablesProperties= class;
{$ENDIF}
  TAllTables = class(TOleServer)
  private
    FIntf:        AllObjects;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAllTablesProperties;
    function      GetServerProperties: TAllTablesProperties;
{$ENDIF}
    function      GetDefaultInterface: AllObjects;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: AllObjects);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: AllObjects read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[var_: OleVariant]: AccessObject read Get_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAllTablesProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAllTables
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAllTablesProperties = class(TPersistent)
  private
    FServer:    TAllTables;
    function    GetDefaultInterface: AllObjects;
    constructor Create(AServer: TAllTables);
  protected
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    property DefaultInterface: AllObjects read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAllQueries provides a Create and CreateRemote method to          
// create instances of the default interface AllObjects exposed by              
// the CoClass AllQueries. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAllQueries = class
    class function Create: AllObjects;
    class function CreateRemote(const MachineName: string): AllObjects;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAllQueries
// Help String      : 
// Default Interface: AllObjects
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAllQueriesProperties= class;
{$ENDIF}
  TAllQueries = class(TOleServer)
  private
    FIntf:        AllObjects;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAllQueriesProperties;
    function      GetServerProperties: TAllQueriesProperties;
{$ENDIF}
    function      GetDefaultInterface: AllObjects;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: AllObjects);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: AllObjects read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[var_: OleVariant]: AccessObject read Get_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAllQueriesProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAllQueries
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAllQueriesProperties = class(TPersistent)
  private
    FServer:    TAllQueries;
    function    GetDefaultInterface: AllObjects;
    constructor Create(AServer: TAllQueries);
  protected
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    property DefaultInterface: AllObjects read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAllViews provides a Create and CreateRemote method to          
// create instances of the default interface AllObjects exposed by              
// the CoClass AllViews. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAllViews = class
    class function Create: AllObjects;
    class function CreateRemote(const MachineName: string): AllObjects;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAllViews
// Help String      : 
// Default Interface: AllObjects
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAllViewsProperties= class;
{$ENDIF}
  TAllViews = class(TOleServer)
  private
    FIntf:        AllObjects;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAllViewsProperties;
    function      GetServerProperties: TAllViewsProperties;
{$ENDIF}
    function      GetDefaultInterface: AllObjects;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: AllObjects);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: AllObjects read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[var_: OleVariant]: AccessObject read Get_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAllViewsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAllViews
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAllViewsProperties = class(TPersistent)
  private
    FServer:    TAllViews;
    function    GetDefaultInterface: AllObjects;
    constructor Create(AServer: TAllViews);
  protected
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    property DefaultInterface: AllObjects read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAllStoredProcedures provides a Create and CreateRemote method to          
// create instances of the default interface AllObjects exposed by              
// the CoClass AllStoredProcedures. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAllStoredProcedures = class
    class function Create: AllObjects;
    class function CreateRemote(const MachineName: string): AllObjects;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAllStoredProcedures
// Help String      : 
// Default Interface: AllObjects
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAllStoredProceduresProperties= class;
{$ENDIF}
  TAllStoredProcedures = class(TOleServer)
  private
    FIntf:        AllObjects;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAllStoredProceduresProperties;
    function      GetServerProperties: TAllStoredProceduresProperties;
{$ENDIF}
    function      GetDefaultInterface: AllObjects;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: AllObjects);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: AllObjects read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[var_: OleVariant]: AccessObject read Get_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAllStoredProceduresProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAllStoredProcedures
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAllStoredProceduresProperties = class(TPersistent)
  private
    FServer:    TAllStoredProcedures;
    function    GetDefaultInterface: AllObjects;
    constructor Create(AServer: TAllStoredProcedures);
  protected
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    property DefaultInterface: AllObjects read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAllDatabaseDiagrams provides a Create and CreateRemote method to          
// create instances of the default interface AllObjects exposed by              
// the CoClass AllDatabaseDiagrams. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAllDatabaseDiagrams = class
    class function Create: AllObjects;
    class function CreateRemote(const MachineName: string): AllObjects;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAllDatabaseDiagrams
// Help String      : 
// Default Interface: AllObjects
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAllDatabaseDiagramsProperties= class;
{$ENDIF}
  TAllDatabaseDiagrams = class(TOleServer)
  private
    FIntf:        AllObjects;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAllDatabaseDiagramsProperties;
    function      GetServerProperties: TAllDatabaseDiagramsProperties;
{$ENDIF}
    function      GetDefaultInterface: AllObjects;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: AllObjects);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: AllObjects read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[var_: OleVariant]: AccessObject read Get_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAllDatabaseDiagramsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAllDatabaseDiagrams
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAllDatabaseDiagramsProperties = class(TPersistent)
  private
    FServer:    TAllDatabaseDiagrams;
    function    GetDefaultInterface: AllObjects;
    constructor Create(AServer: TAllDatabaseDiagrams);
  protected
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    property DefaultInterface: AllObjects read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCurrentProject provides a Create and CreateRemote method to          
// create instances of the default interface _CurrentProject exposed by              
// the CoClass CurrentProject. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCurrentProject = class
    class function Create: _CurrentProject;
    class function CreateRemote(const MachineName: string): _CurrentProject;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCurrentProject
// Help String      : 
// Default Interface: _CurrentProject
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCurrentProjectProperties= class;
{$ENDIF}
  TCurrentProject = class(TOleServer)
  private
    FIntf:        _CurrentProject;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCurrentProjectProperties;
    function      GetServerProperties: TCurrentProjectProperties;
{$ENDIF}
    function      GetDefaultInterface: _CurrentProject;
  protected
    procedure InitServerData; override;
    function Get_AllForms: AllForms;
    function Get_AllReports: AllReports;
    function Get_AllMacros: AllMacros;
    function Get_AllModules: AllModules;
    function Get_AllDataAccessPages: AllDataAccessPages;
    function Get_ProjectType: AcProjectType;
    function Get_BaseConnectionString: WideString;
    function Get_IsConnected: WordBool;
    function Get_Name: WideString;
    function Get_Path: WideString;
    function Get_FullName: WideString;
    function Get_Connection: Connection;
    function Get_Properties: AccessObjectProperties;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_RemovePersonalInformation: WordBool;
    procedure Set_RemovePersonalInformation(pf: WordBool);
    function Get_FileFormat: AcFileFormat;
    function Get_AccessConnection: Connection;
    function Get_ImportExportSpecifications: ImportExportSpecifications;
    function Get_IsTrusted: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _CurrentProject);
    procedure Disconnect; override;
    procedure OpenConnection; overload;
    procedure OpenConnection(BaseConnectionString: OleVariant); overload;
    procedure OpenConnection(BaseConnectionString: OleVariant; UserID: OleVariant); overload;
    procedure OpenConnection(BaseConnectionString: OleVariant; UserID: OleVariant; 
                             Password: OleVariant); overload;
    procedure CloseConnection;
    procedure UpdateDependencyInfo;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _CurrentProject read GetDefaultInterface;
    property AllForms: AllForms read Get_AllForms;
    property AllReports: AllReports read Get_AllReports;
    property AllMacros: AllMacros read Get_AllMacros;
    property AllModules: AllModules read Get_AllModules;
    property AllDataAccessPages: AllDataAccessPages read Get_AllDataAccessPages;
    property ProjectType: AcProjectType read Get_ProjectType;
    property BaseConnectionString: WideString read Get_BaseConnectionString;
    property IsConnected: WordBool read Get_IsConnected;
    property Name: WideString read Get_Name;
    property Path: WideString read Get_Path;
    property FullName: WideString read Get_FullName;
    property Connection: Connection read Get_Connection;
    property Properties: AccessObjectProperties read Get_Properties;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property FileFormat: AcFileFormat read Get_FileFormat;
    property AccessConnection: Connection read Get_AccessConnection;
    property ImportExportSpecifications: ImportExportSpecifications read Get_ImportExportSpecifications;
    property IsTrusted: WordBool read Get_IsTrusted;
    property RemovePersonalInformation: WordBool read Get_RemovePersonalInformation write Set_RemovePersonalInformation;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCurrentProjectProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCurrentProject
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCurrentProjectProperties = class(TPersistent)
  private
    FServer:    TCurrentProject;
    function    GetDefaultInterface: _CurrentProject;
    constructor Create(AServer: TCurrentProject);
  protected
    function Get_AllForms: AllForms;
    function Get_AllReports: AllReports;
    function Get_AllMacros: AllMacros;
    function Get_AllModules: AllModules;
    function Get_AllDataAccessPages: AllDataAccessPages;
    function Get_ProjectType: AcProjectType;
    function Get_BaseConnectionString: WideString;
    function Get_IsConnected: WordBool;
    function Get_Name: WideString;
    function Get_Path: WideString;
    function Get_FullName: WideString;
    function Get_Connection: Connection;
    function Get_Properties: AccessObjectProperties;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_RemovePersonalInformation: WordBool;
    procedure Set_RemovePersonalInformation(pf: WordBool);
    function Get_FileFormat: AcFileFormat;
    function Get_AccessConnection: Connection;
    function Get_ImportExportSpecifications: ImportExportSpecifications;
    function Get_IsTrusted: WordBool;
  public
    property DefaultInterface: _CurrentProject read GetDefaultInterface;
  published
    property RemovePersonalInformation: WordBool read Get_RemovePersonalInformation write Set_RemovePersonalInformation;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCurrentData provides a Create and CreateRemote method to          
// create instances of the default interface _CurrentData exposed by              
// the CoClass CurrentData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCurrentData = class
    class function Create: _CurrentData;
    class function CreateRemote(const MachineName: string): _CurrentData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCurrentData
// Help String      : 
// Default Interface: _CurrentData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCurrentDataProperties= class;
{$ENDIF}
  TCurrentData = class(TOleServer)
  private
    FIntf:        _CurrentData;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCurrentDataProperties;
    function      GetServerProperties: TCurrentDataProperties;
{$ENDIF}
    function      GetDefaultInterface: _CurrentData;
  protected
    procedure InitServerData; override;
    function Get_AllTables: AllTables;
    function Get_AllQueries: AllQueries;
    function Get_AllViews: AllViews;
    function Get_AllStoredProcedures: AllStoredProcedures;
    function Get_AllDatabaseDiagrams: AllDatabaseDiagrams;
    function Get_AllFunctions: AllFunctions;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _CurrentData);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _CurrentData read GetDefaultInterface;
    property AllTables: AllTables read Get_AllTables;
    property AllQueries: AllQueries read Get_AllQueries;
    property AllViews: AllViews read Get_AllViews;
    property AllStoredProcedures: AllStoredProcedures read Get_AllStoredProcedures;
    property AllDatabaseDiagrams: AllDatabaseDiagrams read Get_AllDatabaseDiagrams;
    property AllFunctions: AllFunctions read Get_AllFunctions;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCurrentDataProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCurrentData
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCurrentDataProperties = class(TPersistent)
  private
    FServer:    TCurrentData;
    function    GetDefaultInterface: _CurrentData;
    constructor Create(AServer: TCurrentData);
  protected
    function Get_AllTables: AllTables;
    function Get_AllQueries: AllQueries;
    function Get_AllViews: AllViews;
    function Get_AllStoredProcedures: AllStoredProcedures;
    function Get_AllDatabaseDiagrams: AllDatabaseDiagrams;
    function Get_AllFunctions: AllFunctions;
  public
    property DefaultInterface: _CurrentData read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCodeProject provides a Create and CreateRemote method to          
// create instances of the default interface _CurrentProject exposed by              
// the CoClass CodeProject. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCodeProject = class
    class function Create: _CurrentProject;
    class function CreateRemote(const MachineName: string): _CurrentProject;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCodeProject
// Help String      : 
// Default Interface: _CurrentProject
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCodeProjectProperties= class;
{$ENDIF}
  TCodeProject = class(TOleServer)
  private
    FIntf:        _CurrentProject;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCodeProjectProperties;
    function      GetServerProperties: TCodeProjectProperties;
{$ENDIF}
    function      GetDefaultInterface: _CurrentProject;
  protected
    procedure InitServerData; override;
    function Get_AllForms: AllForms;
    function Get_AllReports: AllReports;
    function Get_AllMacros: AllMacros;
    function Get_AllModules: AllModules;
    function Get_AllDataAccessPages: AllDataAccessPages;
    function Get_ProjectType: AcProjectType;
    function Get_BaseConnectionString: WideString;
    function Get_IsConnected: WordBool;
    function Get_Name: WideString;
    function Get_Path: WideString;
    function Get_FullName: WideString;
    function Get_Connection: Connection;
    function Get_Properties: AccessObjectProperties;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_RemovePersonalInformation: WordBool;
    procedure Set_RemovePersonalInformation(pf: WordBool);
    function Get_FileFormat: AcFileFormat;
    function Get_AccessConnection: Connection;
    function Get_ImportExportSpecifications: ImportExportSpecifications;
    function Get_IsTrusted: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _CurrentProject);
    procedure Disconnect; override;
    procedure OpenConnection; overload;
    procedure OpenConnection(BaseConnectionString: OleVariant); overload;
    procedure OpenConnection(BaseConnectionString: OleVariant; UserID: OleVariant); overload;
    procedure OpenConnection(BaseConnectionString: OleVariant; UserID: OleVariant; 
                             Password: OleVariant); overload;
    procedure CloseConnection;
    procedure UpdateDependencyInfo;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _CurrentProject read GetDefaultInterface;
    property AllForms: AllForms read Get_AllForms;
    property AllReports: AllReports read Get_AllReports;
    property AllMacros: AllMacros read Get_AllMacros;
    property AllModules: AllModules read Get_AllModules;
    property AllDataAccessPages: AllDataAccessPages read Get_AllDataAccessPages;
    property ProjectType: AcProjectType read Get_ProjectType;
    property BaseConnectionString: WideString read Get_BaseConnectionString;
    property IsConnected: WordBool read Get_IsConnected;
    property Name: WideString read Get_Name;
    property Path: WideString read Get_Path;
    property FullName: WideString read Get_FullName;
    property Connection: Connection read Get_Connection;
    property Properties: AccessObjectProperties read Get_Properties;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property FileFormat: AcFileFormat read Get_FileFormat;
    property AccessConnection: Connection read Get_AccessConnection;
    property ImportExportSpecifications: ImportExportSpecifications read Get_ImportExportSpecifications;
    property IsTrusted: WordBool read Get_IsTrusted;
    property RemovePersonalInformation: WordBool read Get_RemovePersonalInformation write Set_RemovePersonalInformation;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCodeProjectProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCodeProject
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCodeProjectProperties = class(TPersistent)
  private
    FServer:    TCodeProject;
    function    GetDefaultInterface: _CurrentProject;
    constructor Create(AServer: TCodeProject);
  protected
    function Get_AllForms: AllForms;
    function Get_AllReports: AllReports;
    function Get_AllMacros: AllMacros;
    function Get_AllModules: AllModules;
    function Get_AllDataAccessPages: AllDataAccessPages;
    function Get_ProjectType: AcProjectType;
    function Get_BaseConnectionString: WideString;
    function Get_IsConnected: WordBool;
    function Get_Name: WideString;
    function Get_Path: WideString;
    function Get_FullName: WideString;
    function Get_Connection: Connection;
    function Get_Properties: AccessObjectProperties;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_RemovePersonalInformation: WordBool;
    procedure Set_RemovePersonalInformation(pf: WordBool);
    function Get_FileFormat: AcFileFormat;
    function Get_AccessConnection: Connection;
    function Get_ImportExportSpecifications: ImportExportSpecifications;
    function Get_IsTrusted: WordBool;
  public
    property DefaultInterface: _CurrentProject read GetDefaultInterface;
  published
    property RemovePersonalInformation: WordBool read Get_RemovePersonalInformation write Set_RemovePersonalInformation;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCodeData provides a Create and CreateRemote method to          
// create instances of the default interface _CurrentData exposed by              
// the CoClass CodeData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCodeData = class
    class function Create: _CurrentData;
    class function CreateRemote(const MachineName: string): _CurrentData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCodeData
// Help String      : 
// Default Interface: _CurrentData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCodeDataProperties= class;
{$ENDIF}
  TCodeData = class(TOleServer)
  private
    FIntf:        _CurrentData;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCodeDataProperties;
    function      GetServerProperties: TCodeDataProperties;
{$ENDIF}
    function      GetDefaultInterface: _CurrentData;
  protected
    procedure InitServerData; override;
    function Get_AllTables: AllTables;
    function Get_AllQueries: AllQueries;
    function Get_AllViews: AllViews;
    function Get_AllStoredProcedures: AllStoredProcedures;
    function Get_AllDatabaseDiagrams: AllDatabaseDiagrams;
    function Get_AllFunctions: AllFunctions;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _CurrentData);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _CurrentData read GetDefaultInterface;
    property AllTables: AllTables read Get_AllTables;
    property AllQueries: AllQueries read Get_AllQueries;
    property AllViews: AllViews read Get_AllViews;
    property AllStoredProcedures: AllStoredProcedures read Get_AllStoredProcedures;
    property AllDatabaseDiagrams: AllDatabaseDiagrams read Get_AllDatabaseDiagrams;
    property AllFunctions: AllFunctions read Get_AllFunctions;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCodeDataProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCodeData
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCodeDataProperties = class(TPersistent)
  private
    FServer:    TCodeData;
    function    GetDefaultInterface: _CurrentData;
    constructor Create(AServer: TCodeData);
  protected
    function Get_AllTables: AllTables;
    function Get_AllQueries: AllQueries;
    function Get_AllViews: AllViews;
    function Get_AllStoredProcedures: AllStoredProcedures;
    function Get_AllDatabaseDiagrams: AllDatabaseDiagrams;
    function Get_AllFunctions: AllFunctions;
  public
    property DefaultInterface: _CurrentData read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoWizHook provides a Create and CreateRemote method to          
// create instances of the default interface _WizHook exposed by              
// the CoClass WizHook. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWizHook = class
    class function Create: _WizHook;
    class function CreateRemote(const MachineName: string): _WizHook;
  end;

// *********************************************************************//
// The Class CoDefaultWebOptions provides a Create and CreateRemote method to          
// create instances of the default interface _DefaultWebOptions exposed by              
// the CoClass DefaultWebOptions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDefaultWebOptions = class
    class function Create: _DefaultWebOptions;
    class function CreateRemote(const MachineName: string): _DefaultWebOptions;
  end;

// *********************************************************************//
// The Class CoAccessWebOptions provides a Create and CreateRemote method to          
// create instances of the default interface _WebOptions exposed by              
// the CoClass AccessWebOptions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAccessWebOptions = class
    class function Create: _WebOptions;
    class function CreateRemote(const MachineName: string): _WebOptions;
  end;

// *********************************************************************//
// The Class CoClass_ provides a Create and CreateRemote method to          
// create instances of the default interface _Dummy exposed by              
// the CoClass Class_. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoClass_ = class
    class function Create: _Dummy;
    class function CreateRemote(const MachineName: string): _Dummy;
  end;

// *********************************************************************//
// The Class CoPrinter provides a Create and CreateRemote method to          
// create instances of the default interface _Printer exposed by              
// the CoClass Printer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPrinter = class
    class function Create: _Printer;
    class function CreateRemote(const MachineName: string): _Printer;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPrinter
// Help String      : 
// Default Interface: _Printer
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TPrinterProperties= class;
{$ENDIF}
  TPrinter = class(TOleServer)
  private
    FIntf:        _Printer;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TPrinterProperties;
    function      GetServerProperties: TPrinterProperties;
{$ENDIF}
    function      GetDefaultInterface: _Printer;
  protected
    procedure InitServerData; override;
    function Get_ColorMode: AcPrintColor;
    procedure Set_ColorMode(pRet: AcPrintColor);
    function Get_Copies: Integer;
    procedure Set_Copies(pRet: Integer);
    function Get_DeviceName: WideString;
    function Get_DriverName: WideString;
    function Get_Duplex: AcPrintDuplex;
    procedure Set_Duplex(pRet: AcPrintDuplex);
    function Get_Orientation: AcPrintOrientation;
    procedure Set_Orientation(pRet: AcPrintOrientation);
    function Get_PaperBin: AcPrintPaperBin;
    procedure Set_PaperBin(pRet: AcPrintPaperBin);
    function Get_PaperSize: AcPrintPaperSize;
    procedure Set_PaperSize(pRet: AcPrintPaperSize);
    function Get_Port: WideString;
    function Get_PrintQuality: AcPrintObjQuality;
    procedure Set_PrintQuality(pRet: AcPrintObjQuality);
    function Get_LeftMargin: Integer;
    procedure Set_LeftMargin(pRet: Integer);
    function Get_RightMargin: Integer;
    procedure Set_RightMargin(pRet: Integer);
    function Get_TopMargin: Integer;
    procedure Set_TopMargin(pRet: Integer);
    function Get_BottomMargin: Integer;
    procedure Set_BottomMargin(pRet: Integer);
    function Get_DataOnly: WordBool;
    procedure Set_DataOnly(pRet: WordBool);
    function Get_ItemsAcross: Integer;
    procedure Set_ItemsAcross(pRet: Integer);
    function Get_RowSpacing: Integer;
    procedure Set_RowSpacing(pRet: Integer);
    function Get_ColumnSpacing: Integer;
    procedure Set_ColumnSpacing(pRet: Integer);
    function Get_DefaultSize: WordBool;
    procedure Set_DefaultSize(pRet: WordBool);
    function Get_ItemSizeWidth: Integer;
    procedure Set_ItemSizeWidth(pRet: Integer);
    function Get_ItemSizeHeight: Integer;
    procedure Set_ItemSizeHeight(pRet: Integer);
    function Get_ItemLayout: AcPrintItemLayout;
    procedure Set_ItemLayout(pRet: AcPrintItemLayout);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Printer);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _Printer read GetDefaultInterface;
    property DeviceName: WideString read Get_DeviceName;
    property DriverName: WideString read Get_DriverName;
    property Port: WideString read Get_Port;
    property ColorMode: AcPrintColor read Get_ColorMode write Set_ColorMode;
    property Copies: Integer read Get_Copies write Set_Copies;
    property Duplex: AcPrintDuplex read Get_Duplex write Set_Duplex;
    property Orientation: AcPrintOrientation read Get_Orientation write Set_Orientation;
    property PaperBin: AcPrintPaperBin read Get_PaperBin write Set_PaperBin;
    property PaperSize: AcPrintPaperSize read Get_PaperSize write Set_PaperSize;
    property PrintQuality: AcPrintObjQuality read Get_PrintQuality write Set_PrintQuality;
    property LeftMargin: Integer read Get_LeftMargin write Set_LeftMargin;
    property RightMargin: Integer read Get_RightMargin write Set_RightMargin;
    property TopMargin: Integer read Get_TopMargin write Set_TopMargin;
    property BottomMargin: Integer read Get_BottomMargin write Set_BottomMargin;
    property DataOnly: WordBool read Get_DataOnly write Set_DataOnly;
    property ItemsAcross: Integer read Get_ItemsAcross write Set_ItemsAcross;
    property RowSpacing: Integer read Get_RowSpacing write Set_RowSpacing;
    property ColumnSpacing: Integer read Get_ColumnSpacing write Set_ColumnSpacing;
    property DefaultSize: WordBool read Get_DefaultSize write Set_DefaultSize;
    property ItemSizeWidth: Integer read Get_ItemSizeWidth write Set_ItemSizeWidth;
    property ItemSizeHeight: Integer read Get_ItemSizeHeight write Set_ItemSizeHeight;
    property ItemLayout: AcPrintItemLayout read Get_ItemLayout write Set_ItemLayout;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TPrinterProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TPrinter
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TPrinterProperties = class(TPersistent)
  private
    FServer:    TPrinter;
    function    GetDefaultInterface: _Printer;
    constructor Create(AServer: TPrinter);
  protected
    function Get_ColorMode: AcPrintColor;
    procedure Set_ColorMode(pRet: AcPrintColor);
    function Get_Copies: Integer;
    procedure Set_Copies(pRet: Integer);
    function Get_DeviceName: WideString;
    function Get_DriverName: WideString;
    function Get_Duplex: AcPrintDuplex;
    procedure Set_Duplex(pRet: AcPrintDuplex);
    function Get_Orientation: AcPrintOrientation;
    procedure Set_Orientation(pRet: AcPrintOrientation);
    function Get_PaperBin: AcPrintPaperBin;
    procedure Set_PaperBin(pRet: AcPrintPaperBin);
    function Get_PaperSize: AcPrintPaperSize;
    procedure Set_PaperSize(pRet: AcPrintPaperSize);
    function Get_Port: WideString;
    function Get_PrintQuality: AcPrintObjQuality;
    procedure Set_PrintQuality(pRet: AcPrintObjQuality);
    function Get_LeftMargin: Integer;
    procedure Set_LeftMargin(pRet: Integer);
    function Get_RightMargin: Integer;
    procedure Set_RightMargin(pRet: Integer);
    function Get_TopMargin: Integer;
    procedure Set_TopMargin(pRet: Integer);
    function Get_BottomMargin: Integer;
    procedure Set_BottomMargin(pRet: Integer);
    function Get_DataOnly: WordBool;
    procedure Set_DataOnly(pRet: WordBool);
    function Get_ItemsAcross: Integer;
    procedure Set_ItemsAcross(pRet: Integer);
    function Get_RowSpacing: Integer;
    procedure Set_RowSpacing(pRet: Integer);
    function Get_ColumnSpacing: Integer;
    procedure Set_ColumnSpacing(pRet: Integer);
    function Get_DefaultSize: WordBool;
    procedure Set_DefaultSize(pRet: WordBool);
    function Get_ItemSizeWidth: Integer;
    procedure Set_ItemSizeWidth(pRet: Integer);
    function Get_ItemSizeHeight: Integer;
    procedure Set_ItemSizeHeight(pRet: Integer);
    function Get_ItemLayout: AcPrintItemLayout;
    procedure Set_ItemLayout(pRet: AcPrintItemLayout);
  public
    property DefaultInterface: _Printer read GetDefaultInterface;
  published
    property ColorMode: AcPrintColor read Get_ColorMode write Set_ColorMode;
    property Copies: Integer read Get_Copies write Set_Copies;
    property Duplex: AcPrintDuplex read Get_Duplex write Set_Duplex;
    property Orientation: AcPrintOrientation read Get_Orientation write Set_Orientation;
    property PaperBin: AcPrintPaperBin read Get_PaperBin write Set_PaperBin;
    property PaperSize: AcPrintPaperSize read Get_PaperSize write Set_PaperSize;
    property PrintQuality: AcPrintObjQuality read Get_PrintQuality write Set_PrintQuality;
    property LeftMargin: Integer read Get_LeftMargin write Set_LeftMargin;
    property RightMargin: Integer read Get_RightMargin write Set_RightMargin;
    property TopMargin: Integer read Get_TopMargin write Set_TopMargin;
    property BottomMargin: Integer read Get_BottomMargin write Set_BottomMargin;
    property DataOnly: WordBool read Get_DataOnly write Set_DataOnly;
    property ItemsAcross: Integer read Get_ItemsAcross write Set_ItemsAcross;
    property RowSpacing: Integer read Get_RowSpacing write Set_RowSpacing;
    property ColumnSpacing: Integer read Get_ColumnSpacing write Set_ColumnSpacing;
    property DefaultSize: WordBool read Get_DefaultSize write Set_DefaultSize;
    property ItemSizeWidth: Integer read Get_ItemSizeWidth write Set_ItemSizeWidth;
    property ItemSizeHeight: Integer read Get_ItemSizeHeight write Set_ItemSizeHeight;
    property ItemLayout: AcPrintItemLayout read Get_ItemLayout write Set_ItemLayout;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFormOldV10 provides a Create and CreateRemote method to          
// create instances of the default interface _Form2 exposed by              
// the CoClass FormOldV10. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFormOldV10 = class
    class function Create: _Form2;
    class function CreateRemote(const MachineName: string): _Form2;
  end;

// *********************************************************************//
// The Class CoReportOldV10 provides a Create and CreateRemote method to          
// create instances of the default interface _Report2 exposed by              
// the CoClass ReportOldV10. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReportOldV10 = class
    class function Create: _Report2;
    class function CreateRemote(const MachineName: string): _Report2;
  end;

// *********************************************************************//
// The Class CoAllFunctions provides a Create and CreateRemote method to          
// create instances of the default interface AllObjects exposed by              
// the CoClass AllFunctions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAllFunctions = class
    class function Create: AllObjects;
    class function CreateRemote(const MachineName: string): AllObjects;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAllFunctions
// Help String      : 
// Default Interface: AllObjects
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAllFunctionsProperties= class;
{$ENDIF}
  TAllFunctions = class(TOleServer)
  private
    FIntf:        AllObjects;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAllFunctionsProperties;
    function      GetServerProperties: TAllFunctionsProperties;
{$ENDIF}
    function      GetDefaultInterface: AllObjects;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: AllObjects);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: AllObjects read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[var_: OleVariant]: AccessObject read Get_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAllFunctionsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAllFunctions
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAllFunctionsProperties = class(TPersistent)
  private
    FServer:    TAllFunctions;
    function    GetDefaultInterface: AllObjects;
    constructor Create(AServer: TAllFunctions);
  protected
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(var_: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    property DefaultInterface: AllObjects read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAdditionalData provides a Create and CreateRemote method to          
// create instances of the default interface _AdditionalData exposed by              
// the CoClass AdditionalData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAdditionalData = class
    class function Create: _AdditionalData;
    class function CreateRemote(const MachineName: string): _AdditionalData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAdditionalData
// Help String      : 
// Default Interface: _AdditionalData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAdditionalDataProperties= class;
{$ENDIF}
  TAdditionalData = class(TOleServer)
  private
    FIntf:        _AdditionalData;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAdditionalDataProperties;
    function      GetServerProperties: TAdditionalDataProperties;
{$ENDIF}
    function      GetDefaultInterface: _AdditionalData;
  protected
    procedure InitServerData; override;
    function Get_Name: WideString;
    procedure Set_Name(const pRet: WideString);
    function Get_Item(Index: OleVariant): _AdditionalData;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _AdditionalData);
    procedure Disconnect; override;
    function Add(const var_: WideString): _AdditionalData;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _AdditionalData read GetDefaultInterface;
    property Item[Index: OleVariant]: _AdditionalData read Get_Item; default;
    property Count: Integer read Get_Count;
    property Name: WideString read Get_Name write Set_Name;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAdditionalDataProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAdditionalData
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAdditionalDataProperties = class(TPersistent)
  private
    FServer:    TAdditionalData;
    function    GetDefaultInterface: _AdditionalData;
    constructor Create(AServer: TAdditionalData);
  protected
    function Get_Name: WideString;
    procedure Set_Name(const pRet: WideString);
    function Get_Item(Index: OleVariant): _AdditionalData;
    function Get_Count: Integer;
  public
    property DefaultInterface: _AdditionalData read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAutoCorrect provides a Create and CreateRemote method to          
// create instances of the default interface _AutoCorrect exposed by              
// the CoClass AutoCorrect. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAutoCorrect = class
    class function Create: _AutoCorrect;
    class function CreateRemote(const MachineName: string): _AutoCorrect;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAutoCorrect
// Help String      : 
// Default Interface: _AutoCorrect
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAutoCorrectProperties= class;
{$ENDIF}
  TAutoCorrect = class(TOleServer)
  private
    FIntf:        _AutoCorrect;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAutoCorrectProperties;
    function      GetServerProperties: TAutoCorrectProperties;
{$ENDIF}
    function      GetDefaultInterface: _AutoCorrect;
  protected
    procedure InitServerData; override;
    function Get_DisplayAutoCorrectOptions: WordBool;
    procedure Set_DisplayAutoCorrectOptions(pRet: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _AutoCorrect);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _AutoCorrect read GetDefaultInterface;
    property DisplayAutoCorrectOptions: WordBool read Get_DisplayAutoCorrectOptions write Set_DisplayAutoCorrectOptions;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAutoCorrectProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAutoCorrect
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAutoCorrectProperties = class(TPersistent)
  private
    FServer:    TAutoCorrect;
    function    GetDefaultInterface: _AutoCorrect;
    constructor Create(AServer: TAutoCorrect);
  protected
    function Get_DisplayAutoCorrectOptions: WordBool;
    procedure Set_DisplayAutoCorrectOptions(pRet: WordBool);
  public
    property DefaultInterface: _AutoCorrect read GetDefaultInterface;
  published
    property DisplayAutoCorrectOptions: WordBool read Get_DisplayAutoCorrectOptions write Set_DisplayAutoCorrectOptions;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDependencyObjects provides a Create and CreateRemote method to          
// create instances of the default interface _DependencyObjects exposed by              
// the CoClass DependencyObjects. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDependencyObjects = class
    class function Create: _DependencyObjects;
    class function CreateRemote(const MachineName: string): _DependencyObjects;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDependencyObjects
// Help String      : 
// Default Interface: _DependencyObjects
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDependencyObjectsProperties= class;
{$ENDIF}
  TDependencyObjects = class(TOleServer)
  private
    FIntf:        _DependencyObjects;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDependencyObjectsProperties;
    function      GetServerProperties: TDependencyObjectsProperties;
{$ENDIF}
    function      GetDefaultInterface: _DependencyObjects;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(Index: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DependencyObjects);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _DependencyObjects read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: AccessObject read Get_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDependencyObjectsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDependencyObjects
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDependencyObjectsProperties = class(TPersistent)
  private
    FServer:    TDependencyObjects;
    function    GetDefaultInterface: _DependencyObjects;
    constructor Create(AServer: TDependencyObjects);
  protected
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(Index: OleVariant): AccessObject;
    function Get_Count: Integer;
  public
    property DefaultInterface: _DependencyObjects read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDependencyInfo provides a Create and CreateRemote method to          
// create instances of the default interface _DependencyInfo exposed by              
// the CoClass DependencyInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDependencyInfo = class
    class function Create: _DependencyInfo;
    class function CreateRemote(const MachineName: string): _DependencyInfo;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDependencyInfo
// Help String      : 
// Default Interface: _DependencyInfo
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDependencyInfoProperties= class;
{$ENDIF}
  TDependencyInfo = class(TOleServer)
  private
    FIntf:        _DependencyInfo;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDependencyInfoProperties;
    function      GetServerProperties: TDependencyInfoProperties;
{$ENDIF}
    function      GetDefaultInterface: _DependencyInfo;
  protected
    procedure InitServerData; override;
    function Get_Parent: IDispatch;
    function Get_Dependants: _DependencyObjects;
    function Get_Dependencies: _DependencyObjects;
    function Get_OutOfDateObjects: _DependencyObjects;
    function Get_InsufficientPermissions: _DependencyObjects;
    function Get_UnsupportedObjects: _DependencyObjects;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _DependencyInfo);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _DependencyInfo read GetDefaultInterface;
    property Parent: IDispatch read Get_Parent;
    property Dependants: _DependencyObjects read Get_Dependants;
    property Dependencies: _DependencyObjects read Get_Dependencies;
    property OutOfDateObjects: _DependencyObjects read Get_OutOfDateObjects;
    property InsufficientPermissions: _DependencyObjects read Get_InsufficientPermissions;
    property UnsupportedObjects: _DependencyObjects read Get_UnsupportedObjects;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDependencyInfoProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDependencyInfo
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDependencyInfoProperties = class(TPersistent)
  private
    FServer:    TDependencyInfo;
    function    GetDefaultInterface: _DependencyInfo;
    constructor Create(AServer: TDependencyInfo);
  protected
    function Get_Parent: IDispatch;
    function Get_Dependants: _DependencyObjects;
    function Get_Dependencies: _DependencyObjects;
    function Get_OutOfDateObjects: _DependencyObjects;
    function Get_InsufficientPermissions: _DependencyObjects;
    function Get_UnsupportedObjects: _DependencyObjects;
  public
    property DefaultInterface: _DependencyInfo read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSmartTags provides a Create and CreateRemote method to          
// create instances of the default interface _SmartTags exposed by              
// the CoClass SmartTags. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSmartTags = class
    class function Create: _SmartTags;
    class function CreateRemote(const MachineName: string): _SmartTags;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSmartTags
// Help String      : 
// Default Interface: _SmartTags
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSmartTagsProperties= class;
{$ENDIF}
  TSmartTags = class(TOleServer)
  private
    FIntf:        _SmartTags;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSmartTagsProperties;
    function      GetServerProperties: TSmartTagsProperties;
{$ENDIF}
    function      GetDefaultInterface: _SmartTags;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(Index: OleVariant): _SmartTag;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SmartTags);
    procedure Disconnect; override;
    function Add(const Name: WideString): _SmartTag;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _SmartTags read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: _SmartTag read Get_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSmartTagsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSmartTags
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSmartTagsProperties = class(TPersistent)
  private
    FServer:    TSmartTags;
    function    GetDefaultInterface: _SmartTags;
    constructor Create(AServer: TSmartTags);
  protected
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(Index: OleVariant): _SmartTag;
    function Get_Count: Integer;
  public
    property DefaultInterface: _SmartTags read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSmartTagAction provides a Create and CreateRemote method to          
// create instances of the default interface _SmartTagAction exposed by              
// the CoClass SmartTagAction. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSmartTagAction = class
    class function Create: _SmartTagAction;
    class function CreateRemote(const MachineName: string): _SmartTagAction;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSmartTagAction
// Help String      : 
// Default Interface: _SmartTagAction
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSmartTagActionProperties= class;
{$ENDIF}
  TSmartTagAction = class(TOleServer)
  private
    FIntf:        _SmartTagAction;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSmartTagActionProperties;
    function      GetServerProperties: TSmartTagActionProperties;
{$ENDIF}
    function      GetDefaultInterface: _SmartTagAction;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Name: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SmartTagAction);
    procedure Disconnect; override;
    procedure Execute;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _SmartTagAction read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Name: WideString read Get_Name;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSmartTagActionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSmartTagAction
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSmartTagActionProperties = class(TPersistent)
  private
    FServer:    TSmartTagAction;
    function    GetDefaultInterface: _SmartTagAction;
    constructor Create(AServer: TSmartTagAction);
  protected
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Name: WideString;
  public
    property DefaultInterface: _SmartTagAction read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSmartTagActions provides a Create and CreateRemote method to          
// create instances of the default interface _SmartTagActions exposed by              
// the CoClass SmartTagActions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSmartTagActions = class
    class function Create: _SmartTagActions;
    class function CreateRemote(const MachineName: string): _SmartTagActions;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSmartTagActions
// Help String      : 
// Default Interface: _SmartTagActions
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSmartTagActionsProperties= class;
{$ENDIF}
  TSmartTagActions = class(TOleServer)
  private
    FIntf:        _SmartTagActions;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSmartTagActionsProperties;
    function      GetServerProperties: TSmartTagActionsProperties;
{$ENDIF}
    function      GetDefaultInterface: _SmartTagActions;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Count: Integer;
    function Get_Parent: IDispatch;
    function Get_Item(Index: OleVariant): _SmartTagAction;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SmartTagActions);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _SmartTagActions read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Count: Integer read Get_Count;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: _SmartTagAction read Get_Item; default;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSmartTagActionsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSmartTagActions
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSmartTagActionsProperties = class(TPersistent)
  private
    FServer:    TSmartTagActions;
    function    GetDefaultInterface: _SmartTagActions;
    constructor Create(AServer: TSmartTagActions);
  protected
    function Get_Application: AccessApplication;
    function Get_Count: Integer;
    function Get_Parent: IDispatch;
    function Get_Item(Index: OleVariant): _SmartTagAction;
  public
    property DefaultInterface: _SmartTagActions read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSmartTagProperty provides a Create and CreateRemote method to          
// create instances of the default interface _SmartTagProperty exposed by              
// the CoClass SmartTagProperty. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSmartTagProperty = class
    class function Create: _SmartTagProperty;
    class function CreateRemote(const MachineName: string): _SmartTagProperty;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSmartTagProperty
// Help String      : 
// Default Interface: _SmartTagProperty
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSmartTagPropertyProperties= class;
{$ENDIF}
  TSmartTagProperty = class(TOleServer)
  private
    FIntf:        _SmartTagProperty;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSmartTagPropertyProperties;
    function      GetServerProperties: TSmartTagPropertyProperties;
{$ENDIF}
    function      GetDefaultInterface: _SmartTagProperty;
  protected
    procedure InitServerData; override;
    function Get_Name: WideString;
    procedure Set_Name(const pRet: WideString);
    function Get_Value: WideString;
    procedure Set_Value(const pRet: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SmartTagProperty);
    procedure Disconnect; override;
    procedure Delete;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _SmartTagProperty read GetDefaultInterface;
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSmartTagPropertyProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSmartTagProperty
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSmartTagPropertyProperties = class(TPersistent)
  private
    FServer:    TSmartTagProperty;
    function    GetDefaultInterface: _SmartTagProperty;
    constructor Create(AServer: TSmartTagProperty);
  protected
    function Get_Name: WideString;
    procedure Set_Name(const pRet: WideString);
    function Get_Value: WideString;
    procedure Set_Value(const pRet: WideString);
  public
    property DefaultInterface: _SmartTagProperty read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSmartTagProperties provides a Create and CreateRemote method to          
// create instances of the default interface _SmartTagProperties exposed by              
// the CoClass SmartTagProperties. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSmartTagProperties = class
    class function Create: _SmartTagProperties;
    class function CreateRemote(const MachineName: string): _SmartTagProperties;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSmartTagProperties
// Help String      : 
// Default Interface: _SmartTagProperties
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSmartTagPropertiesProperties= class;
{$ENDIF}
  TSmartTagProperties = class(TOleServer)
  private
    FIntf:        _SmartTagProperties;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSmartTagPropertiesProperties;
    function      GetServerProperties: TSmartTagPropertiesProperties;
{$ENDIF}
    function      GetDefaultInterface: _SmartTagProperties;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Count: Integer;
    function Get_Parent: IDispatch;
    function Get_Item(Index: OleVariant): _SmartTagProperty;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SmartTagProperties);
    procedure Disconnect; override;
    function Add(const Name: WideString; Value: OleVariant): _SmartTagProperty;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _SmartTagProperties read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Count: Integer read Get_Count;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: _SmartTagProperty read Get_Item; default;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSmartTagPropertiesProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSmartTagProperties
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSmartTagPropertiesProperties = class(TPersistent)
  private
    FServer:    TSmartTagProperties;
    function    GetDefaultInterface: _SmartTagProperties;
    constructor Create(AServer: TSmartTagProperties);
  protected
    function Get_Application: AccessApplication;
    function Get_Count: Integer;
    function Get_Parent: IDispatch;
    function Get_Item(Index: OleVariant): _SmartTagProperty;
  public
    property DefaultInterface: _SmartTagProperties read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSmartTag provides a Create and CreateRemote method to          
// create instances of the default interface _SmartTag exposed by              
// the CoClass SmartTag. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSmartTag = class
    class function Create: _SmartTag;
    class function CreateRemote(const MachineName: string): _SmartTag;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSmartTag
// Help String      : 
// Default Interface: _SmartTag
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSmartTagProperties= class;
{$ENDIF}
  TSmartTag = class(TOleServer)
  private
    FIntf:        _SmartTag;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSmartTagProperties;
    function      GetServerProperties: TSmartTagProperties;
{$ENDIF}
    function      GetDefaultInterface: _SmartTag;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Name: WideString;
    function Get_Parent: IDispatch;
    function Get_Properties: _SmartTagProperties;
    function Get_SmartTagActions: _SmartTagActions;
    function Get_XML: WideString;
    function Get_IsMissing: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _SmartTag);
    procedure Disconnect; override;
    procedure Delete;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _SmartTag read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Name: WideString read Get_Name;
    property Parent: IDispatch read Get_Parent;
    property Properties: _SmartTagProperties read Get_Properties;
    property SmartTagActions: _SmartTagActions read Get_SmartTagActions;
    property XML: WideString read Get_XML;
    property IsMissing: WordBool read Get_IsMissing;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSmartTagProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSmartTag
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSmartTagProperties = class(TPersistent)
  private
    FServer:    TSmartTag;
    function    GetDefaultInterface: _SmartTag;
    constructor Create(AServer: TSmartTag);
  protected
    function Get_Application: AccessApplication;
    function Get_Name: WideString;
    function Get_Parent: IDispatch;
    function Get_Properties: _SmartTagProperties;
    function Get_SmartTagActions: _SmartTagActions;
    function Get_XML: WideString;
    function Get_IsMissing: WordBool;
  public
    property DefaultInterface: _SmartTag read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAccessForm provides a Create and CreateRemote method to          
// create instances of the default interface _Form3 exposed by              
// the CoClass AccessForm. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAccessForm = class
    class function Create: _Form3;
    class function CreateRemote(const MachineName: string): _Form3;
  end;

  TAccessFormBeforeInsert = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessFormBeforeUpdate = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessFormDelete = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessFormBeforeDelConfirm = procedure(ASender: TObject; out Cancel: Smallint; 
                                                            out Response: Smallint) of object;
  TAccessFormAfterDelConfirm = procedure(ASender: TObject; var Status: Smallint) of object;
  TAccessFormOpen = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessFormUnload = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessFormDblClick = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessFormMouseDown = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                     var X: Single; var Y: Single) of object;
  TAccessFormMouseMove = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                     var X: Single; var Y: Single) of object;
  TAccessFormMouseUp = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                   var X: Single; var Y: Single) of object;
  TAccessFormKeyDown = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TAccessFormKeyPress = procedure(ASender: TObject; var KeyAscii: Smallint) of object;
  TAccessFormKeyUp = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TAccessFormError = procedure(ASender: TObject; var DataErr: Smallint; out Response: Smallint) of object;
  TAccessFormFilter = procedure(ASender: TObject; out Cancel: Smallint; var FilterType: Smallint) of object;
  TAccessFormApplyFilter = procedure(ASender: TObject; out Cancel: Smallint; var ApplyType: Smallint) of object;
  TAccessFormDirty = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessFormUndo = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessFormRecordExit = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessFormBeginBatchEdit = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessFormUndoBatchEdit = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessFormPivotTableChange = procedure(ASender: TObject; Reason: Integer) of object;
  TAccessFormCommandBeforeExecute = procedure(ASender: TObject; Command: OleVariant; 
                                                                const Cancel: IDispatch) of object;
  TAccessFormCommandChecked = procedure(ASender: TObject; Command: OleVariant; 
                                                          const Checked: IDispatch) of object;
  TAccessFormCommandEnabled = procedure(ASender: TObject; Command: OleVariant; 
                                                          const Enabled: IDispatch) of object;
  TAccessFormCommandExecute = procedure(ASender: TObject; Command: OleVariant) of object;
  TAccessFormBeforeScreenTip = procedure(ASender: TObject; const ScreenTipText: IDispatch; 
                                                           const SourceObject: IDispatch) of object;
  TAccessFormBeforeRender = procedure(ASender: TObject; const drawObject: IDispatch; 
                                                        const chartObject: IDispatch; 
                                                        const Cancel: IDispatch) of object;
  TAccessFormAfterRender = procedure(ASender: TObject; const drawObject: IDispatch; 
                                                       const chartObject: IDispatch) of object;
  TAccessFormAfterFinalRender = procedure(ASender: TObject; const drawObject: IDispatch) of object;
  TAccessFormAfterLayout = procedure(ASender: TObject; const drawObject: IDispatch) of object;
  TAccessFormMouseWheel = procedure(ASender: TObject; Page: WordBool; Count: Integer) of object;
  TAccessFormViewChange = procedure(ASender: TObject; Reason: Integer) of object;
  TAccessFormDataChange = procedure(ASender: TObject; Reason: Integer) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAccessForm
// Help String      : 
// Default Interface: _Form3
// Def. Intf. DISP? : No
// Event   Interface: _FormEvents2
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAccessFormProperties= class;
{$ENDIF}
  TAccessForm = class(TOleServer)
  private
    FOnLoad: TNotifyEvent;
    FOnCurrent: TNotifyEvent;
    FOnBeforeInsert: TAccessFormBeforeInsert;
    FOnAfterInsert: TNotifyEvent;
    FOnBeforeUpdate: TAccessFormBeforeUpdate;
    FOnAfterUpdate: TNotifyEvent;
    FOnDelete: TAccessFormDelete;
    FOnBeforeDelConfirm: TAccessFormBeforeDelConfirm;
    FOnAfterDelConfirm: TAccessFormAfterDelConfirm;
    FOnOpen: TAccessFormOpen;
    FOnResize: TNotifyEvent;
    FOnUnload: TAccessFormUnload;
    FOnClose: TNotifyEvent;
    FOnActivate: TNotifyEvent;
    FOnDeactivate: TNotifyEvent;
    FOnGotFocus: TNotifyEvent;
    FOnLostFocus: TNotifyEvent;
    FOnClick: TNotifyEvent;
    FOnDblClick: TAccessFormDblClick;
    FOnMouseDown: TAccessFormMouseDown;
    FOnMouseMove: TAccessFormMouseMove;
    FOnMouseUp: TAccessFormMouseUp;
    FOnKeyDown: TAccessFormKeyDown;
    FOnKeyPress: TAccessFormKeyPress;
    FOnKeyUp: TAccessFormKeyUp;
    FOnError: TAccessFormError;
    FOnTimer: TNotifyEvent;
    FOnFilter: TAccessFormFilter;
    FOnApplyFilter: TAccessFormApplyFilter;
    FOnDirty: TAccessFormDirty;
    FOnUndo: TAccessFormUndo;
    FOnRecordExit: TAccessFormRecordExit;
    FOnBeginBatchEdit: TAccessFormBeginBatchEdit;
    FOnUndoBatchEdit: TAccessFormUndoBatchEdit;
    FOnConnect: TNotifyEvent;
    FOnDisconnect: TNotifyEvent;
    FOnPivotTableChange: TAccessFormPivotTableChange;
    FOnQuery: TNotifyEvent;
    FOnBeforeQuery: TNotifyEvent;
    FOnSelectionChange: TNotifyEvent;
    FOnCommandBeforeExecute: TAccessFormCommandBeforeExecute;
    FOnCommandChecked: TAccessFormCommandChecked;
    FOnCommandEnabled: TAccessFormCommandEnabled;
    FOnCommandExecute: TAccessFormCommandExecute;
    FOnDataSetChange: TNotifyEvent;
    FOnBeforeScreenTip: TAccessFormBeforeScreenTip;
    FOnBeforeRender: TAccessFormBeforeRender;
    FOnAfterRender: TAccessFormAfterRender;
    FOnAfterFinalRender: TAccessFormAfterFinalRender;
    FOnAfterLayout: TAccessFormAfterLayout;
    FOnMouseWheel: TAccessFormMouseWheel;
    FOnViewChange: TAccessFormViewChange;
    FOnDataChange: TAccessFormDataChange;
    FIntf:        _Form3;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAccessFormProperties;
    function      GetServerProperties: TAccessFormProperties;
{$ENDIF}
    function      GetDefaultInterface: _Form3;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_accParent: IDispatch;
    function Get_accChildCount: Integer;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_FormName: WideString;
    procedure Set_FormName(const pRet: WideString);
    function Get_RecordSource: WideString;
    procedure Set_RecordSource(const pRet: WideString);
    function Get_Filter: WideString;
    procedure Set_Filter(const pRet: WideString);
    function Get_FilterOn: WordBool;
    procedure Set_FilterOn(pRet: WordBool);
    function Get_OrderBy: WideString;
    procedure Set_OrderBy(const pRet: WideString);
    function Get_OrderByOn: WordBool;
    procedure Set_OrderByOn(pRet: WordBool);
    function Get_AllowFilters: WordBool;
    procedure Set_AllowFilters(pRet: WordBool);
    function Get_Caption: WideString;
    procedure Set_Caption(const pRet: WideString);
    function Get_DefaultView: Byte;
    procedure Set_DefaultView(pRet: Byte);
    function Get_ViewsAllowed: Byte;
    procedure Set_ViewsAllowed(pRet: Byte);
    function Get_AllowEditing: WordBool;
    procedure Set_AllowEditing(pRet: WordBool);
    function Get_DefaultEditing: Smallint;
    procedure Set_DefaultEditing(pRet: Smallint);
    function Get_AllowEdits: WordBool;
    procedure Set_AllowEdits(pRet: WordBool);
    function Get_AllowDeletions: WordBool;
    procedure Set_AllowDeletions(pRet: WordBool);
    function Get_AllowAdditions: WordBool;
    procedure Set_AllowAdditions(pRet: WordBool);
    function Get_DataEntry: WordBool;
    procedure Set_DataEntry(pRet: WordBool);
    function Get_AllowUpdating: Byte;
    procedure Set_AllowUpdating(pRet: Byte);
    function Get_RecordsetType: Byte;
    procedure Set_RecordsetType(pRet: Byte);
    function Get_RecordLocks: Byte;
    procedure Set_RecordLocks(pRet: Byte);
    function Get_ScrollBars: Byte;
    procedure Set_ScrollBars(pRet: Byte);
    function Get_RecordSelectors: WordBool;
    procedure Set_RecordSelectors(pRet: WordBool);
    function Get_NavigationButtons: WordBool;
    procedure Set_NavigationButtons(pRet: WordBool);
    function Get_DividingLines: WordBool;
    procedure Set_DividingLines(pRet: WordBool);
    function Get_AutoResize: WordBool;
    procedure Set_AutoResize(pRet: WordBool);
    function Get_AutoCenter: WordBool;
    procedure Set_AutoCenter(pRet: WordBool);
    function Get_PopUp: WordBool;
    procedure Set_PopUp(pRet: WordBool);
    function Get_Modal: WordBool;
    procedure Set_Modal(pRet: WordBool);
    function Get_BorderStyle: Byte;
    procedure Set_BorderStyle(pRet: Byte);
    function Get_ControlBox: WordBool;
    procedure Set_ControlBox(pRet: WordBool);
    function Get_MinButton: WordBool;
    procedure Set_MinButton(pRet: WordBool);
    function Get_MaxButton: WordBool;
    procedure Set_MaxButton(pRet: WordBool);
    function Get_MinMaxButtons: Byte;
    procedure Set_MinMaxButtons(pRet: Byte);
    function Get_CloseButton: WordBool;
    procedure Set_CloseButton(pRet: WordBool);
    function Get_WhatsThisButton: WordBool;
    procedure Set_WhatsThisButton(pRet: WordBool);
    function Get_Width: Smallint;
    procedure Set_Width(pRet: Smallint);
    function Get_Picture: WideString;
    procedure Set_Picture(const pRet: WideString);
    function Get_PictureType: Byte;
    procedure Set_PictureType(pRet: Byte);
    function Get_PictureSizeMode: Byte;
    procedure Set_PictureSizeMode(pRet: Byte);
    function Get_PictureAlignment: Byte;
    procedure Set_PictureAlignment(pRet: Byte);
    function Get_PictureTiling: WordBool;
    procedure Set_PictureTiling(pRet: WordBool);
    function Get_Cycle: Byte;
    procedure Set_Cycle(pRet: Byte);
    function Get_MenuBar: WideString;
    procedure Set_MenuBar(const pRet: WideString);
    function Get_Toolbar: WideString;
    procedure Set_Toolbar(const pRet: WideString);
    function Get_ShortcutMenu: WordBool;
    procedure Set_ShortcutMenu(pRet: WordBool);
    function Get_ShortcutMenuBar: WideString;
    procedure Set_ShortcutMenuBar(const pRet: WideString);
    function Get_GridX: Smallint;
    procedure Set_GridX(pRet: Smallint);
    function Get_GridY: Smallint;
    procedure Set_GridY(pRet: Smallint);
    function Get_LayoutForPrint: WordBool;
    procedure Set_LayoutForPrint(pRet: WordBool);
    function Get_FastLaserPrinting: WordBool;
    procedure Set_FastLaserPrinting(pRet: WordBool);
    function Get_HelpFile: WideString;
    procedure Set_HelpFile(const pRet: WideString);
    function Get_HelpContextId: Integer;
    procedure Set_HelpContextId(pRet: Integer);
    function Get_RowHeight: Smallint;
    procedure Set_RowHeight(pRet: Smallint);
    function Get_DatasheetFontName: WideString;
    procedure Set_DatasheetFontName(const pRet: WideString);
    function Get_DatasheetFontHeight: Smallint;
    procedure Set_DatasheetFontHeight(pRet: Smallint);
    function Get_DatasheetFontWeight: Smallint;
    procedure Set_DatasheetFontWeight(pRet: Smallint);
    function Get_DatasheetFontItalic: WordBool;
    procedure Set_DatasheetFontItalic(pRet: WordBool);
    function Get_DatasheetFontUnderline: WordBool;
    procedure Set_DatasheetFontUnderline(pRet: WordBool);
    function Get_TabularCharSet: Byte;
    procedure Set_TabularCharSet(pRet: Byte);
    function Get_DatasheetGridlinesBehavior: Byte;
    procedure Set_DatasheetGridlinesBehavior(pRet: Byte);
    function Get_DatasheetGridlinesColor: Integer;
    procedure Set_DatasheetGridlinesColor(pRet: Integer);
    function Get_DatasheetCellsEffect: Byte;
    procedure Set_DatasheetCellsEffect(pRet: Byte);
    function Get_DatasheetForeColor: Integer;
    procedure Set_DatasheetForeColor(pRet: Integer);
    function Get_ShowGrid: WordBool;
    procedure Set_ShowGrid(pRet: WordBool);
    function Get_DatasheetBackColor: Integer;
    procedure Set_DatasheetBackColor(pRet: Integer);
    function Get_Hwnd: Integer;
    procedure Set_Hwnd(pRet: Integer);
    function Get_Count: Smallint;
    procedure Set_Count(pRet: Smallint);
    function Get_Page: Integer;
    procedure Set_Page(pRet: Integer);
    function Get_Pages: Smallint;
    procedure Set_Pages(pRet: Smallint);
    function Get_LogicalPageWidth: Integer;
    procedure Set_LogicalPageWidth(pRet: Integer);
    function Get_LogicalPageHeight: Integer;
    procedure Set_LogicalPageHeight(pRet: Integer);
    function Get_ZoomControl: Integer;
    procedure Set_ZoomControl(pRet: Integer);
    function Get_Visible: WordBool;
    procedure Set_Visible(pRet: WordBool);
    function Get_Painting: WordBool;
    procedure Set_Painting(pRet: WordBool);
    function Get_PrtMip: OleVariant;
    procedure Set_PrtMip(pRet: OleVariant);
    function Get_PrtDevMode: OleVariant;
    procedure Set_PrtDevMode(pRet: OleVariant);
    function Get_PrtDevNames: OleVariant;
    procedure Set_PrtDevNames(pRet: OleVariant);
    function Get_FrozenColumns: Smallint;
    procedure Set_FrozenColumns(pRet: Smallint);
    function Get_Bookmark: OleVariant;
    procedure Set_Bookmark(pRet: OleVariant);
    function Get_TabularFamily: Byte;
    procedure Set_TabularFamily(pRet: Byte);
    function Get__Name: WideString;
    procedure Set__Name(const pRet: WideString);
    function Get_PaletteSource: WideString;
    procedure Set_PaletteSource(const pRet: WideString);
    function Get_Tag: WideString;
    procedure Set_Tag(const pRet: WideString);
    function Get_PaintPalette: OleVariant;
    procedure Set_PaintPalette(pRet: OleVariant);
    function Get_OnMenu: WideString;
    procedure Set_OnMenu(const pRet: WideString);
    function Get_OpenArgs: OleVariant;
    procedure Set_OpenArgs(pRet: OleVariant);
    function Get_ConnectSynch: Smallint;
    procedure Set_ConnectSynch(pRet: Smallint);
    function Get_OnCurrent: WideString;
    procedure Set_OnCurrent(const pRet: WideString);
    function Get_OnInsert: WideString;
    procedure Set_OnInsert(const pRet: WideString);
    function Get_BeforeInsert: WideString;
    procedure Set_BeforeInsert(const pRet: WideString);
    function Get_AfterInsert: WideString;
    procedure Set_AfterInsert(const pRet: WideString);
    function Get_BeforeUpdate: WideString;
    procedure Set_BeforeUpdate(const pRet: WideString);
    function Get_AfterUpdate: WideString;
    procedure Set_AfterUpdate(const pRet: WideString);
    function Get_OnDirty: WideString;
    procedure Set_OnDirty(const pRet: WideString);
    function Get_OnDelete: WideString;
    procedure Set_OnDelete(const pRet: WideString);
    function Get_BeforeDelConfirm: WideString;
    procedure Set_BeforeDelConfirm(const pRet: WideString);
    function Get_AfterDelConfirm: WideString;
    procedure Set_AfterDelConfirm(const pRet: WideString);
    function Get_OnOpen: WideString;
    procedure Set_OnOpen(const pRet: WideString);
    function Get_OnLoad: WideString;
    procedure Set_OnLoad(const pRet: WideString);
    function Get_OnResize: WideString;
    procedure Set_OnResize(const pRet: WideString);
    function Get_OnUnload: WideString;
    procedure Set_OnUnload(const pRet: WideString);
    function Get_OnClose: WideString;
    procedure Set_OnClose(const pRet: WideString);
    function Get_OnActivate: WideString;
    procedure Set_OnActivate(const pRet: WideString);
    function Get_OnDeactivate: WideString;
    procedure Set_OnDeactivate(const pRet: WideString);
    function Get_OnGotFocus: WideString;
    procedure Set_OnGotFocus(const pRet: WideString);
    function Get_OnLostFocus: WideString;
    procedure Set_OnLostFocus(const pRet: WideString);
    function Get_OnClick: WideString;
    procedure Set_OnClick(const pRet: WideString);
    function Get_OnDblClick: WideString;
    procedure Set_OnDblClick(const pRet: WideString);
    function Get_OnMouseDown: WideString;
    procedure Set_OnMouseDown(const pRet: WideString);
    function Get_OnMouseMove: WideString;
    procedure Set_OnMouseMove(const pRet: WideString);
    function Get_OnMouseUp: WideString;
    procedure Set_OnMouseUp(const pRet: WideString);
    function Get_OnKeyDown: WideString;
    procedure Set_OnKeyDown(const pRet: WideString);
    function Get_OnKeyUp: WideString;
    procedure Set_OnKeyUp(const pRet: WideString);
    function Get_OnKeyPress: WideString;
    procedure Set_OnKeyPress(const pRet: WideString);
    function Get_KeyPreview: WordBool;
    procedure Set_KeyPreview(pRet: WordBool);
    function Get_OnError: WideString;
    procedure Set_OnError(const pRet: WideString);
    function Get_OnFilter: WideString;
    procedure Set_OnFilter(const pRet: WideString);
    function Get_OnApplyFilter: WideString;
    procedure Set_OnApplyFilter(const pRet: WideString);
    function Get_OnTimer: WideString;
    procedure Set_OnTimer(const pRet: WideString);
    function Get_TimerInterval: Integer;
    procedure Set_TimerInterval(pRet: Integer);
    function Get_Dirty: WordBool;
    procedure Set_Dirty(pRet: WordBool);
    function Get_WindowWidth: Smallint;
    procedure Set_WindowWidth(pRet: Smallint);
    function Get_WindowHeight: Smallint;
    procedure Set_WindowHeight(pRet: Smallint);
    function Get_CurrentView: Smallint;
    procedure Set_CurrentView(pRet: Smallint);
    function Get_CurrentSectionTop: Smallint;
    procedure Set_CurrentSectionTop(pRet: Smallint);
    function Get_CurrentSectionLeft: Smallint;
    procedure Set_CurrentSectionLeft(pRet: Smallint);
    function Get_SelLeft: Integer;
    procedure Set_SelLeft(pRet: Integer);
    function Get_SelTop: Integer;
    procedure Set_SelTop(pRet: Integer);
    function Get_SelWidth: Integer;
    procedure Set_SelWidth(pRet: Integer);
    function Get_SelHeight: Integer;
    procedure Set_SelHeight(pRet: Integer);
    function Get_CurrentRecord: Integer;
    procedure Set_CurrentRecord(pRet: Integer);
    function Get_PictureData: OleVariant;
    procedure Set_PictureData(pRet: OleVariant);
    function Get_InsideHeight: Integer;
    procedure Set_InsideHeight(pRet: Integer);
    function Get_InsideWidth: Integer;
    procedure Set_InsideWidth(pRet: Integer);
    function Get_PicturePalette: OleVariant;
    procedure Set_PicturePalette(pRet: OleVariant);
    function Get_HasModule: WordBool;
    procedure Set_HasModule(pRet: WordBool);
    function Get_acHiddenCurrentPage: Integer;
    procedure Set_acHiddenCurrentPage(pRet: Integer);
    function Get_Orientation: Byte;
    procedure Set_Orientation(pRet: Byte);
    function Get_AllowDesignChanges: WordBool;
    procedure Set_AllowDesignChanges(pRet: WordBool);
    function Get_ServerFilter: WideString;
    procedure Set_ServerFilter(const pRet: WideString);
    function Get_ServerFilterByForm: WordBool;
    procedure Set_ServerFilterByForm(pRet: WordBool);
    function Get_MaxRecords: Integer;
    procedure Set_MaxRecords(pRet: Integer);
    function Get_UniqueTable: WideString;
    procedure Set_UniqueTable(const pRet: WideString);
    function Get_ResyncCommand: WideString;
    procedure Set_ResyncCommand(const pRet: WideString);
    function Get_InputParameters: WideString;
    procedure Set_InputParameters(const pRet: WideString);
    function Get_MaxRecButton: WordBool;
    procedure Set_MaxRecButton(pRet: WordBool);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_NewRecord: Smallint;
    function Get_ActiveControl: AccessControl;
    function Get_DefaultControl(ControlType: Integer): AccessControl;
    function Get_Dynaset: IDispatch;
    function Get_RecordsetClone: IDispatch;
    function Get_Recordset: IDispatch;
    procedure _Set_Recordset(const pRet: IDispatch);
    function Get__SectionOld(Index: OleVariant): AccessSection;
    function Get_Form: AccessForm;
    function Get_Module: Module;
    function Get_Properties: Properties;
    function Get_ConnectControl: AccessControl;
    function Get_Controls: Controls;
    function Get_Name: WideString;
    procedure Set_Name(const pbstrName: WideString);
    function Get_SubdatasheetHeight: Smallint;
    procedure Set_SubdatasheetHeight(pRet: Smallint);
    function Get_SubdatasheetExpanded: WordBool;
    procedure Set_SubdatasheetExpanded(pRet: WordBool);
    function Get_DatasheetBorderLineStyle: Byte;
    procedure Set_DatasheetBorderLineStyle(pRet: Byte);
    function Get_DatasheetColumnHeaderUnderlineStyle: Byte;
    procedure Set_DatasheetColumnHeaderUnderlineStyle(pRet: Byte);
    function Get_HorizontalDatasheetGridlineStyle: Byte;
    procedure Set_HorizontalDatasheetGridlineStyle(pRet: Byte);
    function Get_VerticalDatasheetGridlineStyle: Byte;
    procedure Set_VerticalDatasheetGridlineStyle(pRet: Byte);
    function Get_WindowTop: Smallint;
    function Get_WindowLeft: Smallint;
    function Get_OnUndo: WideString;
    procedure Set_OnUndo(const pRet: WideString);
    function Get_OnRecordExit: WideString;
    procedure Set_OnRecordExit(const pRet: WideString);
    function Get_PivotTable: IDispatch;
    function Get_ChartSpace: IDispatch;
    function Get_Printer: _Printer;
    procedure Set_Printer(const pRet: _Printer);
    procedure _Set_Printer(const pRet: _Printer);
    function Get_Moveable: WordBool;
    procedure Set_Moveable(pRet: WordBool);
    function Get_BeginBatchEdit: WideString;
    procedure Set_BeginBatchEdit(const pRet: WideString);
    function Get_UndoBatchEdit: WideString;
    procedure Set_UndoBatchEdit(const pRet: WideString);
    function Get_BeforeBeginTransaction: WideString;
    procedure Set_BeforeBeginTransaction(const pRet: WideString);
    function Get_AfterBeginTransaction: WideString;
    procedure Set_AfterBeginTransaction(const pRet: WideString);
    function Get_BeforeCommitTransaction: WideString;
    procedure Set_BeforeCommitTransaction(const pRet: WideString);
    function Get_AfterCommitTransaction: WideString;
    procedure Set_AfterCommitTransaction(const pRet: WideString);
    function Get_RollbackTransaction: WideString;
    procedure Set_RollbackTransaction(const pRet: WideString);
    function Get_AllowFormView: WordBool;
    procedure Set_AllowFormView(pRet: WordBool);
    function Get_AllowDatasheetView: WordBool;
    procedure Set_AllowDatasheetView(pRet: WordBool);
    function Get_AllowPivotTableView: WordBool;
    procedure Set_AllowPivotTableView(pRet: WordBool);
    function Get_AllowPivotChartView: WordBool;
    procedure Set_AllowPivotChartView(pRet: WordBool);
    function Get_OnConnect: WideString;
    procedure Set_OnConnect(const pRet: WideString);
    function Get_OnDisconnect: WideString;
    procedure Set_OnDisconnect(const pRet: WideString);
    function Get_PivotTableChange: WideString;
    procedure Set_PivotTableChange(const pRet: WideString);
    function Get_Query: WideString;
    procedure Set_Query(const pRet: WideString);
    function Get_BeforeQuery: WideString;
    procedure Set_BeforeQuery(const pRet: WideString);
    function Get_SelectionChange: WideString;
    procedure Set_SelectionChange(const pRet: WideString);
    function Get_CommandBeforeExecute: WideString;
    procedure Set_CommandBeforeExecute(const pRet: WideString);
    function Get_CommandChecked: WideString;
    procedure Set_CommandChecked(const pRet: WideString);
    function Get_CommandEnabled: WideString;
    procedure Set_CommandEnabled(const pRet: WideString);
    function Get_CommandExecute: WideString;
    procedure Set_CommandExecute(const pRet: WideString);
    function Get_DataSetChange: WideString;
    procedure Set_DataSetChange(const pRet: WideString);
    function Get_BeforeScreenTip: WideString;
    procedure Set_BeforeScreenTip(const pRet: WideString);
    function Get_AfterFinalRender: WideString;
    procedure Set_AfterFinalRender(const pRet: WideString);
    function Get_AfterRender: WideString;
    procedure Set_AfterRender(const pRet: WideString);
    function Get_AfterLayout: WideString;
    procedure Set_AfterLayout(const pRet: WideString);
    function Get_BeforeRender: WideString;
    procedure Set_BeforeRender(const pRet: WideString);
    function Get_MouseWheel: WideString;
    procedure Set_MouseWheel(const pRet: WideString);
    function Get_ViewChange: WideString;
    procedure Set_ViewChange(const pRet: WideString);
    function Get_DataChange: WideString;
    procedure Set_DataChange(const pRet: WideString);
    function Get_FetchDefaults: WordBool;
    procedure Set_FetchDefaults(pRet: WordBool);
    function Get_BatchUpdates: WordBool;
    procedure Set_BatchUpdates(pRet: WordBool);
    function Get_CommitOnClose: Byte;
    procedure Set_CommitOnClose(pRet: Byte);
    function Get_CommitOnNavigation: WordBool;
    procedure Set_CommitOnNavigation(pRet: WordBool);
    function Get_UseDefaultPrinter: WordBool;
    procedure Set_UseDefaultPrinter(pRet: WordBool);
    function Get_RecordSourceQualifier: WideString;
    procedure Set_RecordSourceQualifier(const pRet: WideString);
    function Get_FilterOnLoad: WordBool;
    procedure Set_FilterOnLoad(pRet: WordBool);
    function Get_OrderByOnLoad: WordBool;
    procedure Set_OrderByOnLoad(pRet: WordBool);
    function Get_SplitFormOrientation: AcSplitFormOrientation;
    procedure Set_SplitFormOrientation(pRet: AcSplitFormOrientation);
    function Get_SplitFormDatasheet: AcSplitFormDatasheet;
    procedure Set_SplitFormDatasheet(pRet: AcSplitFormDatasheet);
    function Get_SplitFormSplitterBar: WordBool;
    procedure Set_SplitFormSplitterBar(pRet: WordBool);
    function Get_SplitFormPrinting: AcSplitFormPrinting;
    procedure Set_SplitFormPrinting(pRet: AcSplitFormPrinting);
    function Get_SplitFormSplitterBarSave: WordBool;
    procedure Set_SplitFormSplitterBarSave(pRet: WordBool);
    function Get_NavigationCaption: WideString;
    procedure Set_NavigationCaption(const pRet: WideString);
    function Get_OnCurrentMacro: WideString;
    procedure Set_OnCurrentMacro(const pRet: WideString);
    function Get_BeforeInsertMacro: WideString;
    procedure Set_BeforeInsertMacro(const pRet: WideString);
    function Get_AfterInsertMacro: WideString;
    procedure Set_AfterInsertMacro(const pRet: WideString);
    function Get_BeforeUpdateMacro: WideString;
    procedure Set_BeforeUpdateMacro(const pRet: WideString);
    function Get_AfterUpdateMacro: WideString;
    procedure Set_AfterUpdateMacro(const pRet: WideString);
    function Get_OnDirtyMacro: WideString;
    procedure Set_OnDirtyMacro(const pRet: WideString);
    function Get_OnDeleteMacro: WideString;
    procedure Set_OnDeleteMacro(const pRet: WideString);
    function Get_BeforeDelConfirmMacro: WideString;
    procedure Set_BeforeDelConfirmMacro(const pRet: WideString);
    function Get_AfterDelConfirmMacro: WideString;
    procedure Set_AfterDelConfirmMacro(const pRet: WideString);
    function Get_OnOpenMacro: WideString;
    procedure Set_OnOpenMacro(const pRet: WideString);
    function Get_OnLoadMacro: WideString;
    procedure Set_OnLoadMacro(const pRet: WideString);
    function Get_OnResizeMacro: WideString;
    procedure Set_OnResizeMacro(const pRet: WideString);
    function Get_OnUnloadMacro: WideString;
    procedure Set_OnUnloadMacro(const pRet: WideString);
    function Get_OnCloseMacro: WideString;
    procedure Set_OnCloseMacro(const pRet: WideString);
    function Get_OnActivateMacro: WideString;
    procedure Set_OnActivateMacro(const pRet: WideString);
    function Get_OnDeactivateMacro: WideString;
    procedure Set_OnDeactivateMacro(const pRet: WideString);
    function Get_OnGotFocusMacro: WideString;
    procedure Set_OnGotFocusMacro(const pRet: WideString);
    function Get_OnLostFocusMacro: WideString;
    procedure Set_OnLostFocusMacro(const pRet: WideString);
    function Get_OnClickMacro: WideString;
    procedure Set_OnClickMacro(const pRet: WideString);
    function Get_OnDblClickMacro: WideString;
    procedure Set_OnDblClickMacro(const pRet: WideString);
    function Get_OnMouseDownMacro: WideString;
    procedure Set_OnMouseDownMacro(const pRet: WideString);
    function Get_OnMouseMoveMacro: WideString;
    procedure Set_OnMouseMoveMacro(const pRet: WideString);
    function Get_OnMouseUpMacro: WideString;
    procedure Set_OnMouseUpMacro(const pRet: WideString);
    function Get_OnKeyDownMacro: WideString;
    procedure Set_OnKeyDownMacro(const pRet: WideString);
    function Get_OnKeyUpMacro: WideString;
    procedure Set_OnKeyUpMacro(const pRet: WideString);
    function Get_OnKeyPressMacro: WideString;
    procedure Set_OnKeyPressMacro(const pRet: WideString);
    function Get_OnErrorMacro: WideString;
    procedure Set_OnErrorMacro(const pRet: WideString);
    function Get_OnFilterMacro: WideString;
    procedure Set_OnFilterMacro(const pRet: WideString);
    function Get_OnApplyFilterMacro: WideString;
    procedure Set_OnApplyFilterMacro(const pRet: WideString);
    function Get_OnTimerMacro: WideString;
    procedure Set_OnTimerMacro(const pRet: WideString);
    function Get_OnUndoMacro: WideString;
    procedure Set_OnUndoMacro(const pRet: WideString);
    function Get_OnRecordExitMacro: WideString;
    procedure Set_OnRecordExitMacro(const pRet: WideString);
    function Get_BeginBatchEditMacro: WideString;
    procedure Set_BeginBatchEditMacro(const pRet: WideString);
    function Get_UndoBatchEditMacro: WideString;
    procedure Set_UndoBatchEditMacro(const pRet: WideString);
    function Get_BeforeBeginTransactionMacro: WideString;
    procedure Set_BeforeBeginTransactionMacro(const pRet: WideString);
    function Get_AfterBeginTransactionMacro: WideString;
    procedure Set_AfterBeginTransactionMacro(const pRet: WideString);
    function Get_BeforeCommitTransactionMacro: WideString;
    procedure Set_BeforeCommitTransactionMacro(const pRet: WideString);
    function Get_AfterCommitTransactionMacro: WideString;
    procedure Set_AfterCommitTransactionMacro(const pRet: WideString);
    function Get_RollbackTransactionMacro: WideString;
    procedure Set_RollbackTransactionMacro(const pRet: WideString);
    function Get_OnConnectMacro: WideString;
    procedure Set_OnConnectMacro(const pRet: WideString);
    function Get_OnDisconnectMacro: WideString;
    procedure Set_OnDisconnectMacro(const pRet: WideString);
    function Get_PivotTableChangeMacro: WideString;
    procedure Set_PivotTableChangeMacro(const pRet: WideString);
    function Get_QueryMacro: WideString;
    procedure Set_QueryMacro(const pRet: WideString);
    function Get_BeforeQueryMacro: WideString;
    procedure Set_BeforeQueryMacro(const pRet: WideString);
    function Get_SelectionChangeMacro: WideString;
    procedure Set_SelectionChangeMacro(const pRet: WideString);
    function Get_CommandBeforeExecuteMacro: WideString;
    procedure Set_CommandBeforeExecuteMacro(const pRet: WideString);
    function Get_CommandCheckedMacro: WideString;
    procedure Set_CommandCheckedMacro(const pRet: WideString);
    function Get_CommandEnabledMacro: WideString;
    procedure Set_CommandEnabledMacro(const pRet: WideString);
    function Get_CommandExecuteMacro: WideString;
    procedure Set_CommandExecuteMacro(const pRet: WideString);
    function Get_DataSetChangeMacro: WideString;
    procedure Set_DataSetChangeMacro(const pRet: WideString);
    function Get_BeforeScreenTipMacro: WideString;
    procedure Set_BeforeScreenTipMacro(const pRet: WideString);
    function Get_AfterFinalRenderMacro: WideString;
    procedure Set_AfterFinalRenderMacro(const pRet: WideString);
    function Get_AfterRenderMacro: WideString;
    procedure Set_AfterRenderMacro(const pRet: WideString);
    function Get_AfterLayoutMacro: WideString;
    procedure Set_AfterLayoutMacro(const pRet: WideString);
    function Get_BeforeRenderMacro: WideString;
    procedure Set_BeforeRenderMacro(const pRet: WideString);
    function Get_MouseWheelMacro: WideString;
    procedure Set_MouseWheelMacro(const pRet: WideString);
    function Get_ViewChangeMacro: WideString;
    procedure Set_ViewChangeMacro(const pRet: WideString);
    function Get_DataChangeMacro: WideString;
    procedure Set_DataChangeMacro(const pRet: WideString);
    function Get_AllowLayoutView: WordBool;
    procedure Set_AllowLayoutView(pRet: WordBool);
    function Get_DatasheetAlternateBackColor: Integer;
    procedure Set_DatasheetAlternateBackColor(pRet: Integer);
    function Get_DisplayOnSharePointSite: Byte;
    procedure Set_DisplayOnSharePointSite(pRet: Byte);
    function Get_SplitFormSize: Integer;
    procedure Set_SplitFormSize(pRet: Integer);
    function Get_Section(Index: OleVariant): _Section;
    function Get_RibbonName: WideString;
    procedure Set_RibbonName(const pRet: WideString);
    function Get_FitToScreen: WordBool;
    procedure Set_FitToScreen(pRet: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Form3);
    procedure Disconnect; override;
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure Undo;
    procedure Recalc;
    procedure Requery;
    procedure Refresh;
    procedure Repaint;
    procedure GoToPage(PageNumber: Integer; Right: Integer; Down: Integer);
    procedure SetFocus;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    property DefaultInterface: _Form3 read GetDefaultInterface;
    property accParent: IDispatch read Get_accParent;
    property accChildCount: Integer read Get_accChildCount;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant read Get_accFocus;
    property accSelection: OleVariant read Get_accSelection;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property FormName: WideString read Get_FormName write Set_FormName;
    property AllowEditing: WordBool read Get_AllowEditing write Set_AllowEditing;
    property DefaultEditing: Smallint read Get_DefaultEditing write Set_DefaultEditing;
    property AllowUpdating: Byte read Get_AllowUpdating write Set_AllowUpdating;
    property MinButton: WordBool read Get_MinButton write Set_MinButton;
    property MaxButton: WordBool read Get_MaxButton write Set_MaxButton;
    property WhatsThisButton: WordBool read Get_WhatsThisButton write Set_WhatsThisButton;
    property TabularCharSet: Byte read Get_TabularCharSet write Set_TabularCharSet;
    property ShowGrid: WordBool read Get_ShowGrid write Set_ShowGrid;
    property LogicalPageWidth: Integer read Get_LogicalPageWidth write Set_LogicalPageWidth;
    property LogicalPageHeight: Integer read Get_LogicalPageHeight write Set_LogicalPageHeight;
    property ZoomControl: Integer read Get_ZoomControl write Set_ZoomControl;
    property PrtMip: OleVariant read Get_PrtMip write Set_PrtMip;
    property PrtDevMode: OleVariant read Get_PrtDevMode write Set_PrtDevMode;
    property PrtDevNames: OleVariant read Get_PrtDevNames write Set_PrtDevNames;
    property Bookmark: OleVariant read Get_Bookmark write Set_Bookmark;
    property TabularFamily: Byte read Get_TabularFamily write Set_TabularFamily;
    property _Name: WideString read Get__Name write Set__Name;
    property PaintPalette: OleVariant read Get_PaintPalette write Set_PaintPalette;
    property OpenArgs: OleVariant read Get_OpenArgs write Set_OpenArgs;
    property ConnectSynch: Smallint read Get_ConnectSynch write Set_ConnectSynch;
    property PictureData: OleVariant read Get_PictureData write Set_PictureData;
    property PicturePalette: OleVariant read Get_PicturePalette write Set_PicturePalette;
    property acHiddenCurrentPage: Integer read Get_acHiddenCurrentPage write Set_acHiddenCurrentPage;
    property AllowDesignChanges: WordBool read Get_AllowDesignChanges write Set_AllowDesignChanges;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property NewRecord: Smallint read Get_NewRecord;
    property ActiveControl: AccessControl read Get_ActiveControl;
    property DefaultControl[ControlType: Integer]: AccessControl read Get_DefaultControl;
    property Dynaset: IDispatch read Get_Dynaset;
    property RecordsetClone: IDispatch read Get_RecordsetClone;
    property Recordset: IDispatch read Get_Recordset write _Set_Recordset;
    property _SectionOld[Index: OleVariant]: AccessSection read Get__SectionOld;
    property Form: AccessForm read Get_Form;
    property Module: Module read Get_Module;
    property Properties: Properties read Get_Properties;
    property ConnectControl: AccessControl read Get_ConnectControl;
    property Controls: Controls read Get_Controls;
    property WindowTop: Smallint read Get_WindowTop;
    property WindowLeft: Smallint read Get_WindowLeft;
    property OnRecordExit1: WideString read Get_OnRecordExit write Set_OnRecordExit;
    property PivotTable: IDispatch read Get_PivotTable;
    property ChartSpace: IDispatch read Get_ChartSpace;
    property BeginBatchEdit: WideString read Get_BeginBatchEdit write Set_BeginBatchEdit;
    property UndoBatchEdit: WideString read Get_UndoBatchEdit write Set_UndoBatchEdit;
    property BeforeBeginTransaction: WideString read Get_BeforeBeginTransaction write Set_BeforeBeginTransaction;
    property AfterBeginTransaction: WideString read Get_AfterBeginTransaction write Set_AfterBeginTransaction;
    property BeforeCommitTransaction: WideString read Get_BeforeCommitTransaction write Set_BeforeCommitTransaction;
    property AfterCommitTransaction: WideString read Get_AfterCommitTransaction write Set_AfterCommitTransaction;
    property RollbackTransaction: WideString read Get_RollbackTransaction write Set_RollbackTransaction;
    property BatchUpdates: WordBool read Get_BatchUpdates write Set_BatchUpdates;
    property CommitOnClose: Byte read Get_CommitOnClose write Set_CommitOnClose;
    property CommitOnNavigation: WordBool read Get_CommitOnNavigation write Set_CommitOnNavigation;
    property OnCurrentMacro: WideString read Get_OnCurrentMacro write Set_OnCurrentMacro;
    property BeforeInsertMacro: WideString read Get_BeforeInsertMacro write Set_BeforeInsertMacro;
    property AfterInsertMacro: WideString read Get_AfterInsertMacro write Set_AfterInsertMacro;
    property BeforeUpdateMacro: WideString read Get_BeforeUpdateMacro write Set_BeforeUpdateMacro;
    property AfterUpdateMacro: WideString read Get_AfterUpdateMacro write Set_AfterUpdateMacro;
    property OnDirtyMacro: WideString read Get_OnDirtyMacro write Set_OnDirtyMacro;
    property OnDeleteMacro: WideString read Get_OnDeleteMacro write Set_OnDeleteMacro;
    property BeforeDelConfirmMacro: WideString read Get_BeforeDelConfirmMacro write Set_BeforeDelConfirmMacro;
    property AfterDelConfirmMacro: WideString read Get_AfterDelConfirmMacro write Set_AfterDelConfirmMacro;
    property OnOpenMacro: WideString read Get_OnOpenMacro write Set_OnOpenMacro;
    property OnLoadMacro: WideString read Get_OnLoadMacro write Set_OnLoadMacro;
    property OnResizeMacro: WideString read Get_OnResizeMacro write Set_OnResizeMacro;
    property OnUnloadMacro: WideString read Get_OnUnloadMacro write Set_OnUnloadMacro;
    property OnCloseMacro: WideString read Get_OnCloseMacro write Set_OnCloseMacro;
    property OnActivateMacro: WideString read Get_OnActivateMacro write Set_OnActivateMacro;
    property OnDeactivateMacro: WideString read Get_OnDeactivateMacro write Set_OnDeactivateMacro;
    property OnGotFocusMacro: WideString read Get_OnGotFocusMacro write Set_OnGotFocusMacro;
    property OnLostFocusMacro: WideString read Get_OnLostFocusMacro write Set_OnLostFocusMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property OnKeyDownMacro: WideString read Get_OnKeyDownMacro write Set_OnKeyDownMacro;
    property OnKeyUpMacro: WideString read Get_OnKeyUpMacro write Set_OnKeyUpMacro;
    property OnKeyPressMacro: WideString read Get_OnKeyPressMacro write Set_OnKeyPressMacro;
    property OnErrorMacro: WideString read Get_OnErrorMacro write Set_OnErrorMacro;
    property OnFilterMacro: WideString read Get_OnFilterMacro write Set_OnFilterMacro;
    property OnApplyFilterMacro: WideString read Get_OnApplyFilterMacro write Set_OnApplyFilterMacro;
    property OnTimerMacro: WideString read Get_OnTimerMacro write Set_OnTimerMacro;
    property OnUndoMacro: WideString read Get_OnUndoMacro write Set_OnUndoMacro;
    property OnRecordExitMacro: WideString read Get_OnRecordExitMacro write Set_OnRecordExitMacro;
    property BeginBatchEditMacro: WideString read Get_BeginBatchEditMacro write Set_BeginBatchEditMacro;
    property UndoBatchEditMacro: WideString read Get_UndoBatchEditMacro write Set_UndoBatchEditMacro;
    property BeforeBeginTransactionMacro: WideString read Get_BeforeBeginTransactionMacro write Set_BeforeBeginTransactionMacro;
    property AfterBeginTransactionMacro: WideString read Get_AfterBeginTransactionMacro write Set_AfterBeginTransactionMacro;
    property BeforeCommitTransactionMacro: WideString read Get_BeforeCommitTransactionMacro write Set_BeforeCommitTransactionMacro;
    property AfterCommitTransactionMacro: WideString read Get_AfterCommitTransactionMacro write Set_AfterCommitTransactionMacro;
    property RollbackTransactionMacro: WideString read Get_RollbackTransactionMacro write Set_RollbackTransactionMacro;
    property OnConnectMacro: WideString read Get_OnConnectMacro write Set_OnConnectMacro;
    property OnDisconnectMacro: WideString read Get_OnDisconnectMacro write Set_OnDisconnectMacro;
    property PivotTableChangeMacro: WideString read Get_PivotTableChangeMacro write Set_PivotTableChangeMacro;
    property QueryMacro: WideString read Get_QueryMacro write Set_QueryMacro;
    property BeforeQueryMacro: WideString read Get_BeforeQueryMacro write Set_BeforeQueryMacro;
    property SelectionChangeMacro: WideString read Get_SelectionChangeMacro write Set_SelectionChangeMacro;
    property CommandBeforeExecuteMacro: WideString read Get_CommandBeforeExecuteMacro write Set_CommandBeforeExecuteMacro;
    property CommandCheckedMacro: WideString read Get_CommandCheckedMacro write Set_CommandCheckedMacro;
    property CommandEnabledMacro: WideString read Get_CommandEnabledMacro write Set_CommandEnabledMacro;
    property CommandExecuteMacro: WideString read Get_CommandExecuteMacro write Set_CommandExecuteMacro;
    property DataSetChangeMacro: WideString read Get_DataSetChangeMacro write Set_DataSetChangeMacro;
    property BeforeScreenTipMacro: WideString read Get_BeforeScreenTipMacro write Set_BeforeScreenTipMacro;
    property AfterFinalRenderMacro: WideString read Get_AfterFinalRenderMacro write Set_AfterFinalRenderMacro;
    property AfterRenderMacro: WideString read Get_AfterRenderMacro write Set_AfterRenderMacro;
    property AfterLayoutMacro: WideString read Get_AfterLayoutMacro write Set_AfterLayoutMacro;
    property BeforeRenderMacro: WideString read Get_BeforeRenderMacro write Set_BeforeRenderMacro;
    property MouseWheelMacro: WideString read Get_MouseWheelMacro write Set_MouseWheelMacro;
    property ViewChangeMacro: WideString read Get_ViewChangeMacro write Set_ViewChangeMacro;
    property DataChangeMacro: WideString read Get_DataChangeMacro write Set_DataChangeMacro;
    property Section[Index: OleVariant]: _Section read Get_Section;
    property RecordSource: WideString read Get_RecordSource write Set_RecordSource;
    property Filter: WideString read Get_Filter write Set_Filter;
    property FilterOn: WordBool read Get_FilterOn write Set_FilterOn;
    property OrderBy: WideString read Get_OrderBy write Set_OrderBy;
    property OrderByOn: WordBool read Get_OrderByOn write Set_OrderByOn;
    property AllowFilters: WordBool read Get_AllowFilters write Set_AllowFilters;
    property Caption: WideString read Get_Caption write Set_Caption;
    property DefaultView: Byte read Get_DefaultView write Set_DefaultView;
    property ViewsAllowed: Byte read Get_ViewsAllowed write Set_ViewsAllowed;
    property AllowEdits: WordBool read Get_AllowEdits write Set_AllowEdits;
    property AllowDeletions: WordBool read Get_AllowDeletions write Set_AllowDeletions;
    property AllowAdditions: WordBool read Get_AllowAdditions write Set_AllowAdditions;
    property DataEntry: WordBool read Get_DataEntry write Set_DataEntry;
    property RecordsetType: Byte read Get_RecordsetType write Set_RecordsetType;
    property RecordLocks: Byte read Get_RecordLocks write Set_RecordLocks;
    property ScrollBars: Byte read Get_ScrollBars write Set_ScrollBars;
    property RecordSelectors: WordBool read Get_RecordSelectors write Set_RecordSelectors;
    property NavigationButtons: WordBool read Get_NavigationButtons write Set_NavigationButtons;
    property DividingLines: WordBool read Get_DividingLines write Set_DividingLines;
    property AutoResize: WordBool read Get_AutoResize write Set_AutoResize;
    property AutoCenter: WordBool read Get_AutoCenter write Set_AutoCenter;
    property PopUp: WordBool read Get_PopUp write Set_PopUp;
    property Modal: WordBool read Get_Modal write Set_Modal;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property ControlBox: WordBool read Get_ControlBox write Set_ControlBox;
    property MinMaxButtons: Byte read Get_MinMaxButtons write Set_MinMaxButtons;
    property CloseButton: WordBool read Get_CloseButton write Set_CloseButton;
    property Width: Smallint read Get_Width write Set_Width;
    property Picture: WideString read Get_Picture write Set_Picture;
    property PictureType: Byte read Get_PictureType write Set_PictureType;
    property PictureSizeMode: Byte read Get_PictureSizeMode write Set_PictureSizeMode;
    property PictureAlignment: Byte read Get_PictureAlignment write Set_PictureAlignment;
    property PictureTiling: WordBool read Get_PictureTiling write Set_PictureTiling;
    property Cycle: Byte read Get_Cycle write Set_Cycle;
    property MenuBar: WideString read Get_MenuBar write Set_MenuBar;
    property Toolbar: WideString read Get_Toolbar write Set_Toolbar;
    property ShortcutMenu: WordBool read Get_ShortcutMenu write Set_ShortcutMenu;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property GridX: Smallint read Get_GridX write Set_GridX;
    property GridY: Smallint read Get_GridY write Set_GridY;
    property LayoutForPrint: WordBool read Get_LayoutForPrint write Set_LayoutForPrint;
    property FastLaserPrinting: WordBool read Get_FastLaserPrinting write Set_FastLaserPrinting;
    property HelpFile: WideString read Get_HelpFile write Set_HelpFile;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property RowHeight: Smallint read Get_RowHeight write Set_RowHeight;
    property DatasheetFontName: WideString read Get_DatasheetFontName write Set_DatasheetFontName;
    property DatasheetFontHeight: Smallint read Get_DatasheetFontHeight write Set_DatasheetFontHeight;
    property DatasheetFontWeight: Smallint read Get_DatasheetFontWeight write Set_DatasheetFontWeight;
    property DatasheetFontItalic: WordBool read Get_DatasheetFontItalic write Set_DatasheetFontItalic;
    property DatasheetFontUnderline: WordBool read Get_DatasheetFontUnderline write Set_DatasheetFontUnderline;
    property DatasheetGridlinesBehavior: Byte read Get_DatasheetGridlinesBehavior write Set_DatasheetGridlinesBehavior;
    property DatasheetGridlinesColor: Integer read Get_DatasheetGridlinesColor write Set_DatasheetGridlinesColor;
    property DatasheetCellsEffect: Byte read Get_DatasheetCellsEffect write Set_DatasheetCellsEffect;
    property DatasheetForeColor: Integer read Get_DatasheetForeColor write Set_DatasheetForeColor;
    property DatasheetBackColor: Integer read Get_DatasheetBackColor write Set_DatasheetBackColor;
    property Hwnd: Integer read Get_Hwnd write Set_Hwnd;
    property Count: Smallint read Get_Count write Set_Count;
    property Page: Integer read Get_Page write Set_Page;
    property Pages: Smallint read Get_Pages write Set_Pages;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Painting: WordBool read Get_Painting write Set_Painting;
    property FrozenColumns: Smallint read Get_FrozenColumns write Set_FrozenColumns;
    property PaletteSource: WideString read Get_PaletteSource write Set_PaletteSource;
    property Tag: WideString read Get_Tag write Set_Tag;
    property OnMenu: WideString read Get_OnMenu write Set_OnMenu;
    property OnCurrent1: WideString read Get_OnCurrent write Set_OnCurrent;
    property OnInsert: WideString read Get_OnInsert write Set_OnInsert;
    property BeforeInsert: WideString read Get_BeforeInsert write Set_BeforeInsert;
    property AfterInsert: WideString read Get_AfterInsert write Set_AfterInsert;
    property BeforeUpdate: WideString read Get_BeforeUpdate write Set_BeforeUpdate;
    property AfterUpdate: WideString read Get_AfterUpdate write Set_AfterUpdate;
    property OnDirty1: WideString read Get_OnDirty write Set_OnDirty;
    property OnDelete1: WideString read Get_OnDelete write Set_OnDelete;
    property BeforeDelConfirm: WideString read Get_BeforeDelConfirm write Set_BeforeDelConfirm;
    property AfterDelConfirm: WideString read Get_AfterDelConfirm write Set_AfterDelConfirm;
    property OnOpen1: WideString read Get_OnOpen write Set_OnOpen;
    property OnLoad1: WideString read Get_OnLoad write Set_OnLoad;
    property OnResize1: WideString read Get_OnResize write Set_OnResize;
    property OnUnload1: WideString read Get_OnUnload write Set_OnUnload;
    property OnClose1: WideString read Get_OnClose write Set_OnClose;
    property OnActivate1: WideString read Get_OnActivate write Set_OnActivate;
    property OnDeactivate1: WideString read Get_OnDeactivate write Set_OnDeactivate;
    property OnGotFocus1: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus1: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick1: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick1: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown1: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove1: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp1: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown1: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp1: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress1: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property KeyPreview: WordBool read Get_KeyPreview write Set_KeyPreview;
    property OnError1: WideString read Get_OnError write Set_OnError;
    property OnFilter1: WideString read Get_OnFilter write Set_OnFilter;
    property OnApplyFilter1: WideString read Get_OnApplyFilter write Set_OnApplyFilter;
    property OnTimer1: WideString read Get_OnTimer write Set_OnTimer;
    property TimerInterval: Integer read Get_TimerInterval write Set_TimerInterval;
    property Dirty: WordBool read Get_Dirty write Set_Dirty;
    property WindowWidth: Smallint read Get_WindowWidth write Set_WindowWidth;
    property WindowHeight: Smallint read Get_WindowHeight write Set_WindowHeight;
    property CurrentView: Smallint read Get_CurrentView write Set_CurrentView;
    property CurrentSectionTop: Smallint read Get_CurrentSectionTop write Set_CurrentSectionTop;
    property CurrentSectionLeft: Smallint read Get_CurrentSectionLeft write Set_CurrentSectionLeft;
    property SelLeft: Integer read Get_SelLeft write Set_SelLeft;
    property SelTop: Integer read Get_SelTop write Set_SelTop;
    property SelWidth: Integer read Get_SelWidth write Set_SelWidth;
    property SelHeight: Integer read Get_SelHeight write Set_SelHeight;
    property CurrentRecord: Integer read Get_CurrentRecord write Set_CurrentRecord;
    property InsideHeight: Integer read Get_InsideHeight write Set_InsideHeight;
    property InsideWidth: Integer read Get_InsideWidth write Set_InsideWidth;
    property HasModule: WordBool read Get_HasModule write Set_HasModule;
    property Orientation: Byte read Get_Orientation write Set_Orientation;
    property ServerFilter: WideString read Get_ServerFilter write Set_ServerFilter;
    property ServerFilterByForm: WordBool read Get_ServerFilterByForm write Set_ServerFilterByForm;
    property MaxRecords: Integer read Get_MaxRecords write Set_MaxRecords;
    property UniqueTable: WideString read Get_UniqueTable write Set_UniqueTable;
    property ResyncCommand: WideString read Get_ResyncCommand write Set_ResyncCommand;
    property InputParameters: WideString read Get_InputParameters write Set_InputParameters;
    property MaxRecButton: WordBool read Get_MaxRecButton write Set_MaxRecButton;
    property Name: WideString read Get_Name write Set_Name;
    property SubdatasheetHeight: Smallint read Get_SubdatasheetHeight write Set_SubdatasheetHeight;
    property SubdatasheetExpanded: WordBool read Get_SubdatasheetExpanded write Set_SubdatasheetExpanded;
    property DatasheetBorderLineStyle: Byte read Get_DatasheetBorderLineStyle write Set_DatasheetBorderLineStyle;
    property DatasheetColumnHeaderUnderlineStyle: Byte read Get_DatasheetColumnHeaderUnderlineStyle write Set_DatasheetColumnHeaderUnderlineStyle;
    property HorizontalDatasheetGridlineStyle: Byte read Get_HorizontalDatasheetGridlineStyle write Set_HorizontalDatasheetGridlineStyle;
    property VerticalDatasheetGridlineStyle: Byte read Get_VerticalDatasheetGridlineStyle write Set_VerticalDatasheetGridlineStyle;
    property OnUndo1: WideString read Get_OnUndo write Set_OnUndo;
    property Printer: _Printer read Get_Printer write Set_Printer;
    property Moveable: WordBool read Get_Moveable write Set_Moveable;
    property AllowFormView: WordBool read Get_AllowFormView write Set_AllowFormView;
    property AllowDatasheetView: WordBool read Get_AllowDatasheetView write Set_AllowDatasheetView;
    property AllowPivotTableView: WordBool read Get_AllowPivotTableView write Set_AllowPivotTableView;
    property AllowPivotChartView: WordBool read Get_AllowPivotChartView write Set_AllowPivotChartView;
    property OnConnect1: WideString read Get_OnConnect write Set_OnConnect;
    property OnDisconnect1: WideString read Get_OnDisconnect write Set_OnDisconnect;
    property PivotTableChange: WideString read Get_PivotTableChange write Set_PivotTableChange;
    property Query: WideString read Get_Query write Set_Query;
    property BeforeQuery: WideString read Get_BeforeQuery write Set_BeforeQuery;
    property SelectionChange: WideString read Get_SelectionChange write Set_SelectionChange;
    property CommandBeforeExecute: WideString read Get_CommandBeforeExecute write Set_CommandBeforeExecute;
    property CommandChecked: WideString read Get_CommandChecked write Set_CommandChecked;
    property CommandEnabled: WideString read Get_CommandEnabled write Set_CommandEnabled;
    property CommandExecute: WideString read Get_CommandExecute write Set_CommandExecute;
    property DataSetChange: WideString read Get_DataSetChange write Set_DataSetChange;
    property BeforeScreenTip: WideString read Get_BeforeScreenTip write Set_BeforeScreenTip;
    property AfterFinalRender: WideString read Get_AfterFinalRender write Set_AfterFinalRender;
    property AfterRender: WideString read Get_AfterRender write Set_AfterRender;
    property AfterLayout: WideString read Get_AfterLayout write Set_AfterLayout;
    property BeforeRender: WideString read Get_BeforeRender write Set_BeforeRender;
    property MouseWheel: WideString read Get_MouseWheel write Set_MouseWheel;
    property ViewChange: WideString read Get_ViewChange write Set_ViewChange;
    property DataChange: WideString read Get_DataChange write Set_DataChange;
    property FetchDefaults: WordBool read Get_FetchDefaults write Set_FetchDefaults;
    property UseDefaultPrinter: WordBool read Get_UseDefaultPrinter write Set_UseDefaultPrinter;
    property RecordSourceQualifier: WideString read Get_RecordSourceQualifier write Set_RecordSourceQualifier;
    property FilterOnLoad: WordBool read Get_FilterOnLoad write Set_FilterOnLoad;
    property OrderByOnLoad: WordBool read Get_OrderByOnLoad write Set_OrderByOnLoad;
    property SplitFormOrientation: AcSplitFormOrientation read Get_SplitFormOrientation write Set_SplitFormOrientation;
    property SplitFormDatasheet: AcSplitFormDatasheet read Get_SplitFormDatasheet write Set_SplitFormDatasheet;
    property SplitFormSplitterBar: WordBool read Get_SplitFormSplitterBar write Set_SplitFormSplitterBar;
    property SplitFormPrinting: AcSplitFormPrinting read Get_SplitFormPrinting write Set_SplitFormPrinting;
    property SplitFormSplitterBarSave: WordBool read Get_SplitFormSplitterBarSave write Set_SplitFormSplitterBarSave;
    property NavigationCaption: WideString read Get_NavigationCaption write Set_NavigationCaption;
    property AllowLayoutView: WordBool read Get_AllowLayoutView write Set_AllowLayoutView;
    property DatasheetAlternateBackColor: Integer read Get_DatasheetAlternateBackColor write Set_DatasheetAlternateBackColor;
    property DisplayOnSharePointSite: Byte read Get_DisplayOnSharePointSite write Set_DisplayOnSharePointSite;
    property SplitFormSize: Integer read Get_SplitFormSize write Set_SplitFormSize;
    property RibbonName: WideString read Get_RibbonName write Set_RibbonName;
    property FitToScreen: WordBool read Get_FitToScreen write Set_FitToScreen;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAccessFormProperties read GetServerProperties;
{$ENDIF}
    property OnLoad: TNotifyEvent read FOnLoad write FOnLoad;
    property OnCurrent: TNotifyEvent read FOnCurrent write FOnCurrent;
    property OnBeforeInsert: TAccessFormBeforeInsert read FOnBeforeInsert write FOnBeforeInsert;
    property OnAfterInsert: TNotifyEvent read FOnAfterInsert write FOnAfterInsert;
    property OnBeforeUpdate: TAccessFormBeforeUpdate read FOnBeforeUpdate write FOnBeforeUpdate;
    property OnAfterUpdate: TNotifyEvent read FOnAfterUpdate write FOnAfterUpdate;
    property OnDelete: TAccessFormDelete read FOnDelete write FOnDelete;
    property OnBeforeDelConfirm: TAccessFormBeforeDelConfirm read FOnBeforeDelConfirm write FOnBeforeDelConfirm;
    property OnAfterDelConfirm: TAccessFormAfterDelConfirm read FOnAfterDelConfirm write FOnAfterDelConfirm;
    property OnOpen: TAccessFormOpen read FOnOpen write FOnOpen;
    property OnResize: TNotifyEvent read FOnResize write FOnResize;
    property OnUnload: TAccessFormUnload read FOnUnload write FOnUnload;
    property OnClose: TNotifyEvent read FOnClose write FOnClose;
    property OnActivate: TNotifyEvent read FOnActivate write FOnActivate;
    property OnDeactivate: TNotifyEvent read FOnDeactivate write FOnDeactivate;
    property OnGotFocus: TNotifyEvent read FOnGotFocus write FOnGotFocus;
    property OnLostFocus: TNotifyEvent read FOnLostFocus write FOnLostFocus;
    property OnClick: TNotifyEvent read FOnClick write FOnClick;
    property OnDblClick: TAccessFormDblClick read FOnDblClick write FOnDblClick;
    property OnMouseDown: TAccessFormMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TAccessFormMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TAccessFormMouseUp read FOnMouseUp write FOnMouseUp;
    property OnKeyDown: TAccessFormKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyPress: TAccessFormKeyPress read FOnKeyPress write FOnKeyPress;
    property OnKeyUp: TAccessFormKeyUp read FOnKeyUp write FOnKeyUp;
    property OnError: TAccessFormError read FOnError write FOnError;
    property OnTimer: TNotifyEvent read FOnTimer write FOnTimer;
    property OnFilter: TAccessFormFilter read FOnFilter write FOnFilter;
    property OnApplyFilter: TAccessFormApplyFilter read FOnApplyFilter write FOnApplyFilter;
    property OnDirty: TAccessFormDirty read FOnDirty write FOnDirty;
    property OnUndo: TAccessFormUndo read FOnUndo write FOnUndo;
    property OnRecordExit: TAccessFormRecordExit read FOnRecordExit write FOnRecordExit;
    property OnBeginBatchEdit: TAccessFormBeginBatchEdit read FOnBeginBatchEdit write FOnBeginBatchEdit;
    property OnUndoBatchEdit: TAccessFormUndoBatchEdit read FOnUndoBatchEdit write FOnUndoBatchEdit;
    property OnConnect: TNotifyEvent read FOnConnect write FOnConnect;
    property OnDisconnect: TNotifyEvent read FOnDisconnect write FOnDisconnect;
    property OnPivotTableChange: TAccessFormPivotTableChange read FOnPivotTableChange write FOnPivotTableChange;
    property OnQuery: TNotifyEvent read FOnQuery write FOnQuery;
    property OnBeforeQuery: TNotifyEvent read FOnBeforeQuery write FOnBeforeQuery;
    property OnSelectionChange: TNotifyEvent read FOnSelectionChange write FOnSelectionChange;
    property OnCommandBeforeExecute: TAccessFormCommandBeforeExecute read FOnCommandBeforeExecute write FOnCommandBeforeExecute;
    property OnCommandChecked: TAccessFormCommandChecked read FOnCommandChecked write FOnCommandChecked;
    property OnCommandEnabled: TAccessFormCommandEnabled read FOnCommandEnabled write FOnCommandEnabled;
    property OnCommandExecute: TAccessFormCommandExecute read FOnCommandExecute write FOnCommandExecute;
    property OnDataSetChange: TNotifyEvent read FOnDataSetChange write FOnDataSetChange;
    property OnBeforeScreenTip: TAccessFormBeforeScreenTip read FOnBeforeScreenTip write FOnBeforeScreenTip;
    property OnBeforeRender: TAccessFormBeforeRender read FOnBeforeRender write FOnBeforeRender;
    property OnAfterRender: TAccessFormAfterRender read FOnAfterRender write FOnAfterRender;
    property OnAfterFinalRender: TAccessFormAfterFinalRender read FOnAfterFinalRender write FOnAfterFinalRender;
    property OnAfterLayout: TAccessFormAfterLayout read FOnAfterLayout write FOnAfterLayout;
    property OnMouseWheel: TAccessFormMouseWheel read FOnMouseWheel write FOnMouseWheel;
    property OnViewChange: TAccessFormViewChange read FOnViewChange write FOnViewChange;
    property OnDataChange: TAccessFormDataChange read FOnDataChange write FOnDataChange;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAccessForm
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAccessFormProperties = class(TPersistent)
  private
    FServer:    TAccessForm;
    function    GetDefaultInterface: _Form3;
    constructor Create(AServer: TAccessForm);
  protected
    function Get_accParent: IDispatch;
    function Get_accChildCount: Integer;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_FormName: WideString;
    procedure Set_FormName(const pRet: WideString);
    function Get_RecordSource: WideString;
    procedure Set_RecordSource(const pRet: WideString);
    function Get_Filter: WideString;
    procedure Set_Filter(const pRet: WideString);
    function Get_FilterOn: WordBool;
    procedure Set_FilterOn(pRet: WordBool);
    function Get_OrderBy: WideString;
    procedure Set_OrderBy(const pRet: WideString);
    function Get_OrderByOn: WordBool;
    procedure Set_OrderByOn(pRet: WordBool);
    function Get_AllowFilters: WordBool;
    procedure Set_AllowFilters(pRet: WordBool);
    function Get_Caption: WideString;
    procedure Set_Caption(const pRet: WideString);
    function Get_DefaultView: Byte;
    procedure Set_DefaultView(pRet: Byte);
    function Get_ViewsAllowed: Byte;
    procedure Set_ViewsAllowed(pRet: Byte);
    function Get_AllowEditing: WordBool;
    procedure Set_AllowEditing(pRet: WordBool);
    function Get_DefaultEditing: Smallint;
    procedure Set_DefaultEditing(pRet: Smallint);
    function Get_AllowEdits: WordBool;
    procedure Set_AllowEdits(pRet: WordBool);
    function Get_AllowDeletions: WordBool;
    procedure Set_AllowDeletions(pRet: WordBool);
    function Get_AllowAdditions: WordBool;
    procedure Set_AllowAdditions(pRet: WordBool);
    function Get_DataEntry: WordBool;
    procedure Set_DataEntry(pRet: WordBool);
    function Get_AllowUpdating: Byte;
    procedure Set_AllowUpdating(pRet: Byte);
    function Get_RecordsetType: Byte;
    procedure Set_RecordsetType(pRet: Byte);
    function Get_RecordLocks: Byte;
    procedure Set_RecordLocks(pRet: Byte);
    function Get_ScrollBars: Byte;
    procedure Set_ScrollBars(pRet: Byte);
    function Get_RecordSelectors: WordBool;
    procedure Set_RecordSelectors(pRet: WordBool);
    function Get_NavigationButtons: WordBool;
    procedure Set_NavigationButtons(pRet: WordBool);
    function Get_DividingLines: WordBool;
    procedure Set_DividingLines(pRet: WordBool);
    function Get_AutoResize: WordBool;
    procedure Set_AutoResize(pRet: WordBool);
    function Get_AutoCenter: WordBool;
    procedure Set_AutoCenter(pRet: WordBool);
    function Get_PopUp: WordBool;
    procedure Set_PopUp(pRet: WordBool);
    function Get_Modal: WordBool;
    procedure Set_Modal(pRet: WordBool);
    function Get_BorderStyle: Byte;
    procedure Set_BorderStyle(pRet: Byte);
    function Get_ControlBox: WordBool;
    procedure Set_ControlBox(pRet: WordBool);
    function Get_MinButton: WordBool;
    procedure Set_MinButton(pRet: WordBool);
    function Get_MaxButton: WordBool;
    procedure Set_MaxButton(pRet: WordBool);
    function Get_MinMaxButtons: Byte;
    procedure Set_MinMaxButtons(pRet: Byte);
    function Get_CloseButton: WordBool;
    procedure Set_CloseButton(pRet: WordBool);
    function Get_WhatsThisButton: WordBool;
    procedure Set_WhatsThisButton(pRet: WordBool);
    function Get_Width: Smallint;
    procedure Set_Width(pRet: Smallint);
    function Get_Picture: WideString;
    procedure Set_Picture(const pRet: WideString);
    function Get_PictureType: Byte;
    procedure Set_PictureType(pRet: Byte);
    function Get_PictureSizeMode: Byte;
    procedure Set_PictureSizeMode(pRet: Byte);
    function Get_PictureAlignment: Byte;
    procedure Set_PictureAlignment(pRet: Byte);
    function Get_PictureTiling: WordBool;
    procedure Set_PictureTiling(pRet: WordBool);
    function Get_Cycle: Byte;
    procedure Set_Cycle(pRet: Byte);
    function Get_MenuBar: WideString;
    procedure Set_MenuBar(const pRet: WideString);
    function Get_Toolbar: WideString;
    procedure Set_Toolbar(const pRet: WideString);
    function Get_ShortcutMenu: WordBool;
    procedure Set_ShortcutMenu(pRet: WordBool);
    function Get_ShortcutMenuBar: WideString;
    procedure Set_ShortcutMenuBar(const pRet: WideString);
    function Get_GridX: Smallint;
    procedure Set_GridX(pRet: Smallint);
    function Get_GridY: Smallint;
    procedure Set_GridY(pRet: Smallint);
    function Get_LayoutForPrint: WordBool;
    procedure Set_LayoutForPrint(pRet: WordBool);
    function Get_FastLaserPrinting: WordBool;
    procedure Set_FastLaserPrinting(pRet: WordBool);
    function Get_HelpFile: WideString;
    procedure Set_HelpFile(const pRet: WideString);
    function Get_HelpContextId: Integer;
    procedure Set_HelpContextId(pRet: Integer);
    function Get_RowHeight: Smallint;
    procedure Set_RowHeight(pRet: Smallint);
    function Get_DatasheetFontName: WideString;
    procedure Set_DatasheetFontName(const pRet: WideString);
    function Get_DatasheetFontHeight: Smallint;
    procedure Set_DatasheetFontHeight(pRet: Smallint);
    function Get_DatasheetFontWeight: Smallint;
    procedure Set_DatasheetFontWeight(pRet: Smallint);
    function Get_DatasheetFontItalic: WordBool;
    procedure Set_DatasheetFontItalic(pRet: WordBool);
    function Get_DatasheetFontUnderline: WordBool;
    procedure Set_DatasheetFontUnderline(pRet: WordBool);
    function Get_TabularCharSet: Byte;
    procedure Set_TabularCharSet(pRet: Byte);
    function Get_DatasheetGridlinesBehavior: Byte;
    procedure Set_DatasheetGridlinesBehavior(pRet: Byte);
    function Get_DatasheetGridlinesColor: Integer;
    procedure Set_DatasheetGridlinesColor(pRet: Integer);
    function Get_DatasheetCellsEffect: Byte;
    procedure Set_DatasheetCellsEffect(pRet: Byte);
    function Get_DatasheetForeColor: Integer;
    procedure Set_DatasheetForeColor(pRet: Integer);
    function Get_ShowGrid: WordBool;
    procedure Set_ShowGrid(pRet: WordBool);
    function Get_DatasheetBackColor: Integer;
    procedure Set_DatasheetBackColor(pRet: Integer);
    function Get_Hwnd: Integer;
    procedure Set_Hwnd(pRet: Integer);
    function Get_Count: Smallint;
    procedure Set_Count(pRet: Smallint);
    function Get_Page: Integer;
    procedure Set_Page(pRet: Integer);
    function Get_Pages: Smallint;
    procedure Set_Pages(pRet: Smallint);
    function Get_LogicalPageWidth: Integer;
    procedure Set_LogicalPageWidth(pRet: Integer);
    function Get_LogicalPageHeight: Integer;
    procedure Set_LogicalPageHeight(pRet: Integer);
    function Get_ZoomControl: Integer;
    procedure Set_ZoomControl(pRet: Integer);
    function Get_Visible: WordBool;
    procedure Set_Visible(pRet: WordBool);
    function Get_Painting: WordBool;
    procedure Set_Painting(pRet: WordBool);
    function Get_PrtMip: OleVariant;
    procedure Set_PrtMip(pRet: OleVariant);
    function Get_PrtDevMode: OleVariant;
    procedure Set_PrtDevMode(pRet: OleVariant);
    function Get_PrtDevNames: OleVariant;
    procedure Set_PrtDevNames(pRet: OleVariant);
    function Get_FrozenColumns: Smallint;
    procedure Set_FrozenColumns(pRet: Smallint);
    function Get_Bookmark: OleVariant;
    procedure Set_Bookmark(pRet: OleVariant);
    function Get_TabularFamily: Byte;
    procedure Set_TabularFamily(pRet: Byte);
    function Get__Name: WideString;
    procedure Set__Name(const pRet: WideString);
    function Get_PaletteSource: WideString;
    procedure Set_PaletteSource(const pRet: WideString);
    function Get_Tag: WideString;
    procedure Set_Tag(const pRet: WideString);
    function Get_PaintPalette: OleVariant;
    procedure Set_PaintPalette(pRet: OleVariant);
    function Get_OnMenu: WideString;
    procedure Set_OnMenu(const pRet: WideString);
    function Get_OpenArgs: OleVariant;
    procedure Set_OpenArgs(pRet: OleVariant);
    function Get_ConnectSynch: Smallint;
    procedure Set_ConnectSynch(pRet: Smallint);
    function Get_OnCurrent: WideString;
    procedure Set_OnCurrent(const pRet: WideString);
    function Get_OnInsert: WideString;
    procedure Set_OnInsert(const pRet: WideString);
    function Get_BeforeInsert: WideString;
    procedure Set_BeforeInsert(const pRet: WideString);
    function Get_AfterInsert: WideString;
    procedure Set_AfterInsert(const pRet: WideString);
    function Get_BeforeUpdate: WideString;
    procedure Set_BeforeUpdate(const pRet: WideString);
    function Get_AfterUpdate: WideString;
    procedure Set_AfterUpdate(const pRet: WideString);
    function Get_OnDirty: WideString;
    procedure Set_OnDirty(const pRet: WideString);
    function Get_OnDelete: WideString;
    procedure Set_OnDelete(const pRet: WideString);
    function Get_BeforeDelConfirm: WideString;
    procedure Set_BeforeDelConfirm(const pRet: WideString);
    function Get_AfterDelConfirm: WideString;
    procedure Set_AfterDelConfirm(const pRet: WideString);
    function Get_OnOpen: WideString;
    procedure Set_OnOpen(const pRet: WideString);
    function Get_OnLoad: WideString;
    procedure Set_OnLoad(const pRet: WideString);
    function Get_OnResize: WideString;
    procedure Set_OnResize(const pRet: WideString);
    function Get_OnUnload: WideString;
    procedure Set_OnUnload(const pRet: WideString);
    function Get_OnClose: WideString;
    procedure Set_OnClose(const pRet: WideString);
    function Get_OnActivate: WideString;
    procedure Set_OnActivate(const pRet: WideString);
    function Get_OnDeactivate: WideString;
    procedure Set_OnDeactivate(const pRet: WideString);
    function Get_OnGotFocus: WideString;
    procedure Set_OnGotFocus(const pRet: WideString);
    function Get_OnLostFocus: WideString;
    procedure Set_OnLostFocus(const pRet: WideString);
    function Get_OnClick: WideString;
    procedure Set_OnClick(const pRet: WideString);
    function Get_OnDblClick: WideString;
    procedure Set_OnDblClick(const pRet: WideString);
    function Get_OnMouseDown: WideString;
    procedure Set_OnMouseDown(const pRet: WideString);
    function Get_OnMouseMove: WideString;
    procedure Set_OnMouseMove(const pRet: WideString);
    function Get_OnMouseUp: WideString;
    procedure Set_OnMouseUp(const pRet: WideString);
    function Get_OnKeyDown: WideString;
    procedure Set_OnKeyDown(const pRet: WideString);
    function Get_OnKeyUp: WideString;
    procedure Set_OnKeyUp(const pRet: WideString);
    function Get_OnKeyPress: WideString;
    procedure Set_OnKeyPress(const pRet: WideString);
    function Get_KeyPreview: WordBool;
    procedure Set_KeyPreview(pRet: WordBool);
    function Get_OnError: WideString;
    procedure Set_OnError(const pRet: WideString);
    function Get_OnFilter: WideString;
    procedure Set_OnFilter(const pRet: WideString);
    function Get_OnApplyFilter: WideString;
    procedure Set_OnApplyFilter(const pRet: WideString);
    function Get_OnTimer: WideString;
    procedure Set_OnTimer(const pRet: WideString);
    function Get_TimerInterval: Integer;
    procedure Set_TimerInterval(pRet: Integer);
    function Get_Dirty: WordBool;
    procedure Set_Dirty(pRet: WordBool);
    function Get_WindowWidth: Smallint;
    procedure Set_WindowWidth(pRet: Smallint);
    function Get_WindowHeight: Smallint;
    procedure Set_WindowHeight(pRet: Smallint);
    function Get_CurrentView: Smallint;
    procedure Set_CurrentView(pRet: Smallint);
    function Get_CurrentSectionTop: Smallint;
    procedure Set_CurrentSectionTop(pRet: Smallint);
    function Get_CurrentSectionLeft: Smallint;
    procedure Set_CurrentSectionLeft(pRet: Smallint);
    function Get_SelLeft: Integer;
    procedure Set_SelLeft(pRet: Integer);
    function Get_SelTop: Integer;
    procedure Set_SelTop(pRet: Integer);
    function Get_SelWidth: Integer;
    procedure Set_SelWidth(pRet: Integer);
    function Get_SelHeight: Integer;
    procedure Set_SelHeight(pRet: Integer);
    function Get_CurrentRecord: Integer;
    procedure Set_CurrentRecord(pRet: Integer);
    function Get_PictureData: OleVariant;
    procedure Set_PictureData(pRet: OleVariant);
    function Get_InsideHeight: Integer;
    procedure Set_InsideHeight(pRet: Integer);
    function Get_InsideWidth: Integer;
    procedure Set_InsideWidth(pRet: Integer);
    function Get_PicturePalette: OleVariant;
    procedure Set_PicturePalette(pRet: OleVariant);
    function Get_HasModule: WordBool;
    procedure Set_HasModule(pRet: WordBool);
    function Get_acHiddenCurrentPage: Integer;
    procedure Set_acHiddenCurrentPage(pRet: Integer);
    function Get_Orientation: Byte;
    procedure Set_Orientation(pRet: Byte);
    function Get_AllowDesignChanges: WordBool;
    procedure Set_AllowDesignChanges(pRet: WordBool);
    function Get_ServerFilter: WideString;
    procedure Set_ServerFilter(const pRet: WideString);
    function Get_ServerFilterByForm: WordBool;
    procedure Set_ServerFilterByForm(pRet: WordBool);
    function Get_MaxRecords: Integer;
    procedure Set_MaxRecords(pRet: Integer);
    function Get_UniqueTable: WideString;
    procedure Set_UniqueTable(const pRet: WideString);
    function Get_ResyncCommand: WideString;
    procedure Set_ResyncCommand(const pRet: WideString);
    function Get_InputParameters: WideString;
    procedure Set_InputParameters(const pRet: WideString);
    function Get_MaxRecButton: WordBool;
    procedure Set_MaxRecButton(pRet: WordBool);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_NewRecord: Smallint;
    function Get_ActiveControl: AccessControl;
    function Get_DefaultControl(ControlType: Integer): AccessControl;
    function Get_Dynaset: IDispatch;
    function Get_RecordsetClone: IDispatch;
    function Get_Recordset: IDispatch;
    procedure _Set_Recordset(const pRet: IDispatch);
    function Get__SectionOld(Index: OleVariant): AccessSection;
    function Get_Form: AccessForm;
    function Get_Module: Module;
    function Get_Properties: Properties;
    function Get_ConnectControl: AccessControl;
    function Get_Controls: Controls;
    function Get_Name: WideString;
    procedure Set_Name(const pbstrName: WideString);
    function Get_SubdatasheetHeight: Smallint;
    procedure Set_SubdatasheetHeight(pRet: Smallint);
    function Get_SubdatasheetExpanded: WordBool;
    procedure Set_SubdatasheetExpanded(pRet: WordBool);
    function Get_DatasheetBorderLineStyle: Byte;
    procedure Set_DatasheetBorderLineStyle(pRet: Byte);
    function Get_DatasheetColumnHeaderUnderlineStyle: Byte;
    procedure Set_DatasheetColumnHeaderUnderlineStyle(pRet: Byte);
    function Get_HorizontalDatasheetGridlineStyle: Byte;
    procedure Set_HorizontalDatasheetGridlineStyle(pRet: Byte);
    function Get_VerticalDatasheetGridlineStyle: Byte;
    procedure Set_VerticalDatasheetGridlineStyle(pRet: Byte);
    function Get_WindowTop: Smallint;
    function Get_WindowLeft: Smallint;
    function Get_OnUndo: WideString;
    procedure Set_OnUndo(const pRet: WideString);
    function Get_OnRecordExit: WideString;
    procedure Set_OnRecordExit(const pRet: WideString);
    function Get_PivotTable: IDispatch;
    function Get_ChartSpace: IDispatch;
    function Get_Printer: _Printer;
    procedure Set_Printer(const pRet: _Printer);
    procedure _Set_Printer(const pRet: _Printer);
    function Get_Moveable: WordBool;
    procedure Set_Moveable(pRet: WordBool);
    function Get_BeginBatchEdit: WideString;
    procedure Set_BeginBatchEdit(const pRet: WideString);
    function Get_UndoBatchEdit: WideString;
    procedure Set_UndoBatchEdit(const pRet: WideString);
    function Get_BeforeBeginTransaction: WideString;
    procedure Set_BeforeBeginTransaction(const pRet: WideString);
    function Get_AfterBeginTransaction: WideString;
    procedure Set_AfterBeginTransaction(const pRet: WideString);
    function Get_BeforeCommitTransaction: WideString;
    procedure Set_BeforeCommitTransaction(const pRet: WideString);
    function Get_AfterCommitTransaction: WideString;
    procedure Set_AfterCommitTransaction(const pRet: WideString);
    function Get_RollbackTransaction: WideString;
    procedure Set_RollbackTransaction(const pRet: WideString);
    function Get_AllowFormView: WordBool;
    procedure Set_AllowFormView(pRet: WordBool);
    function Get_AllowDatasheetView: WordBool;
    procedure Set_AllowDatasheetView(pRet: WordBool);
    function Get_AllowPivotTableView: WordBool;
    procedure Set_AllowPivotTableView(pRet: WordBool);
    function Get_AllowPivotChartView: WordBool;
    procedure Set_AllowPivotChartView(pRet: WordBool);
    function Get_OnConnect: WideString;
    procedure Set_OnConnect(const pRet: WideString);
    function Get_OnDisconnect: WideString;
    procedure Set_OnDisconnect(const pRet: WideString);
    function Get_PivotTableChange: WideString;
    procedure Set_PivotTableChange(const pRet: WideString);
    function Get_Query: WideString;
    procedure Set_Query(const pRet: WideString);
    function Get_BeforeQuery: WideString;
    procedure Set_BeforeQuery(const pRet: WideString);
    function Get_SelectionChange: WideString;
    procedure Set_SelectionChange(const pRet: WideString);
    function Get_CommandBeforeExecute: WideString;
    procedure Set_CommandBeforeExecute(const pRet: WideString);
    function Get_CommandChecked: WideString;
    procedure Set_CommandChecked(const pRet: WideString);
    function Get_CommandEnabled: WideString;
    procedure Set_CommandEnabled(const pRet: WideString);
    function Get_CommandExecute: WideString;
    procedure Set_CommandExecute(const pRet: WideString);
    function Get_DataSetChange: WideString;
    procedure Set_DataSetChange(const pRet: WideString);
    function Get_BeforeScreenTip: WideString;
    procedure Set_BeforeScreenTip(const pRet: WideString);
    function Get_AfterFinalRender: WideString;
    procedure Set_AfterFinalRender(const pRet: WideString);
    function Get_AfterRender: WideString;
    procedure Set_AfterRender(const pRet: WideString);
    function Get_AfterLayout: WideString;
    procedure Set_AfterLayout(const pRet: WideString);
    function Get_BeforeRender: WideString;
    procedure Set_BeforeRender(const pRet: WideString);
    function Get_MouseWheel: WideString;
    procedure Set_MouseWheel(const pRet: WideString);
    function Get_ViewChange: WideString;
    procedure Set_ViewChange(const pRet: WideString);
    function Get_DataChange: WideString;
    procedure Set_DataChange(const pRet: WideString);
    function Get_FetchDefaults: WordBool;
    procedure Set_FetchDefaults(pRet: WordBool);
    function Get_BatchUpdates: WordBool;
    procedure Set_BatchUpdates(pRet: WordBool);
    function Get_CommitOnClose: Byte;
    procedure Set_CommitOnClose(pRet: Byte);
    function Get_CommitOnNavigation: WordBool;
    procedure Set_CommitOnNavigation(pRet: WordBool);
    function Get_UseDefaultPrinter: WordBool;
    procedure Set_UseDefaultPrinter(pRet: WordBool);
    function Get_RecordSourceQualifier: WideString;
    procedure Set_RecordSourceQualifier(const pRet: WideString);
    function Get_FilterOnLoad: WordBool;
    procedure Set_FilterOnLoad(pRet: WordBool);
    function Get_OrderByOnLoad: WordBool;
    procedure Set_OrderByOnLoad(pRet: WordBool);
    function Get_SplitFormOrientation: AcSplitFormOrientation;
    procedure Set_SplitFormOrientation(pRet: AcSplitFormOrientation);
    function Get_SplitFormDatasheet: AcSplitFormDatasheet;
    procedure Set_SplitFormDatasheet(pRet: AcSplitFormDatasheet);
    function Get_SplitFormSplitterBar: WordBool;
    procedure Set_SplitFormSplitterBar(pRet: WordBool);
    function Get_SplitFormPrinting: AcSplitFormPrinting;
    procedure Set_SplitFormPrinting(pRet: AcSplitFormPrinting);
    function Get_SplitFormSplitterBarSave: WordBool;
    procedure Set_SplitFormSplitterBarSave(pRet: WordBool);
    function Get_NavigationCaption: WideString;
    procedure Set_NavigationCaption(const pRet: WideString);
    function Get_OnCurrentMacro: WideString;
    procedure Set_OnCurrentMacro(const pRet: WideString);
    function Get_BeforeInsertMacro: WideString;
    procedure Set_BeforeInsertMacro(const pRet: WideString);
    function Get_AfterInsertMacro: WideString;
    procedure Set_AfterInsertMacro(const pRet: WideString);
    function Get_BeforeUpdateMacro: WideString;
    procedure Set_BeforeUpdateMacro(const pRet: WideString);
    function Get_AfterUpdateMacro: WideString;
    procedure Set_AfterUpdateMacro(const pRet: WideString);
    function Get_OnDirtyMacro: WideString;
    procedure Set_OnDirtyMacro(const pRet: WideString);
    function Get_OnDeleteMacro: WideString;
    procedure Set_OnDeleteMacro(const pRet: WideString);
    function Get_BeforeDelConfirmMacro: WideString;
    procedure Set_BeforeDelConfirmMacro(const pRet: WideString);
    function Get_AfterDelConfirmMacro: WideString;
    procedure Set_AfterDelConfirmMacro(const pRet: WideString);
    function Get_OnOpenMacro: WideString;
    procedure Set_OnOpenMacro(const pRet: WideString);
    function Get_OnLoadMacro: WideString;
    procedure Set_OnLoadMacro(const pRet: WideString);
    function Get_OnResizeMacro: WideString;
    procedure Set_OnResizeMacro(const pRet: WideString);
    function Get_OnUnloadMacro: WideString;
    procedure Set_OnUnloadMacro(const pRet: WideString);
    function Get_OnCloseMacro: WideString;
    procedure Set_OnCloseMacro(const pRet: WideString);
    function Get_OnActivateMacro: WideString;
    procedure Set_OnActivateMacro(const pRet: WideString);
    function Get_OnDeactivateMacro: WideString;
    procedure Set_OnDeactivateMacro(const pRet: WideString);
    function Get_OnGotFocusMacro: WideString;
    procedure Set_OnGotFocusMacro(const pRet: WideString);
    function Get_OnLostFocusMacro: WideString;
    procedure Set_OnLostFocusMacro(const pRet: WideString);
    function Get_OnClickMacro: WideString;
    procedure Set_OnClickMacro(const pRet: WideString);
    function Get_OnDblClickMacro: WideString;
    procedure Set_OnDblClickMacro(const pRet: WideString);
    function Get_OnMouseDownMacro: WideString;
    procedure Set_OnMouseDownMacro(const pRet: WideString);
    function Get_OnMouseMoveMacro: WideString;
    procedure Set_OnMouseMoveMacro(const pRet: WideString);
    function Get_OnMouseUpMacro: WideString;
    procedure Set_OnMouseUpMacro(const pRet: WideString);
    function Get_OnKeyDownMacro: WideString;
    procedure Set_OnKeyDownMacro(const pRet: WideString);
    function Get_OnKeyUpMacro: WideString;
    procedure Set_OnKeyUpMacro(const pRet: WideString);
    function Get_OnKeyPressMacro: WideString;
    procedure Set_OnKeyPressMacro(const pRet: WideString);
    function Get_OnErrorMacro: WideString;
    procedure Set_OnErrorMacro(const pRet: WideString);
    function Get_OnFilterMacro: WideString;
    procedure Set_OnFilterMacro(const pRet: WideString);
    function Get_OnApplyFilterMacro: WideString;
    procedure Set_OnApplyFilterMacro(const pRet: WideString);
    function Get_OnTimerMacro: WideString;
    procedure Set_OnTimerMacro(const pRet: WideString);
    function Get_OnUndoMacro: WideString;
    procedure Set_OnUndoMacro(const pRet: WideString);
    function Get_OnRecordExitMacro: WideString;
    procedure Set_OnRecordExitMacro(const pRet: WideString);
    function Get_BeginBatchEditMacro: WideString;
    procedure Set_BeginBatchEditMacro(const pRet: WideString);
    function Get_UndoBatchEditMacro: WideString;
    procedure Set_UndoBatchEditMacro(const pRet: WideString);
    function Get_BeforeBeginTransactionMacro: WideString;
    procedure Set_BeforeBeginTransactionMacro(const pRet: WideString);
    function Get_AfterBeginTransactionMacro: WideString;
    procedure Set_AfterBeginTransactionMacro(const pRet: WideString);
    function Get_BeforeCommitTransactionMacro: WideString;
    procedure Set_BeforeCommitTransactionMacro(const pRet: WideString);
    function Get_AfterCommitTransactionMacro: WideString;
    procedure Set_AfterCommitTransactionMacro(const pRet: WideString);
    function Get_RollbackTransactionMacro: WideString;
    procedure Set_RollbackTransactionMacro(const pRet: WideString);
    function Get_OnConnectMacro: WideString;
    procedure Set_OnConnectMacro(const pRet: WideString);
    function Get_OnDisconnectMacro: WideString;
    procedure Set_OnDisconnectMacro(const pRet: WideString);
    function Get_PivotTableChangeMacro: WideString;
    procedure Set_PivotTableChangeMacro(const pRet: WideString);
    function Get_QueryMacro: WideString;
    procedure Set_QueryMacro(const pRet: WideString);
    function Get_BeforeQueryMacro: WideString;
    procedure Set_BeforeQueryMacro(const pRet: WideString);
    function Get_SelectionChangeMacro: WideString;
    procedure Set_SelectionChangeMacro(const pRet: WideString);
    function Get_CommandBeforeExecuteMacro: WideString;
    procedure Set_CommandBeforeExecuteMacro(const pRet: WideString);
    function Get_CommandCheckedMacro: WideString;
    procedure Set_CommandCheckedMacro(const pRet: WideString);
    function Get_CommandEnabledMacro: WideString;
    procedure Set_CommandEnabledMacro(const pRet: WideString);
    function Get_CommandExecuteMacro: WideString;
    procedure Set_CommandExecuteMacro(const pRet: WideString);
    function Get_DataSetChangeMacro: WideString;
    procedure Set_DataSetChangeMacro(const pRet: WideString);
    function Get_BeforeScreenTipMacro: WideString;
    procedure Set_BeforeScreenTipMacro(const pRet: WideString);
    function Get_AfterFinalRenderMacro: WideString;
    procedure Set_AfterFinalRenderMacro(const pRet: WideString);
    function Get_AfterRenderMacro: WideString;
    procedure Set_AfterRenderMacro(const pRet: WideString);
    function Get_AfterLayoutMacro: WideString;
    procedure Set_AfterLayoutMacro(const pRet: WideString);
    function Get_BeforeRenderMacro: WideString;
    procedure Set_BeforeRenderMacro(const pRet: WideString);
    function Get_MouseWheelMacro: WideString;
    procedure Set_MouseWheelMacro(const pRet: WideString);
    function Get_ViewChangeMacro: WideString;
    procedure Set_ViewChangeMacro(const pRet: WideString);
    function Get_DataChangeMacro: WideString;
    procedure Set_DataChangeMacro(const pRet: WideString);
    function Get_AllowLayoutView: WordBool;
    procedure Set_AllowLayoutView(pRet: WordBool);
    function Get_DatasheetAlternateBackColor: Integer;
    procedure Set_DatasheetAlternateBackColor(pRet: Integer);
    function Get_DisplayOnSharePointSite: Byte;
    procedure Set_DisplayOnSharePointSite(pRet: Byte);
    function Get_SplitFormSize: Integer;
    procedure Set_SplitFormSize(pRet: Integer);
    function Get_Section(Index: OleVariant): _Section;
    function Get_RibbonName: WideString;
    procedure Set_RibbonName(const pRet: WideString);
    function Get_FitToScreen: WordBool;
    procedure Set_FitToScreen(pRet: WordBool);
  public
    property DefaultInterface: _Form3 read GetDefaultInterface;
  published
    property RecordSource: WideString read Get_RecordSource write Set_RecordSource;
    property Filter: WideString read Get_Filter write Set_Filter;
    property FilterOn: WordBool read Get_FilterOn write Set_FilterOn;
    property OrderBy: WideString read Get_OrderBy write Set_OrderBy;
    property OrderByOn: WordBool read Get_OrderByOn write Set_OrderByOn;
    property AllowFilters: WordBool read Get_AllowFilters write Set_AllowFilters;
    property Caption: WideString read Get_Caption write Set_Caption;
    property DefaultView: Byte read Get_DefaultView write Set_DefaultView;
    property ViewsAllowed: Byte read Get_ViewsAllowed write Set_ViewsAllowed;
    property AllowEdits: WordBool read Get_AllowEdits write Set_AllowEdits;
    property AllowDeletions: WordBool read Get_AllowDeletions write Set_AllowDeletions;
    property AllowAdditions: WordBool read Get_AllowAdditions write Set_AllowAdditions;
    property DataEntry: WordBool read Get_DataEntry write Set_DataEntry;
    property RecordsetType: Byte read Get_RecordsetType write Set_RecordsetType;
    property RecordLocks: Byte read Get_RecordLocks write Set_RecordLocks;
    property ScrollBars: Byte read Get_ScrollBars write Set_ScrollBars;
    property RecordSelectors: WordBool read Get_RecordSelectors write Set_RecordSelectors;
    property NavigationButtons: WordBool read Get_NavigationButtons write Set_NavigationButtons;
    property DividingLines: WordBool read Get_DividingLines write Set_DividingLines;
    property AutoResize: WordBool read Get_AutoResize write Set_AutoResize;
    property AutoCenter: WordBool read Get_AutoCenter write Set_AutoCenter;
    property PopUp: WordBool read Get_PopUp write Set_PopUp;
    property Modal: WordBool read Get_Modal write Set_Modal;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property ControlBox: WordBool read Get_ControlBox write Set_ControlBox;
    property MinMaxButtons: Byte read Get_MinMaxButtons write Set_MinMaxButtons;
    property CloseButton: WordBool read Get_CloseButton write Set_CloseButton;
    property Width: Smallint read Get_Width write Set_Width;
    property Picture: WideString read Get_Picture write Set_Picture;
    property PictureType: Byte read Get_PictureType write Set_PictureType;
    property PictureSizeMode: Byte read Get_PictureSizeMode write Set_PictureSizeMode;
    property PictureAlignment: Byte read Get_PictureAlignment write Set_PictureAlignment;
    property PictureTiling: WordBool read Get_PictureTiling write Set_PictureTiling;
    property Cycle: Byte read Get_Cycle write Set_Cycle;
    property MenuBar: WideString read Get_MenuBar write Set_MenuBar;
    property Toolbar: WideString read Get_Toolbar write Set_Toolbar;
    property ShortcutMenu: WordBool read Get_ShortcutMenu write Set_ShortcutMenu;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property GridX: Smallint read Get_GridX write Set_GridX;
    property GridY: Smallint read Get_GridY write Set_GridY;
    property LayoutForPrint: WordBool read Get_LayoutForPrint write Set_LayoutForPrint;
    property FastLaserPrinting: WordBool read Get_FastLaserPrinting write Set_FastLaserPrinting;
    property HelpFile: WideString read Get_HelpFile write Set_HelpFile;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property RowHeight: Smallint read Get_RowHeight write Set_RowHeight;
    property DatasheetFontName: WideString read Get_DatasheetFontName write Set_DatasheetFontName;
    property DatasheetFontHeight: Smallint read Get_DatasheetFontHeight write Set_DatasheetFontHeight;
    property DatasheetFontWeight: Smallint read Get_DatasheetFontWeight write Set_DatasheetFontWeight;
    property DatasheetFontItalic: WordBool read Get_DatasheetFontItalic write Set_DatasheetFontItalic;
    property DatasheetFontUnderline: WordBool read Get_DatasheetFontUnderline write Set_DatasheetFontUnderline;
    property DatasheetGridlinesBehavior: Byte read Get_DatasheetGridlinesBehavior write Set_DatasheetGridlinesBehavior;
    property DatasheetGridlinesColor: Integer read Get_DatasheetGridlinesColor write Set_DatasheetGridlinesColor;
    property DatasheetCellsEffect: Byte read Get_DatasheetCellsEffect write Set_DatasheetCellsEffect;
    property DatasheetForeColor: Integer read Get_DatasheetForeColor write Set_DatasheetForeColor;
    property DatasheetBackColor: Integer read Get_DatasheetBackColor write Set_DatasheetBackColor;
    property Hwnd: Integer read Get_Hwnd write Set_Hwnd;
    property Count: Smallint read Get_Count write Set_Count;
    property Page: Integer read Get_Page write Set_Page;
    property Pages: Smallint read Get_Pages write Set_Pages;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Painting: WordBool read Get_Painting write Set_Painting;
    property FrozenColumns: Smallint read Get_FrozenColumns write Set_FrozenColumns;
    property PaletteSource: WideString read Get_PaletteSource write Set_PaletteSource;
    property Tag: WideString read Get_Tag write Set_Tag;
    property OnMenu: WideString read Get_OnMenu write Set_OnMenu;
    property OnCurrent1: WideString read Get_OnCurrent write Set_OnCurrent;
    property OnInsert: WideString read Get_OnInsert write Set_OnInsert;
    property BeforeInsert: WideString read Get_BeforeInsert write Set_BeforeInsert;
    property AfterInsert: WideString read Get_AfterInsert write Set_AfterInsert;
    property BeforeUpdate: WideString read Get_BeforeUpdate write Set_BeforeUpdate;
    property AfterUpdate: WideString read Get_AfterUpdate write Set_AfterUpdate;
    property OnDirty1: WideString read Get_OnDirty write Set_OnDirty;
    property OnDelete1: WideString read Get_OnDelete write Set_OnDelete;
    property BeforeDelConfirm: WideString read Get_BeforeDelConfirm write Set_BeforeDelConfirm;
    property AfterDelConfirm: WideString read Get_AfterDelConfirm write Set_AfterDelConfirm;
    property OnOpen1: WideString read Get_OnOpen write Set_OnOpen;
    property OnLoad1: WideString read Get_OnLoad write Set_OnLoad;
    property OnResize1: WideString read Get_OnResize write Set_OnResize;
    property OnUnload1: WideString read Get_OnUnload write Set_OnUnload;
    property OnClose1: WideString read Get_OnClose write Set_OnClose;
    property OnActivate1: WideString read Get_OnActivate write Set_OnActivate;
    property OnDeactivate1: WideString read Get_OnDeactivate write Set_OnDeactivate;
    property OnGotFocus1: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus1: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick1: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick1: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown1: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove1: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp1: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown1: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp1: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress1: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property KeyPreview: WordBool read Get_KeyPreview write Set_KeyPreview;
    property OnError1: WideString read Get_OnError write Set_OnError;
    property OnFilter1: WideString read Get_OnFilter write Set_OnFilter;
    property OnApplyFilter1: WideString read Get_OnApplyFilter write Set_OnApplyFilter;
    property OnTimer1: WideString read Get_OnTimer write Set_OnTimer;
    property TimerInterval: Integer read Get_TimerInterval write Set_TimerInterval;
    property Dirty: WordBool read Get_Dirty write Set_Dirty;
    property WindowWidth: Smallint read Get_WindowWidth write Set_WindowWidth;
    property WindowHeight: Smallint read Get_WindowHeight write Set_WindowHeight;
    property CurrentView: Smallint read Get_CurrentView write Set_CurrentView;
    property CurrentSectionTop: Smallint read Get_CurrentSectionTop write Set_CurrentSectionTop;
    property CurrentSectionLeft: Smallint read Get_CurrentSectionLeft write Set_CurrentSectionLeft;
    property SelLeft: Integer read Get_SelLeft write Set_SelLeft;
    property SelTop: Integer read Get_SelTop write Set_SelTop;
    property SelWidth: Integer read Get_SelWidth write Set_SelWidth;
    property SelHeight: Integer read Get_SelHeight write Set_SelHeight;
    property CurrentRecord: Integer read Get_CurrentRecord write Set_CurrentRecord;
    property InsideHeight: Integer read Get_InsideHeight write Set_InsideHeight;
    property InsideWidth: Integer read Get_InsideWidth write Set_InsideWidth;
    property HasModule: WordBool read Get_HasModule write Set_HasModule;
    property Orientation: Byte read Get_Orientation write Set_Orientation;
    property ServerFilter: WideString read Get_ServerFilter write Set_ServerFilter;
    property ServerFilterByForm: WordBool read Get_ServerFilterByForm write Set_ServerFilterByForm;
    property MaxRecords: Integer read Get_MaxRecords write Set_MaxRecords;
    property UniqueTable: WideString read Get_UniqueTable write Set_UniqueTable;
    property ResyncCommand: WideString read Get_ResyncCommand write Set_ResyncCommand;
    property InputParameters: WideString read Get_InputParameters write Set_InputParameters;
    property MaxRecButton: WordBool read Get_MaxRecButton write Set_MaxRecButton;
    property Name: WideString read Get_Name write Set_Name;
    property SubdatasheetHeight: Smallint read Get_SubdatasheetHeight write Set_SubdatasheetHeight;
    property SubdatasheetExpanded: WordBool read Get_SubdatasheetExpanded write Set_SubdatasheetExpanded;
    property DatasheetBorderLineStyle: Byte read Get_DatasheetBorderLineStyle write Set_DatasheetBorderLineStyle;
    property DatasheetColumnHeaderUnderlineStyle: Byte read Get_DatasheetColumnHeaderUnderlineStyle write Set_DatasheetColumnHeaderUnderlineStyle;
    property HorizontalDatasheetGridlineStyle: Byte read Get_HorizontalDatasheetGridlineStyle write Set_HorizontalDatasheetGridlineStyle;
    property VerticalDatasheetGridlineStyle: Byte read Get_VerticalDatasheetGridlineStyle write Set_VerticalDatasheetGridlineStyle;
    property OnUndo1: WideString read Get_OnUndo write Set_OnUndo;
    property Printer: _Printer read Get_Printer write Set_Printer;
    property Moveable: WordBool read Get_Moveable write Set_Moveable;
    property AllowFormView: WordBool read Get_AllowFormView write Set_AllowFormView;
    property AllowDatasheetView: WordBool read Get_AllowDatasheetView write Set_AllowDatasheetView;
    property AllowPivotTableView: WordBool read Get_AllowPivotTableView write Set_AllowPivotTableView;
    property AllowPivotChartView: WordBool read Get_AllowPivotChartView write Set_AllowPivotChartView;
    property OnConnect1: WideString read Get_OnConnect write Set_OnConnect;
    property OnDisconnect1: WideString read Get_OnDisconnect write Set_OnDisconnect;
    property PivotTableChange: WideString read Get_PivotTableChange write Set_PivotTableChange;
    property Query: WideString read Get_Query write Set_Query;
    property BeforeQuery: WideString read Get_BeforeQuery write Set_BeforeQuery;
    property SelectionChange: WideString read Get_SelectionChange write Set_SelectionChange;
    property CommandBeforeExecute: WideString read Get_CommandBeforeExecute write Set_CommandBeforeExecute;
    property CommandChecked: WideString read Get_CommandChecked write Set_CommandChecked;
    property CommandEnabled: WideString read Get_CommandEnabled write Set_CommandEnabled;
    property CommandExecute: WideString read Get_CommandExecute write Set_CommandExecute;
    property DataSetChange: WideString read Get_DataSetChange write Set_DataSetChange;
    property BeforeScreenTip: WideString read Get_BeforeScreenTip write Set_BeforeScreenTip;
    property AfterFinalRender: WideString read Get_AfterFinalRender write Set_AfterFinalRender;
    property AfterRender: WideString read Get_AfterRender write Set_AfterRender;
    property AfterLayout: WideString read Get_AfterLayout write Set_AfterLayout;
    property BeforeRender: WideString read Get_BeforeRender write Set_BeforeRender;
    property MouseWheel: WideString read Get_MouseWheel write Set_MouseWheel;
    property ViewChange: WideString read Get_ViewChange write Set_ViewChange;
    property DataChange: WideString read Get_DataChange write Set_DataChange;
    property FetchDefaults: WordBool read Get_FetchDefaults write Set_FetchDefaults;
    property UseDefaultPrinter: WordBool read Get_UseDefaultPrinter write Set_UseDefaultPrinter;
    property RecordSourceQualifier: WideString read Get_RecordSourceQualifier write Set_RecordSourceQualifier;
    property FilterOnLoad: WordBool read Get_FilterOnLoad write Set_FilterOnLoad;
    property OrderByOnLoad: WordBool read Get_OrderByOnLoad write Set_OrderByOnLoad;
    property SplitFormOrientation: AcSplitFormOrientation read Get_SplitFormOrientation write Set_SplitFormOrientation;
    property SplitFormDatasheet: AcSplitFormDatasheet read Get_SplitFormDatasheet write Set_SplitFormDatasheet;
    property SplitFormSplitterBar: WordBool read Get_SplitFormSplitterBar write Set_SplitFormSplitterBar;
    property SplitFormPrinting: AcSplitFormPrinting read Get_SplitFormPrinting write Set_SplitFormPrinting;
    property SplitFormSplitterBarSave: WordBool read Get_SplitFormSplitterBarSave write Set_SplitFormSplitterBarSave;
    property NavigationCaption: WideString read Get_NavigationCaption write Set_NavigationCaption;
    property AllowLayoutView: WordBool read Get_AllowLayoutView write Set_AllowLayoutView;
    property DatasheetAlternateBackColor: Integer read Get_DatasheetAlternateBackColor write Set_DatasheetAlternateBackColor;
    property DisplayOnSharePointSite: Byte read Get_DisplayOnSharePointSite write Set_DisplayOnSharePointSite;
    property SplitFormSize: Integer read Get_SplitFormSize write Set_SplitFormSize;
    property RibbonName: WideString read Get_RibbonName write Set_RibbonName;
    property FitToScreen: WordBool read Get_FitToScreen write Set_FitToScreen;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAccessReport provides a Create and CreateRemote method to          
// create instances of the default interface _Report3 exposed by              
// the CoClass AccessReport. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAccessReport = class
    class function Create: _Report3;
    class function CreateRemote(const MachineName: string): _Report3;
  end;

  TAccessReportOpen = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessReportError = procedure(ASender: TObject; var DataErr: Smallint; out Response: Smallint) of object;
  TAccessReportNoData = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessReportUnload = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessReportDblClick = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessReportMouseDown = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                       var X: Single; var Y: Single) of object;
  TAccessReportMouseMove = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                       var X: Single; var Y: Single) of object;
  TAccessReportMouseUp = procedure(ASender: TObject; var Button: Smallint; var Shift: Smallint; 
                                                     var X: Single; var Y: Single) of object;
  TAccessReportKeyDown = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TAccessReportKeyPress = procedure(ASender: TObject; var KeyAscii: Smallint) of object;
  TAccessReportKeyUp = procedure(ASender: TObject; var KeyCode: Smallint; var Shift: Smallint) of object;
  TAccessReportFilter = procedure(ASender: TObject; out Cancel: Smallint; var FilterType: Smallint) of object;
  TAccessReportApplyFilter = procedure(ASender: TObject; out Cancel: Smallint; 
                                                         var ApplyType: Smallint) of object;
  TAccessReportMouseWheel = procedure(ASender: TObject; Page: WordBool; Count: Integer) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAccessReport
// Help String      : 
// Default Interface: _Report3
// Def. Intf. DISP? : No
// Event   Interface: _ReportEvents2
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAccessReportProperties= class;
{$ENDIF}
  TAccessReport = class(TOleServer)
  private
    FOnOpen: TAccessReportOpen;
    FOnClose: TNotifyEvent;
    FOnActivate: TNotifyEvent;
    FOnDeactivate: TNotifyEvent;
    FOnError: TAccessReportError;
    FOnNoData: TAccessReportNoData;
    FOnPage: TNotifyEvent;
    FOnCurrent: TNotifyEvent;
    FOnLoad: TNotifyEvent;
    FOnResize: TNotifyEvent;
    FOnUnload: TAccessReportUnload;
    FOnGotFocus: TNotifyEvent;
    FOnLostFocus: TNotifyEvent;
    FOnClick: TNotifyEvent;
    FOnDblClick: TAccessReportDblClick;
    FOnMouseDown: TAccessReportMouseDown;
    FOnMouseMove: TAccessReportMouseMove;
    FOnMouseUp: TAccessReportMouseUp;
    FOnKeyDown: TAccessReportKeyDown;
    FOnKeyPress: TAccessReportKeyPress;
    FOnKeyUp: TAccessReportKeyUp;
    FOnTimer: TNotifyEvent;
    FOnFilter: TAccessReportFilter;
    FOnApplyFilter: TAccessReportApplyFilter;
    FOnMouseWheel: TAccessReportMouseWheel;
    FIntf:        _Report3;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAccessReportProperties;
    function      GetServerProperties: TAccessReportProperties;
{$ENDIF}
    function      GetDefaultInterface: _Report3;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_FormName: WideString;
    procedure Set_FormName(const pRet: WideString);
    function Get_RecordSource: WideString;
    procedure Set_RecordSource(const pRet: WideString);
    function Get_Filter: WideString;
    procedure Set_Filter(const pRet: WideString);
    function Get_FilterOn: WordBool;
    procedure Set_FilterOn(pRet: WordBool);
    function Get_OrderBy: WideString;
    procedure Set_OrderBy(const pRet: WideString);
    function Get_OrderByOn: WordBool;
    procedure Set_OrderByOn(pRet: WordBool);
    function Get_ServerFilter: WideString;
    procedure Set_ServerFilter(const pRet: WideString);
    function Get_Caption: WideString;
    procedure Set_Caption(const pRet: WideString);
    function Get_RecordLocks: Byte;
    procedure Set_RecordLocks(pRet: Byte);
    function Get_PageHeader: Byte;
    procedure Set_PageHeader(pRet: Byte);
    function Get_PageFooter: Byte;
    procedure Set_PageFooter(pRet: Byte);
    function Get_DateGrouping: Byte;
    procedure Set_DateGrouping(pRet: Byte);
    function Get_GrpKeepTogether: Byte;
    procedure Set_GrpKeepTogether(pRet: Byte);
    function Get_MinButton: WordBool;
    procedure Set_MinButton(pRet: WordBool);
    function Get_MaxButton: WordBool;
    procedure Set_MaxButton(pRet: WordBool);
    function Get_Width: Smallint;
    procedure Set_Width(pRet: Smallint);
    function Get_Picture: WideString;
    procedure Set_Picture(const pRet: WideString);
    function Get_PictureType: Byte;
    procedure Set_PictureType(pRet: Byte);
    function Get_PictureSizeMode: Byte;
    procedure Set_PictureSizeMode(pRet: Byte);
    function Get_PictureAlignment: Byte;
    procedure Set_PictureAlignment(pRet: Byte);
    function Get_PictureTiling: WordBool;
    procedure Set_PictureTiling(pRet: WordBool);
    function Get_PicturePages: Byte;
    procedure Set_PicturePages(pRet: Byte);
    function Get_MenuBar: WideString;
    procedure Set_MenuBar(const pRet: WideString);
    function Get_Toolbar: WideString;
    procedure Set_Toolbar(const pRet: WideString);
    function Get_ShortcutMenuBar: WideString;
    procedure Set_ShortcutMenuBar(const pRet: WideString);
    function Get_GridX: Smallint;
    procedure Set_GridX(pRet: Smallint);
    function Get_GridY: Smallint;
    procedure Set_GridY(pRet: Smallint);
    function Get_LayoutForPrint: WordBool;
    procedure Set_LayoutForPrint(pRet: WordBool);
    function Get_FastLaserPrinting: WordBool;
    procedure Set_FastLaserPrinting(pRet: WordBool);
    function Get_HelpFile: WideString;
    procedure Set_HelpFile(const pRet: WideString);
    function Get_HelpContextId: Integer;
    procedure Set_HelpContextId(pRet: Integer);
    function Get_Hwnd: Integer;
    procedure Set_Hwnd(pRet: Integer);
    function Get_Count: Smallint;
    procedure Set_Count(pRet: Smallint);
    function Get_Page: Integer;
    procedure Set_Page(pRet: Integer);
    function Get_Pages: Smallint;
    procedure Set_Pages(pRet: Smallint);
    function Get_LogicalPageWidth: Integer;
    procedure Set_LogicalPageWidth(pRet: Integer);
    function Get_LogicalPageHeight: Integer;
    procedure Set_LogicalPageHeight(pRet: Integer);
    function Get_ZoomControl: Integer;
    procedure Set_ZoomControl(pRet: Integer);
    function Get_HasData: Integer;
    procedure Set_HasData(pRet: Integer);
    function Get_Left: Integer;
    procedure Set_Left(pRet: Integer);
    function Get_Top: Integer;
    procedure Set_Top(pRet: Integer);
    function Get_Height: Integer;
    procedure Set_Height(pRet: Integer);
    function Get_PrintSection: WordBool;
    procedure Set_PrintSection(pRet: WordBool);
    function Get_NextRecord: WordBool;
    procedure Set_NextRecord(pRet: WordBool);
    function Get_MoveLayout: WordBool;
    procedure Set_MoveLayout(pRet: WordBool);
    function Get_FormatCount: Smallint;
    procedure Set_FormatCount(pRet: Smallint);
    function Get_PrintCount: Smallint;
    procedure Set_PrintCount(pRet: Smallint);
    function Get_Visible: WordBool;
    procedure Set_Visible(pRet: WordBool);
    function Get_Painting: WordBool;
    procedure Set_Painting(pRet: WordBool);
    function Get_PrtMip: OleVariant;
    procedure Set_PrtMip(pRet: OleVariant);
    function Get_PrtDevMode: OleVariant;
    procedure Set_PrtDevMode(pRet: OleVariant);
    function Get_PrtDevNames: OleVariant;
    procedure Set_PrtDevNames(pRet: OleVariant);
    function Get_ForeColor: Integer;
    procedure Set_ForeColor(pRet: Integer);
    function Get_CurrentX: Single;
    procedure Set_CurrentX(pRet: Single);
    function Get_CurrentY: Single;
    procedure Set_CurrentY(pRet: Single);
    function Get_ScaleHeight: Single;
    procedure Set_ScaleHeight(pRet: Single);
    function Get_ScaleLeft: Single;
    procedure Set_ScaleLeft(pRet: Single);
    function Get_ScaleMode: Smallint;
    procedure Set_ScaleMode(pRet: Smallint);
    function Get_ScaleTop: Single;
    procedure Set_ScaleTop(pRet: Single);
    function Get_ScaleWidth: Single;
    procedure Set_ScaleWidth(pRet: Single);
    function Get_FontBold: Smallint;
    procedure Set_FontBold(pRet: Smallint);
    function Get_FontItalic: Smallint;
    procedure Set_FontItalic(pRet: Smallint);
    function Get_FontName: WideString;
    procedure Set_FontName(const pRet: WideString);
    function Get_FontSize: Smallint;
    procedure Set_FontSize(pRet: Smallint);
    function Get_FontUnderline: Smallint;
    procedure Set_FontUnderline(pRet: Smallint);
    function Get_DrawMode: Smallint;
    procedure Set_DrawMode(pRet: Smallint);
    function Get_DrawStyle: Smallint;
    procedure Set_DrawStyle(pRet: Smallint);
    function Get_DrawWidth: Smallint;
    procedure Set_DrawWidth(pRet: Smallint);
    function Get_FillColor: Integer;
    procedure Set_FillColor(pRet: Integer);
    function Get_FillStyle: Smallint;
    procedure Set_FillStyle(pRet: Smallint);
    function Get__Name: WideString;
    procedure Set__Name(const pRet: WideString);
    function Get_PaletteSource: WideString;
    procedure Set_PaletteSource(const pRet: WideString);
    function Get_Tag: WideString;
    procedure Set_Tag(const pRet: WideString);
    function Get_PaintPalette: OleVariant;
    procedure Set_PaintPalette(pRet: OleVariant);
    function Get_OnMenu: WideString;
    procedure Set_OnMenu(const pRet: WideString);
    function Get_OnOpen: WideString;
    procedure Set_OnOpen(const pRet: WideString);
    function Get_OnClose: WideString;
    procedure Set_OnClose(const pRet: WideString);
    function Get_OnActivate: WideString;
    procedure Set_OnActivate(const pRet: WideString);
    function Get_OnDeactivate: WideString;
    procedure Set_OnDeactivate(const pRet: WideString);
    function Get_OnNoData: WideString;
    procedure Set_OnNoData(const pRet: WideString);
    function Get_OnPage: WideString;
    procedure Set_OnPage(const pRet: WideString);
    function Get_OnError: WideString;
    procedure Set_OnError(const pRet: WideString);
    function Get_Dirty: WordBool;
    procedure Set_Dirty(pRet: WordBool);
    function Get_CurrentRecord: Integer;
    procedure Set_CurrentRecord(pRet: Integer);
    function Get_PictureData: OleVariant;
    procedure Set_PictureData(pRet: OleVariant);
    function Get_PicturePalette: OleVariant;
    procedure Set_PicturePalette(pRet: OleVariant);
    function Get_HasModule: WordBool;
    procedure Set_HasModule(pRet: WordBool);
    function Get_acHiddenCurrentPage: Integer;
    procedure Set_acHiddenCurrentPage(pRet: Integer);
    function Get_Orientation: Byte;
    procedure Set_Orientation(pRet: Byte);
    function Get_InputParameters: WideString;
    procedure Set_InputParameters(const pRet: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_ActiveControl: AccessControl;
    function Get_DefaultControl(ControlType: Integer): AccessControl;
    function Get__SectionOld(Index: OleVariant): AccessSection;
    function Get_GroupLevel(Index: Integer): AccessGroupLevel;
    function Get_Report: AccessReport;
    function Get_Module: Module;
    function Get_Properties: Properties;
    function Get_Controls: Controls;
    function Get_Name: WideString;
    procedure Set_Name(const pbstrName: WideString);
    function Get_AutoResize: WordBool;
    procedure Set_AutoResize(pRet: WordBool);
    function Get_AutoCenter: WordBool;
    procedure Set_AutoCenter(pRet: WordBool);
    function Get_PopUp: WordBool;
    procedure Set_PopUp(pRet: WordBool);
    function Get_Modal: WordBool;
    procedure Set_Modal(pRet: WordBool);
    function Get_BorderStyle: Byte;
    procedure Set_BorderStyle(pRet: Byte);
    function Get_ControlBox: WordBool;
    procedure Set_ControlBox(pRet: WordBool);
    function Get_MinMaxButtons: Byte;
    procedure Set_MinMaxButtons(pRet: Byte);
    function Get_CloseButton: WordBool;
    procedure Set_CloseButton(pRet: WordBool);
    function Get_WindowWidth: Smallint;
    procedure Set_WindowWidth(pRet: Smallint);
    function Get_WindowHeight: Smallint;
    procedure Set_WindowHeight(pRet: Smallint);
    function Get_WindowTop: Smallint;
    function Get_WindowLeft: Smallint;
    function Get_OpenArgs: OleVariant;
    procedure Set_OpenArgs(pRet: OleVariant);
    function Get_Printer: _Printer;
    procedure Set_Printer(const pRet: _Printer);
    procedure _Set_Printer(const pRet: _Printer);
    function Get_Moveable: WordBool;
    procedure Set_Moveable(pRet: WordBool);
    function Get_UseDefaultPrinter: WordBool;
    procedure Set_UseDefaultPrinter(pRet: WordBool);
    function Get_Recordset: IDispatch;
    procedure _Set_Recordset(const pRet: IDispatch);
    function Get_RecordSourceQualifier: WideString;
    procedure Set_RecordSourceQualifier(const pRet: WideString);
    function Get_Shape: WideString;
    function Get_FilterOnLoad: WordBool;
    procedure Set_FilterOnLoad(pRet: WordBool);
    function Get_OrderByOnLoad: WordBool;
    procedure Set_OrderByOnLoad(pRet: WordBool);
    function Get_DefaultView: Byte;
    procedure Set_DefaultView(pRet: Byte);
    function Get_AllowReportView: WordBool;
    procedure Set_AllowReportView(pRet: WordBool);
    function Get_ScrollBars: Byte;
    procedure Set_ScrollBars(pRet: Byte);
    function Get_Cycle: Byte;
    procedure Set_Cycle(pRet: Byte);
    function Get_AllowDesignChanges: WordBool;
    procedure Set_AllowDesignChanges(pRet: WordBool);
    function Get_OnCurrent: WideString;
    procedure Set_OnCurrent(const pRet: WideString);
    function Get_KeyPreview: WordBool;
    procedure Set_KeyPreview(pRet: WordBool);
    function Get_TimerInterval: Integer;
    procedure Set_TimerInterval(pRet: Integer);
    function Get_CurrentView: Smallint;
    procedure Set_CurrentView(pRet: Smallint);
    function Get_OnOpenMacro: WideString;
    procedure Set_OnOpenMacro(const pRet: WideString);
    function Get_OnCloseMacro: WideString;
    procedure Set_OnCloseMacro(const pRet: WideString);
    function Get_OnActivateMacro: WideString;
    procedure Set_OnActivateMacro(const pRet: WideString);
    function Get_OnDeactivateMacro: WideString;
    procedure Set_OnDeactivateMacro(const pRet: WideString);
    function Get_OnNoDataMacro: WideString;
    procedure Set_OnNoDataMacro(const pRet: WideString);
    function Get_OnPageMacro: WideString;
    procedure Set_OnPageMacro(const pRet: WideString);
    function Get_OnErrorMacro: WideString;
    procedure Set_OnErrorMacro(const pRet: WideString);
    function Get_OnCurrentMacro: WideString;
    procedure Set_OnCurrentMacro(const pRet: WideString);
    function Get_OnLoadMacro: WideString;
    procedure Set_OnLoadMacro(const pRet: WideString);
    function Get_OnResizeMacro: WideString;
    procedure Set_OnResizeMacro(const pRet: WideString);
    function Get_OnUnloadMacro: WideString;
    procedure Set_OnUnloadMacro(const pRet: WideString);
    function Get_OnGotFocusMacro: WideString;
    procedure Set_OnGotFocusMacro(const pRet: WideString);
    function Get_OnLostFocusMacro: WideString;
    procedure Set_OnLostFocusMacro(const pRet: WideString);
    function Get_OnClickMacro: WideString;
    procedure Set_OnClickMacro(const pRet: WideString);
    function Get_OnDblClickMacro: WideString;
    procedure Set_OnDblClickMacro(const pRet: WideString);
    function Get_OnMouseDownMacro: WideString;
    procedure Set_OnMouseDownMacro(const pRet: WideString);
    function Get_OnMouseMoveMacro: WideString;
    procedure Set_OnMouseMoveMacro(const pRet: WideString);
    function Get_OnMouseUpMacro: WideString;
    procedure Set_OnMouseUpMacro(const pRet: WideString);
    function Get_OnKeyDownMacro: WideString;
    procedure Set_OnKeyDownMacro(const pRet: WideString);
    function Get_OnKeyUpMacro: WideString;
    procedure Set_OnKeyUpMacro(const pRet: WideString);
    function Get_OnKeyPressMacro: WideString;
    procedure Set_OnKeyPressMacro(const pRet: WideString);
    function Get_OnFilterMacro: WideString;
    procedure Set_OnFilterMacro(const pRet: WideString);
    function Get_OnApplyFilterMacro: WideString;
    procedure Set_OnApplyFilterMacro(const pRet: WideString);
    function Get_OnTimerMacro: WideString;
    procedure Set_OnTimerMacro(const pRet: WideString);
    function Get_MouseWheelMacro: WideString;
    procedure Set_MouseWheelMacro(const pRet: WideString);
    function Get_ShowPageMargins: WordBool;
    procedure Set_ShowPageMargins(pRet: WordBool);
    function Get_FitToPage: WordBool;
    procedure Set_FitToPage(pRet: WordBool);
    function Get_AllowLayoutView: WordBool;
    procedure Set_AllowLayoutView(pRet: WordBool);
    function Get_OnLoad: WideString;
    procedure Set_OnLoad(const pRet: WideString);
    function Get_OnResize: WideString;
    procedure Set_OnResize(const pRet: WideString);
    function Get_OnUnload: WideString;
    procedure Set_OnUnload(const pRet: WideString);
    function Get_OnGotFocus: WideString;
    procedure Set_OnGotFocus(const pRet: WideString);
    function Get_OnLostFocus: WideString;
    procedure Set_OnLostFocus(const pRet: WideString);
    function Get_OnClick: WideString;
    procedure Set_OnClick(const pRet: WideString);
    function Get_OnDblClick: WideString;
    procedure Set_OnDblClick(const pRet: WideString);
    function Get_OnMouseDown: WideString;
    procedure Set_OnMouseDown(const pRet: WideString);
    function Get_OnMouseMove: WideString;
    procedure Set_OnMouseMove(const pRet: WideString);
    function Get_OnMouseUp: WideString;
    procedure Set_OnMouseUp(const pRet: WideString);
    function Get_OnKeyDown: WideString;
    procedure Set_OnKeyDown(const pRet: WideString);
    function Get_OnKeyUp: WideString;
    procedure Set_OnKeyUp(const pRet: WideString);
    function Get_OnKeyPress: WideString;
    procedure Set_OnKeyPress(const pRet: WideString);
    function Get_OnFilter: WideString;
    procedure Set_OnFilter(const pRet: WideString);
    function Get_OnApplyFilter: WideString;
    procedure Set_OnApplyFilter(const pRet: WideString);
    function Get_OnTimer: WideString;
    procedure Set_OnTimer(const pRet: WideString);
    function Get_MouseWheel: WideString;
    procedure Set_MouseWheel(const pRet: WideString);
    function Get_DisplayOnSharePointSite: Byte;
    procedure Set_DisplayOnSharePointSite(pRet: Byte);
    function Get_Section(Index: OleVariant): _Section;
    function Get_RibbonName: WideString;
    procedure Set_RibbonName(const pRet: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Report3);
    procedure Disconnect; override;
    procedure Circle(flags: Smallint; X: Single; Y: Single; radius: Single; color: Integer; 
                     start: Single; end_: Single; aspect: Single);
    procedure Line(flags: Smallint; x1: Single; y1: Single; x2: Single; y2: Single; color: Integer);
    procedure PSet(flags: Smallint; X: Single; Y: Single; color: Integer);
    procedure Scale(flags: Smallint; x1: Single; y1: Single; x2: Single; y2: Single);
    function TextWidth(const Expr: WideString): Single;
    function TextHeight(const Expr: WideString): Single;
    procedure Print(const Expr: WideString);
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    procedure Requery;
    property DefaultInterface: _Report3 read GetDefaultInterface;
    property FormName: WideString read Get_FormName write Set_FormName;
    property MinButton: WordBool read Get_MinButton write Set_MinButton;
    property MaxButton: WordBool read Get_MaxButton write Set_MaxButton;
    property LogicalPageWidth: Integer read Get_LogicalPageWidth write Set_LogicalPageWidth;
    property LogicalPageHeight: Integer read Get_LogicalPageHeight write Set_LogicalPageHeight;
    property ZoomControl: Integer read Get_ZoomControl write Set_ZoomControl;
    property PrtMip: OleVariant read Get_PrtMip write Set_PrtMip;
    property PrtDevMode: OleVariant read Get_PrtDevMode write Set_PrtDevMode;
    property PrtDevNames: OleVariant read Get_PrtDevNames write Set_PrtDevNames;
    property _Name: WideString read Get__Name write Set__Name;
    property PaintPalette: OleVariant read Get_PaintPalette write Set_PaintPalette;
    property PictureData: OleVariant read Get_PictureData write Set_PictureData;
    property PicturePalette: OleVariant read Get_PicturePalette write Set_PicturePalette;
    property acHiddenCurrentPage: Integer read Get_acHiddenCurrentPage write Set_acHiddenCurrentPage;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property ActiveControl: AccessControl read Get_ActiveControl;
    property DefaultControl[ControlType: Integer]: AccessControl read Get_DefaultControl;
    property _SectionOld[Index: OleVariant]: AccessSection read Get__SectionOld;
    property GroupLevel[Index: Integer]: AccessGroupLevel read Get_GroupLevel;
    property Report: AccessReport read Get_Report;
    property Module: Module read Get_Module;
    property Properties: Properties read Get_Properties;
    property Controls: Controls read Get_Controls;
    property WindowTop: Smallint read Get_WindowTop;
    property WindowLeft: Smallint read Get_WindowLeft;
    property OpenArgs: OleVariant read Get_OpenArgs write Set_OpenArgs;
    property Recordset: IDispatch read Get_Recordset write _Set_Recordset;
    property Shape: WideString read Get_Shape;
    property AllowDesignChanges: WordBool read Get_AllowDesignChanges write Set_AllowDesignChanges;
    property OnOpenMacro: WideString read Get_OnOpenMacro write Set_OnOpenMacro;
    property OnCloseMacro: WideString read Get_OnCloseMacro write Set_OnCloseMacro;
    property OnActivateMacro: WideString read Get_OnActivateMacro write Set_OnActivateMacro;
    property OnDeactivateMacro: WideString read Get_OnDeactivateMacro write Set_OnDeactivateMacro;
    property OnNoDataMacro: WideString read Get_OnNoDataMacro write Set_OnNoDataMacro;
    property OnPageMacro: WideString read Get_OnPageMacro write Set_OnPageMacro;
    property OnErrorMacro: WideString read Get_OnErrorMacro write Set_OnErrorMacro;
    property OnCurrentMacro: WideString read Get_OnCurrentMacro write Set_OnCurrentMacro;
    property OnLoadMacro: WideString read Get_OnLoadMacro write Set_OnLoadMacro;
    property OnResizeMacro: WideString read Get_OnResizeMacro write Set_OnResizeMacro;
    property OnUnloadMacro: WideString read Get_OnUnloadMacro write Set_OnUnloadMacro;
    property OnGotFocusMacro: WideString read Get_OnGotFocusMacro write Set_OnGotFocusMacro;
    property OnLostFocusMacro: WideString read Get_OnLostFocusMacro write Set_OnLostFocusMacro;
    property OnClickMacro: WideString read Get_OnClickMacro write Set_OnClickMacro;
    property OnDblClickMacro: WideString read Get_OnDblClickMacro write Set_OnDblClickMacro;
    property OnMouseDownMacro: WideString read Get_OnMouseDownMacro write Set_OnMouseDownMacro;
    property OnMouseMoveMacro: WideString read Get_OnMouseMoveMacro write Set_OnMouseMoveMacro;
    property OnMouseUpMacro: WideString read Get_OnMouseUpMacro write Set_OnMouseUpMacro;
    property OnKeyDownMacro: WideString read Get_OnKeyDownMacro write Set_OnKeyDownMacro;
    property OnKeyUpMacro: WideString read Get_OnKeyUpMacro write Set_OnKeyUpMacro;
    property OnKeyPressMacro: WideString read Get_OnKeyPressMacro write Set_OnKeyPressMacro;
    property OnFilterMacro: WideString read Get_OnFilterMacro write Set_OnFilterMacro;
    property OnApplyFilterMacro: WideString read Get_OnApplyFilterMacro write Set_OnApplyFilterMacro;
    property OnTimerMacro: WideString read Get_OnTimerMacro write Set_OnTimerMacro;
    property MouseWheelMacro: WideString read Get_MouseWheelMacro write Set_MouseWheelMacro;
    property Section[Index: OleVariant]: _Section read Get_Section;
    property RecordSource: WideString read Get_RecordSource write Set_RecordSource;
    property Filter: WideString read Get_Filter write Set_Filter;
    property FilterOn: WordBool read Get_FilterOn write Set_FilterOn;
    property OrderBy: WideString read Get_OrderBy write Set_OrderBy;
    property OrderByOn: WordBool read Get_OrderByOn write Set_OrderByOn;
    property ServerFilter: WideString read Get_ServerFilter write Set_ServerFilter;
    property Caption: WideString read Get_Caption write Set_Caption;
    property RecordLocks: Byte read Get_RecordLocks write Set_RecordLocks;
    property PageHeader: Byte read Get_PageHeader write Set_PageHeader;
    property PageFooter: Byte read Get_PageFooter write Set_PageFooter;
    property DateGrouping: Byte read Get_DateGrouping write Set_DateGrouping;
    property GrpKeepTogether: Byte read Get_GrpKeepTogether write Set_GrpKeepTogether;
    property Width: Smallint read Get_Width write Set_Width;
    property Picture: WideString read Get_Picture write Set_Picture;
    property PictureType: Byte read Get_PictureType write Set_PictureType;
    property PictureSizeMode: Byte read Get_PictureSizeMode write Set_PictureSizeMode;
    property PictureAlignment: Byte read Get_PictureAlignment write Set_PictureAlignment;
    property PictureTiling: WordBool read Get_PictureTiling write Set_PictureTiling;
    property PicturePages: Byte read Get_PicturePages write Set_PicturePages;
    property MenuBar: WideString read Get_MenuBar write Set_MenuBar;
    property Toolbar: WideString read Get_Toolbar write Set_Toolbar;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property GridX: Smallint read Get_GridX write Set_GridX;
    property GridY: Smallint read Get_GridY write Set_GridY;
    property LayoutForPrint: WordBool read Get_LayoutForPrint write Set_LayoutForPrint;
    property FastLaserPrinting: WordBool read Get_FastLaserPrinting write Set_FastLaserPrinting;
    property HelpFile: WideString read Get_HelpFile write Set_HelpFile;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property Hwnd: Integer read Get_Hwnd write Set_Hwnd;
    property Count: Smallint read Get_Count write Set_Count;
    property Page: Integer read Get_Page write Set_Page;
    property Pages: Smallint read Get_Pages write Set_Pages;
    property HasData: Integer read Get_HasData write Set_HasData;
    property Left: Integer read Get_Left write Set_Left;
    property Top: Integer read Get_Top write Set_Top;
    property Height: Integer read Get_Height write Set_Height;
    property PrintSection: WordBool read Get_PrintSection write Set_PrintSection;
    property NextRecord: WordBool read Get_NextRecord write Set_NextRecord;
    property MoveLayout: WordBool read Get_MoveLayout write Set_MoveLayout;
    property FormatCount: Smallint read Get_FormatCount write Set_FormatCount;
    property PrintCount: Smallint read Get_PrintCount write Set_PrintCount;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Painting: WordBool read Get_Painting write Set_Painting;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property CurrentX: Single read Get_CurrentX write Set_CurrentX;
    property CurrentY: Single read Get_CurrentY write Set_CurrentY;
    property ScaleHeight: Single read Get_ScaleHeight write Set_ScaleHeight;
    property ScaleLeft: Single read Get_ScaleLeft write Set_ScaleLeft;
    property ScaleMode: Smallint read Get_ScaleMode write Set_ScaleMode;
    property ScaleTop: Single read Get_ScaleTop write Set_ScaleTop;
    property ScaleWidth: Single read Get_ScaleWidth write Set_ScaleWidth;
    property FontBold: Smallint read Get_FontBold write Set_FontBold;
    property FontItalic: Smallint read Get_FontItalic write Set_FontItalic;
    property FontName: WideString read Get_FontName write Set_FontName;
    property FontSize: Smallint read Get_FontSize write Set_FontSize;
    property FontUnderline: Smallint read Get_FontUnderline write Set_FontUnderline;
    property DrawMode: Smallint read Get_DrawMode write Set_DrawMode;
    property DrawStyle: Smallint read Get_DrawStyle write Set_DrawStyle;
    property DrawWidth: Smallint read Get_DrawWidth write Set_DrawWidth;
    property FillColor: Integer read Get_FillColor write Set_FillColor;
    property FillStyle: Smallint read Get_FillStyle write Set_FillStyle;
    property PaletteSource: WideString read Get_PaletteSource write Set_PaletteSource;
    property Tag: WideString read Get_Tag write Set_Tag;
    property OnMenu: WideString read Get_OnMenu write Set_OnMenu;
    property OnOpen1: WideString read Get_OnOpen write Set_OnOpen;
    property OnClose1: WideString read Get_OnClose write Set_OnClose;
    property OnActivate1: WideString read Get_OnActivate write Set_OnActivate;
    property OnDeactivate1: WideString read Get_OnDeactivate write Set_OnDeactivate;
    property OnNoData1: WideString read Get_OnNoData write Set_OnNoData;
    property OnPage1: WideString read Get_OnPage write Set_OnPage;
    property OnError1: WideString read Get_OnError write Set_OnError;
    property Dirty: WordBool read Get_Dirty write Set_Dirty;
    property CurrentRecord: Integer read Get_CurrentRecord write Set_CurrentRecord;
    property HasModule: WordBool read Get_HasModule write Set_HasModule;
    property Orientation: Byte read Get_Orientation write Set_Orientation;
    property InputParameters: WideString read Get_InputParameters write Set_InputParameters;
    property Name: WideString read Get_Name write Set_Name;
    property AutoResize: WordBool read Get_AutoResize write Set_AutoResize;
    property AutoCenter: WordBool read Get_AutoCenter write Set_AutoCenter;
    property PopUp: WordBool read Get_PopUp write Set_PopUp;
    property Modal: WordBool read Get_Modal write Set_Modal;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property ControlBox: WordBool read Get_ControlBox write Set_ControlBox;
    property MinMaxButtons: Byte read Get_MinMaxButtons write Set_MinMaxButtons;
    property CloseButton: WordBool read Get_CloseButton write Set_CloseButton;
    property WindowWidth: Smallint read Get_WindowWidth write Set_WindowWidth;
    property WindowHeight: Smallint read Get_WindowHeight write Set_WindowHeight;
    property Printer: _Printer read Get_Printer write Set_Printer;
    property Moveable: WordBool read Get_Moveable write Set_Moveable;
    property UseDefaultPrinter: WordBool read Get_UseDefaultPrinter write Set_UseDefaultPrinter;
    property RecordSourceQualifier: WideString read Get_RecordSourceQualifier write Set_RecordSourceQualifier;
    property FilterOnLoad: WordBool read Get_FilterOnLoad write Set_FilterOnLoad;
    property OrderByOnLoad: WordBool read Get_OrderByOnLoad write Set_OrderByOnLoad;
    property DefaultView: Byte read Get_DefaultView write Set_DefaultView;
    property AllowReportView: WordBool read Get_AllowReportView write Set_AllowReportView;
    property ScrollBars: Byte read Get_ScrollBars write Set_ScrollBars;
    property Cycle: Byte read Get_Cycle write Set_Cycle;
    property OnCurrent1: WideString read Get_OnCurrent write Set_OnCurrent;
    property KeyPreview: WordBool read Get_KeyPreview write Set_KeyPreview;
    property TimerInterval: Integer read Get_TimerInterval write Set_TimerInterval;
    property CurrentView: Smallint read Get_CurrentView write Set_CurrentView;
    property ShowPageMargins: WordBool read Get_ShowPageMargins write Set_ShowPageMargins;
    property FitToPage: WordBool read Get_FitToPage write Set_FitToPage;
    property AllowLayoutView: WordBool read Get_AllowLayoutView write Set_AllowLayoutView;
    property OnLoad1: WideString read Get_OnLoad write Set_OnLoad;
    property OnResize1: WideString read Get_OnResize write Set_OnResize;
    property OnUnload1: WideString read Get_OnUnload write Set_OnUnload;
    property OnGotFocus1: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus1: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick1: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick1: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown1: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove1: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp1: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown1: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp1: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress1: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property OnFilter1: WideString read Get_OnFilter write Set_OnFilter;
    property OnApplyFilter1: WideString read Get_OnApplyFilter write Set_OnApplyFilter;
    property OnTimer1: WideString read Get_OnTimer write Set_OnTimer;
    property MouseWheel: WideString read Get_MouseWheel write Set_MouseWheel;
    property DisplayOnSharePointSite: Byte read Get_DisplayOnSharePointSite write Set_DisplayOnSharePointSite;
    property RibbonName: WideString read Get_RibbonName write Set_RibbonName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAccessReportProperties read GetServerProperties;
{$ENDIF}
    property OnOpen: TAccessReportOpen read FOnOpen write FOnOpen;
    property OnClose: TNotifyEvent read FOnClose write FOnClose;
    property OnActivate: TNotifyEvent read FOnActivate write FOnActivate;
    property OnDeactivate: TNotifyEvent read FOnDeactivate write FOnDeactivate;
    property OnError: TAccessReportError read FOnError write FOnError;
    property OnNoData: TAccessReportNoData read FOnNoData write FOnNoData;
    property OnPage: TNotifyEvent read FOnPage write FOnPage;
    property OnCurrent: TNotifyEvent read FOnCurrent write FOnCurrent;
    property OnLoad: TNotifyEvent read FOnLoad write FOnLoad;
    property OnResize: TNotifyEvent read FOnResize write FOnResize;
    property OnUnload: TAccessReportUnload read FOnUnload write FOnUnload;
    property OnGotFocus: TNotifyEvent read FOnGotFocus write FOnGotFocus;
    property OnLostFocus: TNotifyEvent read FOnLostFocus write FOnLostFocus;
    property OnClick: TNotifyEvent read FOnClick write FOnClick;
    property OnDblClick: TAccessReportDblClick read FOnDblClick write FOnDblClick;
    property OnMouseDown: TAccessReportMouseDown read FOnMouseDown write FOnMouseDown;
    property OnMouseMove: TAccessReportMouseMove read FOnMouseMove write FOnMouseMove;
    property OnMouseUp: TAccessReportMouseUp read FOnMouseUp write FOnMouseUp;
    property OnKeyDown: TAccessReportKeyDown read FOnKeyDown write FOnKeyDown;
    property OnKeyPress: TAccessReportKeyPress read FOnKeyPress write FOnKeyPress;
    property OnKeyUp: TAccessReportKeyUp read FOnKeyUp write FOnKeyUp;
    property OnTimer: TNotifyEvent read FOnTimer write FOnTimer;
    property OnFilter: TAccessReportFilter read FOnFilter write FOnFilter;
    property OnApplyFilter: TAccessReportApplyFilter read FOnApplyFilter write FOnApplyFilter;
    property OnMouseWheel: TAccessReportMouseWheel read FOnMouseWheel write FOnMouseWheel;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAccessReport
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAccessReportProperties = class(TPersistent)
  private
    FServer:    TAccessReport;
    function    GetDefaultInterface: _Report3;
    constructor Create(AServer: TAccessReport);
  protected
    function Get_FormName: WideString;
    procedure Set_FormName(const pRet: WideString);
    function Get_RecordSource: WideString;
    procedure Set_RecordSource(const pRet: WideString);
    function Get_Filter: WideString;
    procedure Set_Filter(const pRet: WideString);
    function Get_FilterOn: WordBool;
    procedure Set_FilterOn(pRet: WordBool);
    function Get_OrderBy: WideString;
    procedure Set_OrderBy(const pRet: WideString);
    function Get_OrderByOn: WordBool;
    procedure Set_OrderByOn(pRet: WordBool);
    function Get_ServerFilter: WideString;
    procedure Set_ServerFilter(const pRet: WideString);
    function Get_Caption: WideString;
    procedure Set_Caption(const pRet: WideString);
    function Get_RecordLocks: Byte;
    procedure Set_RecordLocks(pRet: Byte);
    function Get_PageHeader: Byte;
    procedure Set_PageHeader(pRet: Byte);
    function Get_PageFooter: Byte;
    procedure Set_PageFooter(pRet: Byte);
    function Get_DateGrouping: Byte;
    procedure Set_DateGrouping(pRet: Byte);
    function Get_GrpKeepTogether: Byte;
    procedure Set_GrpKeepTogether(pRet: Byte);
    function Get_MinButton: WordBool;
    procedure Set_MinButton(pRet: WordBool);
    function Get_MaxButton: WordBool;
    procedure Set_MaxButton(pRet: WordBool);
    function Get_Width: Smallint;
    procedure Set_Width(pRet: Smallint);
    function Get_Picture: WideString;
    procedure Set_Picture(const pRet: WideString);
    function Get_PictureType: Byte;
    procedure Set_PictureType(pRet: Byte);
    function Get_PictureSizeMode: Byte;
    procedure Set_PictureSizeMode(pRet: Byte);
    function Get_PictureAlignment: Byte;
    procedure Set_PictureAlignment(pRet: Byte);
    function Get_PictureTiling: WordBool;
    procedure Set_PictureTiling(pRet: WordBool);
    function Get_PicturePages: Byte;
    procedure Set_PicturePages(pRet: Byte);
    function Get_MenuBar: WideString;
    procedure Set_MenuBar(const pRet: WideString);
    function Get_Toolbar: WideString;
    procedure Set_Toolbar(const pRet: WideString);
    function Get_ShortcutMenuBar: WideString;
    procedure Set_ShortcutMenuBar(const pRet: WideString);
    function Get_GridX: Smallint;
    procedure Set_GridX(pRet: Smallint);
    function Get_GridY: Smallint;
    procedure Set_GridY(pRet: Smallint);
    function Get_LayoutForPrint: WordBool;
    procedure Set_LayoutForPrint(pRet: WordBool);
    function Get_FastLaserPrinting: WordBool;
    procedure Set_FastLaserPrinting(pRet: WordBool);
    function Get_HelpFile: WideString;
    procedure Set_HelpFile(const pRet: WideString);
    function Get_HelpContextId: Integer;
    procedure Set_HelpContextId(pRet: Integer);
    function Get_Hwnd: Integer;
    procedure Set_Hwnd(pRet: Integer);
    function Get_Count: Smallint;
    procedure Set_Count(pRet: Smallint);
    function Get_Page: Integer;
    procedure Set_Page(pRet: Integer);
    function Get_Pages: Smallint;
    procedure Set_Pages(pRet: Smallint);
    function Get_LogicalPageWidth: Integer;
    procedure Set_LogicalPageWidth(pRet: Integer);
    function Get_LogicalPageHeight: Integer;
    procedure Set_LogicalPageHeight(pRet: Integer);
    function Get_ZoomControl: Integer;
    procedure Set_ZoomControl(pRet: Integer);
    function Get_HasData: Integer;
    procedure Set_HasData(pRet: Integer);
    function Get_Left: Integer;
    procedure Set_Left(pRet: Integer);
    function Get_Top: Integer;
    procedure Set_Top(pRet: Integer);
    function Get_Height: Integer;
    procedure Set_Height(pRet: Integer);
    function Get_PrintSection: WordBool;
    procedure Set_PrintSection(pRet: WordBool);
    function Get_NextRecord: WordBool;
    procedure Set_NextRecord(pRet: WordBool);
    function Get_MoveLayout: WordBool;
    procedure Set_MoveLayout(pRet: WordBool);
    function Get_FormatCount: Smallint;
    procedure Set_FormatCount(pRet: Smallint);
    function Get_PrintCount: Smallint;
    procedure Set_PrintCount(pRet: Smallint);
    function Get_Visible: WordBool;
    procedure Set_Visible(pRet: WordBool);
    function Get_Painting: WordBool;
    procedure Set_Painting(pRet: WordBool);
    function Get_PrtMip: OleVariant;
    procedure Set_PrtMip(pRet: OleVariant);
    function Get_PrtDevMode: OleVariant;
    procedure Set_PrtDevMode(pRet: OleVariant);
    function Get_PrtDevNames: OleVariant;
    procedure Set_PrtDevNames(pRet: OleVariant);
    function Get_ForeColor: Integer;
    procedure Set_ForeColor(pRet: Integer);
    function Get_CurrentX: Single;
    procedure Set_CurrentX(pRet: Single);
    function Get_CurrentY: Single;
    procedure Set_CurrentY(pRet: Single);
    function Get_ScaleHeight: Single;
    procedure Set_ScaleHeight(pRet: Single);
    function Get_ScaleLeft: Single;
    procedure Set_ScaleLeft(pRet: Single);
    function Get_ScaleMode: Smallint;
    procedure Set_ScaleMode(pRet: Smallint);
    function Get_ScaleTop: Single;
    procedure Set_ScaleTop(pRet: Single);
    function Get_ScaleWidth: Single;
    procedure Set_ScaleWidth(pRet: Single);
    function Get_FontBold: Smallint;
    procedure Set_FontBold(pRet: Smallint);
    function Get_FontItalic: Smallint;
    procedure Set_FontItalic(pRet: Smallint);
    function Get_FontName: WideString;
    procedure Set_FontName(const pRet: WideString);
    function Get_FontSize: Smallint;
    procedure Set_FontSize(pRet: Smallint);
    function Get_FontUnderline: Smallint;
    procedure Set_FontUnderline(pRet: Smallint);
    function Get_DrawMode: Smallint;
    procedure Set_DrawMode(pRet: Smallint);
    function Get_DrawStyle: Smallint;
    procedure Set_DrawStyle(pRet: Smallint);
    function Get_DrawWidth: Smallint;
    procedure Set_DrawWidth(pRet: Smallint);
    function Get_FillColor: Integer;
    procedure Set_FillColor(pRet: Integer);
    function Get_FillStyle: Smallint;
    procedure Set_FillStyle(pRet: Smallint);
    function Get__Name: WideString;
    procedure Set__Name(const pRet: WideString);
    function Get_PaletteSource: WideString;
    procedure Set_PaletteSource(const pRet: WideString);
    function Get_Tag: WideString;
    procedure Set_Tag(const pRet: WideString);
    function Get_PaintPalette: OleVariant;
    procedure Set_PaintPalette(pRet: OleVariant);
    function Get_OnMenu: WideString;
    procedure Set_OnMenu(const pRet: WideString);
    function Get_OnOpen: WideString;
    procedure Set_OnOpen(const pRet: WideString);
    function Get_OnClose: WideString;
    procedure Set_OnClose(const pRet: WideString);
    function Get_OnActivate: WideString;
    procedure Set_OnActivate(const pRet: WideString);
    function Get_OnDeactivate: WideString;
    procedure Set_OnDeactivate(const pRet: WideString);
    function Get_OnNoData: WideString;
    procedure Set_OnNoData(const pRet: WideString);
    function Get_OnPage: WideString;
    procedure Set_OnPage(const pRet: WideString);
    function Get_OnError: WideString;
    procedure Set_OnError(const pRet: WideString);
    function Get_Dirty: WordBool;
    procedure Set_Dirty(pRet: WordBool);
    function Get_CurrentRecord: Integer;
    procedure Set_CurrentRecord(pRet: Integer);
    function Get_PictureData: OleVariant;
    procedure Set_PictureData(pRet: OleVariant);
    function Get_PicturePalette: OleVariant;
    procedure Set_PicturePalette(pRet: OleVariant);
    function Get_HasModule: WordBool;
    procedure Set_HasModule(pRet: WordBool);
    function Get_acHiddenCurrentPage: Integer;
    procedure Set_acHiddenCurrentPage(pRet: Integer);
    function Get_Orientation: Byte;
    procedure Set_Orientation(pRet: Byte);
    function Get_InputParameters: WideString;
    procedure Set_InputParameters(const pRet: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_ActiveControl: AccessControl;
    function Get_DefaultControl(ControlType: Integer): AccessControl;
    function Get__SectionOld(Index: OleVariant): AccessSection;
    function Get_GroupLevel(Index: Integer): AccessGroupLevel;
    function Get_Report: AccessReport;
    function Get_Module: Module;
    function Get_Properties: Properties;
    function Get_Controls: Controls;
    function Get_Name: WideString;
    procedure Set_Name(const pbstrName: WideString);
    function Get_AutoResize: WordBool;
    procedure Set_AutoResize(pRet: WordBool);
    function Get_AutoCenter: WordBool;
    procedure Set_AutoCenter(pRet: WordBool);
    function Get_PopUp: WordBool;
    procedure Set_PopUp(pRet: WordBool);
    function Get_Modal: WordBool;
    procedure Set_Modal(pRet: WordBool);
    function Get_BorderStyle: Byte;
    procedure Set_BorderStyle(pRet: Byte);
    function Get_ControlBox: WordBool;
    procedure Set_ControlBox(pRet: WordBool);
    function Get_MinMaxButtons: Byte;
    procedure Set_MinMaxButtons(pRet: Byte);
    function Get_CloseButton: WordBool;
    procedure Set_CloseButton(pRet: WordBool);
    function Get_WindowWidth: Smallint;
    procedure Set_WindowWidth(pRet: Smallint);
    function Get_WindowHeight: Smallint;
    procedure Set_WindowHeight(pRet: Smallint);
    function Get_WindowTop: Smallint;
    function Get_WindowLeft: Smallint;
    function Get_OpenArgs: OleVariant;
    procedure Set_OpenArgs(pRet: OleVariant);
    function Get_Printer: _Printer;
    procedure Set_Printer(const pRet: _Printer);
    procedure _Set_Printer(const pRet: _Printer);
    function Get_Moveable: WordBool;
    procedure Set_Moveable(pRet: WordBool);
    function Get_UseDefaultPrinter: WordBool;
    procedure Set_UseDefaultPrinter(pRet: WordBool);
    function Get_Recordset: IDispatch;
    procedure _Set_Recordset(const pRet: IDispatch);
    function Get_RecordSourceQualifier: WideString;
    procedure Set_RecordSourceQualifier(const pRet: WideString);
    function Get_Shape: WideString;
    function Get_FilterOnLoad: WordBool;
    procedure Set_FilterOnLoad(pRet: WordBool);
    function Get_OrderByOnLoad: WordBool;
    procedure Set_OrderByOnLoad(pRet: WordBool);
    function Get_DefaultView: Byte;
    procedure Set_DefaultView(pRet: Byte);
    function Get_AllowReportView: WordBool;
    procedure Set_AllowReportView(pRet: WordBool);
    function Get_ScrollBars: Byte;
    procedure Set_ScrollBars(pRet: Byte);
    function Get_Cycle: Byte;
    procedure Set_Cycle(pRet: Byte);
    function Get_AllowDesignChanges: WordBool;
    procedure Set_AllowDesignChanges(pRet: WordBool);
    function Get_OnCurrent: WideString;
    procedure Set_OnCurrent(const pRet: WideString);
    function Get_KeyPreview: WordBool;
    procedure Set_KeyPreview(pRet: WordBool);
    function Get_TimerInterval: Integer;
    procedure Set_TimerInterval(pRet: Integer);
    function Get_CurrentView: Smallint;
    procedure Set_CurrentView(pRet: Smallint);
    function Get_OnOpenMacro: WideString;
    procedure Set_OnOpenMacro(const pRet: WideString);
    function Get_OnCloseMacro: WideString;
    procedure Set_OnCloseMacro(const pRet: WideString);
    function Get_OnActivateMacro: WideString;
    procedure Set_OnActivateMacro(const pRet: WideString);
    function Get_OnDeactivateMacro: WideString;
    procedure Set_OnDeactivateMacro(const pRet: WideString);
    function Get_OnNoDataMacro: WideString;
    procedure Set_OnNoDataMacro(const pRet: WideString);
    function Get_OnPageMacro: WideString;
    procedure Set_OnPageMacro(const pRet: WideString);
    function Get_OnErrorMacro: WideString;
    procedure Set_OnErrorMacro(const pRet: WideString);
    function Get_OnCurrentMacro: WideString;
    procedure Set_OnCurrentMacro(const pRet: WideString);
    function Get_OnLoadMacro: WideString;
    procedure Set_OnLoadMacro(const pRet: WideString);
    function Get_OnResizeMacro: WideString;
    procedure Set_OnResizeMacro(const pRet: WideString);
    function Get_OnUnloadMacro: WideString;
    procedure Set_OnUnloadMacro(const pRet: WideString);
    function Get_OnGotFocusMacro: WideString;
    procedure Set_OnGotFocusMacro(const pRet: WideString);
    function Get_OnLostFocusMacro: WideString;
    procedure Set_OnLostFocusMacro(const pRet: WideString);
    function Get_OnClickMacro: WideString;
    procedure Set_OnClickMacro(const pRet: WideString);
    function Get_OnDblClickMacro: WideString;
    procedure Set_OnDblClickMacro(const pRet: WideString);
    function Get_OnMouseDownMacro: WideString;
    procedure Set_OnMouseDownMacro(const pRet: WideString);
    function Get_OnMouseMoveMacro: WideString;
    procedure Set_OnMouseMoveMacro(const pRet: WideString);
    function Get_OnMouseUpMacro: WideString;
    procedure Set_OnMouseUpMacro(const pRet: WideString);
    function Get_OnKeyDownMacro: WideString;
    procedure Set_OnKeyDownMacro(const pRet: WideString);
    function Get_OnKeyUpMacro: WideString;
    procedure Set_OnKeyUpMacro(const pRet: WideString);
    function Get_OnKeyPressMacro: WideString;
    procedure Set_OnKeyPressMacro(const pRet: WideString);
    function Get_OnFilterMacro: WideString;
    procedure Set_OnFilterMacro(const pRet: WideString);
    function Get_OnApplyFilterMacro: WideString;
    procedure Set_OnApplyFilterMacro(const pRet: WideString);
    function Get_OnTimerMacro: WideString;
    procedure Set_OnTimerMacro(const pRet: WideString);
    function Get_MouseWheelMacro: WideString;
    procedure Set_MouseWheelMacro(const pRet: WideString);
    function Get_ShowPageMargins: WordBool;
    procedure Set_ShowPageMargins(pRet: WordBool);
    function Get_FitToPage: WordBool;
    procedure Set_FitToPage(pRet: WordBool);
    function Get_AllowLayoutView: WordBool;
    procedure Set_AllowLayoutView(pRet: WordBool);
    function Get_OnLoad: WideString;
    procedure Set_OnLoad(const pRet: WideString);
    function Get_OnResize: WideString;
    procedure Set_OnResize(const pRet: WideString);
    function Get_OnUnload: WideString;
    procedure Set_OnUnload(const pRet: WideString);
    function Get_OnGotFocus: WideString;
    procedure Set_OnGotFocus(const pRet: WideString);
    function Get_OnLostFocus: WideString;
    procedure Set_OnLostFocus(const pRet: WideString);
    function Get_OnClick: WideString;
    procedure Set_OnClick(const pRet: WideString);
    function Get_OnDblClick: WideString;
    procedure Set_OnDblClick(const pRet: WideString);
    function Get_OnMouseDown: WideString;
    procedure Set_OnMouseDown(const pRet: WideString);
    function Get_OnMouseMove: WideString;
    procedure Set_OnMouseMove(const pRet: WideString);
    function Get_OnMouseUp: WideString;
    procedure Set_OnMouseUp(const pRet: WideString);
    function Get_OnKeyDown: WideString;
    procedure Set_OnKeyDown(const pRet: WideString);
    function Get_OnKeyUp: WideString;
    procedure Set_OnKeyUp(const pRet: WideString);
    function Get_OnKeyPress: WideString;
    procedure Set_OnKeyPress(const pRet: WideString);
    function Get_OnFilter: WideString;
    procedure Set_OnFilter(const pRet: WideString);
    function Get_OnApplyFilter: WideString;
    procedure Set_OnApplyFilter(const pRet: WideString);
    function Get_OnTimer: WideString;
    procedure Set_OnTimer(const pRet: WideString);
    function Get_MouseWheel: WideString;
    procedure Set_MouseWheel(const pRet: WideString);
    function Get_DisplayOnSharePointSite: Byte;
    procedure Set_DisplayOnSharePointSite(pRet: Byte);
    function Get_Section(Index: OleVariant): _Section;
    function Get_RibbonName: WideString;
    procedure Set_RibbonName(const pRet: WideString);
  public
    property DefaultInterface: _Report3 read GetDefaultInterface;
  published
    property RecordSource: WideString read Get_RecordSource write Set_RecordSource;
    property Filter: WideString read Get_Filter write Set_Filter;
    property FilterOn: WordBool read Get_FilterOn write Set_FilterOn;
    property OrderBy: WideString read Get_OrderBy write Set_OrderBy;
    property OrderByOn: WordBool read Get_OrderByOn write Set_OrderByOn;
    property ServerFilter: WideString read Get_ServerFilter write Set_ServerFilter;
    property Caption: WideString read Get_Caption write Set_Caption;
    property RecordLocks: Byte read Get_RecordLocks write Set_RecordLocks;
    property PageHeader: Byte read Get_PageHeader write Set_PageHeader;
    property PageFooter: Byte read Get_PageFooter write Set_PageFooter;
    property DateGrouping: Byte read Get_DateGrouping write Set_DateGrouping;
    property GrpKeepTogether: Byte read Get_GrpKeepTogether write Set_GrpKeepTogether;
    property Width: Smallint read Get_Width write Set_Width;
    property Picture: WideString read Get_Picture write Set_Picture;
    property PictureType: Byte read Get_PictureType write Set_PictureType;
    property PictureSizeMode: Byte read Get_PictureSizeMode write Set_PictureSizeMode;
    property PictureAlignment: Byte read Get_PictureAlignment write Set_PictureAlignment;
    property PictureTiling: WordBool read Get_PictureTiling write Set_PictureTiling;
    property PicturePages: Byte read Get_PicturePages write Set_PicturePages;
    property MenuBar: WideString read Get_MenuBar write Set_MenuBar;
    property Toolbar: WideString read Get_Toolbar write Set_Toolbar;
    property ShortcutMenuBar: WideString read Get_ShortcutMenuBar write Set_ShortcutMenuBar;
    property GridX: Smallint read Get_GridX write Set_GridX;
    property GridY: Smallint read Get_GridY write Set_GridY;
    property LayoutForPrint: WordBool read Get_LayoutForPrint write Set_LayoutForPrint;
    property FastLaserPrinting: WordBool read Get_FastLaserPrinting write Set_FastLaserPrinting;
    property HelpFile: WideString read Get_HelpFile write Set_HelpFile;
    property HelpContextId: Integer read Get_HelpContextId write Set_HelpContextId;
    property Hwnd: Integer read Get_Hwnd write Set_Hwnd;
    property Count: Smallint read Get_Count write Set_Count;
    property Page: Integer read Get_Page write Set_Page;
    property Pages: Smallint read Get_Pages write Set_Pages;
    property HasData: Integer read Get_HasData write Set_HasData;
    property Left: Integer read Get_Left write Set_Left;
    property Top: Integer read Get_Top write Set_Top;
    property Height: Integer read Get_Height write Set_Height;
    property PrintSection: WordBool read Get_PrintSection write Set_PrintSection;
    property NextRecord: WordBool read Get_NextRecord write Set_NextRecord;
    property MoveLayout: WordBool read Get_MoveLayout write Set_MoveLayout;
    property FormatCount: Smallint read Get_FormatCount write Set_FormatCount;
    property PrintCount: Smallint read Get_PrintCount write Set_PrintCount;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Painting: WordBool read Get_Painting write Set_Painting;
    property ForeColor: Integer read Get_ForeColor write Set_ForeColor;
    property CurrentX: Single read Get_CurrentX write Set_CurrentX;
    property CurrentY: Single read Get_CurrentY write Set_CurrentY;
    property ScaleHeight: Single read Get_ScaleHeight write Set_ScaleHeight;
    property ScaleLeft: Single read Get_ScaleLeft write Set_ScaleLeft;
    property ScaleMode: Smallint read Get_ScaleMode write Set_ScaleMode;
    property ScaleTop: Single read Get_ScaleTop write Set_ScaleTop;
    property ScaleWidth: Single read Get_ScaleWidth write Set_ScaleWidth;
    property FontBold: Smallint read Get_FontBold write Set_FontBold;
    property FontItalic: Smallint read Get_FontItalic write Set_FontItalic;
    property FontName: WideString read Get_FontName write Set_FontName;
    property FontSize: Smallint read Get_FontSize write Set_FontSize;
    property FontUnderline: Smallint read Get_FontUnderline write Set_FontUnderline;
    property DrawMode: Smallint read Get_DrawMode write Set_DrawMode;
    property DrawStyle: Smallint read Get_DrawStyle write Set_DrawStyle;
    property DrawWidth: Smallint read Get_DrawWidth write Set_DrawWidth;
    property FillColor: Integer read Get_FillColor write Set_FillColor;
    property FillStyle: Smallint read Get_FillStyle write Set_FillStyle;
    property PaletteSource: WideString read Get_PaletteSource write Set_PaletteSource;
    property Tag: WideString read Get_Tag write Set_Tag;
    property OnMenu: WideString read Get_OnMenu write Set_OnMenu;
    property OnOpen1: WideString read Get_OnOpen write Set_OnOpen;
    property OnClose1: WideString read Get_OnClose write Set_OnClose;
    property OnActivate1: WideString read Get_OnActivate write Set_OnActivate;
    property OnDeactivate1: WideString read Get_OnDeactivate write Set_OnDeactivate;
    property OnNoData1: WideString read Get_OnNoData write Set_OnNoData;
    property OnPage1: WideString read Get_OnPage write Set_OnPage;
    property OnError1: WideString read Get_OnError write Set_OnError;
    property Dirty: WordBool read Get_Dirty write Set_Dirty;
    property CurrentRecord: Integer read Get_CurrentRecord write Set_CurrentRecord;
    property HasModule: WordBool read Get_HasModule write Set_HasModule;
    property Orientation: Byte read Get_Orientation write Set_Orientation;
    property InputParameters: WideString read Get_InputParameters write Set_InputParameters;
    property Name: WideString read Get_Name write Set_Name;
    property AutoResize: WordBool read Get_AutoResize write Set_AutoResize;
    property AutoCenter: WordBool read Get_AutoCenter write Set_AutoCenter;
    property PopUp: WordBool read Get_PopUp write Set_PopUp;
    property Modal: WordBool read Get_Modal write Set_Modal;
    property BorderStyle: Byte read Get_BorderStyle write Set_BorderStyle;
    property ControlBox: WordBool read Get_ControlBox write Set_ControlBox;
    property MinMaxButtons: Byte read Get_MinMaxButtons write Set_MinMaxButtons;
    property CloseButton: WordBool read Get_CloseButton write Set_CloseButton;
    property WindowWidth: Smallint read Get_WindowWidth write Set_WindowWidth;
    property WindowHeight: Smallint read Get_WindowHeight write Set_WindowHeight;
    property Printer: _Printer read Get_Printer write Set_Printer;
    property Moveable: WordBool read Get_Moveable write Set_Moveable;
    property UseDefaultPrinter: WordBool read Get_UseDefaultPrinter write Set_UseDefaultPrinter;
    property RecordSourceQualifier: WideString read Get_RecordSourceQualifier write Set_RecordSourceQualifier;
    property FilterOnLoad: WordBool read Get_FilterOnLoad write Set_FilterOnLoad;
    property OrderByOnLoad: WordBool read Get_OrderByOnLoad write Set_OrderByOnLoad;
    property DefaultView: Byte read Get_DefaultView write Set_DefaultView;
    property AllowReportView: WordBool read Get_AllowReportView write Set_AllowReportView;
    property ScrollBars: Byte read Get_ScrollBars write Set_ScrollBars;
    property Cycle: Byte read Get_Cycle write Set_Cycle;
    property OnCurrent1: WideString read Get_OnCurrent write Set_OnCurrent;
    property KeyPreview: WordBool read Get_KeyPreview write Set_KeyPreview;
    property TimerInterval: Integer read Get_TimerInterval write Set_TimerInterval;
    property CurrentView: Smallint read Get_CurrentView write Set_CurrentView;
    property ShowPageMargins: WordBool read Get_ShowPageMargins write Set_ShowPageMargins;
    property FitToPage: WordBool read Get_FitToPage write Set_FitToPage;
    property AllowLayoutView: WordBool read Get_AllowLayoutView write Set_AllowLayoutView;
    property OnLoad1: WideString read Get_OnLoad write Set_OnLoad;
    property OnResize1: WideString read Get_OnResize write Set_OnResize;
    property OnUnload1: WideString read Get_OnUnload write Set_OnUnload;
    property OnGotFocus1: WideString read Get_OnGotFocus write Set_OnGotFocus;
    property OnLostFocus1: WideString read Get_OnLostFocus write Set_OnLostFocus;
    property OnClick1: WideString read Get_OnClick write Set_OnClick;
    property OnDblClick1: WideString read Get_OnDblClick write Set_OnDblClick;
    property OnMouseDown1: WideString read Get_OnMouseDown write Set_OnMouseDown;
    property OnMouseMove1: WideString read Get_OnMouseMove write Set_OnMouseMove;
    property OnMouseUp1: WideString read Get_OnMouseUp write Set_OnMouseUp;
    property OnKeyDown1: WideString read Get_OnKeyDown write Set_OnKeyDown;
    property OnKeyUp1: WideString read Get_OnKeyUp write Set_OnKeyUp;
    property OnKeyPress1: WideString read Get_OnKeyPress write Set_OnKeyPress;
    property OnFilter1: WideString read Get_OnFilter write Set_OnFilter;
    property OnApplyFilter1: WideString read Get_OnApplyFilter write Set_OnApplyFilter;
    property OnTimer1: WideString read Get_OnTimer write Set_OnTimer;
    property MouseWheel: WideString read Get_MouseWheel write Set_MouseWheel;
    property DisplayOnSharePointSite: Byte read Get_DisplayOnSharePointSite write Set_DisplayOnSharePointSite;
    property RibbonName: WideString read Get_RibbonName write Set_RibbonName;
  end;
{$ENDIF}



// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAttachment
// Help String      : 
// Default Interface: _Attachment
// Def. Intf. DISP? : No
// Event   Interface: DispAttachmentEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAttachmentBeforeUpdate = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAttachmentExit = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAttachmentDirty = procedure(ASender: TObject; out Cancel: Smallint) of object;

  TAttachment = class(TOleControl)
  private
    FOnBeforeUpdate: TAttachmentBeforeUpdate;
    FOnAfterUpdate: TNotifyEvent;
    FOnEnter: TNotifyEvent;
    FOnExit: TAttachmentExit;
    FOnDirty: TAttachmentDirty;
    FOnChange: TNotifyEvent;
    FOnGotFocus: TNotifyEvent;
    FOnLostFocus: TNotifyEvent;
    FOnAttachmentCurrent: TNotifyEvent;
    FIntf: _Attachment;
    function  GetControlInterface: _Attachment;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_accParent: IDispatch;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_OldValue: OleVariant;
    function Get_Properties: Properties;
    function Get_Controls: Children;
    function Get_Hyperlink: _Hyperlink;
    function Get_FileName(var_: OleVariant): WideString;
    function Get_FileType(var_: OleVariant): WideString;
    function Get_FileURL(var_: OleVariant): WideString;
    function Get_FileData(var_: OleVariant): OleVariant;
    function Get_PictureDisp(var_: OleVariant): OleVariant;
  public
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure SizeToFit;
    procedure Requery;
    procedure Goto_;
    procedure SetFocus;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    procedure Forward;
    procedure Back;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _Attachment read GetControlInterface;
    property  DefaultInterface: _Attachment read GetControlInterface;
    property accParent: IDispatch index -5000 read GetIDispatchProp;
    property accChildCount: Integer index -5001 read GetIntegerProp;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant index -5011 read GetOleVariantProp;
    property accSelection: OleVariant index -5012 read GetOleVariantProp;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property OldValue: OleVariant index 2102 read GetOleVariantProp;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Hyperlink: _Hyperlink read Get_Hyperlink;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property BorderLineStyle: Byte index 11 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property BeforeUpdateMacro: WideString index 496 read GetWideStringProp write SetWideStringProp;
    property AfterUpdateMacro: WideString index 505 read GetWideStringProp write SetWideStringProp;
    property OnEnterMacro: WideString index 497 read GetWideStringProp write SetWideStringProp;
    property OnExitMacro: WideString index 498 read GetWideStringProp write SetWideStringProp;
    property OnDirtyMacro: WideString index 528 read GetWideStringProp write SetWideStringProp;
    property OnChangeMacro: WideString index 506 read GetWideStringProp write SetWideStringProp;
    property OnGotFocusMacro: WideString index 502 read GetWideStringProp write SetWideStringProp;
    property OnLostFocusMacro: WideString index 503 read GetWideStringProp write SetWideStringProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
    property OnKeyDownMacro: WideString index 500 read GetWideStringProp write SetWideStringProp;
    property OnKeyUpMacro: WideString index 501 read GetWideStringProp write SetWideStringProp;
    property OnKeyPressMacro: WideString index 499 read GetWideStringProp write SetWideStringProp;
    property OnAttachmentCurrentMacro: WideString index 558 read GetWideStringProp write SetWideStringProp;
    property AttachmentCount: Integer index 2478 read GetIntegerProp;
    property FileName[var_: OleVariant]: WideString read Get_FileName;
    property FileType[var_: OleVariant]: WideString read Get_FileType;
    property FileURL[var_: OleVariant]: WideString read Get_FileURL;
    property Layout: TOleEnum index 2460 read GetTOleEnumProp;
    property LayoutID: Integer index 2492 read GetIntegerProp;
    property FileData[var_: OleVariant]: OleVariant read Get_FileData;
    property PictureDisp[var_: OleVariant]: OleVariant read Get_PictureDisp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property PictureSizeMode: Byte index 481 read GetByteProp write SetByteProp stored False;
    property PictureAlignment: Byte index 480 read GetByteProp write SetByteProp stored False;
    property PictureTiling: WordBool index 482 read GetWordBoolProp write SetWordBoolProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property BackStyle: Byte index 29 read GetByteProp write SetByteProp stored False;
    property BackColor: Integer index 28 read GetIntegerProp write SetIntegerProp stored False;
    property SpecialEffect: Byte index 4 read GetByteProp write SetByteProp stored False;
    property BorderStyle: Byte index 9 read GetByteProp write SetByteProp stored False;
    property OldBorderStyle: Byte index 329 read GetByteProp write SetByteProp stored False;
    property BorderColor: Integer index 8 read GetIntegerProp write SetIntegerProp stored False;
    property BorderWidth: Byte index 10 read GetByteProp write SetByteProp stored False;
    property ControlTipText: WideString index 317 read GetWideStringProp write SetWideStringProp stored False;
    property HelpContextId: Integer index 219 read GetIntegerProp write SetIntegerProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property BeforeUpdate: WideString index 85 read GetWideStringProp write SetWideStringProp stored False;
    property AfterUpdate: WideString index 86 read GetWideStringProp write SetWideStringProp stored False;
    property OnEnter1: WideString index 222 read GetWideStringProp write SetWideStringProp stored False;
    property OnExit1: WideString index 223 read GetWideStringProp write SetWideStringProp stored False;
    property OnDirty1: WideString index 375 read GetWideStringProp write SetWideStringProp stored False;
    property OnChange1: WideString index 114 read GetWideStringProp write SetWideStringProp stored False;
    property OnGotFocus1: WideString index 115 read GetWideStringProp write SetWideStringProp stored False;
    property OnLostFocus1: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyDown: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyUp: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyPress: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property OnAttachmentCurrent1: WideString index 484 read GetWideStringProp write SetWideStringProp stored False;
    property ShortcutMenuBar: WideString index 304 read GetWideStringProp write SetWideStringProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property DisplayAs: TOleEnum index 479 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property CurrentAttachment: Integer index 2479 read GetIntegerProp write SetIntegerProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property LeftPadding: Smallint index 454 read GetSmallintProp write SetSmallintProp stored False;
    property TopPadding: Smallint index 455 read GetSmallintProp write SetSmallintProp stored False;
    property RightPadding: Smallint index 456 read GetSmallintProp write SetSmallintProp stored False;
    property BottomPadding: Smallint index 457 read GetSmallintProp write SetSmallintProp stored False;
    property GridlineStyleLeft: Byte index 458 read GetByteProp write SetByteProp stored False;
    property GridlineStyleTop: Byte index 459 read GetByteProp write SetByteProp stored False;
    property GridlineStyleRight: Byte index 460 read GetByteProp write SetByteProp stored False;
    property GridlineStyleBottom: Byte index 461 read GetByteProp write SetByteProp stored False;
    property GridlineWidthLeft: Byte index 463 read GetByteProp write SetByteProp stored False;
    property GridlineWidthTop: Byte index 464 read GetByteProp write SetByteProp stored False;
    property GridlineWidthRight: Byte index 465 read GetByteProp write SetByteProp stored False;
    property GridlineWidthBottom: Byte index 466 read GetByteProp write SetByteProp stored False;
    property GridlineColor: Integer index 462 read GetIntegerProp write SetIntegerProp stored False;
    property DefaultPicture: WideString index 575 read GetWideStringProp write SetWideStringProp stored False;
    property AutoLabel: WordBool index 57 read GetWordBoolProp write SetWordBoolProp stored False;
    property AddColon: WordBool index 3 read GetWordBoolProp write SetWordBoolProp stored False;
    property LabelX: Smallint index 52 read GetSmallintProp write SetSmallintProp stored False;
    property LabelY: Smallint index 53 read GetSmallintProp write SetSmallintProp stored False;
    property LabelAlign: Byte index 51 read GetByteProp write SetByteProp stored False;
    property ColumnWidth: Smallint index 166 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnOrder: Smallint index 165 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnHidden: WordBool index 167 read GetWordBoolProp write SetWordBoolProp stored False;
    property ControlSource: WideString index 27 read GetWideStringProp write SetWideStringProp stored False;
    property StatusBarText: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property TabStop: WordBool index 262 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabIndex: Smallint index 261 read GetSmallintProp write SetSmallintProp stored False;
    property Enabled: WordBool index 25 read GetWordBoolProp write SetWordBoolProp stored False;
    property Locked: WordBool index 56 read GetWordBoolProp write SetWordBoolProp stored False;
    property OnBeforeUpdate: TAttachmentBeforeUpdate read FOnBeforeUpdate write FOnBeforeUpdate;
    property OnAfterUpdate: TNotifyEvent read FOnAfterUpdate write FOnAfterUpdate;
    property OnEnter: TNotifyEvent read FOnEnter write FOnEnter;
    property OnExit: TAttachmentExit read FOnExit write FOnExit;
    property OnDirty: TAttachmentDirty read FOnDirty write FOnDirty;
    property OnChange: TNotifyEvent read FOnChange write FOnChange;
    property OnGotFocus: TNotifyEvent read FOnGotFocus write FOnGotFocus;
    property OnLostFocus: TNotifyEvent read FOnLostFocus write FOnLostFocus;
    property OnAttachmentCurrent: TNotifyEvent read FOnAttachmentCurrent write FOnAttachmentCurrent;
  end;

// *********************************************************************//
// The Class CoMacroError provides a Create and CreateRemote method to          
// create instances of the default interface _MacroError exposed by              
// the CoClass MacroError. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMacroError = class
    class function Create: _MacroError;
    class function CreateRemote(const MachineName: string): _MacroError;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMacroError
// Help String      : 
// Default Interface: _MacroError
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMacroErrorProperties= class;
{$ENDIF}
  TMacroError = class(TOleServer)
  private
    FIntf:        _MacroError;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMacroErrorProperties;
    function      GetServerProperties: TMacroErrorProperties;
{$ENDIF}
    function      GetDefaultInterface: _MacroError;
  protected
    procedure InitServerData; override;
    function Get_Condition: WideString;
    function Get_ActionName: WideString;
    function Get_Arguments: WideString;
    function Get_Description: WideString;
    function Get_Number: Integer;
    function Get_MacroName: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _MacroError);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _MacroError read GetDefaultInterface;
    property Condition: WideString read Get_Condition;
    property ActionName: WideString read Get_ActionName;
    property Arguments: WideString read Get_Arguments;
    property Description: WideString read Get_Description;
    property Number: Integer read Get_Number;
    property MacroName: WideString read Get_MacroName;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMacroErrorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMacroError
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMacroErrorProperties = class(TPersistent)
  private
    FServer:    TMacroError;
    function    GetDefaultInterface: _MacroError;
    constructor Create(AServer: TMacroError);
  protected
    function Get_Condition: WideString;
    function Get_ActionName: WideString;
    function Get_Arguments: WideString;
    function Get_Description: WideString;
    function Get_Number: Integer;
    function Get_MacroName: WideString;
  public
    property DefaultInterface: _MacroError read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTempVar provides a Create and CreateRemote method to          
// create instances of the default interface _TempVar exposed by              
// the CoClass TempVar. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTempVar = class
    class function Create: _TempVar;
    class function CreateRemote(const MachineName: string): _TempVar;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTempVar
// Help String      : 
// Default Interface: _TempVar
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTempVarProperties= class;
{$ENDIF}
  TTempVar = class(TOleServer)
  private
    FIntf:        _TempVar;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTempVarProperties;
    function      GetServerProperties: TTempVarProperties;
{$ENDIF}
    function      GetDefaultInterface: _TempVar;
  protected
    procedure InitServerData; override;
    function Get__Value: OleVariant;
    procedure Set__Value(pRet: OleVariant);
    function Get_Name: WideString;
    function Get_Value: OleVariant;
    procedure Set_Value(pRet: OleVariant);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _TempVar);
    procedure Disconnect; override;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _TempVar read GetDefaultInterface;
    property _Value: OleVariant read Get__Value write Set__Value;
    property Name: WideString read Get_Name;
    property Value: OleVariant read Get_Value write Set_Value;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTempVarProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTempVar
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTempVarProperties = class(TPersistent)
  private
    FServer:    TTempVar;
    function    GetDefaultInterface: _TempVar;
    constructor Create(AServer: TTempVar);
  protected
    function Get__Value: OleVariant;
    procedure Set__Value(pRet: OleVariant);
    function Get_Name: WideString;
    function Get_Value: OleVariant;
    procedure Set_Value(pRet: OleVariant);
  public
    property DefaultInterface: _TempVar read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTempVars provides a Create and CreateRemote method to          
// create instances of the default interface _TempVars exposed by              
// the CoClass TempVars. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTempVars = class
    class function Create: _TempVars;
    class function CreateRemote(const MachineName: string): _TempVars;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTempVars
// Help String      : 
// Default Interface: _TempVars
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTempVarsProperties= class;
{$ENDIF}
  TTempVars = class(TOleServer)
  private
    FIntf:        _TempVars;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTempVarsProperties;
    function      GetServerProperties: TTempVarsProperties;
{$ENDIF}
    function      GetDefaultInterface: _TempVars;
  protected
    procedure InitServerData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(Index: OleVariant): TempVar;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _TempVars);
    procedure Disconnect; override;
    procedure Add(const Name: WideString; Value: OleVariant);
    procedure Remove(var_: OleVariant);
    procedure RemoveAll;
    function IsMemberSafe(dispid: Integer): WordBool;
    property DefaultInterface: _TempVars read GetDefaultInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch read Get_Parent;
    property Item[Index: OleVariant]: TempVar read Get_Item; default;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTempVarsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTempVars
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTempVarsProperties = class(TPersistent)
  private
    FServer:    TTempVars;
    function    GetDefaultInterface: _TempVars;
    constructor Create(AServer: TTempVars);
  protected
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Item(Index: OleVariant): TempVar;
    function Get_Count: Integer;
  public
    property DefaultInterface: _TempVars read GetDefaultInterface;
  published
  end;
{$ENDIF}



// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessCommandButton
// Help String      : 
// Default Interface: _CommandButton
// Def. Intf. DISP? : No
// Event   Interface: DispCommandButtonEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessCommandButtonExit = procedure(ASender: TObject; out Cancel: Smallint) of object;

  TAccessCommandButton = class(TOleControl)
  private
    FOnEnter: TNotifyEvent;
    FOnExit: TAccessCommandButtonExit;
    FOnGotFocus: TNotifyEvent;
    FOnLostFocus: TNotifyEvent;
    FIntf: _CommandButton;
    function  GetControlInterface: _CommandButton;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_accParent: IDispatch;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_OldValue: OleVariant;
    function Get_Properties: Properties;
    function Get_Controls: Children;
    function Get_Hyperlink: _Hyperlink;
    function Get_PictureData: OleVariant;
    procedure Set_PictureData(pRet: OleVariant);
    function Get_ObjectPalette: OleVariant;
    procedure Set_ObjectPalette(pRet: OleVariant);
  public
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure SizeToFit;
    procedure Requery;
    procedure Goto_;
    procedure SetFocus;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _CommandButton read GetControlInterface;
    property  DefaultInterface: _CommandButton read GetControlInterface;
    property accParent: IDispatch index -5000 read GetIDispatchProp;
    property accChildCount: Integer index -5001 read GetIntegerProp;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant index -5011 read GetOleVariantProp;
    property accSelection: OleVariant index -5012 read GetOleVariantProp;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property OldValue: OleVariant index 2102 read GetOleVariantProp;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Hyperlink: _Hyperlink read Get_Hyperlink;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property PictureData: OleVariant index 188 read GetOleVariantProp write SetOleVariantProp;
    property TextFontCharSet: Byte index 193 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property ObjectPalette: OleVariant index 99 read GetOleVariantProp write SetOleVariantProp;
    property BeforeUpdateMacro: WideString index 496 read GetWideStringProp write SetWideStringProp;
    property AfterUpdateMacro: WideString index 505 read GetWideStringProp write SetWideStringProp;
    property OnEnterMacro: WideString index 497 read GetWideStringProp write SetWideStringProp;
    property OnExitMacro: WideString index 498 read GetWideStringProp write SetWideStringProp;
    property OnGotFocusMacro: WideString index 502 read GetWideStringProp write SetWideStringProp;
    property OnLostFocusMacro: WideString index 503 read GetWideStringProp write SetWideStringProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
    property OnKeyDownMacro: WideString index 500 read GetWideStringProp write SetWideStringProp;
    property OnKeyUpMacro: WideString index 501 read GetWideStringProp write SetWideStringProp;
    property OnKeyPressMacro: WideString index 499 read GetWideStringProp write SetWideStringProp;
    property Layout: TOleEnum index 2460 read GetTOleEnumProp;
    property LayoutID: Integer index 2492 read GetIntegerProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property Caption: WideString index 17 read GetWideStringProp write SetWideStringProp stored False;
    property Picture: WideString index 7 read GetWideStringProp write SetWideStringProp stored False;
    property PictureType: Byte index 341 read GetByteProp write SetByteProp stored False;
    property Transparent: WordBool index 46 read GetWordBoolProp write SetWordBoolProp stored False;
    property Default: WordBool index 220 read GetWordBoolProp write SetWordBoolProp stored False;
    property Cancel: WordBool index 221 read GetWordBoolProp write SetWordBoolProp stored False;
    property AutoRepeat: WordBool index 5 read GetWordBoolProp write SetWordBoolProp stored False;
    property StatusBarText: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property OnPush: WideString index 155 read GetWideStringProp write SetWideStringProp stored False;
    property HyperlinkAddress: WideString index 343 read GetWideStringProp write SetWideStringProp stored False;
    property HyperlinkSubAddress: WideString index 347 read GetWideStringProp write SetWideStringProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property Enabled: WordBool index 25 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabStop: WordBool index 262 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabIndex: Smallint index 261 read GetSmallintProp write SetSmallintProp stored False;
    property ForeColor: Integer index 204 read GetIntegerProp write SetIntegerProp stored False;
    property FontName: WideString index 34 read GetWideStringProp write SetWideStringProp stored False;
    property FontSize: Smallint index 35 read GetSmallintProp write SetSmallintProp stored False;
    property FontWeight: Smallint index 37 read GetSmallintProp write SetSmallintProp stored False;
    property FontItalic: WordBool index 33 read GetWordBoolProp write SetWordBoolProp stored False;
    property FontUnderline: WordBool index 36 read GetWordBoolProp write SetWordBoolProp stored False;
    property FontBold: Smallint index 32 read GetSmallintProp write SetSmallintProp stored False;
    property ShortcutMenuBar: WideString index 304 read GetWideStringProp write SetWideStringProp stored False;
    property ControlTipText: WideString index 317 read GetWideStringProp write SetWideStringProp stored False;
    property HelpContextId: Integer index 219 read GetIntegerProp write SetIntegerProp stored False;
    property AutoLabel: WordBool index 57 read GetWordBoolProp write SetWordBoolProp stored False;
    property AddColon: WordBool index 3 read GetWordBoolProp write SetWordBoolProp stored False;
    property LabelX: Smallint index 52 read GetSmallintProp write SetSmallintProp stored False;
    property LabelY: Smallint index 53 read GetSmallintProp write SetSmallintProp stored False;
    property LabelAlign: Byte index 51 read GetByteProp write SetByteProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property OnEnter1: WideString index 222 read GetWideStringProp write SetWideStringProp stored False;
    property OnExit1: WideString index 223 read GetWideStringProp write SetWideStringProp stored False;
    property OnGotFocus1: WideString index 115 read GetWideStringProp write SetWideStringProp stored False;
    property OnLostFocus1: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyDown: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyUp: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyPress: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property ReadingOrder: Byte index 367 read GetByteProp write SetByteProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property LeftPadding: Smallint index 454 read GetSmallintProp write SetSmallintProp stored False;
    property TopPadding: Smallint index 455 read GetSmallintProp write SetSmallintProp stored False;
    property RightPadding: Smallint index 456 read GetSmallintProp write SetSmallintProp stored False;
    property BottomPadding: Smallint index 457 read GetSmallintProp write SetSmallintProp stored False;
    property GridlineStyleLeft: Byte index 458 read GetByteProp write SetByteProp stored False;
    property GridlineStyleTop: Byte index 459 read GetByteProp write SetByteProp stored False;
    property GridlineStyleRight: Byte index 460 read GetByteProp write SetByteProp stored False;
    property GridlineStyleBottom: Byte index 461 read GetByteProp write SetByteProp stored False;
    property GridlineWidthLeft: Byte index 463 read GetByteProp write SetByteProp stored False;
    property GridlineWidthTop: Byte index 464 read GetByteProp write SetByteProp stored False;
    property GridlineWidthRight: Byte index 465 read GetByteProp write SetByteProp stored False;
    property GridlineWidthBottom: Byte index 466 read GetByteProp write SetByteProp stored False;
    property GridlineColor: Integer index 462 read GetIntegerProp write SetIntegerProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property BackStyle: Byte index 29 read GetByteProp write SetByteProp stored False;
    property CursorOnHover: TOleEnum index 584 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property PictureCaptionArrangement: TOleEnum index 593 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property Alignment: Byte index 594 read GetByteProp write SetByteProp stored False;
    property OnEnter: TNotifyEvent read FOnEnter write FOnEnter;
    property OnExit: TAccessCommandButtonExit read FOnExit write FOnExit;
    property OnGotFocus: TNotifyEvent read FOnGotFocus write FOnGotFocus;
    property OnLostFocus: TNotifyEvent read FOnLostFocus write FOnLostFocus;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessBoundObjectFrame
// Help String      : 
// Default Interface: _BoundObjectFrame
// Def. Intf. DISP? : No
// Event   Interface: DispBoundObjectFrameEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessBoundObjectFrameUpdated = procedure(ASender: TObject; var Code: Smallint) of object;
  TAccessBoundObjectFrameBeforeUpdate = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessBoundObjectFrameExit = procedure(ASender: TObject; out Cancel: Smallint) of object;

  TAccessBoundObjectFrame = class(TOleControl)
  private
    FOnUpdated: TAccessBoundObjectFrameUpdated;
    FOnBeforeUpdate: TAccessBoundObjectFrameBeforeUpdate;
    FOnAfterUpdate: TNotifyEvent;
    FOnEnter: TNotifyEvent;
    FOnExit: TAccessBoundObjectFrameExit;
    FOnGotFocus: TNotifyEvent;
    FOnLostFocus: TNotifyEvent;
    FIntf: _BoundObjectFrame;
    function  GetControlInterface: _BoundObjectFrame;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_accParent: IDispatch;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_OldValue: OleVariant;
    function Get_Object_: IDispatch;
    function Get_ObjectVerbs(Index: Integer): WideString;
    function Get_Properties: Properties;
    function Get_Controls: Children;
    function Get_Value: OleVariant;
    procedure Set_Value(pRet: OleVariant);
    function Get_ObjectPalette: OleVariant;
    procedure Set_ObjectPalette(pRet: OleVariant);
  public
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure SizeToFit;
    procedure Requery;
    procedure Goto_;
    procedure SetFocus;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _BoundObjectFrame read GetControlInterface;
    property  DefaultInterface: _BoundObjectFrame read GetControlInterface;
    property accParent: IDispatch index -5000 read GetIDispatchProp;
    property accChildCount: Integer index -5001 read GetIntegerProp;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant index -5011 read GetOleVariantProp;
    property accSelection: OleVariant index -5012 read GetOleVariantProp;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property OldValue: OleVariant index 2102 read GetOleVariantProp;
    property Object_: IDispatch index 2104 read GetIDispatchProp;
    property ObjectVerbs[Index: Integer]: WideString read Get_ObjectVerbs;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Value: OleVariant index 0 read GetOleVariantProp write SetOleVariantProp;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property BorderLineStyle: Byte index 11 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property ObjectPalette: OleVariant index 99 read GetOleVariantProp write SetOleVariantProp;
    property BeforeUpdateMacro: WideString index 496 read GetWideStringProp write SetWideStringProp;
    property AfterUpdateMacro: WideString index 505 read GetWideStringProp write SetWideStringProp;
    property OnUpdatedMacro: WideString index 504 read GetWideStringProp write SetWideStringProp;
    property OnEnterMacro: WideString index 497 read GetWideStringProp write SetWideStringProp;
    property OnExitMacro: WideString index 498 read GetWideStringProp write SetWideStringProp;
    property OnGotFocusMacro: WideString index 502 read GetWideStringProp write SetWideStringProp;
    property OnLostFocusMacro: WideString index 503 read GetWideStringProp write SetWideStringProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
    property OnKeyDownMacro: WideString index 500 read GetWideStringProp write SetWideStringProp;
    property OnKeyUpMacro: WideString index 501 read GetWideStringProp write SetWideStringProp;
    property OnKeyPressMacro: WideString index 499 read GetWideStringProp write SetWideStringProp;
    property Layout: TOleEnum index 2460 read GetTOleEnumProp;
    property LayoutID: Integer index 2492 read GetIntegerProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property ControlSource: WideString index 27 read GetWideStringProp write SetWideStringProp stored False;
    property SizeMode: Byte index 89 read GetByteProp write SetByteProp stored False;
    property Class_: WideString index 274 read GetWideStringProp write SetWideStringProp stored False;
    property SourceDoc: WideString index 133 read GetWideStringProp write SetWideStringProp stored False;
    property SourceItem: WideString index 48 read GetWideStringProp write SetWideStringProp stored False;
    property AutoActivate: Smallint index 101 read GetSmallintProp write SetSmallintProp stored False;
    property DisplayType: WordBool index 272 read GetWordBoolProp write SetWordBoolProp stored False;
    property UpdateOptions: Smallint index 103 read GetSmallintProp write SetSmallintProp stored False;
    property Verb: Integer index 102 read GetIntegerProp write SetIntegerProp stored False;
    property OLETypeAllowed: Byte index 275 read GetByteProp write SetByteProp stored False;
    property StatusBarText: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property Enabled: WordBool index 25 read GetWordBoolProp write SetWordBoolProp stored False;
    property Locked: WordBool index 56 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabStop: WordBool index 262 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabIndex: Smallint index 261 read GetSmallintProp write SetSmallintProp stored False;
    property BackStyle: Byte index 29 read GetByteProp write SetByteProp stored False;
    property BackColor: Integer index 28 read GetIntegerProp write SetIntegerProp stored False;
    property SpecialEffect: Byte index 4 read GetByteProp write SetByteProp stored False;
    property BorderStyle: Byte index 9 read GetByteProp write SetByteProp stored False;
    property OldBorderStyle: Byte index 329 read GetByteProp write SetByteProp stored False;
    property BorderColor: Integer index 8 read GetIntegerProp write SetIntegerProp stored False;
    property BorderWidth: Byte index 10 read GetByteProp write SetByteProp stored False;
    property ShortcutMenuBar: WideString index 304 read GetWideStringProp write SetWideStringProp stored False;
    property ControlTipText: WideString index 317 read GetWideStringProp write SetWideStringProp stored False;
    property HelpContextId: Integer index 219 read GetIntegerProp write SetIntegerProp stored False;
    property ColumnWidth: Smallint index 166 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnOrder: Smallint index 165 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnHidden: WordBool index 167 read GetWordBoolProp write SetWordBoolProp stored False;
    property AutoLabel: WordBool index 57 read GetWordBoolProp write SetWordBoolProp stored False;
    property AddColon: WordBool index 3 read GetWordBoolProp write SetWordBoolProp stored False;
    property LabelX: Smallint index 52 read GetSmallintProp write SetSmallintProp stored False;
    property LabelY: Smallint index 53 read GetSmallintProp write SetSmallintProp stored False;
    property LabelAlign: Byte index 51 read GetByteProp write SetByteProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property LpOleObject: Integer index 172 read GetIntegerProp write SetIntegerProp stored False;
    property ObjectVerbsCount: Integer index 173 read GetIntegerProp write SetIntegerProp stored False;
    property Action: Smallint index 273 read GetSmallintProp write SetSmallintProp stored False;
    property Scaling: Byte index 88 read GetByteProp write SetByteProp stored False;
    property OLEType: Byte index 276 read GetByteProp write SetByteProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property BeforeUpdate: WideString index 85 read GetWideStringProp write SetWideStringProp stored False;
    property AfterUpdate: WideString index 86 read GetWideStringProp write SetWideStringProp stored False;
    property OnUpdated1: WideString index 118 read GetWideStringProp write SetWideStringProp stored False;
    property OnEnter1: WideString index 222 read GetWideStringProp write SetWideStringProp stored False;
    property OnExit1: WideString index 223 read GetWideStringProp write SetWideStringProp stored False;
    property OnGotFocus1: WideString index 115 read GetWideStringProp write SetWideStringProp stored False;
    property OnLostFocus1: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyDown: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyUp: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyPress: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property LeftPadding: Smallint index 454 read GetSmallintProp write SetSmallintProp stored False;
    property TopPadding: Smallint index 455 read GetSmallintProp write SetSmallintProp stored False;
    property RightPadding: Smallint index 456 read GetSmallintProp write SetSmallintProp stored False;
    property BottomPadding: Smallint index 457 read GetSmallintProp write SetSmallintProp stored False;
    property GridlineStyleLeft: Byte index 458 read GetByteProp write SetByteProp stored False;
    property GridlineStyleTop: Byte index 459 read GetByteProp write SetByteProp stored False;
    property GridlineStyleRight: Byte index 460 read GetByteProp write SetByteProp stored False;
    property GridlineStyleBottom: Byte index 461 read GetByteProp write SetByteProp stored False;
    property GridlineWidthLeft: Byte index 463 read GetByteProp write SetByteProp stored False;
    property GridlineWidthTop: Byte index 464 read GetByteProp write SetByteProp stored False;
    property GridlineWidthRight: Byte index 465 read GetByteProp write SetByteProp stored False;
    property GridlineWidthBottom: Byte index 466 read GetByteProp write SetByteProp stored False;
    property GridlineColor: Integer index 462 read GetIntegerProp write SetIntegerProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property OnUpdated: TAccessBoundObjectFrameUpdated read FOnUpdated write FOnUpdated;
    property OnBeforeUpdate: TAccessBoundObjectFrameBeforeUpdate read FOnBeforeUpdate write FOnBeforeUpdate;
    property OnAfterUpdate: TNotifyEvent read FOnAfterUpdate write FOnAfterUpdate;
    property OnEnter: TNotifyEvent read FOnEnter write FOnEnter;
    property OnExit: TAccessBoundObjectFrameExit read FOnExit write FOnExit;
    property OnGotFocus: TNotifyEvent read FOnGotFocus write FOnGotFocus;
    property OnLostFocus: TNotifyEvent read FOnLostFocus write FOnLostFocus;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessObjectFrame
// Help String      : 
// Default Interface: _ObjectFrame
// Def. Intf. DISP? : No
// Event   Interface: DispObjectFrameEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessObjectFrameUpdated = procedure(ASender: TObject; var Code: Smallint) of object;
  TAccessObjectFrameExit = procedure(ASender: TObject; out Cancel: Smallint) of object;

  TAccessObjectFrame = class(TOleControl)
  private
    FOnUpdated: TAccessObjectFrameUpdated;
    FOnEnter: TNotifyEvent;
    FOnExit: TAccessObjectFrameExit;
    FOnGotFocus: TNotifyEvent;
    FOnLostFocus: TNotifyEvent;
    FIntf: _ObjectFrame;
    function  GetControlInterface: _ObjectFrame;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_accParent: IDispatch;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_OldValue: OleVariant;
    function Get_Object_: IDispatch;
    function Get_ObjectVerbs(Index: Integer): WideString;
    function Get_Properties: Properties;
    function Get_Controls: Children;
    function Get_OleData: OleVariant;
    procedure Set_OleData(pRet: OleVariant);
    function Get_ObjectPalette: OleVariant;
    procedure Set_ObjectPalette(pRet: OleVariant);
  public
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure SizeToFit;
    procedure Requery;
    procedure Goto_;
    procedure SetFocus;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _ObjectFrame read GetControlInterface;
    property  DefaultInterface: _ObjectFrame read GetControlInterface;
    property accParent: IDispatch index -5000 read GetIDispatchProp;
    property accChildCount: Integer index -5001 read GetIntegerProp;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant index -5011 read GetOleVariantProp;
    property accSelection: OleVariant index -5012 read GetOleVariantProp;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property OldValue: OleVariant index 2102 read GetOleVariantProp;
    property Object_: IDispatch index 2104 read GetIDispatchProp;
    property ObjectVerbs[Index: Integer]: WideString read Get_ObjectVerbs;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property OleData: OleVariant index 171 read GetOleVariantProp write SetOleVariantProp;
    property BorderLineStyle: Byte index 11 read GetByteProp write SetByteProp;
    property Data: Smallint index 242 read GetSmallintProp write SetSmallintProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property ObjectPalette: OleVariant index 99 read GetOleVariantProp write SetOleVariantProp;
    property BeforeUpdateMacro: WideString index 496 read GetWideStringProp write SetWideStringProp;
    property AfterUpdateMacro: WideString index 505 read GetWideStringProp write SetWideStringProp;
    property OnEnterMacro: WideString index 497 read GetWideStringProp write SetWideStringProp;
    property OnExitMacro: WideString index 498 read GetWideStringProp write SetWideStringProp;
    property OnGotFocusMacro: WideString index 502 read GetWideStringProp write SetWideStringProp;
    property OnLostFocusMacro: WideString index 503 read GetWideStringProp write SetWideStringProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
    property Layout: TOleEnum index 2460 read GetTOleEnumProp;
    property LayoutID: Integer index 2492 read GetIntegerProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property SizeMode: Byte index 89 read GetByteProp write SetByteProp stored False;
    property OLEClass: WideString index 76 read GetWideStringProp write SetWideStringProp stored False;
    property Item: WideString index 47 read GetWideStringProp write SetWideStringProp stored False;
    property RowSourceType: WideString index 93 read GetWideStringProp write SetWideStringProp stored False;
    property RowSource: WideString index 91 read GetWideStringProp write SetWideStringProp stored False;
    property LinkChildFields: WideString index 49 read GetWideStringProp write SetWideStringProp stored False;
    property LinkMasterFields: WideString index 50 read GetWideStringProp write SetWideStringProp stored False;
    property AutoActivate: Smallint index 101 read GetSmallintProp write SetSmallintProp stored False;
    property DisplayType: WordBool index 272 read GetWordBoolProp write SetWordBoolProp stored False;
    property UpdateOptions: Smallint index 103 read GetSmallintProp write SetSmallintProp stored False;
    property Verb: Integer index 102 read GetIntegerProp write SetIntegerProp stored False;
    property OLEType: Byte index 276 read GetByteProp write SetByteProp stored False;
    property OLETypeAllowed: Byte index 275 read GetByteProp write SetByteProp stored False;
    property SourceObject: WideString index 132 read GetWideStringProp write SetWideStringProp stored False;
    property Class_: WideString index 274 read GetWideStringProp write SetWideStringProp stored False;
    property SourceDoc: WideString index 133 read GetWideStringProp write SetWideStringProp stored False;
    property SourceItem: WideString index 48 read GetWideStringProp write SetWideStringProp stored False;
    property ColumnCount: Smallint index 70 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnHeads: WordBool index 131 read GetWordBoolProp write SetWordBoolProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property UpdateMethod: Smallint index 142 read GetSmallintProp write SetSmallintProp stored False;
    property Enabled: WordBool index 25 read GetWordBoolProp write SetWordBoolProp stored False;
    property Locked: WordBool index 56 read GetWordBoolProp write SetWordBoolProp stored False;
    property StatusBarText: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property TabStop: WordBool index 262 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabIndex: Smallint index 261 read GetSmallintProp write SetSmallintProp stored False;
    property BackStyle: Byte index 29 read GetByteProp write SetByteProp stored False;
    property BackColor: Integer index 28 read GetIntegerProp write SetIntegerProp stored False;
    property SpecialEffect: Byte index 4 read GetByteProp write SetByteProp stored False;
    property BorderStyle: Byte index 9 read GetByteProp write SetByteProp stored False;
    property OldBorderStyle: Byte index 329 read GetByteProp write SetByteProp stored False;
    property BorderColor: Integer index 8 read GetIntegerProp write SetIntegerProp stored False;
    property BorderWidth: Byte index 10 read GetByteProp write SetByteProp stored False;
    property ShortcutMenuBar: WideString index 304 read GetWideStringProp write SetWideStringProp stored False;
    property ControlTipText: WideString index 317 read GetWideStringProp write SetWideStringProp stored False;
    property HelpContextId: Integer index 219 read GetIntegerProp write SetIntegerProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property LpOleObject: Integer index 172 read GetIntegerProp write SetIntegerProp stored False;
    property ObjectVerbsCount: Integer index 173 read GetIntegerProp write SetIntegerProp stored False;
    property Action: Smallint index 273 read GetSmallintProp write SetSmallintProp stored False;
    property Scaling: Byte index 88 read GetByteProp write SetByteProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property OnUpdated1: WideString index 118 read GetWideStringProp write SetWideStringProp stored False;
    property OnEnter1: WideString index 222 read GetWideStringProp write SetWideStringProp stored False;
    property OnExit1: WideString index 223 read GetWideStringProp write SetWideStringProp stored False;
    property OnGotFocus1: WideString index 115 read GetWideStringProp write SetWideStringProp stored False;
    property OnLostFocus1: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property LeftPadding: Smallint index 454 read GetSmallintProp write SetSmallintProp stored False;
    property TopPadding: Smallint index 455 read GetSmallintProp write SetSmallintProp stored False;
    property RightPadding: Smallint index 456 read GetSmallintProp write SetSmallintProp stored False;
    property BottomPadding: Smallint index 457 read GetSmallintProp write SetSmallintProp stored False;
    property GridlineStyleLeft: Byte index 458 read GetByteProp write SetByteProp stored False;
    property GridlineStyleTop: Byte index 459 read GetByteProp write SetByteProp stored False;
    property GridlineStyleRight: Byte index 460 read GetByteProp write SetByteProp stored False;
    property GridlineStyleBottom: Byte index 461 read GetByteProp write SetByteProp stored False;
    property GridlineWidthLeft: Byte index 463 read GetByteProp write SetByteProp stored False;
    property GridlineWidthTop: Byte index 464 read GetByteProp write SetByteProp stored False;
    property GridlineWidthRight: Byte index 465 read GetByteProp write SetByteProp stored False;
    property GridlineWidthBottom: Byte index 466 read GetByteProp write SetByteProp stored False;
    property GridlineColor: Integer index 462 read GetIntegerProp write SetIntegerProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property OnUpdated: TAccessObjectFrameUpdated read FOnUpdated write FOnUpdated;
    property OnEnter: TNotifyEvent read FOnEnter write FOnEnter;
    property OnExit: TAccessObjectFrameExit read FOnExit write FOnExit;
    property OnGotFocus: TNotifyEvent read FOnGotFocus write FOnGotFocus;
    property OnLostFocus: TNotifyEvent read FOnLostFocus write FOnLostFocus;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessCustomControl
// Help String      : 
// Default Interface: _CustomControl
// Def. Intf. DISP? : No
// Event   Interface: DispCustomControlEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessCustomControlUpdated = procedure(ASender: TObject; var Code: Smallint) of object;
  TAccessCustomControlExit = procedure(ASender: TObject; out Cancel: Smallint) of object;

  TAccessCustomControl = class(TOleControl)
  private
    FOnUpdated: TAccessCustomControlUpdated;
    FOnEnter: TNotifyEvent;
    FOnExit: TAccessCustomControlExit;
    FOnGotFocus: TNotifyEvent;
    FOnLostFocus: TNotifyEvent;
    FIntf: _CustomControl;
    function  GetControlInterface: _CustomControl;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_accParent: IDispatch;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_OldValue: OleVariant;
    function Get_Object_: IDispatch;
    function Get_ObjectVerbs(Index: Integer): WideString;
    function Get_Properties: Properties;
    function Get_Controls: Children;
    function Get_Value: OleVariant;
    procedure Set_Value(pRet: OleVariant);
    function Get_OleData: OleVariant;
    procedure Set_OleData(pRet: OleVariant);
    function Get_ObjectPalette: OleVariant;
    procedure Set_ObjectPalette(pRet: OleVariant);
  public
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure SizeToFit;
    procedure Requery;
    procedure Goto_;
    procedure SetFocus;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _CustomControl read GetControlInterface;
    property  DefaultInterface: _CustomControl read GetControlInterface;
    property accParent: IDispatch index -5000 read GetIDispatchProp;
    property accChildCount: Integer index -5001 read GetIntegerProp;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant index -5011 read GetOleVariantProp;
    property accSelection: OleVariant index -5012 read GetOleVariantProp;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property OldValue: OleVariant index 2102 read GetOleVariantProp;
    property Object_: IDispatch index 2104 read GetIDispatchProp;
    property ObjectVerbs[Index: Integer]: WideString read Get_ObjectVerbs;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Value: OleVariant index 0 read GetOleVariantProp write SetOleVariantProp;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property OleData: OleVariant index 171 read GetOleVariantProp write SetOleVariantProp;
    property BorderLineStyle: Byte index 11 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property ObjectPalette: OleVariant index 99 read GetOleVariantProp write SetOleVariantProp;
    property OnUpdatedMacro: WideString index 504 read GetWideStringProp write SetWideStringProp;
    property OnEnterMacro: WideString index 497 read GetWideStringProp write SetWideStringProp;
    property OnExitMacro: WideString index 498 read GetWideStringProp write SetWideStringProp;
    property OnGotFocusMacro: WideString index 502 read GetWideStringProp write SetWideStringProp;
    property OnLostFocusMacro: WideString index 503 read GetWideStringProp write SetWideStringProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property ControlSource: WideString index 27 read GetWideStringProp write SetWideStringProp stored False;
    property OLEClass: WideString index 76 read GetWideStringProp write SetWideStringProp stored False;
    property Verb: Integer index 102 read GetIntegerProp write SetIntegerProp stored False;
    property Class_: WideString index 274 read GetWideStringProp write SetWideStringProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property Enabled: WordBool index 25 read GetWordBoolProp write SetWordBoolProp stored False;
    property Locked: WordBool index 56 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabStop: WordBool index 262 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabIndex: Smallint index 261 read GetSmallintProp write SetSmallintProp stored False;
    property SpecialEffect: Byte index 4 read GetByteProp write SetByteProp stored False;
    property BorderStyle: Byte index 9 read GetByteProp write SetByteProp stored False;
    property OldBorderStyle: Byte index 329 read GetByteProp write SetByteProp stored False;
    property BorderColor: Integer index 8 read GetIntegerProp write SetIntegerProp stored False;
    property BorderWidth: Byte index 10 read GetByteProp write SetByteProp stored False;
    property ControlTipText: WideString index 317 read GetWideStringProp write SetWideStringProp stored False;
    property HelpContextId: Integer index 219 read GetIntegerProp write SetIntegerProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property LpOleObject: Integer index 172 read GetIntegerProp write SetIntegerProp stored False;
    property ObjectVerbsCount: Integer index 173 read GetIntegerProp write SetIntegerProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property OnUpdated1: WideString index 118 read GetWideStringProp write SetWideStringProp stored False;
    property OnEnter1: WideString index 222 read GetWideStringProp write SetWideStringProp stored False;
    property OnExit1: WideString index 223 read GetWideStringProp write SetWideStringProp stored False;
    property OnGotFocus1: WideString index 115 read GetWideStringProp write SetWideStringProp stored False;
    property OnLostFocus1: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property Default: WordBool index 220 read GetWordBoolProp write SetWordBoolProp stored False;
    property Cancel: WordBool index 221 read GetWordBoolProp write SetWordBoolProp stored False;
    property Custom: WideString index 296 read GetWideStringProp write SetWideStringProp stored False;
    property About: WideString index 297 read GetWideStringProp write SetWideStringProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property OnUpdated: TAccessCustomControlUpdated read FOnUpdated write FOnUpdated;
    property OnEnter: TNotifyEvent read FOnEnter write FOnEnter;
    property OnExit: TAccessCustomControlExit read FOnExit write FOnExit;
    property OnGotFocus: TNotifyEvent read FOnGotFocus write FOnGotFocus;
    property OnLostFocus: TNotifyEvent read FOnLostFocus write FOnLostFocus;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessCheckBox
// Help String      : 
// Default Interface: _Checkbox
// Def. Intf. DISP? : No
// Event   Interface: DispCheckBoxEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessCheckBoxBeforeUpdate = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessCheckBoxExit = procedure(ASender: TObject; out Cancel: Smallint) of object;

  TAccessCheckBox = class(TOleControl)
  private
    FOnBeforeUpdate: TAccessCheckBoxBeforeUpdate;
    FOnAfterUpdate: TNotifyEvent;
    FOnEnter: TNotifyEvent;
    FOnExit: TAccessCheckBoxExit;
    FOnGotFocus: TNotifyEvent;
    FOnLostFocus: TNotifyEvent;
    FIntf: _Checkbox;
    function  GetControlInterface: _Checkbox;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_accParent: IDispatch;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_OldValue: OleVariant;
    function Get_Properties: Properties;
    function Get_Controls: Children;
    function Get_Value: OleVariant;
    procedure Set_Value(pRet: OleVariant);
  public
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure Undo;
    procedure SizeToFit;
    procedure Requery;
    procedure Goto_;
    procedure SetFocus;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _Checkbox read GetControlInterface;
    property  DefaultInterface: _Checkbox read GetControlInterface;
    property accParent: IDispatch index -5000 read GetIDispatchProp;
    property accChildCount: Integer index -5001 read GetIntegerProp;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant index -5011 read GetOleVariantProp;
    property accSelection: OleVariant index -5012 read GetOleVariantProp;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property OldValue: OleVariant index 2102 read GetOleVariantProp;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Value: OleVariant index 0 read GetOleVariantProp write SetOleVariantProp;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property BorderLineStyle: Byte index 11 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property BeforeUpdateMacro: WideString index 496 read GetWideStringProp write SetWideStringProp;
    property AfterUpdateMacro: WideString index 505 read GetWideStringProp write SetWideStringProp;
    property OnEnterMacro: WideString index 497 read GetWideStringProp write SetWideStringProp;
    property OnExitMacro: WideString index 498 read GetWideStringProp write SetWideStringProp;
    property OnGotFocusMacro: WideString index 502 read GetWideStringProp write SetWideStringProp;
    property OnLostFocusMacro: WideString index 503 read GetWideStringProp write SetWideStringProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
    property OnKeyDownMacro: WideString index 500 read GetWideStringProp write SetWideStringProp;
    property OnKeyUpMacro: WideString index 501 read GetWideStringProp write SetWideStringProp;
    property OnKeyPressMacro: WideString index 499 read GetWideStringProp write SetWideStringProp;
    property Layout: TOleEnum index 2460 read GetTOleEnumProp;
    property LayoutID: Integer index 2492 read GetIntegerProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property OptionValue: Integer index 58 read GetIntegerProp write SetIntegerProp stored False;
    property ControlSource: WideString index 27 read GetWideStringProp write SetWideStringProp stored False;
    property DefaultValue: WideString index 23 read GetWideStringProp write SetWideStringProp stored False;
    property ValidationRule: WideString index 145 read GetWideStringProp write SetWideStringProp stored False;
    property ValidationText: WideString index 61 read GetWideStringProp write SetWideStringProp stored False;
    property StatusBarText: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property Enabled: WordBool index 25 read GetWordBoolProp write SetWordBoolProp stored False;
    property Locked: WordBool index 56 read GetWordBoolProp write SetWordBoolProp stored False;
    property TripleState: WordBool index 294 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabStop: WordBool index 262 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabIndex: Smallint index 261 read GetSmallintProp write SetSmallintProp stored False;
    property HideDuplicates: WordBool index 69 read GetWordBoolProp write SetWordBoolProp stored False;
    property SpecialEffect: Byte index 4 read GetByteProp write SetByteProp stored False;
    property BorderStyle: Byte index 9 read GetByteProp write SetByteProp stored False;
    property OldBorderStyle: Byte index 329 read GetByteProp write SetByteProp stored False;
    property BorderWidth: Byte index 10 read GetByteProp write SetByteProp stored False;
    property BorderColor: Integer index 8 read GetIntegerProp write SetIntegerProp stored False;
    property ShortcutMenuBar: WideString index 304 read GetWideStringProp write SetWideStringProp stored False;
    property ControlTipText: WideString index 317 read GetWideStringProp write SetWideStringProp stored False;
    property HelpContextId: Integer index 219 read GetIntegerProp write SetIntegerProp stored False;
    property ColumnWidth: Smallint index 166 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnOrder: Smallint index 165 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnHidden: WordBool index 167 read GetWordBoolProp write SetWordBoolProp stored False;
    property AutoLabel: WordBool index 57 read GetWordBoolProp write SetWordBoolProp stored False;
    property AddColon: WordBool index 3 read GetWordBoolProp write SetWordBoolProp stored False;
    property LabelX: Smallint index 52 read GetSmallintProp write SetSmallintProp stored False;
    property LabelY: Smallint index 53 read GetSmallintProp write SetSmallintProp stored False;
    property LabelAlign: Byte index 51 read GetByteProp write SetByteProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property BeforeUpdate: WideString index 85 read GetWideStringProp write SetWideStringProp stored False;
    property AfterUpdate: WideString index 86 read GetWideStringProp write SetWideStringProp stored False;
    property OnEnter1: WideString index 222 read GetWideStringProp write SetWideStringProp stored False;
    property OnExit1: WideString index 223 read GetWideStringProp write SetWideStringProp stored False;
    property OnGotFocus1: WideString index 115 read GetWideStringProp write SetWideStringProp stored False;
    property OnLostFocus1: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyDown: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyUp: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyPress: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property ReadingOrder: Byte index 367 read GetByteProp write SetByteProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property LeftPadding: Smallint index 454 read GetSmallintProp write SetSmallintProp stored False;
    property TopPadding: Smallint index 455 read GetSmallintProp write SetSmallintProp stored False;
    property RightPadding: Smallint index 456 read GetSmallintProp write SetSmallintProp stored False;
    property BottomPadding: Smallint index 457 read GetSmallintProp write SetSmallintProp stored False;
    property GridlineStyleLeft: Byte index 458 read GetByteProp write SetByteProp stored False;
    property GridlineStyleTop: Byte index 459 read GetByteProp write SetByteProp stored False;
    property GridlineStyleRight: Byte index 460 read GetByteProp write SetByteProp stored False;
    property GridlineStyleBottom: Byte index 461 read GetByteProp write SetByteProp stored False;
    property GridlineWidthLeft: Byte index 463 read GetByteProp write SetByteProp stored False;
    property GridlineWidthTop: Byte index 464 read GetByteProp write SetByteProp stored False;
    property GridlineWidthRight: Byte index 465 read GetByteProp write SetByteProp stored False;
    property GridlineWidthBottom: Byte index 466 read GetByteProp write SetByteProp stored False;
    property GridlineColor: Integer index 462 read GetIntegerProp write SetIntegerProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property OnBeforeUpdate: TAccessCheckBoxBeforeUpdate read FOnBeforeUpdate write FOnBeforeUpdate;
    property OnAfterUpdate: TNotifyEvent read FOnAfterUpdate write FOnAfterUpdate;
    property OnEnter: TNotifyEvent read FOnEnter write FOnEnter;
    property OnExit: TAccessCheckBoxExit read FOnExit write FOnExit;
    property OnGotFocus: TNotifyEvent read FOnGotFocus write FOnGotFocus;
    property OnLostFocus: TNotifyEvent read FOnLostFocus write FOnLostFocus;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessOptionButton
// Help String      : 
// Default Interface: _OptionButton
// Def. Intf. DISP? : No
// Event   Interface: DispOptionButtonEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessOptionButtonBeforeUpdate = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessOptionButtonExit = procedure(ASender: TObject; out Cancel: Smallint) of object;

  TAccessOptionButton = class(TOleControl)
  private
    FOnBeforeUpdate: TAccessOptionButtonBeforeUpdate;
    FOnAfterUpdate: TNotifyEvent;
    FOnEnter: TNotifyEvent;
    FOnExit: TAccessOptionButtonExit;
    FOnGotFocus: TNotifyEvent;
    FOnLostFocus: TNotifyEvent;
    FIntf: _OptionButton;
    function  GetControlInterface: _OptionButton;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_accParent: IDispatch;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_OldValue: OleVariant;
    function Get_Properties: Properties;
    function Get_Controls: Children;
    function Get_Value: OleVariant;
    procedure Set_Value(pRet: OleVariant);
  public
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure SizeToFit;
    procedure Requery;
    procedure Goto_;
    procedure SetFocus;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _OptionButton read GetControlInterface;
    property  DefaultInterface: _OptionButton read GetControlInterface;
    property accParent: IDispatch index -5000 read GetIDispatchProp;
    property accChildCount: Integer index -5001 read GetIntegerProp;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant index -5011 read GetOleVariantProp;
    property accSelection: OleVariant index -5012 read GetOleVariantProp;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property OldValue: OleVariant index 2102 read GetOleVariantProp;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Value: OleVariant index 0 read GetOleVariantProp write SetOleVariantProp;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property BorderLineStyle: Byte index 11 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property BeforeUpdateMacro: WideString index 496 read GetWideStringProp write SetWideStringProp;
    property AfterUpdateMacro: WideString index 505 read GetWideStringProp write SetWideStringProp;
    property OnEnterMacro: WideString index 497 read GetWideStringProp write SetWideStringProp;
    property OnExitMacro: WideString index 498 read GetWideStringProp write SetWideStringProp;
    property OnGotFocusMacro: WideString index 502 read GetWideStringProp write SetWideStringProp;
    property OnLostFocusMacro: WideString index 503 read GetWideStringProp write SetWideStringProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
    property OnKeyDownMacro: WideString index 500 read GetWideStringProp write SetWideStringProp;
    property OnKeyUpMacro: WideString index 501 read GetWideStringProp write SetWideStringProp;
    property OnKeyPressMacro: WideString index 499 read GetWideStringProp write SetWideStringProp;
    property Layout: TOleEnum index 2460 read GetTOleEnumProp;
    property LayoutID: Integer index 2492 read GetIntegerProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property OptionValue: Integer index 58 read GetIntegerProp write SetIntegerProp stored False;
    property ControlSource: WideString index 27 read GetWideStringProp write SetWideStringProp stored False;
    property DefaultValue: WideString index 23 read GetWideStringProp write SetWideStringProp stored False;
    property ValidationRule: WideString index 145 read GetWideStringProp write SetWideStringProp stored False;
    property ValidationText: WideString index 61 read GetWideStringProp write SetWideStringProp stored False;
    property StatusBarText: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property Enabled: WordBool index 25 read GetWordBoolProp write SetWordBoolProp stored False;
    property Locked: WordBool index 56 read GetWordBoolProp write SetWordBoolProp stored False;
    property TripleState: WordBool index 294 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabStop: WordBool index 262 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabIndex: Smallint index 261 read GetSmallintProp write SetSmallintProp stored False;
    property HideDuplicates: WordBool index 69 read GetWordBoolProp write SetWordBoolProp stored False;
    property SpecialEffect: Byte index 4 read GetByteProp write SetByteProp stored False;
    property BorderStyle: Byte index 9 read GetByteProp write SetByteProp stored False;
    property OldBorderStyle: Byte index 329 read GetByteProp write SetByteProp stored False;
    property BorderWidth: Byte index 10 read GetByteProp write SetByteProp stored False;
    property BorderColor: Integer index 8 read GetIntegerProp write SetIntegerProp stored False;
    property ShortcutMenuBar: WideString index 304 read GetWideStringProp write SetWideStringProp stored False;
    property ControlTipText: WideString index 317 read GetWideStringProp write SetWideStringProp stored False;
    property HelpContextId: Integer index 219 read GetIntegerProp write SetIntegerProp stored False;
    property ColumnWidth: Smallint index 166 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnOrder: Smallint index 165 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnHidden: WordBool index 167 read GetWordBoolProp write SetWordBoolProp stored False;
    property AutoLabel: WordBool index 57 read GetWordBoolProp write SetWordBoolProp stored False;
    property AddColon: WordBool index 3 read GetWordBoolProp write SetWordBoolProp stored False;
    property LabelX: Smallint index 52 read GetSmallintProp write SetSmallintProp stored False;
    property LabelY: Smallint index 53 read GetSmallintProp write SetSmallintProp stored False;
    property LabelAlign: Byte index 51 read GetByteProp write SetByteProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property BeforeUpdate: WideString index 85 read GetWideStringProp write SetWideStringProp stored False;
    property AfterUpdate: WideString index 86 read GetWideStringProp write SetWideStringProp stored False;
    property OnEnter1: WideString index 222 read GetWideStringProp write SetWideStringProp stored False;
    property OnExit1: WideString index 223 read GetWideStringProp write SetWideStringProp stored False;
    property OnGotFocus1: WideString index 115 read GetWideStringProp write SetWideStringProp stored False;
    property OnLostFocus1: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyDown: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyUp: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyPress: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property ReadingOrder: Byte index 367 read GetByteProp write SetByteProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property LeftPadding: Smallint index 454 read GetSmallintProp write SetSmallintProp stored False;
    property TopPadding: Smallint index 455 read GetSmallintProp write SetSmallintProp stored False;
    property RightPadding: Smallint index 456 read GetSmallintProp write SetSmallintProp stored False;
    property BottomPadding: Smallint index 457 read GetSmallintProp write SetSmallintProp stored False;
    property GridlineStyleLeft: Byte index 458 read GetByteProp write SetByteProp stored False;
    property GridlineStyleTop: Byte index 459 read GetByteProp write SetByteProp stored False;
    property GridlineStyleRight: Byte index 460 read GetByteProp write SetByteProp stored False;
    property GridlineStyleBottom: Byte index 461 read GetByteProp write SetByteProp stored False;
    property GridlineWidthLeft: Byte index 463 read GetByteProp write SetByteProp stored False;
    property GridlineWidthTop: Byte index 464 read GetByteProp write SetByteProp stored False;
    property GridlineWidthRight: Byte index 465 read GetByteProp write SetByteProp stored False;
    property GridlineWidthBottom: Byte index 466 read GetByteProp write SetByteProp stored False;
    property GridlineColor: Integer index 462 read GetIntegerProp write SetIntegerProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property OnBeforeUpdate: TAccessOptionButtonBeforeUpdate read FOnBeforeUpdate write FOnBeforeUpdate;
    property OnAfterUpdate: TNotifyEvent read FOnAfterUpdate write FOnAfterUpdate;
    property OnEnter: TNotifyEvent read FOnEnter write FOnEnter;
    property OnExit: TAccessOptionButtonExit read FOnExit write FOnExit;
    property OnGotFocus: TNotifyEvent read FOnGotFocus write FOnGotFocus;
    property OnLostFocus: TNotifyEvent read FOnLostFocus write FOnLostFocus;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessToggleButton
// Help String      : 
// Default Interface: _ToggleButton
// Def. Intf. DISP? : No
// Event   Interface: DispToggleButtonEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessToggleButtonBeforeUpdate = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessToggleButtonExit = procedure(ASender: TObject; out Cancel: Smallint) of object;

  TAccessToggleButton = class(TOleControl)
  private
    FOnBeforeUpdate: TAccessToggleButtonBeforeUpdate;
    FOnAfterUpdate: TNotifyEvent;
    FOnEnter: TNotifyEvent;
    FOnExit: TAccessToggleButtonExit;
    FOnGotFocus: TNotifyEvent;
    FOnLostFocus: TNotifyEvent;
    FIntf: _ToggleButton;
    function  GetControlInterface: _ToggleButton;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_accParent: IDispatch;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_OldValue: OleVariant;
    function Get_Properties: Properties;
    function Get_Controls: Children;
    function Get_Value: OleVariant;
    procedure Set_Value(pRet: OleVariant);
    function Get_PictureData: OleVariant;
    procedure Set_PictureData(pRet: OleVariant);
    function Get_ObjectPalette: OleVariant;
    procedure Set_ObjectPalette(pRet: OleVariant);
  public
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure Undo;
    procedure SizeToFit;
    procedure Requery;
    procedure Goto_;
    procedure SetFocus;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _ToggleButton read GetControlInterface;
    property  DefaultInterface: _ToggleButton read GetControlInterface;
    property accParent: IDispatch index -5000 read GetIDispatchProp;
    property accChildCount: Integer index -5001 read GetIntegerProp;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant index -5011 read GetOleVariantProp;
    property accSelection: OleVariant index -5012 read GetOleVariantProp;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property OldValue: OleVariant index 2102 read GetOleVariantProp;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Value: OleVariant index 0 read GetOleVariantProp write SetOleVariantProp;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property PictureData: OleVariant index 188 read GetOleVariantProp write SetOleVariantProp;
    property TextFontCharSet: Byte index 193 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property ObjectPalette: OleVariant index 99 read GetOleVariantProp write SetOleVariantProp;
    property BeforeUpdateMacro: WideString index 496 read GetWideStringProp write SetWideStringProp;
    property AfterUpdateMacro: WideString index 505 read GetWideStringProp write SetWideStringProp;
    property OnEnterMacro: WideString index 497 read GetWideStringProp write SetWideStringProp;
    property OnExitMacro: WideString index 498 read GetWideStringProp write SetWideStringProp;
    property OnGotFocusMacro: WideString index 502 read GetWideStringProp write SetWideStringProp;
    property OnLostFocusMacro: WideString index 503 read GetWideStringProp write SetWideStringProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
    property OnKeyDownMacro: WideString index 500 read GetWideStringProp write SetWideStringProp;
    property OnKeyUpMacro: WideString index 501 read GetWideStringProp write SetWideStringProp;
    property OnKeyPressMacro: WideString index 499 read GetWideStringProp write SetWideStringProp;
    property Layout: TOleEnum index 2460 read GetTOleEnumProp;
    property LayoutID: Integer index 2492 read GetIntegerProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property ControlSource: WideString index 27 read GetWideStringProp write SetWideStringProp stored False;
    property Caption: WideString index 17 read GetWideStringProp write SetWideStringProp stored False;
    property Picture: WideString index 7 read GetWideStringProp write SetWideStringProp stored False;
    property PictureType: Byte index 341 read GetByteProp write SetByteProp stored False;
    property OptionValue: Integer index 58 read GetIntegerProp write SetIntegerProp stored False;
    property DefaultValue: WideString index 23 read GetWideStringProp write SetWideStringProp stored False;
    property ValidationRule: WideString index 145 read GetWideStringProp write SetWideStringProp stored False;
    property ValidationText: WideString index 61 read GetWideStringProp write SetWideStringProp stored False;
    property StatusBarText: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property Enabled: WordBool index 25 read GetWordBoolProp write SetWordBoolProp stored False;
    property Locked: WordBool index 56 read GetWordBoolProp write SetWordBoolProp stored False;
    property TripleState: WordBool index 294 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabStop: WordBool index 262 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabIndex: Smallint index 261 read GetSmallintProp write SetSmallintProp stored False;
    property HideDuplicates: WordBool index 69 read GetWordBoolProp write SetWordBoolProp stored False;
    property ForeColor: Integer index 204 read GetIntegerProp write SetIntegerProp stored False;
    property FontName: WideString index 34 read GetWideStringProp write SetWideStringProp stored False;
    property FontSize: Smallint index 35 read GetSmallintProp write SetSmallintProp stored False;
    property FontWeight: Smallint index 37 read GetSmallintProp write SetSmallintProp stored False;
    property FontItalic: WordBool index 33 read GetWordBoolProp write SetWordBoolProp stored False;
    property FontUnderline: WordBool index 36 read GetWordBoolProp write SetWordBoolProp stored False;
    property FontBold: Smallint index 32 read GetSmallintProp write SetSmallintProp stored False;
    property ShortcutMenuBar: WideString index 304 read GetWideStringProp write SetWideStringProp stored False;
    property ControlTipText: WideString index 317 read GetWideStringProp write SetWideStringProp stored False;
    property HelpContextId: Integer index 219 read GetIntegerProp write SetIntegerProp stored False;
    property ColumnWidth: Smallint index 166 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnOrder: Smallint index 165 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnHidden: WordBool index 167 read GetWordBoolProp write SetWordBoolProp stored False;
    property AutoLabel: WordBool index 57 read GetWordBoolProp write SetWordBoolProp stored False;
    property AddColon: WordBool index 3 read GetWordBoolProp write SetWordBoolProp stored False;
    property LabelX: Smallint index 52 read GetSmallintProp write SetSmallintProp stored False;
    property LabelY: Smallint index 53 read GetSmallintProp write SetSmallintProp stored False;
    property LabelAlign: Byte index 51 read GetByteProp write SetByteProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property BeforeUpdate: WideString index 85 read GetWideStringProp write SetWideStringProp stored False;
    property AfterUpdate: WideString index 86 read GetWideStringProp write SetWideStringProp stored False;
    property OnEnter1: WideString index 222 read GetWideStringProp write SetWideStringProp stored False;
    property OnExit1: WideString index 223 read GetWideStringProp write SetWideStringProp stored False;
    property OnGotFocus1: WideString index 115 read GetWideStringProp write SetWideStringProp stored False;
    property OnLostFocus1: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyDown: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyUp: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyPress: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property ReadingOrder: Byte index 367 read GetByteProp write SetByteProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property LeftPadding: Smallint index 454 read GetSmallintProp write SetSmallintProp stored False;
    property TopPadding: Smallint index 455 read GetSmallintProp write SetSmallintProp stored False;
    property RightPadding: Smallint index 456 read GetSmallintProp write SetSmallintProp stored False;
    property BottomPadding: Smallint index 457 read GetSmallintProp write SetSmallintProp stored False;
    property GridlineStyleLeft: Byte index 458 read GetByteProp write SetByteProp stored False;
    property GridlineStyleTop: Byte index 459 read GetByteProp write SetByteProp stored False;
    property GridlineStyleRight: Byte index 460 read GetByteProp write SetByteProp stored False;
    property GridlineStyleBottom: Byte index 461 read GetByteProp write SetByteProp stored False;
    property GridlineWidthLeft: Byte index 463 read GetByteProp write SetByteProp stored False;
    property GridlineWidthTop: Byte index 464 read GetByteProp write SetByteProp stored False;
    property GridlineWidthRight: Byte index 465 read GetByteProp write SetByteProp stored False;
    property GridlineWidthBottom: Byte index 466 read GetByteProp write SetByteProp stored False;
    property GridlineColor: Integer index 462 read GetIntegerProp write SetIntegerProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property OnBeforeUpdate: TAccessToggleButtonBeforeUpdate read FOnBeforeUpdate write FOnBeforeUpdate;
    property OnAfterUpdate: TNotifyEvent read FOnAfterUpdate write FOnAfterUpdate;
    property OnEnter: TNotifyEvent read FOnEnter write FOnEnter;
    property OnExit: TAccessToggleButtonExit read FOnExit write FOnExit;
    property OnGotFocus: TNotifyEvent read FOnGotFocus write FOnGotFocus;
    property OnLostFocus: TNotifyEvent read FOnLostFocus write FOnLostFocus;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessRectangle
// Help String      : 
// Default Interface: _Rectangle
// Def. Intf. DISP? : No
// Event   Interface: DispRectangleEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessRectangle = class(TOleControl)
  private
    FIntf: _Rectangle;
    function  GetControlInterface: _Rectangle;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Properties: Properties;
  public
    procedure SizeToFit;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _Rectangle read GetControlInterface;
    property  DefaultInterface: _Rectangle read GetControlInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property Properties: Properties read Get_Properties;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property BorderLineStyle: Byte index 11 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property BackStyle: Byte index 29 read GetByteProp write SetByteProp stored False;
    property BackColor: Integer index 28 read GetIntegerProp write SetIntegerProp stored False;
    property SpecialEffect: Byte index 4 read GetByteProp write SetByteProp stored False;
    property BorderStyle: Byte index 9 read GetByteProp write SetByteProp stored False;
    property OldBorderStyle: Byte index 329 read GetByteProp write SetByteProp stored False;
    property BorderColor: Integer index 8 read GetIntegerProp write SetIntegerProp stored False;
    property BorderWidth: Byte index 10 read GetByteProp write SetByteProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessImage
// Help String      : 
// Default Interface: _Image
// Def. Intf. DISP? : No
// Event   Interface: DispImageEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessImage = class(TOleControl)
  private
    FIntf: _Image;
    function  GetControlInterface: _Image;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_OldValue: OleVariant;
    function Get_Properties: Properties;
    function Get_Controls: Children;
    function Get_Hyperlink: _Hyperlink;
    function Get_PictureData: OleVariant;
    procedure Set_PictureData(pRet: OleVariant);
    function Get_ObjectPalette: OleVariant;
    procedure Set_ObjectPalette(pRet: OleVariant);
  public
    procedure SizeToFit;
    procedure Requery;
    procedure Goto_;
    procedure SetFocus;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _Image read GetControlInterface;
    property  DefaultInterface: _Image read GetControlInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property OldValue: OleVariant index 2102 read GetOleVariantProp;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Hyperlink: _Hyperlink read Get_Hyperlink;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property PictureData: OleVariant index 188 read GetOleVariantProp write SetOleVariantProp;
    property BorderLineStyle: Byte index 11 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property ObjectPalette: OleVariant index 99 read GetOleVariantProp write SetOleVariantProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
    property Layout: TOleEnum index 2460 read GetTOleEnumProp;
    property LayoutID: Integer index 2492 read GetIntegerProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property Picture: WideString index 7 read GetWideStringProp write SetWideStringProp stored False;
    property PictureType: Byte index 341 read GetByteProp write SetByteProp stored False;
    property SizeMode: Byte index 89 read GetByteProp write SetByteProp stored False;
    property PictureAlignment: Byte index 309 read GetByteProp write SetByteProp stored False;
    property PictureTiling: WordBool index 313 read GetWordBoolProp write SetWordBoolProp stored False;
    property HyperlinkAddress: WideString index 343 read GetWideStringProp write SetWideStringProp stored False;
    property HyperlinkSubAddress: WideString index 347 read GetWideStringProp write SetWideStringProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property BackStyle: Byte index 29 read GetByteProp write SetByteProp stored False;
    property BackColor: Integer index 28 read GetIntegerProp write SetIntegerProp stored False;
    property SpecialEffect: Byte index 4 read GetByteProp write SetByteProp stored False;
    property BorderStyle: Byte index 9 read GetByteProp write SetByteProp stored False;
    property OldBorderStyle: Byte index 329 read GetByteProp write SetByteProp stored False;
    property BorderColor: Integer index 8 read GetIntegerProp write SetIntegerProp stored False;
    property BorderWidth: Byte index 10 read GetByteProp write SetByteProp stored False;
    property ControlTipText: WideString index 317 read GetWideStringProp write SetWideStringProp stored False;
    property HelpContextId: Integer index 219 read GetIntegerProp write SetIntegerProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property ShortcutMenuBar: WideString index 304 read GetWideStringProp write SetWideStringProp stored False;
    property ImageHeight: Integer index 307 read GetIntegerProp write SetIntegerProp stored False;
    property ImageWidth: Integer index 308 read GetIntegerProp write SetIntegerProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property LeftPadding: Smallint index 454 read GetSmallintProp write SetSmallintProp stored False;
    property TopPadding: Smallint index 455 read GetSmallintProp write SetSmallintProp stored False;
    property RightPadding: Smallint index 456 read GetSmallintProp write SetSmallintProp stored False;
    property BottomPadding: Smallint index 457 read GetSmallintProp write SetSmallintProp stored False;
    property GridlineStyleLeft: Byte index 458 read GetByteProp write SetByteProp stored False;
    property GridlineStyleTop: Byte index 459 read GetByteProp write SetByteProp stored False;
    property GridlineStyleRight: Byte index 460 read GetByteProp write SetByteProp stored False;
    property GridlineStyleBottom: Byte index 461 read GetByteProp write SetByteProp stored False;
    property GridlineWidthLeft: Byte index 463 read GetByteProp write SetByteProp stored False;
    property GridlineWidthTop: Byte index 464 read GetByteProp write SetByteProp stored False;
    property GridlineWidthRight: Byte index 465 read GetByteProp write SetByteProp stored False;
    property GridlineWidthBottom: Byte index 466 read GetByteProp write SetByteProp stored False;
    property GridlineColor: Integer index 462 read GetIntegerProp write SetIntegerProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessListBox
// Help String      : 
// Default Interface: _ListBox
// Def. Intf. DISP? : No
// Event   Interface: DispListBoxEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessListBoxBeforeUpdate = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessListBoxExit = procedure(ASender: TObject; out Cancel: Smallint) of object;

  TAccessListBox = class(TOleControl)
  private
    FOnBeforeUpdate: TAccessListBoxBeforeUpdate;
    FOnAfterUpdate: TNotifyEvent;
    FOnEnter: TNotifyEvent;
    FOnExit: TAccessListBoxExit;
    FOnGotFocus: TNotifyEvent;
    FOnLostFocus: TNotifyEvent;
    FIntf: _ListBox;
    function  GetControlInterface: _ListBox;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_accParent: IDispatch;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Column(Index: Integer; Row: OleVariant): OleVariant;
    function Get_Selected(lRow: Integer): Integer;
    procedure Set_Selected(lRow: Integer; pRet: Integer);
    function Get_OldValue: OleVariant;
    function Get_ItemData(Index: Integer): OleVariant;
    function Get_Properties: Properties;
    function Get_Controls: Children;
    function Get_ItemsSelected: _ItemsSelected;
    function Get_Hyperlink: _Hyperlink;
    function Get_Value: OleVariant;
    procedure Set_Value(pRet: OleVariant);
    function Get_Recordset: IDispatch;
    procedure _Set_Recordset(const pRet: IDispatch);
    function Get_SmartTags: _SmartTags;
  public
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure Undo;
    procedure SizeToFit;
    procedure Requery;
    procedure Goto_;
    procedure SetFocus;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    procedure AddItem(const Item: WideString); overload;
    procedure AddItem(const Item: WideString; Index: OleVariant); overload;
    procedure RemoveItem(Index: OleVariant);
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _ListBox read GetControlInterface;
    property  DefaultInterface: _ListBox read GetControlInterface;
    property accParent: IDispatch index -5000 read GetIDispatchProp;
    property accChildCount: Integer index -5001 read GetIntegerProp;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant index -5011 read GetOleVariantProp;
    property accSelection: OleVariant index -5012 read GetOleVariantProp;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property Column[Index: Integer; Row: OleVariant]: OleVariant read Get_Column;
    property Selected[lRow: Integer]: Integer read Get_Selected write Set_Selected;
    property OldValue: OleVariant index 2102 read GetOleVariantProp;
    property ItemData[Index: Integer]: OleVariant read Get_ItemData;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property ItemsSelected: _ItemsSelected read Get_ItemsSelected;
    property Hyperlink: _Hyperlink read Get_Hyperlink;
    property Value: OleVariant index 0 read GetOleVariantProp write SetOleVariantProp;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property BorderLineStyle: Byte index 11 read GetByteProp write SetByteProp;
    property TextFontCharSet: Byte index 193 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property TextAlign: Byte index 136 read GetByteProp write SetByteProp;
    property Recordset: IDispatch index 2196 read GetIDispatchProp;
    property SmartTags: _SmartTags read Get_SmartTags;
    property Layout: TOleEnum index 2460 read GetTOleEnumProp;
    property BeforeUpdateMacro: WideString index 496 read GetWideStringProp write SetWideStringProp;
    property AfterUpdateMacro: WideString index 505 read GetWideStringProp write SetWideStringProp;
    property OnEnterMacro: WideString index 497 read GetWideStringProp write SetWideStringProp;
    property OnExitMacro: WideString index 498 read GetWideStringProp write SetWideStringProp;
    property OnGotFocusMacro: WideString index 502 read GetWideStringProp write SetWideStringProp;
    property OnLostFocusMacro: WideString index 503 read GetWideStringProp write SetWideStringProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
    property OnKeyDownMacro: WideString index 500 read GetWideStringProp write SetWideStringProp;
    property OnKeyUpMacro: WideString index 501 read GetWideStringProp write SetWideStringProp;
    property OnKeyPressMacro: WideString index 499 read GetWideStringProp write SetWideStringProp;
    property LayoutID: Integer index 2492 read GetIntegerProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property ControlSource: WideString index 27 read GetWideStringProp write SetWideStringProp stored False;
    property RowSourceType: WideString index 93 read GetWideStringProp write SetWideStringProp stored False;
    property RowSource: WideString index 91 read GetWideStringProp write SetWideStringProp stored False;
    property ColumnCount: Smallint index 70 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnHeads: WordBool index 131 read GetWordBoolProp write SetWordBoolProp stored False;
    property ColumnWidths: WideString index 18 read GetWideStringProp write SetWideStringProp stored False;
    property BoundColumn: Integer index 13 read GetIntegerProp write SetIntegerProp stored False;
    property DefaultValue: WideString index 23 read GetWideStringProp write SetWideStringProp stored False;
    property IMEHold: WordBool index 357 read GetWordBoolProp write SetWordBoolProp stored False;
    property ValidationRule: WideString index 145 read GetWideStringProp write SetWideStringProp stored False;
    property ValidationText: WideString index 61 read GetWideStringProp write SetWideStringProp stored False;
    property StatusBarText: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property Enabled: WordBool index 25 read GetWordBoolProp write SetWordBoolProp stored False;
    property Locked: WordBool index 56 read GetWordBoolProp write SetWordBoolProp stored False;
    property MultiSelect: Byte index 293 read GetByteProp write SetByteProp stored False;
    property TabStop: WordBool index 262 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabIndex: Smallint index 261 read GetSmallintProp write SetSmallintProp stored False;
    property HideDuplicates: WordBool index 69 read GetWordBoolProp write SetWordBoolProp stored False;
    property BackColor: Integer index 28 read GetIntegerProp write SetIntegerProp stored False;
    property SpecialEffect: Byte index 4 read GetByteProp write SetByteProp stored False;
    property BorderStyle: Byte index 9 read GetByteProp write SetByteProp stored False;
    property OldBorderStyle: Byte index 329 read GetByteProp write SetByteProp stored False;
    property BorderWidth: Byte index 10 read GetByteProp write SetByteProp stored False;
    property BorderColor: Integer index 8 read GetIntegerProp write SetIntegerProp stored False;
    property ForeColor: Integer index 204 read GetIntegerProp write SetIntegerProp stored False;
    property FontName: WideString index 34 read GetWideStringProp write SetWideStringProp stored False;
    property FontSize: Smallint index 35 read GetSmallintProp write SetSmallintProp stored False;
    property FontWeight: Smallint index 37 read GetSmallintProp write SetSmallintProp stored False;
    property FontItalic: WordBool index 33 read GetWordBoolProp write SetWordBoolProp stored False;
    property FontUnderline: WordBool index 36 read GetWordBoolProp write SetWordBoolProp stored False;
    property FontBold: Smallint index 32 read GetSmallintProp write SetSmallintProp stored False;
    property ShortcutMenuBar: WideString index 304 read GetWideStringProp write SetWideStringProp stored False;
    property ControlTipText: WideString index 317 read GetWideStringProp write SetWideStringProp stored False;
    property HelpContextId: Integer index 219 read GetIntegerProp write SetIntegerProp stored False;
    property ColumnWidth: Smallint index 166 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnOrder: Smallint index 165 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnHidden: WordBool index 167 read GetWordBoolProp write SetWordBoolProp stored False;
    property AutoLabel: WordBool index 57 read GetWordBoolProp write SetWordBoolProp stored False;
    property AddColon: WordBool index 3 read GetWordBoolProp write SetWordBoolProp stored False;
    property LabelX: Smallint index 52 read GetSmallintProp write SetSmallintProp stored False;
    property LabelY: Smallint index 53 read GetSmallintProp write SetSmallintProp stored False;
    property LabelAlign: Byte index 51 read GetByteProp write SetByteProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property ListCount: Integer index 238 read GetIntegerProp write SetIntegerProp stored False;
    property ListIndex: Integer index 239 read GetIntegerProp write SetIntegerProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property BeforeUpdate: WideString index 85 read GetWideStringProp write SetWideStringProp stored False;
    property AfterUpdate: WideString index 86 read GetWideStringProp write SetWideStringProp stored False;
    property OnEnter1: WideString index 222 read GetWideStringProp write SetWideStringProp stored False;
    property OnExit1: WideString index 223 read GetWideStringProp write SetWideStringProp stored False;
    property OnGotFocus1: WideString index 115 read GetWideStringProp write SetWideStringProp stored False;
    property OnLostFocus1: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyDown: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyUp: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyPress: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property ReadingOrder: Byte index 367 read GetByteProp write SetByteProp stored False;
    property ScrollBarAlign: Byte index 371 read GetByteProp write SetByteProp stored False;
    property NumeralShapes: Byte index 372 read GetByteProp write SetByteProp stored False;
    property IMEMode: TOleEnum index 356 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property IMESentenceMode: TOleEnum index 379 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property LeftPadding: Smallint index 454 read GetSmallintProp write SetSmallintProp stored False;
    property TopPadding: Smallint index 455 read GetSmallintProp write SetSmallintProp stored False;
    property RightPadding: Smallint index 456 read GetSmallintProp write SetSmallintProp stored False;
    property BottomPadding: Smallint index 457 read GetSmallintProp write SetSmallintProp stored False;
    property GridlineStyleLeft: Byte index 458 read GetByteProp write SetByteProp stored False;
    property GridlineStyleTop: Byte index 459 read GetByteProp write SetByteProp stored False;
    property GridlineStyleRight: Byte index 460 read GetByteProp write SetByteProp stored False;
    property GridlineStyleBottom: Byte index 461 read GetByteProp write SetByteProp stored False;
    property GridlineWidthLeft: Byte index 463 read GetByteProp write SetByteProp stored False;
    property GridlineWidthTop: Byte index 464 read GetByteProp write SetByteProp stored False;
    property GridlineWidthRight: Byte index 465 read GetByteProp write SetByteProp stored False;
    property GridlineWidthBottom: Byte index 466 read GetByteProp write SetByteProp stored False;
    property GridlineColor: Integer index 462 read GetIntegerProp write SetIntegerProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property AllowValueListEdits: WordBool index 556 read GetWordBoolProp write SetWordBoolProp stored False;
    property ListItemsEditForm: WideString index 557 read GetWideStringProp write SetWideStringProp stored False;
    property InheritValueList: WordBool index 568 read GetWordBoolProp write SetWordBoolProp stored False;
    property ShowOnlyRowSourceValues: WordBool index 579 read GetWordBoolProp write SetWordBoolProp stored False;
    property OnBeforeUpdate: TAccessListBoxBeforeUpdate read FOnBeforeUpdate write FOnBeforeUpdate;
    property OnAfterUpdate: TNotifyEvent read FOnAfterUpdate write FOnAfterUpdate;
    property OnEnter: TNotifyEvent read FOnEnter write FOnEnter;
    property OnExit: TAccessListBoxExit read FOnExit write FOnExit;
    property OnGotFocus: TNotifyEvent read FOnGotFocus write FOnGotFocus;
    property OnLostFocus: TNotifyEvent read FOnLostFocus write FOnLostFocus;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessOptionGroup
// Help String      : 
// Default Interface: _OptionGroup
// Def. Intf. DISP? : No
// Event   Interface: DispOptionGroupEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessOptionGroupBeforeUpdate = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessOptionGroupExit = procedure(ASender: TObject; out Cancel: Smallint) of object;

  TAccessOptionGroup = class(TOleControl)
  private
    FOnBeforeUpdate: TAccessOptionGroupBeforeUpdate;
    FOnAfterUpdate: TNotifyEvent;
    FOnEnter: TNotifyEvent;
    FOnExit: TAccessOptionGroupExit;
    FIntf: _OptionGroup;
    function  GetControlInterface: _OptionGroup;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_accParent: IDispatch;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_OldValue: OleVariant;
    function Get_Properties: Properties;
    function Get_Controls: Children;
    function Get_Value: OleVariant;
    procedure Set_Value(pRet: OleVariant);
  public
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure Undo;
    procedure SizeToFit;
    procedure Requery;
    procedure Goto_;
    procedure SetFocus;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _OptionGroup read GetControlInterface;
    property  DefaultInterface: _OptionGroup read GetControlInterface;
    property accParent: IDispatch index -5000 read GetIDispatchProp;
    property accChildCount: Integer index -5001 read GetIntegerProp;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant index -5011 read GetOleVariantProp;
    property accSelection: OleVariant index -5012 read GetOleVariantProp;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property OldValue: OleVariant index 2102 read GetOleVariantProp;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Value: OleVariant index 0 read GetOleVariantProp write SetOleVariantProp;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property BorderLineStyle: Byte index 11 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property BeforeUpdateMacro: WideString index 496 read GetWideStringProp write SetWideStringProp;
    property AfterUpdateMacro: WideString index 505 read GetWideStringProp write SetWideStringProp;
    property OnEnterMacro: WideString index 497 read GetWideStringProp write SetWideStringProp;
    property OnExitMacro: WideString index 498 read GetWideStringProp write SetWideStringProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property ControlSource: WideString index 27 read GetWideStringProp write SetWideStringProp stored False;
    property DefaultValue: WideString index 23 read GetWideStringProp write SetWideStringProp stored False;
    property ValidationRule: WideString index 145 read GetWideStringProp write SetWideStringProp stored False;
    property ValidationText: WideString index 61 read GetWideStringProp write SetWideStringProp stored False;
    property StatusBarText: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property Enabled: WordBool index 25 read GetWordBoolProp write SetWordBoolProp stored False;
    property Locked: WordBool index 56 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabStop: WordBool index 262 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabIndex: Smallint index 261 read GetSmallintProp write SetSmallintProp stored False;
    property HideDuplicates: WordBool index 69 read GetWordBoolProp write SetWordBoolProp stored False;
    property BackStyle: Byte index 29 read GetByteProp write SetByteProp stored False;
    property BackColor: Integer index 28 read GetIntegerProp write SetIntegerProp stored False;
    property SpecialEffect: Byte index 4 read GetByteProp write SetByteProp stored False;
    property BorderStyle: Byte index 9 read GetByteProp write SetByteProp stored False;
    property OldBorderStyle: Byte index 329 read GetByteProp write SetByteProp stored False;
    property BorderColor: Integer index 8 read GetIntegerProp write SetIntegerProp stored False;
    property BorderWidth: Byte index 10 read GetByteProp write SetByteProp stored False;
    property ShortcutMenuBar: WideString index 304 read GetWideStringProp write SetWideStringProp stored False;
    property ControlTipText: WideString index 317 read GetWideStringProp write SetWideStringProp stored False;
    property HelpContextId: Integer index 219 read GetIntegerProp write SetIntegerProp stored False;
    property ColumnWidth: Smallint index 166 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnOrder: Smallint index 165 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnHidden: WordBool index 167 read GetWordBoolProp write SetWordBoolProp stored False;
    property AutoLabel: WordBool index 57 read GetWordBoolProp write SetWordBoolProp stored False;
    property AddColon: WordBool index 3 read GetWordBoolProp write SetWordBoolProp stored False;
    property LabelX: Smallint index 52 read GetSmallintProp write SetSmallintProp stored False;
    property LabelY: Smallint index 53 read GetSmallintProp write SetSmallintProp stored False;
    property LabelAlign: Byte index 51 read GetByteProp write SetByteProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property BeforeUpdate: WideString index 85 read GetWideStringProp write SetWideStringProp stored False;
    property AfterUpdate: WideString index 86 read GetWideStringProp write SetWideStringProp stored False;
    property OnEnter1: WideString index 222 read GetWideStringProp write SetWideStringProp stored False;
    property OnExit1: WideString index 223 read GetWideStringProp write SetWideStringProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property OnBeforeUpdate: TAccessOptionGroupBeforeUpdate read FOnBeforeUpdate write FOnBeforeUpdate;
    property OnAfterUpdate: TNotifyEvent read FOnAfterUpdate write FOnAfterUpdate;
    property OnEnter: TNotifyEvent read FOnEnter write FOnEnter;
    property OnExit: TAccessOptionGroupExit read FOnExit write FOnExit;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessTextBox
// Help String      : 
// Default Interface: _Textbox
// Def. Intf. DISP? : No
// Event   Interface: DispTextBoxEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessTextBoxBeforeUpdate = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessTextBoxExit = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessTextBoxDirty = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessTextBoxUndo = procedure(ASender: TObject; out Cancel: Smallint) of object;

  TAccessTextBox = class(TOleControl)
  private
    FOnBeforeUpdate: TAccessTextBoxBeforeUpdate;
    FOnAfterUpdate: TNotifyEvent;
    FOnChange: TNotifyEvent;
    FOnEnter: TNotifyEvent;
    FOnExit: TAccessTextBoxExit;
    FOnGotFocus: TNotifyEvent;
    FOnLostFocus: TNotifyEvent;
    FOnDirty: TAccessTextBoxDirty;
    FOnUndo: TAccessTextBoxUndo;
    FIntf: _Textbox;
    function  GetControlInterface: _Textbox;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_accParent: IDispatch;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_OldValue: OleVariant;
    function Get_Properties: Properties;
    function Get_Controls: Children;
    function Get_Hyperlink: _Hyperlink;
    function Get_FormatConditions: FormatConditions;
    function Get_Value: OleVariant;
    procedure Set_Value(pRet: OleVariant);
    function Get_SmartTags: _SmartTags;
  public
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure Undo;
    procedure SizeToFit;
    procedure Requery;
    procedure Goto_;
    procedure SetFocus;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _Textbox read GetControlInterface;
    property  DefaultInterface: _Textbox read GetControlInterface;
    property accParent: IDispatch index -5000 read GetIDispatchProp;
    property accChildCount: Integer index -5001 read GetIntegerProp;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant index -5011 read GetOleVariantProp;
    property accSelection: OleVariant index -5012 read GetOleVariantProp;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property OldValue: OleVariant index 2102 read GetOleVariantProp;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Hyperlink: _Hyperlink read Get_Hyperlink;
    property FormatConditions: FormatConditions read Get_FormatConditions;
    property Value: OleVariant index 0 read GetOleVariantProp write SetOleVariantProp;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property FELineBreak: WordBool index 358 read GetWordBoolProp write SetWordBoolProp;
    property BorderLineStyle: Byte index 11 read GetByteProp write SetByteProp;
    property TextFontCharSet: Byte index 193 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property TextAlignGeneral: Smallint index 137 read GetSmallintProp write SetSmallintProp;
    property Coltyp: Integer index 139 read GetIntegerProp write SetIntegerProp;
    property FormatPictureText: WideString index 138 read GetWideStringProp write SetWideStringProp;
    property AllowedText: Byte index 369 read GetByteProp write SetByteProp;
    property SmartTags: _SmartTags read Get_SmartTags;
    property Layout: TOleEnum index 2460 read GetTOleEnumProp;
    property BeforeUpdateMacro: WideString index 496 read GetWideStringProp write SetWideStringProp;
    property AfterUpdateMacro: WideString index 505 read GetWideStringProp write SetWideStringProp;
    property OnChangeMacro: WideString index 506 read GetWideStringProp write SetWideStringProp;
    property OnEnterMacro: WideString index 497 read GetWideStringProp write SetWideStringProp;
    property OnExitMacro: WideString index 498 read GetWideStringProp write SetWideStringProp;
    property OnGotFocusMacro: WideString index 502 read GetWideStringProp write SetWideStringProp;
    property OnLostFocusMacro: WideString index 503 read GetWideStringProp write SetWideStringProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
    property OnKeyDownMacro: WideString index 500 read GetWideStringProp write SetWideStringProp;
    property OnKeyUpMacro: WideString index 501 read GetWideStringProp write SetWideStringProp;
    property OnKeyPressMacro: WideString index 499 read GetWideStringProp write SetWideStringProp;
    property LayoutID: Integer index 2492 read GetIntegerProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property ControlSource: WideString index 27 read GetWideStringProp write SetWideStringProp stored False;
    property Format: WideString index 38 read GetWideStringProp write SetWideStringProp stored False;
    property DecimalPlaces: Byte index 71 read GetByteProp write SetByteProp stored False;
    property InputMask: WideString index 72 read GetWideStringProp write SetWideStringProp stored False;
    property DefaultValue: WideString index 23 read GetWideStringProp write SetWideStringProp stored False;
    property IMEHold: WordBool index 357 read GetWordBoolProp write SetWordBoolProp stored False;
    property FuriganaControl: WideString index 359 read GetWideStringProp write SetWideStringProp stored False;
    property PostalAddress: WideString index 360 read GetWideStringProp write SetWideStringProp stored False;
    property ValidationRule: WideString index 145 read GetWideStringProp write SetWideStringProp stored False;
    property ValidationText: WideString index 61 read GetWideStringProp write SetWideStringProp stored False;
    property StatusBarText: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property EnterKeyBehavior: WordBool index 74 read GetWordBoolProp write SetWordBoolProp stored False;
    property AllowAutoCorrect: WordBool index 340 read GetWordBoolProp write SetWordBoolProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property Vertical: WordBool index 355 read GetWordBoolProp write SetWordBoolProp stored False;
    property Enabled: WordBool index 25 read GetWordBoolProp write SetWordBoolProp stored False;
    property Locked: WordBool index 56 read GetWordBoolProp write SetWordBoolProp stored False;
    property FilterLookup: Byte index 305 read GetByteProp write SetByteProp stored False;
    property AutoTab: WordBool index 73 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabStop: WordBool index 262 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabIndex: Smallint index 261 read GetSmallintProp write SetSmallintProp stored False;
    property ScrollBars: Byte index 152 read GetByteProp write SetByteProp stored False;
    property HideDuplicates: WordBool index 69 read GetWordBoolProp write SetWordBoolProp stored False;
    property CanGrow: WordBool index 14 read GetWordBoolProp write SetWordBoolProp stored False;
    property CanShrink: WordBool index 16 read GetWordBoolProp write SetWordBoolProp stored False;
    property RunningSum: Byte index 130 read GetByteProp write SetByteProp stored False;
    property BackStyle: Byte index 29 read GetByteProp write SetByteProp stored False;
    property BackColor: Integer index 28 read GetIntegerProp write SetIntegerProp stored False;
    property SpecialEffect: Byte index 4 read GetByteProp write SetByteProp stored False;
    property BorderStyle: Byte index 9 read GetByteProp write SetByteProp stored False;
    property OldBorderStyle: Byte index 329 read GetByteProp write SetByteProp stored False;
    property BorderColor: Integer index 8 read GetIntegerProp write SetIntegerProp stored False;
    property BorderWidth: Byte index 10 read GetByteProp write SetByteProp stored False;
    property ForeColor: Integer index 204 read GetIntegerProp write SetIntegerProp stored False;
    property FontName: WideString index 34 read GetWideStringProp write SetWideStringProp stored False;
    property FontSize: Smallint index 35 read GetSmallintProp write SetSmallintProp stored False;
    property FontWeight: Smallint index 37 read GetSmallintProp write SetSmallintProp stored False;
    property FontItalic: WordBool index 33 read GetWordBoolProp write SetWordBoolProp stored False;
    property FontUnderline: WordBool index 36 read GetWordBoolProp write SetWordBoolProp stored False;
    property TextAlign: Byte index 136 read GetByteProp write SetByteProp stored False;
    property FontBold: Smallint index 32 read GetSmallintProp write SetSmallintProp stored False;
    property ShortcutMenuBar: WideString index 304 read GetWideStringProp write SetWideStringProp stored False;
    property ControlTipText: WideString index 317 read GetWideStringProp write SetWideStringProp stored False;
    property HelpContextId: Integer index 219 read GetIntegerProp write SetIntegerProp stored False;
    property ColumnWidth: Smallint index 166 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnOrder: Smallint index 165 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnHidden: WordBool index 167 read GetWordBoolProp write SetWordBoolProp stored False;
    property AutoLabel: WordBool index 57 read GetWordBoolProp write SetWordBoolProp stored False;
    property AddColon: WordBool index 3 read GetWordBoolProp write SetWordBoolProp stored False;
    property LabelX: Smallint index 52 read GetSmallintProp write SetSmallintProp stored False;
    property LabelY: Smallint index 53 read GetSmallintProp write SetSmallintProp stored False;
    property LabelAlign: Byte index 51 read GetByteProp write SetByteProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property Text: WideString index 267 read GetWideStringProp write SetWideStringProp stored False;
    property SelText: WideString index 271 read GetWideStringProp write SetWideStringProp stored False;
    property SelStart: Smallint index 270 read GetSmallintProp write SetSmallintProp stored False;
    property SelLength: Smallint index 269 read GetSmallintProp write SetSmallintProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property BeforeUpdate: WideString index 85 read GetWideStringProp write SetWideStringProp stored False;
    property AfterUpdate: WideString index 86 read GetWideStringProp write SetWideStringProp stored False;
    property OnChange1: WideString index 114 read GetWideStringProp write SetWideStringProp stored False;
    property OnEnter1: WideString index 222 read GetWideStringProp write SetWideStringProp stored False;
    property OnExit1: WideString index 223 read GetWideStringProp write SetWideStringProp stored False;
    property OnGotFocus1: WideString index 115 read GetWideStringProp write SetWideStringProp stored False;
    property OnLostFocus1: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyDown: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyUp: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyPress: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property ReadingOrder: Byte index 367 read GetByteProp write SetByteProp stored False;
    property KeyboardLanguage: Byte index 368 read GetByteProp write SetByteProp stored False;
    property ScrollBarAlign: Byte index 371 read GetByteProp write SetByteProp stored False;
    property NumeralShapes: Byte index 372 read GetByteProp write SetByteProp stored False;
    property IMEMode: TOleEnum index 356 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property IMESentenceMode: TOleEnum index 379 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property LeftMargin: Smallint index 384 read GetSmallintProp write SetSmallintProp stored False;
    property TopMargin: Smallint index 385 read GetSmallintProp write SetSmallintProp stored False;
    property LineSpacing: Smallint index 386 read GetSmallintProp write SetSmallintProp stored False;
    property RightMargin: Smallint index 388 read GetSmallintProp write SetSmallintProp stored False;
    property BottomMargin: Smallint index 389 read GetSmallintProp write SetSmallintProp stored False;
    property IsHyperlink: WordBool index 396 read GetWordBoolProp write SetWordBoolProp stored False;
    property OnDirty1: WideString index 375 read GetWideStringProp write SetWideStringProp stored False;
    property OnUndo1: WideString index 404 read GetWideStringProp write SetWideStringProp stored False;
    property AsianLineBreak: WordBool index 446 read GetWordBoolProp write SetWordBoolProp stored False;
    property TextFormat: TOleEnum index 476 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property LeftPadding: Smallint index 454 read GetSmallintProp write SetSmallintProp stored False;
    property TopPadding: Smallint index 455 read GetSmallintProp write SetSmallintProp stored False;
    property RightPadding: Smallint index 456 read GetSmallintProp write SetSmallintProp stored False;
    property BottomPadding: Smallint index 457 read GetSmallintProp write SetSmallintProp stored False;
    property GridlineStyleLeft: Byte index 458 read GetByteProp write SetByteProp stored False;
    property GridlineStyleTop: Byte index 459 read GetByteProp write SetByteProp stored False;
    property GridlineStyleRight: Byte index 460 read GetByteProp write SetByteProp stored False;
    property GridlineStyleBottom: Byte index 461 read GetByteProp write SetByteProp stored False;
    property GridlineWidthLeft: Byte index 463 read GetByteProp write SetByteProp stored False;
    property GridlineWidthTop: Byte index 464 read GetByteProp write SetByteProp stored False;
    property GridlineWidthRight: Byte index 465 read GetByteProp write SetByteProp stored False;
    property GridlineWidthBottom: Byte index 466 read GetByteProp write SetByteProp stored False;
    property GridlineColor: Integer index 462 read GetIntegerProp write SetIntegerProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property DisplayAsHyperlink: TOleEnum index 591 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property ShowDatePicker: Smallint index 486 read GetSmallintProp write SetSmallintProp stored False;
    property OnBeforeUpdate: TAccessTextBoxBeforeUpdate read FOnBeforeUpdate write FOnBeforeUpdate;
    property OnAfterUpdate: TNotifyEvent read FOnAfterUpdate write FOnAfterUpdate;
    property OnChange: TNotifyEvent read FOnChange write FOnChange;
    property OnEnter: TNotifyEvent read FOnEnter write FOnEnter;
    property OnExit: TAccessTextBoxExit read FOnExit write FOnExit;
    property OnGotFocus: TNotifyEvent read FOnGotFocus write FOnGotFocus;
    property OnLostFocus: TNotifyEvent read FOnLostFocus write FOnLostFocus;
    property OnDirty: TAccessTextBoxDirty read FOnDirty write FOnDirty;
    property OnUndo: TAccessTextBoxUndo read FOnUndo write FOnUndo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessComboBox
// Help String      : 
// Default Interface: _Combobox
// Def. Intf. DISP? : No
// Event   Interface: DispComboBoxEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessComboBoxBeforeUpdate = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessComboBoxNotInList = procedure(ASender: TObject; var NewData: WideString; 
                                                         out Response: Smallint) of object;
  TAccessComboBoxExit = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessComboBoxDirty = procedure(ASender: TObject; out Cancel: Smallint) of object;
  TAccessComboBoxUndo = procedure(ASender: TObject; out Cancel: Smallint) of object;

  TAccessComboBox = class(TOleControl)
  private
    FOnBeforeUpdate: TAccessComboBoxBeforeUpdate;
    FOnAfterUpdate: TNotifyEvent;
    FOnChange: TNotifyEvent;
    FOnNotInList: TAccessComboBoxNotInList;
    FOnEnter: TNotifyEvent;
    FOnExit: TAccessComboBoxExit;
    FOnGotFocus: TNotifyEvent;
    FOnLostFocus: TNotifyEvent;
    FOnDirty: TAccessComboBoxDirty;
    FOnUndo: TAccessComboBoxUndo;
    FIntf: _Combobox;
    function  GetControlInterface: _Combobox;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_accParent: IDispatch;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Column(Index: Integer; Row: OleVariant): OleVariant;
    function Get_OldValue: OleVariant;
    function Get_ItemData(Index: Integer): OleVariant;
    function Get_Properties: Properties;
    function Get_Controls: Children;
    function Get_Hyperlink: _Hyperlink;
    function Get_FormatConditions: FormatConditions;
    function Get_Value: OleVariant;
    procedure Set_Value(pRet: OleVariant);
    function Get_Recordset: IDispatch;
    procedure _Set_Recordset(const pRet: IDispatch);
    function Get_SmartTags: _SmartTags;
    function Get_Selected(lRow: Integer): Integer;
    procedure Set_Selected(lRow: Integer; pRet: Integer);
    function Get_ItemsSelected: _ItemsSelected;
  public
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure Undo;
    procedure Dropdown;
    procedure SizeToFit;
    procedure Requery;
    procedure Goto_;
    procedure SetFocus;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    procedure AddItem(const Item: WideString); overload;
    procedure AddItem(const Item: WideString; Index: OleVariant); overload;
    procedure RemoveItem(Index: OleVariant);
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _Combobox read GetControlInterface;
    property  DefaultInterface: _Combobox read GetControlInterface;
    property accParent: IDispatch index -5000 read GetIDispatchProp;
    property accChildCount: Integer index -5001 read GetIntegerProp;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant index -5011 read GetOleVariantProp;
    property accSelection: OleVariant index -5012 read GetOleVariantProp;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property Column[Index: Integer; Row: OleVariant]: OleVariant read Get_Column;
    property OldValue: OleVariant index 2102 read GetOleVariantProp;
    property ItemData[Index: Integer]: OleVariant read Get_ItemData;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property Hyperlink: _Hyperlink read Get_Hyperlink;
    property FormatConditions: FormatConditions read Get_FormatConditions;
    property Value: OleVariant index 0 read GetOleVariantProp write SetOleVariantProp;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property BorderLineStyle: Byte index 11 read GetByteProp write SetByteProp;
    property TextFontCharSet: Byte index 193 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property TextAlignGeneral: Smallint index 137 read GetSmallintProp write SetSmallintProp;
    property FormatPictureText: WideString index 138 read GetWideStringProp write SetWideStringProp;
    property Coltyp: Integer index 139 read GetIntegerProp write SetIntegerProp;
    property AllowedText: Byte index 369 read GetByteProp write SetByteProp;
    property Recordset: IDispatch index 2196 read GetIDispatchProp;
    property SmartTags: _SmartTags read Get_SmartTags;
    property Layout: TOleEnum index 2460 read GetTOleEnumProp;
    property Selected[lRow: Integer]: Integer read Get_Selected write Set_Selected;
    property ItemsSelected: _ItemsSelected read Get_ItemsSelected;
    property BeforeUpdateMacro: WideString index 496 read GetWideStringProp write SetWideStringProp;
    property AfterUpdateMacro: WideString index 505 read GetWideStringProp write SetWideStringProp;
    property OnChangeMacro: WideString index 506 read GetWideStringProp write SetWideStringProp;
    property OnNotInListMacro: WideString index 507 read GetWideStringProp write SetWideStringProp;
    property OnEnterMacro: WideString index 497 read GetWideStringProp write SetWideStringProp;
    property OnExitMacro: WideString index 498 read GetWideStringProp write SetWideStringProp;
    property OnGotFocusMacro: WideString index 502 read GetWideStringProp write SetWideStringProp;
    property OnLostFocusMacro: WideString index 503 read GetWideStringProp write SetWideStringProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
    property OnKeyDownMacro: WideString index 500 read GetWideStringProp write SetWideStringProp;
    property OnKeyUpMacro: WideString index 501 read GetWideStringProp write SetWideStringProp;
    property OnKeyPressMacro: WideString index 499 read GetWideStringProp write SetWideStringProp;
    property LayoutID: Integer index 2492 read GetIntegerProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property ControlSource: WideString index 27 read GetWideStringProp write SetWideStringProp stored False;
    property Format: WideString index 38 read GetWideStringProp write SetWideStringProp stored False;
    property DecimalPlaces: Byte index 71 read GetByteProp write SetByteProp stored False;
    property InputMask: WideString index 72 read GetWideStringProp write SetWideStringProp stored False;
    property RowSourceType: WideString index 93 read GetWideStringProp write SetWideStringProp stored False;
    property RowSource: WideString index 91 read GetWideStringProp write SetWideStringProp stored False;
    property ColumnCount: Smallint index 70 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnHeads: WordBool index 131 read GetWordBoolProp write SetWordBoolProp stored False;
    property ColumnWidths: WideString index 18 read GetWideStringProp write SetWideStringProp stored False;
    property BoundColumn: Integer index 13 read GetIntegerProp write SetIntegerProp stored False;
    property ListRows: Smallint index 153 read GetSmallintProp write SetSmallintProp stored False;
    property ListWidth: WideString index 154 read GetWideStringProp write SetWideStringProp stored False;
    property StatusBarText: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property LimitToList: WordBool index 67 read GetWordBoolProp write SetWordBoolProp stored False;
    property AutoExpand: WordBool index 68 read GetWordBoolProp write SetWordBoolProp stored False;
    property DefaultValue: WideString index 23 read GetWideStringProp write SetWideStringProp stored False;
    property IMEHold: WordBool index 357 read GetWordBoolProp write SetWordBoolProp stored False;
    property ValidationRule: WideString index 145 read GetWideStringProp write SetWideStringProp stored False;
    property ValidationText: WideString index 61 read GetWideStringProp write SetWideStringProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property Enabled: WordBool index 25 read GetWordBoolProp write SetWordBoolProp stored False;
    property Locked: WordBool index 56 read GetWordBoolProp write SetWordBoolProp stored False;
    property AllowAutoCorrect: WordBool index 340 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabStop: WordBool index 262 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabIndex: Smallint index 261 read GetSmallintProp write SetSmallintProp stored False;
    property HideDuplicates: WordBool index 69 read GetWordBoolProp write SetWordBoolProp stored False;
    property BackStyle: Byte index 29 read GetByteProp write SetByteProp stored False;
    property BackColor: Integer index 28 read GetIntegerProp write SetIntegerProp stored False;
    property SpecialEffect: Byte index 4 read GetByteProp write SetByteProp stored False;
    property BorderStyle: Byte index 9 read GetByteProp write SetByteProp stored False;
    property OldBorderStyle: Byte index 329 read GetByteProp write SetByteProp stored False;
    property BorderColor: Integer index 8 read GetIntegerProp write SetIntegerProp stored False;
    property BorderWidth: Byte index 10 read GetByteProp write SetByteProp stored False;
    property ForeColor: Integer index 204 read GetIntegerProp write SetIntegerProp stored False;
    property FontName: WideString index 34 read GetWideStringProp write SetWideStringProp stored False;
    property FontSize: Smallint index 35 read GetSmallintProp write SetSmallintProp stored False;
    property FontWeight: Smallint index 37 read GetSmallintProp write SetSmallintProp stored False;
    property FontItalic: WordBool index 33 read GetWordBoolProp write SetWordBoolProp stored False;
    property FontUnderline: WordBool index 36 read GetWordBoolProp write SetWordBoolProp stored False;
    property TextAlign: Byte index 136 read GetByteProp write SetByteProp stored False;
    property FontBold: Smallint index 32 read GetSmallintProp write SetSmallintProp stored False;
    property ShortcutMenuBar: WideString index 304 read GetWideStringProp write SetWideStringProp stored False;
    property ControlTipText: WideString index 317 read GetWideStringProp write SetWideStringProp stored False;
    property HelpContextId: Integer index 219 read GetIntegerProp write SetIntegerProp stored False;
    property ColumnWidth: Smallint index 166 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnOrder: Smallint index 165 read GetSmallintProp write SetSmallintProp stored False;
    property ColumnHidden: WordBool index 167 read GetWordBoolProp write SetWordBoolProp stored False;
    property AutoLabel: WordBool index 57 read GetWordBoolProp write SetWordBoolProp stored False;
    property AddColon: WordBool index 3 read GetWordBoolProp write SetWordBoolProp stored False;
    property LabelX: Smallint index 52 read GetSmallintProp write SetSmallintProp stored False;
    property LabelY: Smallint index 53 read GetSmallintProp write SetSmallintProp stored False;
    property LabelAlign: Byte index 51 read GetByteProp write SetByteProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property Text: WideString index 267 read GetWideStringProp write SetWideStringProp stored False;
    property SelText: WideString index 271 read GetWideStringProp write SetWideStringProp stored False;
    property SelStart: Smallint index 270 read GetSmallintProp write SetSmallintProp stored False;
    property SelLength: Smallint index 269 read GetSmallintProp write SetSmallintProp stored False;
    property ListCount: Integer index 238 read GetIntegerProp write SetIntegerProp stored False;
    property ListIndex: Integer index 239 read GetIntegerProp write SetIntegerProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property BeforeUpdate: WideString index 85 read GetWideStringProp write SetWideStringProp stored False;
    property AfterUpdate: WideString index 86 read GetWideStringProp write SetWideStringProp stored False;
    property OnChange1: WideString index 114 read GetWideStringProp write SetWideStringProp stored False;
    property OnNotInList1: WideString index 120 read GetWideStringProp write SetWideStringProp stored False;
    property OnEnter1: WideString index 222 read GetWideStringProp write SetWideStringProp stored False;
    property OnExit1: WideString index 223 read GetWideStringProp write SetWideStringProp stored False;
    property OnGotFocus1: WideString index 115 read GetWideStringProp write SetWideStringProp stored False;
    property OnLostFocus1: WideString index 116 read GetWideStringProp write SetWideStringProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyDown: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyUp: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyPress: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property ReadingOrder: Byte index 367 read GetByteProp write SetByteProp stored False;
    property KeyboardLanguage: Byte index 368 read GetByteProp write SetByteProp stored False;
    property ScrollBarAlign: Byte index 371 read GetByteProp write SetByteProp stored False;
    property NumeralShapes: Byte index 372 read GetByteProp write SetByteProp stored False;
    property IMEMode: TOleEnum index 356 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property IMESentenceMode: TOleEnum index 379 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property IsHyperlink: WordBool index 396 read GetWordBoolProp write SetWordBoolProp stored False;
    property OnDirty1: WideString index 375 read GetWideStringProp write SetWideStringProp stored False;
    property OnUndo1: WideString index 404 read GetWideStringProp write SetWideStringProp stored False;
    property LeftPadding: Smallint index 454 read GetSmallintProp write SetSmallintProp stored False;
    property TopPadding: Smallint index 455 read GetSmallintProp write SetSmallintProp stored False;
    property RightPadding: Smallint index 456 read GetSmallintProp write SetSmallintProp stored False;
    property BottomPadding: Smallint index 457 read GetSmallintProp write SetSmallintProp stored False;
    property GridlineStyleLeft: Byte index 458 read GetByteProp write SetByteProp stored False;
    property GridlineStyleTop: Byte index 459 read GetByteProp write SetByteProp stored False;
    property GridlineStyleRight: Byte index 460 read GetByteProp write SetByteProp stored False;
    property GridlineStyleBottom: Byte index 461 read GetByteProp write SetByteProp stored False;
    property GridlineWidthLeft: Byte index 463 read GetByteProp write SetByteProp stored False;
    property GridlineWidthTop: Byte index 464 read GetByteProp write SetByteProp stored False;
    property GridlineWidthRight: Byte index 465 read GetByteProp write SetByteProp stored False;
    property GridlineWidthBottom: Byte index 466 read GetByteProp write SetByteProp stored False;
    property GridlineColor: Integer index 462 read GetIntegerProp write SetIntegerProp stored False;
    property CanGrow: WordBool index 14 read GetWordBoolProp write SetWordBoolProp stored False;
    property CanShrink: WordBool index 16 read GetWordBoolProp write SetWordBoolProp stored False;
    property SeparatorCharacters: TOleEnum index 451 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property AllowValueListEdits: WordBool index 556 read GetWordBoolProp write SetWordBoolProp stored False;
    property ListItemsEditForm: WideString index 557 read GetWideStringProp write SetWideStringProp stored False;
    property InheritValueList: WordBool index 568 read GetWordBoolProp write SetWordBoolProp stored False;
    property LeftMargin: Smallint index 384 read GetSmallintProp write SetSmallintProp stored False;
    property TopMargin: Smallint index 385 read GetSmallintProp write SetSmallintProp stored False;
    property RightMargin: Smallint index 388 read GetSmallintProp write SetSmallintProp stored False;
    property BottomMargin: Smallint index 389 read GetSmallintProp write SetSmallintProp stored False;
    property ShowOnlyRowSourceValues: WordBool index 579 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayAsHyperlink: TOleEnum index 591 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property OnBeforeUpdate: TAccessComboBoxBeforeUpdate read FOnBeforeUpdate write FOnBeforeUpdate;
    property OnAfterUpdate: TNotifyEvent read FOnAfterUpdate write FOnAfterUpdate;
    property OnChange: TNotifyEvent read FOnChange write FOnChange;
    property OnNotInList: TAccessComboBoxNotInList read FOnNotInList write FOnNotInList;
    property OnEnter: TNotifyEvent read FOnEnter write FOnEnter;
    property OnExit: TAccessComboBoxExit read FOnExit write FOnExit;
    property OnGotFocus: TNotifyEvent read FOnGotFocus write FOnGotFocus;
    property OnLostFocus: TNotifyEvent read FOnLostFocus write FOnLostFocus;
    property OnDirty: TAccessComboBoxDirty read FOnDirty write FOnDirty;
    property OnUndo: TAccessComboBoxUndo read FOnUndo write FOnUndo;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessSubForm
// Help String      : 
// Default Interface: _SubForm
// Def. Intf. DISP? : No
// Event   Interface: DispSubFormEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessSubFormExit = procedure(ASender: TObject; out Cancel: Smallint) of object;

  TAccessSubForm = class(TOleControl)
  private
    FOnEnter: TNotifyEvent;
    FOnExit: TAccessSubFormExit;
    FIntf: _SubForm;
    function  GetControlInterface: _SubForm;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_accParent: IDispatch;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Form: AccessForm;
    function Get_Report: AccessReport;
    function Get_Properties: Properties;
    function Get_Controls: Controls;
  public
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure SizeToFit;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Goto_;
    procedure SetFocus;
    procedure Requery;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _SubForm read GetControlInterface;
    property  DefaultInterface: _SubForm read GetControlInterface;
    property accParent: IDispatch index -5000 read GetIDispatchProp;
    property accChildCount: Integer index -5001 read GetIntegerProp;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant index -5011 read GetOleVariantProp;
    property accSelection: OleVariant index -5012 read GetOleVariantProp;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property Form: AccessForm read Get_Form;
    property Report: AccessReport read Get_Report;
    property Properties: Properties read Get_Properties;
    property Controls: Controls read Get_Controls;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property BorderLineStyle: Byte index 11 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property OnEnterMacro: WideString index 497 read GetWideStringProp write SetWideStringProp;
    property OnExitMacro: WideString index 498 read GetWideStringProp write SetWideStringProp;
    property Layout: TOleEnum index 2460 read GetTOleEnumProp;
    property LayoutID: Integer index 2492 read GetIntegerProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property SourceObject: WideString index 132 read GetWideStringProp write SetWideStringProp stored False;
    property LinkChildFields: WideString index 49 read GetWideStringProp write SetWideStringProp stored False;
    property LinkMasterFields: WideString index 50 read GetWideStringProp write SetWideStringProp stored False;
    property StatusBarText: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property Enabled: WordBool index 25 read GetWordBoolProp write SetWordBoolProp stored False;
    property Locked: WordBool index 56 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabStop: WordBool index 262 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabIndex: Smallint index 261 read GetSmallintProp write SetSmallintProp stored False;
    property CanGrow: WordBool index 14 read GetWordBoolProp write SetWordBoolProp stored False;
    property CanShrink: WordBool index 16 read GetWordBoolProp write SetWordBoolProp stored False;
    property SpecialEffect: Byte index 4 read GetByteProp write SetByteProp stored False;
    property BorderStyle: Byte index 9 read GetByteProp write SetByteProp stored False;
    property OldBorderStyle: Byte index 329 read GetByteProp write SetByteProp stored False;
    property BorderWidth: Byte index 10 read GetByteProp write SetByteProp stored False;
    property BorderColor: Integer index 8 read GetIntegerProp write SetIntegerProp stored False;
    property AutoLabel: WordBool index 57 read GetWordBoolProp write SetWordBoolProp stored False;
    property AddColon: WordBool index 3 read GetWordBoolProp write SetWordBoolProp stored False;
    property LabelX: Smallint index 52 read GetSmallintProp write SetSmallintProp stored False;
    property LabelY: Smallint index 53 read GetSmallintProp write SetSmallintProp stored False;
    property LabelAlign: Byte index 51 read GetByteProp write SetByteProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property OnEnter1: WideString index 222 read GetWideStringProp write SetWideStringProp stored False;
    property OnExit1: WideString index 223 read GetWideStringProp write SetWideStringProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property LeftPadding: Smallint index 454 read GetSmallintProp write SetSmallintProp stored False;
    property TopPadding: Smallint index 455 read GetSmallintProp write SetSmallintProp stored False;
    property RightPadding: Smallint index 456 read GetSmallintProp write SetSmallintProp stored False;
    property BottomPadding: Smallint index 457 read GetSmallintProp write SetSmallintProp stored False;
    property GridlineStyleLeft: Byte index 458 read GetByteProp write SetByteProp stored False;
    property GridlineStyleTop: Byte index 459 read GetByteProp write SetByteProp stored False;
    property GridlineStyleRight: Byte index 460 read GetByteProp write SetByteProp stored False;
    property GridlineStyleBottom: Byte index 461 read GetByteProp write SetByteProp stored False;
    property GridlineWidthLeft: Byte index 463 read GetByteProp write SetByteProp stored False;
    property GridlineWidthTop: Byte index 464 read GetByteProp write SetByteProp stored False;
    property GridlineWidthRight: Byte index 465 read GetByteProp write SetByteProp stored False;
    property GridlineWidthBottom: Byte index 466 read GetByteProp write SetByteProp stored False;
    property GridlineColor: Integer index 462 read GetIntegerProp write SetIntegerProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property FilterOnEmptyMaster: WordBool index 576 read GetWordBoolProp write SetWordBoolProp stored False;
    property OnEnter: TNotifyEvent read FOnEnter write FOnEnter;
    property OnExit: TAccessSubFormExit read FOnExit write FOnExit;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessLine
// Help String      : 
// Default Interface: _Line
// Def. Intf. DISP? : No
// Event   Interface: DispLineEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessLine = class(TOleControl)
  private
    FIntf: _Line;
    function  GetControlInterface: _Line;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Properties: Properties;
  public
    procedure SizeToFit;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _Line read GetControlInterface;
    property  DefaultInterface: _Line read GetControlInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property Properties: Properties read Get_Properties;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property BorderLineStyle: Byte index 11 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property LineSlant: WordBool index 55 read GetWordBoolProp write SetWordBoolProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property SpecialEffect: Byte index 4 read GetByteProp write SetByteProp stored False;
    property BorderStyle: Byte index 9 read GetByteProp write SetByteProp stored False;
    property OldBorderStyle: Byte index 329 read GetByteProp write SetByteProp stored False;
    property BorderColor: Integer index 8 read GetIntegerProp write SetIntegerProp stored False;
    property BorderWidth: Byte index 10 read GetByteProp write SetByteProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessPageBreak
// Help String      : 
// Default Interface: _PageBreak
// Def. Intf. DISP? : No
// Event   Interface: DispPageBreakEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessPageBreak = class(TOleControl)
  private
    FIntf: _PageBreak;
    function  GetControlInterface: _PageBreak;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Properties: Properties;
  public
    procedure SizeToFit;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _PageBreak read GetControlInterface;
    property  DefaultInterface: _PageBreak read GetControlInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property Properties: Properties read Get_Properties;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessSection
// Help String      : 
// Default Interface: _Section
// Def. Intf. DISP? : No
// Event   Interface: DispSectionEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessSection = class(TOleControl)
  private
    FOnPaint: TNotifyEvent;
    FIntf: _Section;
    function  GetControlInterface: _Section;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Properties: Properties;
    function Get_Controls: Children;
  public
    function IsMemberSafe(dispid: Integer): WordBool;
    procedure SetTabOrder;
    property  ControlInterface: _Section read GetControlInterface;
    property  DefaultInterface: _Section read GetControlInterface;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property OnFormatMacro: WideString index 493 read GetWideStringProp write SetWideStringProp;
    property OnPrintMacro: WideString index 494 read GetWideStringProp write SetWideStringProp;
    property OnRetreatMacro: WideString index 495 read GetWideStringProp write SetWideStringProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
    property OnPaintMacro: WideString index 570 read GetWideStringProp write SetWideStringProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ForceNewPage: Byte index 151 read GetByteProp write SetByteProp stored False;
    property NewRowOrCol: Byte index 231 read GetByteProp write SetByteProp stored False;
    property KeepTogether: WordBool index 75 read GetWordBoolProp write SetWordBoolProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property CanGrow: WordBool index 14 read GetWordBoolProp write SetWordBoolProp stored False;
    property CanShrink: WordBool index 16 read GetWordBoolProp write SetWordBoolProp stored False;
    property RepeatSection: WordBool index 15 read GetWordBoolProp write SetWordBoolProp stored False;
    property BackColor: Integer index 28 read GetIntegerProp write SetIntegerProp stored False;
    property SpecialEffect: Byte index 4 read GetByteProp write SetByteProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property OnFormat: WideString index 80 read GetWideStringProp write SetWideStringProp stored False;
    property OnPrint: WideString index 82 read GetWideStringProp write SetWideStringProp stored False;
    property OnRetreat: WideString index 84 read GetWideStringProp write SetWideStringProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property HasContinued: WordBool index 200 read GetWordBoolProp write SetWordBoolProp stored False;
    property WillContinue: WordBool index 201 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property AutoHeight: WordBool index 475 read GetWordBoolProp write SetWordBoolProp stored False;
    property AlternateBackColor: Integer index 571 read GetIntegerProp write SetIntegerProp stored False;
    property OnPaint1: WideString index 569 read GetWideStringProp write SetWideStringProp stored False;
    property OnPaint: TNotifyEvent read FOnPaint write FOnPaint;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessTabControl
// Help String      : 
// Default Interface: _TabControl
// Def. Intf. DISP? : No
// Event   Interface: DispTabControlEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessTabControl = class(TOleControl)
  private
    FOnChange: TNotifyEvent;
    FIntf: _TabControl;
    function  GetControlInterface: _TabControl;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_accParent: IDispatch;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_OldValue: OleVariant;
    function Get_Properties: Properties;
    function Get_Pages: Pages;
    function Get_Value: OleVariant;
    procedure Set_Value(pRet: OleVariant);
  public
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure SizeToFit;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _TabControl read GetControlInterface;
    property  DefaultInterface: _TabControl read GetControlInterface;
    property accParent: IDispatch index -5000 read GetIDispatchProp;
    property accChildCount: Integer index -5001 read GetIntegerProp;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant index -5011 read GetOleVariantProp;
    property accSelection: OleVariant index -5012 read GetOleVariantProp;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property OldValue: OleVariant index 2102 read GetOleVariantProp;
    property Properties: Properties read Get_Properties;
    property Pages: Pages read Get_Pages;
    property Value: OleVariant index 0 read GetOleVariantProp write SetOleVariantProp;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property TextFontCharSet: Byte index 193 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property OnChangeMacro: WideString index 506 read GetWideStringProp write SetWideStringProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
    property OnKeyDownMacro: WideString index 500 read GetWideStringProp write SetWideStringProp;
    property OnKeyUpMacro: WideString index 501 read GetWideStringProp write SetWideStringProp;
    property OnKeyPressMacro: WideString index 499 read GetWideStringProp write SetWideStringProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property StatusBarText: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property Enabled: WordBool index 25 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabStop: WordBool index 262 read GetWordBoolProp write SetWordBoolProp stored False;
    property TabIndex: Smallint index 261 read GetSmallintProp write SetSmallintProp stored False;
    property BackStyle: Byte index 29 read GetByteProp write SetByteProp stored False;
    property MultiRow: WordBool index 348 read GetWordBoolProp write SetWordBoolProp stored False;
    property Style: Byte index 349 read GetByteProp write SetByteProp stored False;
    property TabFixedHeight: Smallint index 350 read GetSmallintProp write SetSmallintProp stored False;
    property TabFixedWidth: Smallint index 351 read GetSmallintProp write SetSmallintProp stored False;
    property FontName: WideString index 34 read GetWideStringProp write SetWideStringProp stored False;
    property FontSize: Smallint index 35 read GetSmallintProp write SetSmallintProp stored False;
    property FontWeight: Smallint index 37 read GetSmallintProp write SetSmallintProp stored False;
    property FontItalic: WordBool index 33 read GetWordBoolProp write SetWordBoolProp stored False;
    property FontUnderline: WordBool index 36 read GetWordBoolProp write SetWordBoolProp stored False;
    property FontBold: Smallint index 32 read GetSmallintProp write SetSmallintProp stored False;
    property ShortcutMenuBar: WideString index 304 read GetWideStringProp write SetWideStringProp stored False;
    property HelpContextId: Integer index 219 read GetIntegerProp write SetIntegerProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property OnChange1: WideString index 114 read GetWideStringProp write SetWideStringProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyDown: WideString index 104 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyUp: WideString index 105 read GetWideStringProp write SetWideStringProp stored False;
    property OnKeyPress: WideString index 106 read GetWideStringProp write SetWideStringProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property OnChange: TNotifyEvent read FOnChange write FOnChange;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessPage
// Help String      : 
// Default Interface: _Page
// Def. Intf. DISP? : No
// Event   Interface: DispPageEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessPage = class(TOleControl)
  private
    FIntf: _Page;
    function  GetControlInterface: _Page;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_accParent: IDispatch;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Properties: Properties;
    function Get_Controls: Children;
    function Get_PictureData: OleVariant;
    procedure Set_PictureData(pRet: OleVariant);
  public
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure SizeToFit;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Requery;
    procedure Goto_;
    procedure SetFocus;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    procedure SetTabOrder;
    property  ControlInterface: _Page read GetControlInterface;
    property  DefaultInterface: _Page read GetControlInterface;
    property accParent: IDispatch index -5000 read GetIDispatchProp;
    property accChildCount: Integer index -5001 read GetIntegerProp;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant index -5011 read GetOleVariantProp;
    property accSelection: OleVariant index -5012 read GetOleVariantProp;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property Properties: Properties read Get_Properties;
    property Controls: Children read Get_Controls;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property PictureData: OleVariant index 188 read GetOleVariantProp write SetOleVariantProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property Caption: WideString index 17 read GetWideStringProp write SetWideStringProp stored False;
    property Picture: WideString index 7 read GetWideStringProp write SetWideStringProp stored False;
    property PictureType: Byte index 341 read GetByteProp write SetByteProp stored False;
    property PageIndex: Smallint index 352 read GetSmallintProp write SetSmallintProp stored False;
    property StatusBarText: WideString index 135 read GetWideStringProp write SetWideStringProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property Enabled: WordBool index 25 read GetWordBoolProp write SetWordBoolProp stored False;
    property ShortcutMenuBar: WideString index 304 read GetWideStringProp write SetWideStringProp stored False;
    property ControlTipText: WideString index 317 read GetWideStringProp write SetWideStringProp stored False;
    property HelpContextId: Integer index 219 read GetIntegerProp write SetIntegerProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TAccessLabel
// Help String      : 
// Default Interface: _Label
// Def. Intf. DISP? : No
// Event   Interface: DispLabelEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TAccessLabel = class(TOleControl)
  private
    FIntf: _Label;
    function  GetControlInterface: _Label;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_accParent: IDispatch;
    function Get_accChild(varChild: OleVariant): IDispatch;
    function Get_accName(varChild: OleVariant): WideString;
    function Get_accValue(varChild: OleVariant): WideString;
    function Get_accDescription(varChild: OleVariant): WideString;
    function Get_accRole(varChild: OleVariant): OleVariant;
    function Get_accState(varChild: OleVariant): OleVariant;
    function Get_accHelp(varChild: OleVariant): WideString;
    function Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
    function Get_accKeyboardShortcut(varChild: OleVariant): WideString;
    function Get_accFocus: OleVariant;
    function Get_accSelection: OleVariant;
    function Get_accDefaultAction(varChild: OleVariant): WideString;
    procedure Set_accName(varChild: OleVariant; const pszName: WideString);
    procedure Set_accValue(varChild: OleVariant; const pszValue: WideString);
    function Get_Application: AccessApplication;
    function Get_Parent: IDispatch;
    function Get_Properties: Properties;
    function Get_Hyperlink: _Hyperlink;
    function Get_SmartTags: _SmartTags;
  public
    procedure accSelect(flagsSelect: Integer); overload;
    procedure accSelect(flagsSelect: Integer; varChild: OleVariant); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer); overload;
    procedure accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                          out pcyHeight: Integer; varChild: OleVariant); overload;
    function accNavigate(navDir: Integer): OleVariant; overload;
    function accNavigate(navDir: Integer; varStart: OleVariant): OleVariant; overload;
    function accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
    procedure accDoDefaultAction; overload;
    procedure accDoDefaultAction(varChild: OleVariant); overload;
    procedure SizeToFit;
    function _Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
    procedure Move(Left: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant); overload;
    procedure Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant); overload;
    function IsMemberSafe(dispid: Integer): WordBool;
    property  ControlInterface: _Label read GetControlInterface;
    property  DefaultInterface: _Label read GetControlInterface;
    property accParent: IDispatch index -5000 read GetIDispatchProp;
    property accChildCount: Integer index -5001 read GetIntegerProp;
    property accChild[varChild: OleVariant]: IDispatch read Get_accChild;
    property accName[varChild: OleVariant]: WideString read Get_accName write Set_accName;
    property accValue[varChild: OleVariant]: WideString read Get_accValue write Set_accValue;
    property accDescription[varChild: OleVariant]: WideString read Get_accDescription;
    property accRole[varChild: OleVariant]: OleVariant read Get_accRole;
    property accState[varChild: OleVariant]: OleVariant read Get_accState;
    property accHelp[varChild: OleVariant]: WideString read Get_accHelp;
    property accHelpTopic[out pszHelpFile: WideString; varChild: OleVariant]: Integer read Get_accHelpTopic;
    property accKeyboardShortcut[varChild: OleVariant]: WideString read Get_accKeyboardShortcut;
    property accFocus: OleVariant index -5011 read GetOleVariantProp;
    property accSelection: OleVariant index -5012 read GetOleVariantProp;
    property accDefaultAction[varChild: OleVariant]: WideString read Get_accDefaultAction;
    property Application: AccessApplication read Get_Application;
    property Parent: IDispatch index 2087 read GetIDispatchProp;
    property Properties: Properties read Get_Properties;
    property Hyperlink: _Hyperlink read Get_Hyperlink;
    property _Name: WideString index 20 read GetWideStringProp write SetWideStringProp;
    property BorderLineStyle: Byte index 11 read GetByteProp write SetByteProp;
    property TextFontCharSet: Byte index 193 read GetByteProp write SetByteProp;
    property ControlName: WideString index 265 read GetWideStringProp write SetWideStringProp;
    property SmartTags: _SmartTags read Get_SmartTags;
    property Layout: TOleEnum index 2460 read GetTOleEnumProp;
    property OnClickMacro: WideString index 490 read GetWideStringProp write SetWideStringProp;
    property OnDblClickMacro: WideString index 491 read GetWideStringProp write SetWideStringProp;
    property OnMouseDownMacro: WideString index 487 read GetWideStringProp write SetWideStringProp;
    property OnMouseMoveMacro: WideString index 489 read GetWideStringProp write SetWideStringProp;
    property OnMouseUpMacro: WideString index 488 read GetWideStringProp write SetWideStringProp;
    property LayoutID: Integer index 2492 read GetIntegerProp;
  published
    property Anchors;
    property EventProcPrefix: WideString index 22 read GetWideStringProp write SetWideStringProp stored False;
    property ControlType: Byte index 21 read GetByteProp write SetByteProp stored False;
    property Caption: WideString index 17 read GetWideStringProp write SetWideStringProp stored False;
    property HyperlinkAddress: WideString index 343 read GetWideStringProp write SetWideStringProp stored False;
    property HyperlinkSubAddress: WideString index 347 read GetWideStringProp write SetWideStringProp stored False;
    property Visible: WordBool index 148 read GetWordBoolProp write SetWordBoolProp stored False;
    property DisplayWhen: Byte index 149 read GetByteProp write SetByteProp stored False;
    property Vertical: WordBool index 355 read GetWordBoolProp write SetWordBoolProp stored False;
    property BackStyle: Byte index 29 read GetByteProp write SetByteProp stored False;
    property BackColor: Integer index 28 read GetIntegerProp write SetIntegerProp stored False;
    property SpecialEffect: Byte index 4 read GetByteProp write SetByteProp stored False;
    property BorderStyle: Byte index 9 read GetByteProp write SetByteProp stored False;
    property OldBorderStyle: Byte index 329 read GetByteProp write SetByteProp stored False;
    property BorderColor: Integer index 8 read GetIntegerProp write SetIntegerProp stored False;
    property BorderWidth: Byte index 10 read GetByteProp write SetByteProp stored False;
    property ForeColor: Integer index 204 read GetIntegerProp write SetIntegerProp stored False;
    property FontName: WideString index 34 read GetWideStringProp write SetWideStringProp stored False;
    property FontSize: Smallint index 35 read GetSmallintProp write SetSmallintProp stored False;
    property FontWeight: Smallint index 37 read GetSmallintProp write SetSmallintProp stored False;
    property FontItalic: WordBool index 33 read GetWordBoolProp write SetWordBoolProp stored False;
    property FontUnderline: WordBool index 36 read GetWordBoolProp write SetWordBoolProp stored False;
    property TextAlign: Byte index 136 read GetByteProp write SetByteProp stored False;
    property FontBold: Smallint index 32 read GetSmallintProp write SetSmallintProp stored False;
    property ControlTipText: WideString index 317 read GetWideStringProp write SetWideStringProp stored False;
    property HelpContextId: Integer index 219 read GetIntegerProp write SetIntegerProp stored False;
    property Section: Smallint index 237 read GetSmallintProp write SetSmallintProp stored False;
    property IsVisible: WordBool index 140 read GetWordBoolProp write SetWordBoolProp stored False;
    property InSelection: WordBool index 280 read GetWordBoolProp write SetWordBoolProp stored False;
    property OnClick: WideString index 126 read GetWideStringProp write SetWideStringProp stored False;
    property OnDblClick: WideString index 224 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseDown: WideString index 107 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseMove: WideString index 109 read GetWideStringProp write SetWideStringProp stored False;
    property OnMouseUp: WideString index 108 read GetWideStringProp write SetWideStringProp stored False;
    property ShortcutMenuBar: WideString index 304 read GetWideStringProp write SetWideStringProp stored False;
    property Tag: WideString index 266 read GetWideStringProp write SetWideStringProp stored False;
    property ReadingOrder: Byte index 367 read GetByteProp write SetByteProp stored False;
    property NumeralShapes: Byte index 372 read GetByteProp write SetByteProp stored False;
    property Name: WideString index -2147418112 read GetWideStringProp write SetWideStringProp stored False;
    property LeftMargin: Smallint index 384 read GetSmallintProp write SetSmallintProp stored False;
    property TopMargin: Smallint index 385 read GetSmallintProp write SetSmallintProp stored False;
    property LineSpacing: Smallint index 386 read GetSmallintProp write SetSmallintProp stored False;
    property RightMargin: Smallint index 388 read GetSmallintProp write SetSmallintProp stored False;
    property BottomMargin: Smallint index 389 read GetSmallintProp write SetSmallintProp stored False;
    property LeftPadding: Smallint index 454 read GetSmallintProp write SetSmallintProp stored False;
    property TopPadding: Smallint index 455 read GetSmallintProp write SetSmallintProp stored False;
    property RightPadding: Smallint index 456 read GetSmallintProp write SetSmallintProp stored False;
    property BottomPadding: Smallint index 457 read GetSmallintProp write SetSmallintProp stored False;
    property GridlineStyleLeft: Byte index 458 read GetByteProp write SetByteProp stored False;
    property GridlineStyleTop: Byte index 459 read GetByteProp write SetByteProp stored False;
    property GridlineStyleRight: Byte index 460 read GetByteProp write SetByteProp stored False;
    property GridlineStyleBottom: Byte index 461 read GetByteProp write SetByteProp stored False;
    property GridlineWidthLeft: Byte index 463 read GetByteProp write SetByteProp stored False;
    property GridlineWidthTop: Byte index 464 read GetByteProp write SetByteProp stored False;
    property GridlineWidthRight: Byte index 465 read GetByteProp write SetByteProp stored False;
    property GridlineWidthBottom: Byte index 466 read GetByteProp write SetByteProp stored False;
    property GridlineColor: Integer index 462 read GetIntegerProp write SetIntegerProp stored False;
    property HorizontalAnchor: TOleEnum index 478 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VerticalAnchor: TOleEnum index 477 read GetTOleEnumProp write SetTOleEnumProp stored False;
  end;

procedure Register;

resourcestring
  dtlServerPage = 'ActiveX';

  dtlOcxPage = 'ActiveX';

implementation

uses ComObj;

class function CoFormatCondition.Create: _FormatCondition;
begin
  Result := CreateComObject(CLASS_FormatCondition) as _FormatCondition;
end;

class function CoFormatCondition.CreateRemote(const MachineName: string): _FormatCondition;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FormatCondition) as _FormatCondition;
end;

procedure TFormatCondition.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E27A992D-A330-11D0-81DD-00C04FC2F51B}';
    IntfIID:   '{E27A992C-A330-11D0-81DD-00C04FC2F51B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFormatCondition.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _FormatCondition;
  end;
end;

procedure TFormatCondition.ConnectTo(svrIntf: _FormatCondition);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFormatCondition.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFormatCondition.GetDefaultInterface: _FormatCondition;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFormatCondition.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFormatConditionProperties.Create(Self);
{$ENDIF}
end;

destructor TFormatCondition.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFormatCondition.GetServerProperties: TFormatConditionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFormatCondition.Get_ForeColor: Integer;
begin
    Result := DefaultInterface.ForeColor;
end;

procedure TFormatCondition.Set_ForeColor(plResult: Integer);
begin
  DefaultInterface.Set_ForeColor(plResult);
end;

function TFormatCondition.Get_BackColor: Integer;
begin
    Result := DefaultInterface.BackColor;
end;

procedure TFormatCondition.Set_BackColor(plResult: Integer);
begin
  DefaultInterface.Set_BackColor(plResult);
end;

function TFormatCondition.Get_FontBold: WordBool;
begin
    Result := DefaultInterface.FontBold;
end;

procedure TFormatCondition.Set_FontBold(pfResult: WordBool);
begin
  DefaultInterface.Set_FontBold(pfResult);
end;

function TFormatCondition.Get_FontItalic: WordBool;
begin
    Result := DefaultInterface.FontItalic;
end;

procedure TFormatCondition.Set_FontItalic(pfResult: WordBool);
begin
  DefaultInterface.Set_FontItalic(pfResult);
end;

function TFormatCondition.Get_FontUnderline: WordBool;
begin
    Result := DefaultInterface.FontUnderline;
end;

procedure TFormatCondition.Set_FontUnderline(pfResult: WordBool);
begin
  DefaultInterface.Set_FontUnderline(pfResult);
end;

function TFormatCondition.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TFormatCondition.Set_Enabled(pfResult: WordBool);
begin
  DefaultInterface.Set_Enabled(pfResult);
end;

function TFormatCondition.Get_type_: AcFormatConditionType;
begin
    Result := DefaultInterface.type_;
end;

function TFormatCondition.Get_Operator: AcFormatConditionOperator;
begin
    Result := DefaultInterface.Operator;
end;

function TFormatCondition.Get_Expression1: WideString;
begin
    Result := DefaultInterface.Expression1;
end;

function TFormatCondition.Get_Expression2: WideString;
begin
    Result := DefaultInterface.Expression2;
end;

procedure TFormatCondition.Modify(Type_: AcFormatConditionType; Operator: AcFormatConditionOperator);
begin
  DefaultInterface.Modify(Type_, Operator, EmptyParam, EmptyParam);
end;

procedure TFormatCondition.Modify(Type_: AcFormatConditionType; 
                                  Operator: AcFormatConditionOperator; Expression1: OleVariant);
begin
  DefaultInterface.Modify(Type_, Operator, Expression1, EmptyParam);
end;

procedure TFormatCondition.Modify(Type_: AcFormatConditionType; 
                                  Operator: AcFormatConditionOperator; Expression1: OleVariant; 
                                  Expression2: OleVariant);
begin
  DefaultInterface.Modify(Type_, Operator, Expression1, Expression2);
end;

procedure TFormatCondition.Delete;
begin
  DefaultInterface.Delete;
end;

function TFormatCondition.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFormatConditionProperties.Create(AServer: TFormatCondition);
begin
  inherited Create;
  FServer := AServer;
end;

function TFormatConditionProperties.GetDefaultInterface: _FormatCondition;
begin
  Result := FServer.DefaultInterface;
end;

function TFormatConditionProperties.Get_ForeColor: Integer;
begin
    Result := DefaultInterface.ForeColor;
end;

procedure TFormatConditionProperties.Set_ForeColor(plResult: Integer);
begin
  DefaultInterface.Set_ForeColor(plResult);
end;

function TFormatConditionProperties.Get_BackColor: Integer;
begin
    Result := DefaultInterface.BackColor;
end;

procedure TFormatConditionProperties.Set_BackColor(plResult: Integer);
begin
  DefaultInterface.Set_BackColor(plResult);
end;

function TFormatConditionProperties.Get_FontBold: WordBool;
begin
    Result := DefaultInterface.FontBold;
end;

procedure TFormatConditionProperties.Set_FontBold(pfResult: WordBool);
begin
  DefaultInterface.Set_FontBold(pfResult);
end;

function TFormatConditionProperties.Get_FontItalic: WordBool;
begin
    Result := DefaultInterface.FontItalic;
end;

procedure TFormatConditionProperties.Set_FontItalic(pfResult: WordBool);
begin
  DefaultInterface.Set_FontItalic(pfResult);
end;

function TFormatConditionProperties.Get_FontUnderline: WordBool;
begin
    Result := DefaultInterface.FontUnderline;
end;

procedure TFormatConditionProperties.Set_FontUnderline(pfResult: WordBool);
begin
  DefaultInterface.Set_FontUnderline(pfResult);
end;

function TFormatConditionProperties.Get_Enabled: WordBool;
begin
    Result := DefaultInterface.Enabled;
end;

procedure TFormatConditionProperties.Set_Enabled(pfResult: WordBool);
begin
  DefaultInterface.Set_Enabled(pfResult);
end;

function TFormatConditionProperties.Get_type_: AcFormatConditionType;
begin
    Result := DefaultInterface.type_;
end;

function TFormatConditionProperties.Get_Operator: AcFormatConditionOperator;
begin
    Result := DefaultInterface.Operator;
end;

function TFormatConditionProperties.Get_Expression1: WideString;
begin
    Result := DefaultInterface.Expression1;
end;

function TFormatConditionProperties.Get_Expression2: WideString;
begin
    Result := DefaultInterface.Expression2;
end;

{$ENDIF}

class function CoAccessHyperlink.Create: _Hyperlink;
begin
  Result := CreateComObject(CLASS_AccessHyperlink) as _Hyperlink;
end;

class function CoAccessHyperlink.CreateRemote(const MachineName: string): _Hyperlink;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AccessHyperlink) as _Hyperlink;
end;

procedure TAccessHyperlink.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{50D56610-60AC-11CF-82C9-00AA004B9FE6}';
    IntfIID:   '{50D56611-60AC-11CF-82C9-00AA004B9FE6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAccessHyperlink.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Hyperlink;
  end;
end;

procedure TAccessHyperlink.ConnectTo(svrIntf: _Hyperlink);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAccessHyperlink.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAccessHyperlink.GetDefaultInterface: _Hyperlink;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAccessHyperlink.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAccessHyperlinkProperties.Create(Self);
{$ENDIF}
end;

destructor TAccessHyperlink.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAccessHyperlink.GetServerProperties: TAccessHyperlinkProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAccessHyperlink.Get_SubAddress: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.SubAddress;
end;

procedure TAccessHyperlink.Set_SubAddress(pbstrResult: OleVariant);
  { Warning: The property SubAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubAddress := pbstrResult;
end;

function TAccessHyperlink.Get_Address: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Address;
end;

procedure TAccessHyperlink.Set_Address(pbstrResult: OleVariant);
  { Warning: The property Address has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Address := pbstrResult;
end;

function TAccessHyperlink.Get_EmailSubject: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EmailSubject;
end;

procedure TAccessHyperlink.Set_EmailSubject(pbstrResult: OleVariant);
  { Warning: The property EmailSubject has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EmailSubject := pbstrResult;
end;

function TAccessHyperlink.Get_ScreenTip: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ScreenTip;
end;

procedure TAccessHyperlink.Set_ScreenTip(pbstrResult: OleVariant);
  { Warning: The property ScreenTip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ScreenTip := pbstrResult;
end;

function TAccessHyperlink.Get_TextToDisplay: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TextToDisplay;
end;

procedure TAccessHyperlink.Set_TextToDisplay(pbstrResult: OleVariant);
  { Warning: The property TextToDisplay has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TextToDisplay := pbstrResult;
end;

procedure TAccessHyperlink.AddToFavorites;
begin
  DefaultInterface.AddToFavorites;
end;

procedure TAccessHyperlink.Follow(NewWindow: WordBool; AddHistory: WordBool; ExtraInfo: OleVariant; 
                                  Method: MsoExtraInfoMethod; const HeaderInfo: WideString);
begin
  DefaultInterface.Follow(NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo);
end;

procedure TAccessHyperlink.CreateNewDocument(const FileName: WideString; EditNow: WordBool; 
                                             Overwrite: WordBool);
begin
  DefaultInterface.CreateNewDocument(FileName, EditNow, Overwrite);
end;

function TAccessHyperlink.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAccessHyperlinkProperties.Create(AServer: TAccessHyperlink);
begin
  inherited Create;
  FServer := AServer;
end;

function TAccessHyperlinkProperties.GetDefaultInterface: _Hyperlink;
begin
  Result := FServer.DefaultInterface;
end;

function TAccessHyperlinkProperties.Get_SubAddress: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.SubAddress;
end;

procedure TAccessHyperlinkProperties.Set_SubAddress(pbstrResult: OleVariant);
  { Warning: The property SubAddress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubAddress := pbstrResult;
end;

function TAccessHyperlinkProperties.Get_Address: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Address;
end;

procedure TAccessHyperlinkProperties.Set_Address(pbstrResult: OleVariant);
  { Warning: The property Address has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Address := pbstrResult;
end;

function TAccessHyperlinkProperties.Get_EmailSubject: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.EmailSubject;
end;

procedure TAccessHyperlinkProperties.Set_EmailSubject(pbstrResult: OleVariant);
  { Warning: The property EmailSubject has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EmailSubject := pbstrResult;
end;

function TAccessHyperlinkProperties.Get_ScreenTip: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ScreenTip;
end;

procedure TAccessHyperlinkProperties.Set_ScreenTip(pbstrResult: OleVariant);
  { Warning: The property ScreenTip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ScreenTip := pbstrResult;
end;

function TAccessHyperlinkProperties.Get_TextToDisplay: WideString;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.TextToDisplay;
end;

procedure TAccessHyperlinkProperties.Set_TextToDisplay(pbstrResult: OleVariant);
  { Warning: The property TextToDisplay has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TextToDisplay := pbstrResult;
end;

{$ENDIF}

procedure TAccessControl.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID: '{02F92C80-8F8E-101B-AF4E-00AA003F0F07}';
    EventIID: '';
    EventCount: 0;
    EventDispIDs: nil;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
end;

procedure TAccessControl.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _Control;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessControl.GetControlInterface: _Control;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessControl.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessControl.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessControl.Get_Column(Index: Integer; Row: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Column[Index, Row];
end;

function TAccessControl.Get_Selected(lRow: Integer): Integer;
begin
    Result := DefaultInterface.Selected[lRow];
end;

procedure TAccessControl.Set_Selected(lRow: Integer; pRet: Integer);
begin
  DefaultInterface.Selected[lRow] := pRet;
end;

function TAccessControl.Get_OldValue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldValue;
end;

function TAccessControl.Get_Form: AccessForm;
begin
    Result := DefaultInterface.Form;
end;

function TAccessControl.Get_Report: AccessReport;
begin
    Result := DefaultInterface.Report;
end;

function TAccessControl.Get_ItemData(Index: Integer): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ItemData[Index];
end;

function TAccessControl.Get_Object_: IDispatch;
begin
    Result := DefaultInterface.Object_;
end;

function TAccessControl.Get_ObjectVerbs(Index: Integer): WideString;
begin
    Result := DefaultInterface.ObjectVerbs[Index];
end;

function TAccessControl.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessControl.Get_ItemsSelected: _ItemsSelected;
begin
    Result := DefaultInterface.ItemsSelected;
end;

function TAccessControl.Get_Pages: Pages;
begin
    Result := DefaultInterface.Pages;
end;

function TAccessControl.Get_Controls: Children;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessControl.Get_Hyperlink: _Hyperlink;
begin
    Result := DefaultInterface.Hyperlink;
end;

function TAccessControl.Get_SmartTags: _SmartTags;
begin
    Result := DefaultInterface.SmartTags;
end;

procedure TAccessControl.Undo;
begin
  DefaultInterface.Undo;
end;

procedure TAccessControl.Dropdown;
begin
  DefaultInterface.Dropdown;
end;

procedure TAccessControl.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAccessControl.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

procedure TAccessControl.Goto_;
begin
  DefaultInterface.Goto_;
end;

procedure TAccessControl.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

function TAccessControl._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessControl.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessControl.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessControl.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessControl.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                              Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessControl.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessGroupLevel.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID: '{BC9E4356-F037-11CD-8701-00AA003F0F07}';
    EventIID: '';
    EventCount: 0;
    EventDispIDs: nil;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
end;

procedure TAccessGroupLevel.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _GroupLevel;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessGroupLevel.GetControlInterface: _GroupLevel;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessGroupLevel.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessGroupLevel.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessGroupLevel.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessGroupLevel.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

class function CoFormOld.Create: _Form;
begin
  Result := CreateComObject(CLASS_FormOld) as _Form;
end;

class function CoFormOld.CreateRemote(const MachineName: string): _Form;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FormOld) as _Form;
end;

class function CoReportOld.Create: _Report;
begin
  Result := CreateComObject(CLASS_ReportOld) as _Report;
end;

class function CoReportOld.CreateRemote(const MachineName: string): _Report;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReportOld) as _Report;
end;

class function CoAccessApplication.Create: _Application;
begin
  Result := CreateComObject(CLASS_AccessApplication) as _Application;
end;

class function CoAccessApplication.CreateRemote(const MachineName: string): _Application;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AccessApplication) as _Application;
end;

class function CoAccessReferences.Create: _References;
begin
  Result := CreateComObject(CLASS_AccessReferences) as _References;
end;

class function CoAccessReferences.CreateRemote(const MachineName: string): _References;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AccessReferences) as _References;
end;

procedure TAccessReferences.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EB106214-9C89-11CF-A2B3-00A0C90542FF}';
    IntfIID:   '{EB106213-9C89-11CF-A2B3-00A0C90542FF}';
    EventIID:  '{F163F201-ADA2-11CF-89A9-00A0C9054129}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAccessReferences.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _References;
  end;
end;

procedure TAccessReferences.ConnectTo(svrIntf: _References);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TAccessReferences.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TAccessReferences.GetDefaultInterface: _References;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAccessReferences.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAccessReferencesProperties.Create(Self);
{$ENDIF}
end;

destructor TAccessReferences.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAccessReferences.GetServerProperties: TAccessReferencesProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TAccessReferences.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    0: if Assigned(FOnItemAdded) then
         FOnItemAdded(Self, IUnknown(TVarData(Params[0]).VPointer) as Reference {const Reference});
    1: if Assigned(FOnItemRemoved) then
         FOnItemRemoved(Self, IUnknown(TVarData(Params[0]).VPointer) as Reference {const Reference});
  end; {case DispID}
end;

function TAccessReferences.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessReferences.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TAccessReferences.Item(var_: OleVariant): Reference;
begin
  Result := DefaultInterface.Item(var_);
end;

function TAccessReferences._NewEnum: IUnknown;
begin
  Result := DefaultInterface._NewEnum;
end;

function TAccessReferences.AddFromGuid(const Guid: WideString; Major: Integer; Minor: Integer): Reference;
begin
  Result := DefaultInterface.AddFromGuid(Guid, Major, Minor);
end;

function TAccessReferences.AddFromFile(const FileName: WideString): Reference;
begin
  Result := DefaultInterface.AddFromFile(FileName);
end;

procedure TAccessReferences.Remove(const Reference: Reference);
begin
  DefaultInterface.Remove(Reference);
end;

function TAccessReferences.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAccessReferencesProperties.Create(AServer: TAccessReferences);
begin
  inherited Create;
  FServer := AServer;
end;

function TAccessReferencesProperties.GetDefaultInterface: _References;
begin
  Result := FServer.DefaultInterface;
end;

function TAccessReferencesProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessReferencesProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoDataAccessPage.Create: _DataAccessPage;
begin
  Result := CreateComObject(CLASS_DataAccessPage) as _DataAccessPage;
end;

class function CoDataAccessPage.CreateRemote(const MachineName: string): _DataAccessPage;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DataAccessPage) as _DataAccessPage;
end;

class function CoAllForms.Create: AllObjects;
begin
  Result := CreateComObject(CLASS_AllForms) as AllObjects;
end;

class function CoAllForms.CreateRemote(const MachineName: string): AllObjects;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AllForms) as AllObjects;
end;

procedure TAllForms.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{08F6C813-3CFD-11D1-98BC-006008197D41}';
    IntfIID:   '{DDBD4001-44D5-11D1-98C0-006008197D41}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAllForms.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as AllObjects;
  end;
end;

procedure TAllForms.ConnectTo(svrIntf: AllObjects);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAllForms.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAllForms.GetDefaultInterface: AllObjects;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAllForms.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAllFormsProperties.Create(Self);
{$ENDIF}
end;

destructor TAllForms.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAllForms.GetServerProperties: TAllFormsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAllForms.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllForms.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllForms.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllForms.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TAllForms.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAllFormsProperties.Create(AServer: TAllForms);
begin
  inherited Create;
  FServer := AServer;
end;

function TAllFormsProperties.GetDefaultInterface: AllObjects;
begin
  Result := FServer.DefaultInterface;
end;

function TAllFormsProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllFormsProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllFormsProperties.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllFormsProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoAllReports.Create: AllObjects;
begin
  Result := CreateComObject(CLASS_AllReports) as AllObjects;
end;

class function CoAllReports.CreateRemote(const MachineName: string): AllObjects;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AllReports) as AllObjects;
end;

procedure TAllReports.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{08F6C814-3CFD-11D1-98BC-006008197D41}';
    IntfIID:   '{DDBD4001-44D5-11D1-98C0-006008197D41}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAllReports.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as AllObjects;
  end;
end;

procedure TAllReports.ConnectTo(svrIntf: AllObjects);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAllReports.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAllReports.GetDefaultInterface: AllObjects;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAllReports.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAllReportsProperties.Create(Self);
{$ENDIF}
end;

destructor TAllReports.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAllReports.GetServerProperties: TAllReportsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAllReports.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllReports.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllReports.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllReports.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TAllReports.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAllReportsProperties.Create(AServer: TAllReports);
begin
  inherited Create;
  FServer := AServer;
end;

function TAllReportsProperties.GetDefaultInterface: AllObjects;
begin
  Result := FServer.DefaultInterface;
end;

function TAllReportsProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllReportsProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllReportsProperties.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllReportsProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoAllMacros.Create: AllObjects;
begin
  Result := CreateComObject(CLASS_AllMacros) as AllObjects;
end;

class function CoAllMacros.CreateRemote(const MachineName: string): AllObjects;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AllMacros) as AllObjects;
end;

procedure TAllMacros.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{08F6C815-3CFD-11D1-98BC-006008197D41}';
    IntfIID:   '{DDBD4001-44D5-11D1-98C0-006008197D41}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAllMacros.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as AllObjects;
  end;
end;

procedure TAllMacros.ConnectTo(svrIntf: AllObjects);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAllMacros.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAllMacros.GetDefaultInterface: AllObjects;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAllMacros.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAllMacrosProperties.Create(Self);
{$ENDIF}
end;

destructor TAllMacros.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAllMacros.GetServerProperties: TAllMacrosProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAllMacros.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllMacros.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllMacros.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllMacros.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TAllMacros.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAllMacrosProperties.Create(AServer: TAllMacros);
begin
  inherited Create;
  FServer := AServer;
end;

function TAllMacrosProperties.GetDefaultInterface: AllObjects;
begin
  Result := FServer.DefaultInterface;
end;

function TAllMacrosProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllMacrosProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllMacrosProperties.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllMacrosProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoAllModules.Create: AllObjects;
begin
  Result := CreateComObject(CLASS_AllModules) as AllObjects;
end;

class function CoAllModules.CreateRemote(const MachineName: string): AllObjects;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AllModules) as AllObjects;
end;

procedure TAllModules.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{08F6C816-3CFD-11D1-98BC-006008197D41}';
    IntfIID:   '{DDBD4001-44D5-11D1-98C0-006008197D41}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAllModules.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as AllObjects;
  end;
end;

procedure TAllModules.ConnectTo(svrIntf: AllObjects);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAllModules.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAllModules.GetDefaultInterface: AllObjects;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAllModules.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAllModulesProperties.Create(Self);
{$ENDIF}
end;

destructor TAllModules.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAllModules.GetServerProperties: TAllModulesProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAllModules.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllModules.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllModules.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllModules.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TAllModules.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAllModulesProperties.Create(AServer: TAllModules);
begin
  inherited Create;
  FServer := AServer;
end;

function TAllModulesProperties.GetDefaultInterface: AllObjects;
begin
  Result := FServer.DefaultInterface;
end;

function TAllModulesProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllModulesProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllModulesProperties.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllModulesProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoAllDataAccessPages.Create: AllObjects;
begin
  Result := CreateComObject(CLASS_AllDataAccessPages) as AllObjects;
end;

class function CoAllDataAccessPages.CreateRemote(const MachineName: string): AllObjects;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AllDataAccessPages) as AllObjects;
end;

class function CoAllTables.Create: AllObjects;
begin
  Result := CreateComObject(CLASS_AllTables) as AllObjects;
end;

class function CoAllTables.CreateRemote(const MachineName: string): AllObjects;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AllTables) as AllObjects;
end;

procedure TAllTables.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{08F6C81B-3CFD-11D1-98BC-006008197D41}';
    IntfIID:   '{DDBD4001-44D5-11D1-98C0-006008197D41}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAllTables.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as AllObjects;
  end;
end;

procedure TAllTables.ConnectTo(svrIntf: AllObjects);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAllTables.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAllTables.GetDefaultInterface: AllObjects;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAllTables.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAllTablesProperties.Create(Self);
{$ENDIF}
end;

destructor TAllTables.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAllTables.GetServerProperties: TAllTablesProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAllTables.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllTables.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllTables.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllTables.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TAllTables.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAllTablesProperties.Create(AServer: TAllTables);
begin
  inherited Create;
  FServer := AServer;
end;

function TAllTablesProperties.GetDefaultInterface: AllObjects;
begin
  Result := FServer.DefaultInterface;
end;

function TAllTablesProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllTablesProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllTablesProperties.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllTablesProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoAllQueries.Create: AllObjects;
begin
  Result := CreateComObject(CLASS_AllQueries) as AllObjects;
end;

class function CoAllQueries.CreateRemote(const MachineName: string): AllObjects;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AllQueries) as AllObjects;
end;

procedure TAllQueries.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{08F6C81C-3CFD-11D1-98BC-006008197D41}';
    IntfIID:   '{DDBD4001-44D5-11D1-98C0-006008197D41}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAllQueries.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as AllObjects;
  end;
end;

procedure TAllQueries.ConnectTo(svrIntf: AllObjects);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAllQueries.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAllQueries.GetDefaultInterface: AllObjects;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAllQueries.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAllQueriesProperties.Create(Self);
{$ENDIF}
end;

destructor TAllQueries.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAllQueries.GetServerProperties: TAllQueriesProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAllQueries.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllQueries.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllQueries.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllQueries.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TAllQueries.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAllQueriesProperties.Create(AServer: TAllQueries);
begin
  inherited Create;
  FServer := AServer;
end;

function TAllQueriesProperties.GetDefaultInterface: AllObjects;
begin
  Result := FServer.DefaultInterface;
end;

function TAllQueriesProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllQueriesProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllQueriesProperties.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllQueriesProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoAllViews.Create: AllObjects;
begin
  Result := CreateComObject(CLASS_AllViews) as AllObjects;
end;

class function CoAllViews.CreateRemote(const MachineName: string): AllObjects;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AllViews) as AllObjects;
end;

procedure TAllViews.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{08F6C81E-3CFD-11D1-98BC-006008197D41}';
    IntfIID:   '{DDBD4001-44D5-11D1-98C0-006008197D41}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAllViews.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as AllObjects;
  end;
end;

procedure TAllViews.ConnectTo(svrIntf: AllObjects);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAllViews.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAllViews.GetDefaultInterface: AllObjects;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAllViews.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAllViewsProperties.Create(Self);
{$ENDIF}
end;

destructor TAllViews.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAllViews.GetServerProperties: TAllViewsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAllViews.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllViews.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllViews.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllViews.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TAllViews.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAllViewsProperties.Create(AServer: TAllViews);
begin
  inherited Create;
  FServer := AServer;
end;

function TAllViewsProperties.GetDefaultInterface: AllObjects;
begin
  Result := FServer.DefaultInterface;
end;

function TAllViewsProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllViewsProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllViewsProperties.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllViewsProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoAllStoredProcedures.Create: AllObjects;
begin
  Result := CreateComObject(CLASS_AllStoredProcedures) as AllObjects;
end;

class function CoAllStoredProcedures.CreateRemote(const MachineName: string): AllObjects;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AllStoredProcedures) as AllObjects;
end;

procedure TAllStoredProcedures.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{08F6C820-3CFD-11D1-98BC-006008197D41}';
    IntfIID:   '{DDBD4001-44D5-11D1-98C0-006008197D41}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAllStoredProcedures.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as AllObjects;
  end;
end;

procedure TAllStoredProcedures.ConnectTo(svrIntf: AllObjects);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAllStoredProcedures.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAllStoredProcedures.GetDefaultInterface: AllObjects;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAllStoredProcedures.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAllStoredProceduresProperties.Create(Self);
{$ENDIF}
end;

destructor TAllStoredProcedures.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAllStoredProcedures.GetServerProperties: TAllStoredProceduresProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAllStoredProcedures.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllStoredProcedures.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllStoredProcedures.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllStoredProcedures.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TAllStoredProcedures.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAllStoredProceduresProperties.Create(AServer: TAllStoredProcedures);
begin
  inherited Create;
  FServer := AServer;
end;

function TAllStoredProceduresProperties.GetDefaultInterface: AllObjects;
begin
  Result := FServer.DefaultInterface;
end;

function TAllStoredProceduresProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllStoredProceduresProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllStoredProceduresProperties.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllStoredProceduresProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoAllDatabaseDiagrams.Create: AllObjects;
begin
  Result := CreateComObject(CLASS_AllDatabaseDiagrams) as AllObjects;
end;

class function CoAllDatabaseDiagrams.CreateRemote(const MachineName: string): AllObjects;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AllDatabaseDiagrams) as AllObjects;
end;

procedure TAllDatabaseDiagrams.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{08F6C821-3CFD-11D1-98BC-006008197D41}';
    IntfIID:   '{DDBD4001-44D5-11D1-98C0-006008197D41}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAllDatabaseDiagrams.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as AllObjects;
  end;
end;

procedure TAllDatabaseDiagrams.ConnectTo(svrIntf: AllObjects);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAllDatabaseDiagrams.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAllDatabaseDiagrams.GetDefaultInterface: AllObjects;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAllDatabaseDiagrams.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAllDatabaseDiagramsProperties.Create(Self);
{$ENDIF}
end;

destructor TAllDatabaseDiagrams.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAllDatabaseDiagrams.GetServerProperties: TAllDatabaseDiagramsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAllDatabaseDiagrams.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllDatabaseDiagrams.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllDatabaseDiagrams.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllDatabaseDiagrams.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TAllDatabaseDiagrams.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAllDatabaseDiagramsProperties.Create(AServer: TAllDatabaseDiagrams);
begin
  inherited Create;
  FServer := AServer;
end;

function TAllDatabaseDiagramsProperties.GetDefaultInterface: AllObjects;
begin
  Result := FServer.DefaultInterface;
end;

function TAllDatabaseDiagramsProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllDatabaseDiagramsProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllDatabaseDiagramsProperties.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllDatabaseDiagramsProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoCurrentProject.Create: _CurrentProject;
begin
  Result := CreateComObject(CLASS_CurrentProject) as _CurrentProject;
end;

class function CoCurrentProject.CreateRemote(const MachineName: string): _CurrentProject;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CurrentProject) as _CurrentProject;
end;

procedure TCurrentProject.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{08F6C811-3CFD-11D1-98BC-006008197D41}';
    IntfIID:   '{9212BA71-3E79-11D1-98BD-006008197D41}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCurrentProject.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _CurrentProject;
  end;
end;

procedure TCurrentProject.ConnectTo(svrIntf: _CurrentProject);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCurrentProject.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCurrentProject.GetDefaultInterface: _CurrentProject;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCurrentProject.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCurrentProjectProperties.Create(Self);
{$ENDIF}
end;

destructor TCurrentProject.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCurrentProject.GetServerProperties: TCurrentProjectProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCurrentProject.Get_AllForms: AllForms;
begin
    Result := DefaultInterface.AllForms;
end;

function TCurrentProject.Get_AllReports: AllReports;
begin
    Result := DefaultInterface.AllReports;
end;

function TCurrentProject.Get_AllMacros: AllMacros;
begin
    Result := DefaultInterface.AllMacros;
end;

function TCurrentProject.Get_AllModules: AllModules;
begin
    Result := DefaultInterface.AllModules;
end;

function TCurrentProject.Get_AllDataAccessPages: AllDataAccessPages;
begin
    Result := DefaultInterface.AllDataAccessPages;
end;

function TCurrentProject.Get_ProjectType: AcProjectType;
begin
    Result := DefaultInterface.ProjectType;
end;

function TCurrentProject.Get_BaseConnectionString: WideString;
begin
    Result := DefaultInterface.BaseConnectionString;
end;

function TCurrentProject.Get_IsConnected: WordBool;
begin
    Result := DefaultInterface.IsConnected;
end;

function TCurrentProject.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TCurrentProject.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

function TCurrentProject.Get_FullName: WideString;
begin
    Result := DefaultInterface.FullName;
end;

function TCurrentProject.Get_Connection: Connection;
begin
    Result := DefaultInterface.Connection;
end;

function TCurrentProject.Get_Properties: AccessObjectProperties;
begin
    Result := DefaultInterface.Properties;
end;

function TCurrentProject.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TCurrentProject.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TCurrentProject.Get_RemovePersonalInformation: WordBool;
begin
    Result := DefaultInterface.RemovePersonalInformation;
end;

procedure TCurrentProject.Set_RemovePersonalInformation(pf: WordBool);
begin
  DefaultInterface.Set_RemovePersonalInformation(pf);
end;

function TCurrentProject.Get_FileFormat: AcFileFormat;
begin
    Result := DefaultInterface.FileFormat;
end;

function TCurrentProject.Get_AccessConnection: Connection;
begin
    Result := DefaultInterface.AccessConnection;
end;

function TCurrentProject.Get_ImportExportSpecifications: ImportExportSpecifications;
begin
    Result := DefaultInterface.ImportExportSpecifications;
end;

function TCurrentProject.Get_IsTrusted: WordBool;
begin
    Result := DefaultInterface.IsTrusted;
end;

procedure TCurrentProject.OpenConnection;
begin
  DefaultInterface.OpenConnection(EmptyParam, EmptyParam, EmptyParam);
end;

procedure TCurrentProject.OpenConnection(BaseConnectionString: OleVariant);
begin
  DefaultInterface.OpenConnection(BaseConnectionString, EmptyParam, EmptyParam);
end;

procedure TCurrentProject.OpenConnection(BaseConnectionString: OleVariant; UserID: OleVariant);
begin
  DefaultInterface.OpenConnection(BaseConnectionString, UserID, EmptyParam);
end;

procedure TCurrentProject.OpenConnection(BaseConnectionString: OleVariant; UserID: OleVariant; 
                                         Password: OleVariant);
begin
  DefaultInterface.OpenConnection(BaseConnectionString, UserID, Password);
end;

procedure TCurrentProject.CloseConnection;
begin
  DefaultInterface.CloseConnection;
end;

procedure TCurrentProject.UpdateDependencyInfo;
begin
  DefaultInterface.UpdateDependencyInfo;
end;

function TCurrentProject.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCurrentProjectProperties.Create(AServer: TCurrentProject);
begin
  inherited Create;
  FServer := AServer;
end;

function TCurrentProjectProperties.GetDefaultInterface: _CurrentProject;
begin
  Result := FServer.DefaultInterface;
end;

function TCurrentProjectProperties.Get_AllForms: AllForms;
begin
    Result := DefaultInterface.AllForms;
end;

function TCurrentProjectProperties.Get_AllReports: AllReports;
begin
    Result := DefaultInterface.AllReports;
end;

function TCurrentProjectProperties.Get_AllMacros: AllMacros;
begin
    Result := DefaultInterface.AllMacros;
end;

function TCurrentProjectProperties.Get_AllModules: AllModules;
begin
    Result := DefaultInterface.AllModules;
end;

function TCurrentProjectProperties.Get_AllDataAccessPages: AllDataAccessPages;
begin
    Result := DefaultInterface.AllDataAccessPages;
end;

function TCurrentProjectProperties.Get_ProjectType: AcProjectType;
begin
    Result := DefaultInterface.ProjectType;
end;

function TCurrentProjectProperties.Get_BaseConnectionString: WideString;
begin
    Result := DefaultInterface.BaseConnectionString;
end;

function TCurrentProjectProperties.Get_IsConnected: WordBool;
begin
    Result := DefaultInterface.IsConnected;
end;

function TCurrentProjectProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TCurrentProjectProperties.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

function TCurrentProjectProperties.Get_FullName: WideString;
begin
    Result := DefaultInterface.FullName;
end;

function TCurrentProjectProperties.Get_Connection: Connection;
begin
    Result := DefaultInterface.Connection;
end;

function TCurrentProjectProperties.Get_Properties: AccessObjectProperties;
begin
    Result := DefaultInterface.Properties;
end;

function TCurrentProjectProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TCurrentProjectProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TCurrentProjectProperties.Get_RemovePersonalInformation: WordBool;
begin
    Result := DefaultInterface.RemovePersonalInformation;
end;

procedure TCurrentProjectProperties.Set_RemovePersonalInformation(pf: WordBool);
begin
  DefaultInterface.Set_RemovePersonalInformation(pf);
end;

function TCurrentProjectProperties.Get_FileFormat: AcFileFormat;
begin
    Result := DefaultInterface.FileFormat;
end;

function TCurrentProjectProperties.Get_AccessConnection: Connection;
begin
    Result := DefaultInterface.AccessConnection;
end;

function TCurrentProjectProperties.Get_ImportExportSpecifications: ImportExportSpecifications;
begin
    Result := DefaultInterface.ImportExportSpecifications;
end;

function TCurrentProjectProperties.Get_IsTrusted: WordBool;
begin
    Result := DefaultInterface.IsTrusted;
end;

{$ENDIF}

class function CoCurrentData.Create: _CurrentData;
begin
  Result := CreateComObject(CLASS_CurrentData) as _CurrentData;
end;

class function CoCurrentData.CreateRemote(const MachineName: string): _CurrentData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CurrentData) as _CurrentData;
end;

procedure TCurrentData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{08F6C819-3CFD-11D1-98BC-006008197D41}';
    IntfIID:   '{9212BA73-3E79-11D1-98BD-006008197D41}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCurrentData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _CurrentData;
  end;
end;

procedure TCurrentData.ConnectTo(svrIntf: _CurrentData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCurrentData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCurrentData.GetDefaultInterface: _CurrentData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCurrentData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCurrentDataProperties.Create(Self);
{$ENDIF}
end;

destructor TCurrentData.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCurrentData.GetServerProperties: TCurrentDataProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCurrentData.Get_AllTables: AllTables;
begin
    Result := DefaultInterface.AllTables;
end;

function TCurrentData.Get_AllQueries: AllQueries;
begin
    Result := DefaultInterface.AllQueries;
end;

function TCurrentData.Get_AllViews: AllViews;
begin
    Result := DefaultInterface.AllViews;
end;

function TCurrentData.Get_AllStoredProcedures: AllStoredProcedures;
begin
    Result := DefaultInterface.AllStoredProcedures;
end;

function TCurrentData.Get_AllDatabaseDiagrams: AllDatabaseDiagrams;
begin
    Result := DefaultInterface.AllDatabaseDiagrams;
end;

function TCurrentData.Get_AllFunctions: AllFunctions;
begin
    Result := DefaultInterface.AllFunctions;
end;

function TCurrentData.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCurrentDataProperties.Create(AServer: TCurrentData);
begin
  inherited Create;
  FServer := AServer;
end;

function TCurrentDataProperties.GetDefaultInterface: _CurrentData;
begin
  Result := FServer.DefaultInterface;
end;

function TCurrentDataProperties.Get_AllTables: AllTables;
begin
    Result := DefaultInterface.AllTables;
end;

function TCurrentDataProperties.Get_AllQueries: AllQueries;
begin
    Result := DefaultInterface.AllQueries;
end;

function TCurrentDataProperties.Get_AllViews: AllViews;
begin
    Result := DefaultInterface.AllViews;
end;

function TCurrentDataProperties.Get_AllStoredProcedures: AllStoredProcedures;
begin
    Result := DefaultInterface.AllStoredProcedures;
end;

function TCurrentDataProperties.Get_AllDatabaseDiagrams: AllDatabaseDiagrams;
begin
    Result := DefaultInterface.AllDatabaseDiagrams;
end;

function TCurrentDataProperties.Get_AllFunctions: AllFunctions;
begin
    Result := DefaultInterface.AllFunctions;
end;

{$ENDIF}

class function CoCodeProject.Create: _CurrentProject;
begin
  Result := CreateComObject(CLASS_CodeProject) as _CurrentProject;
end;

class function CoCodeProject.CreateRemote(const MachineName: string): _CurrentProject;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CodeProject) as _CurrentProject;
end;

procedure TCodeProject.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9212BA72-3E79-11D1-98BD-006008197D41}';
    IntfIID:   '{9212BA71-3E79-11D1-98BD-006008197D41}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCodeProject.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _CurrentProject;
  end;
end;

procedure TCodeProject.ConnectTo(svrIntf: _CurrentProject);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCodeProject.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCodeProject.GetDefaultInterface: _CurrentProject;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCodeProject.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCodeProjectProperties.Create(Self);
{$ENDIF}
end;

destructor TCodeProject.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCodeProject.GetServerProperties: TCodeProjectProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCodeProject.Get_AllForms: AllForms;
begin
    Result := DefaultInterface.AllForms;
end;

function TCodeProject.Get_AllReports: AllReports;
begin
    Result := DefaultInterface.AllReports;
end;

function TCodeProject.Get_AllMacros: AllMacros;
begin
    Result := DefaultInterface.AllMacros;
end;

function TCodeProject.Get_AllModules: AllModules;
begin
    Result := DefaultInterface.AllModules;
end;

function TCodeProject.Get_AllDataAccessPages: AllDataAccessPages;
begin
    Result := DefaultInterface.AllDataAccessPages;
end;

function TCodeProject.Get_ProjectType: AcProjectType;
begin
    Result := DefaultInterface.ProjectType;
end;

function TCodeProject.Get_BaseConnectionString: WideString;
begin
    Result := DefaultInterface.BaseConnectionString;
end;

function TCodeProject.Get_IsConnected: WordBool;
begin
    Result := DefaultInterface.IsConnected;
end;

function TCodeProject.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TCodeProject.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

function TCodeProject.Get_FullName: WideString;
begin
    Result := DefaultInterface.FullName;
end;

function TCodeProject.Get_Connection: Connection;
begin
    Result := DefaultInterface.Connection;
end;

function TCodeProject.Get_Properties: AccessObjectProperties;
begin
    Result := DefaultInterface.Properties;
end;

function TCodeProject.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TCodeProject.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TCodeProject.Get_RemovePersonalInformation: WordBool;
begin
    Result := DefaultInterface.RemovePersonalInformation;
end;

procedure TCodeProject.Set_RemovePersonalInformation(pf: WordBool);
begin
  DefaultInterface.Set_RemovePersonalInformation(pf);
end;

function TCodeProject.Get_FileFormat: AcFileFormat;
begin
    Result := DefaultInterface.FileFormat;
end;

function TCodeProject.Get_AccessConnection: Connection;
begin
    Result := DefaultInterface.AccessConnection;
end;

function TCodeProject.Get_ImportExportSpecifications: ImportExportSpecifications;
begin
    Result := DefaultInterface.ImportExportSpecifications;
end;

function TCodeProject.Get_IsTrusted: WordBool;
begin
    Result := DefaultInterface.IsTrusted;
end;

procedure TCodeProject.OpenConnection;
begin
  DefaultInterface.OpenConnection(EmptyParam, EmptyParam, EmptyParam);
end;

procedure TCodeProject.OpenConnection(BaseConnectionString: OleVariant);
begin
  DefaultInterface.OpenConnection(BaseConnectionString, EmptyParam, EmptyParam);
end;

procedure TCodeProject.OpenConnection(BaseConnectionString: OleVariant; UserID: OleVariant);
begin
  DefaultInterface.OpenConnection(BaseConnectionString, UserID, EmptyParam);
end;

procedure TCodeProject.OpenConnection(BaseConnectionString: OleVariant; UserID: OleVariant; 
                                      Password: OleVariant);
begin
  DefaultInterface.OpenConnection(BaseConnectionString, UserID, Password);
end;

procedure TCodeProject.CloseConnection;
begin
  DefaultInterface.CloseConnection;
end;

procedure TCodeProject.UpdateDependencyInfo;
begin
  DefaultInterface.UpdateDependencyInfo;
end;

function TCodeProject.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCodeProjectProperties.Create(AServer: TCodeProject);
begin
  inherited Create;
  FServer := AServer;
end;

function TCodeProjectProperties.GetDefaultInterface: _CurrentProject;
begin
  Result := FServer.DefaultInterface;
end;

function TCodeProjectProperties.Get_AllForms: AllForms;
begin
    Result := DefaultInterface.AllForms;
end;

function TCodeProjectProperties.Get_AllReports: AllReports;
begin
    Result := DefaultInterface.AllReports;
end;

function TCodeProjectProperties.Get_AllMacros: AllMacros;
begin
    Result := DefaultInterface.AllMacros;
end;

function TCodeProjectProperties.Get_AllModules: AllModules;
begin
    Result := DefaultInterface.AllModules;
end;

function TCodeProjectProperties.Get_AllDataAccessPages: AllDataAccessPages;
begin
    Result := DefaultInterface.AllDataAccessPages;
end;

function TCodeProjectProperties.Get_ProjectType: AcProjectType;
begin
    Result := DefaultInterface.ProjectType;
end;

function TCodeProjectProperties.Get_BaseConnectionString: WideString;
begin
    Result := DefaultInterface.BaseConnectionString;
end;

function TCodeProjectProperties.Get_IsConnected: WordBool;
begin
    Result := DefaultInterface.IsConnected;
end;

function TCodeProjectProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TCodeProjectProperties.Get_Path: WideString;
begin
    Result := DefaultInterface.Path;
end;

function TCodeProjectProperties.Get_FullName: WideString;
begin
    Result := DefaultInterface.FullName;
end;

function TCodeProjectProperties.Get_Connection: Connection;
begin
    Result := DefaultInterface.Connection;
end;

function TCodeProjectProperties.Get_Properties: AccessObjectProperties;
begin
    Result := DefaultInterface.Properties;
end;

function TCodeProjectProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TCodeProjectProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TCodeProjectProperties.Get_RemovePersonalInformation: WordBool;
begin
    Result := DefaultInterface.RemovePersonalInformation;
end;

procedure TCodeProjectProperties.Set_RemovePersonalInformation(pf: WordBool);
begin
  DefaultInterface.Set_RemovePersonalInformation(pf);
end;

function TCodeProjectProperties.Get_FileFormat: AcFileFormat;
begin
    Result := DefaultInterface.FileFormat;
end;

function TCodeProjectProperties.Get_AccessConnection: Connection;
begin
    Result := DefaultInterface.AccessConnection;
end;

function TCodeProjectProperties.Get_ImportExportSpecifications: ImportExportSpecifications;
begin
    Result := DefaultInterface.ImportExportSpecifications;
end;

function TCodeProjectProperties.Get_IsTrusted: WordBool;
begin
    Result := DefaultInterface.IsTrusted;
end;

{$ENDIF}

class function CoCodeData.Create: _CurrentData;
begin
  Result := CreateComObject(CLASS_CodeData) as _CurrentData;
end;

class function CoCodeData.CreateRemote(const MachineName: string): _CurrentData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CodeData) as _CurrentData;
end;

procedure TCodeData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{08F6C81A-3CFD-11D1-98BC-006008197D41}';
    IntfIID:   '{9212BA73-3E79-11D1-98BD-006008197D41}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCodeData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _CurrentData;
  end;
end;

procedure TCodeData.ConnectTo(svrIntf: _CurrentData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCodeData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCodeData.GetDefaultInterface: _CurrentData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCodeData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCodeDataProperties.Create(Self);
{$ENDIF}
end;

destructor TCodeData.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCodeData.GetServerProperties: TCodeDataProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCodeData.Get_AllTables: AllTables;
begin
    Result := DefaultInterface.AllTables;
end;

function TCodeData.Get_AllQueries: AllQueries;
begin
    Result := DefaultInterface.AllQueries;
end;

function TCodeData.Get_AllViews: AllViews;
begin
    Result := DefaultInterface.AllViews;
end;

function TCodeData.Get_AllStoredProcedures: AllStoredProcedures;
begin
    Result := DefaultInterface.AllStoredProcedures;
end;

function TCodeData.Get_AllDatabaseDiagrams: AllDatabaseDiagrams;
begin
    Result := DefaultInterface.AllDatabaseDiagrams;
end;

function TCodeData.Get_AllFunctions: AllFunctions;
begin
    Result := DefaultInterface.AllFunctions;
end;

function TCodeData.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCodeDataProperties.Create(AServer: TCodeData);
begin
  inherited Create;
  FServer := AServer;
end;

function TCodeDataProperties.GetDefaultInterface: _CurrentData;
begin
  Result := FServer.DefaultInterface;
end;

function TCodeDataProperties.Get_AllTables: AllTables;
begin
    Result := DefaultInterface.AllTables;
end;

function TCodeDataProperties.Get_AllQueries: AllQueries;
begin
    Result := DefaultInterface.AllQueries;
end;

function TCodeDataProperties.Get_AllViews: AllViews;
begin
    Result := DefaultInterface.AllViews;
end;

function TCodeDataProperties.Get_AllStoredProcedures: AllStoredProcedures;
begin
    Result := DefaultInterface.AllStoredProcedures;
end;

function TCodeDataProperties.Get_AllDatabaseDiagrams: AllDatabaseDiagrams;
begin
    Result := DefaultInterface.AllDatabaseDiagrams;
end;

function TCodeDataProperties.Get_AllFunctions: AllFunctions;
begin
    Result := DefaultInterface.AllFunctions;
end;

{$ENDIF}

class function CoWizHook.Create: _WizHook;
begin
  Result := CreateComObject(CLASS_WizHook) as _WizHook;
end;

class function CoWizHook.CreateRemote(const MachineName: string): _WizHook;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WizHook) as _WizHook;
end;

class function CoDefaultWebOptions.Create: _DefaultWebOptions;
begin
  Result := CreateComObject(CLASS_DefaultWebOptions) as _DefaultWebOptions;
end;

class function CoDefaultWebOptions.CreateRemote(const MachineName: string): _DefaultWebOptions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DefaultWebOptions) as _DefaultWebOptions;
end;

class function CoAccessWebOptions.Create: _WebOptions;
begin
  Result := CreateComObject(CLASS_AccessWebOptions) as _WebOptions;
end;

class function CoAccessWebOptions.CreateRemote(const MachineName: string): _WebOptions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AccessWebOptions) as _WebOptions;
end;

class function CoClass_.Create: _Dummy;
begin
  Result := CreateComObject(CLASS_Class_) as _Dummy;
end;

class function CoClass_.CreateRemote(const MachineName: string): _Dummy;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Class_) as _Dummy;
end;

class function CoPrinter.Create: _Printer;
begin
  Result := CreateComObject(CLASS_Printer) as _Printer;
end;

class function CoPrinter.CreateRemote(const MachineName: string): _Printer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Printer) as _Printer;
end;

procedure TPrinter.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DBC5175E-A8ED-11D3-A0DD-00C04F68712B}';
    IntfIID:   '{DBC5175F-A8ED-11D3-A0DD-00C04F68712B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPrinter.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Printer;
  end;
end;

procedure TPrinter.ConnectTo(svrIntf: _Printer);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPrinter.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPrinter.GetDefaultInterface: _Printer;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TPrinter.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TPrinterProperties.Create(Self);
{$ENDIF}
end;

destructor TPrinter.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TPrinter.GetServerProperties: TPrinterProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TPrinter.Get_ColorMode: AcPrintColor;
begin
    Result := DefaultInterface.ColorMode;
end;

procedure TPrinter.Set_ColorMode(pRet: AcPrintColor);
begin
  DefaultInterface.Set_ColorMode(pRet);
end;

function TPrinter.Get_Copies: Integer;
begin
    Result := DefaultInterface.Copies;
end;

procedure TPrinter.Set_Copies(pRet: Integer);
begin
  DefaultInterface.Set_Copies(pRet);
end;

function TPrinter.Get_DeviceName: WideString;
begin
    Result := DefaultInterface.DeviceName;
end;

function TPrinter.Get_DriverName: WideString;
begin
    Result := DefaultInterface.DriverName;
end;

function TPrinter.Get_Duplex: AcPrintDuplex;
begin
    Result := DefaultInterface.Duplex;
end;

procedure TPrinter.Set_Duplex(pRet: AcPrintDuplex);
begin
  DefaultInterface.Set_Duplex(pRet);
end;

function TPrinter.Get_Orientation: AcPrintOrientation;
begin
    Result := DefaultInterface.Orientation;
end;

procedure TPrinter.Set_Orientation(pRet: AcPrintOrientation);
begin
  DefaultInterface.Set_Orientation(pRet);
end;

function TPrinter.Get_PaperBin: AcPrintPaperBin;
begin
    Result := DefaultInterface.PaperBin;
end;

procedure TPrinter.Set_PaperBin(pRet: AcPrintPaperBin);
begin
  DefaultInterface.Set_PaperBin(pRet);
end;

function TPrinter.Get_PaperSize: AcPrintPaperSize;
begin
    Result := DefaultInterface.PaperSize;
end;

procedure TPrinter.Set_PaperSize(pRet: AcPrintPaperSize);
begin
  DefaultInterface.Set_PaperSize(pRet);
end;

function TPrinter.Get_Port: WideString;
begin
    Result := DefaultInterface.Port;
end;

function TPrinter.Get_PrintQuality: AcPrintObjQuality;
begin
    Result := DefaultInterface.PrintQuality;
end;

procedure TPrinter.Set_PrintQuality(pRet: AcPrintObjQuality);
begin
  DefaultInterface.Set_PrintQuality(pRet);
end;

function TPrinter.Get_LeftMargin: Integer;
begin
    Result := DefaultInterface.LeftMargin;
end;

procedure TPrinter.Set_LeftMargin(pRet: Integer);
begin
  DefaultInterface.Set_LeftMargin(pRet);
end;

function TPrinter.Get_RightMargin: Integer;
begin
    Result := DefaultInterface.RightMargin;
end;

procedure TPrinter.Set_RightMargin(pRet: Integer);
begin
  DefaultInterface.Set_RightMargin(pRet);
end;

function TPrinter.Get_TopMargin: Integer;
begin
    Result := DefaultInterface.TopMargin;
end;

procedure TPrinter.Set_TopMargin(pRet: Integer);
begin
  DefaultInterface.Set_TopMargin(pRet);
end;

function TPrinter.Get_BottomMargin: Integer;
begin
    Result := DefaultInterface.BottomMargin;
end;

procedure TPrinter.Set_BottomMargin(pRet: Integer);
begin
  DefaultInterface.Set_BottomMargin(pRet);
end;

function TPrinter.Get_DataOnly: WordBool;
begin
    Result := DefaultInterface.DataOnly;
end;

procedure TPrinter.Set_DataOnly(pRet: WordBool);
begin
  DefaultInterface.Set_DataOnly(pRet);
end;

function TPrinter.Get_ItemsAcross: Integer;
begin
    Result := DefaultInterface.ItemsAcross;
end;

procedure TPrinter.Set_ItemsAcross(pRet: Integer);
begin
  DefaultInterface.Set_ItemsAcross(pRet);
end;

function TPrinter.Get_RowSpacing: Integer;
begin
    Result := DefaultInterface.RowSpacing;
end;

procedure TPrinter.Set_RowSpacing(pRet: Integer);
begin
  DefaultInterface.Set_RowSpacing(pRet);
end;

function TPrinter.Get_ColumnSpacing: Integer;
begin
    Result := DefaultInterface.ColumnSpacing;
end;

procedure TPrinter.Set_ColumnSpacing(pRet: Integer);
begin
  DefaultInterface.Set_ColumnSpacing(pRet);
end;

function TPrinter.Get_DefaultSize: WordBool;
begin
    Result := DefaultInterface.DefaultSize;
end;

procedure TPrinter.Set_DefaultSize(pRet: WordBool);
begin
  DefaultInterface.Set_DefaultSize(pRet);
end;

function TPrinter.Get_ItemSizeWidth: Integer;
begin
    Result := DefaultInterface.ItemSizeWidth;
end;

procedure TPrinter.Set_ItemSizeWidth(pRet: Integer);
begin
  DefaultInterface.Set_ItemSizeWidth(pRet);
end;

function TPrinter.Get_ItemSizeHeight: Integer;
begin
    Result := DefaultInterface.ItemSizeHeight;
end;

procedure TPrinter.Set_ItemSizeHeight(pRet: Integer);
begin
  DefaultInterface.Set_ItemSizeHeight(pRet);
end;

function TPrinter.Get_ItemLayout: AcPrintItemLayout;
begin
    Result := DefaultInterface.ItemLayout;
end;

procedure TPrinter.Set_ItemLayout(pRet: AcPrintItemLayout);
begin
  DefaultInterface.Set_ItemLayout(pRet);
end;

function TPrinter.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TPrinterProperties.Create(AServer: TPrinter);
begin
  inherited Create;
  FServer := AServer;
end;

function TPrinterProperties.GetDefaultInterface: _Printer;
begin
  Result := FServer.DefaultInterface;
end;

function TPrinterProperties.Get_ColorMode: AcPrintColor;
begin
    Result := DefaultInterface.ColorMode;
end;

procedure TPrinterProperties.Set_ColorMode(pRet: AcPrintColor);
begin
  DefaultInterface.Set_ColorMode(pRet);
end;

function TPrinterProperties.Get_Copies: Integer;
begin
    Result := DefaultInterface.Copies;
end;

procedure TPrinterProperties.Set_Copies(pRet: Integer);
begin
  DefaultInterface.Set_Copies(pRet);
end;

function TPrinterProperties.Get_DeviceName: WideString;
begin
    Result := DefaultInterface.DeviceName;
end;

function TPrinterProperties.Get_DriverName: WideString;
begin
    Result := DefaultInterface.DriverName;
end;

function TPrinterProperties.Get_Duplex: AcPrintDuplex;
begin
    Result := DefaultInterface.Duplex;
end;

procedure TPrinterProperties.Set_Duplex(pRet: AcPrintDuplex);
begin
  DefaultInterface.Set_Duplex(pRet);
end;

function TPrinterProperties.Get_Orientation: AcPrintOrientation;
begin
    Result := DefaultInterface.Orientation;
end;

procedure TPrinterProperties.Set_Orientation(pRet: AcPrintOrientation);
begin
  DefaultInterface.Set_Orientation(pRet);
end;

function TPrinterProperties.Get_PaperBin: AcPrintPaperBin;
begin
    Result := DefaultInterface.PaperBin;
end;

procedure TPrinterProperties.Set_PaperBin(pRet: AcPrintPaperBin);
begin
  DefaultInterface.Set_PaperBin(pRet);
end;

function TPrinterProperties.Get_PaperSize: AcPrintPaperSize;
begin
    Result := DefaultInterface.PaperSize;
end;

procedure TPrinterProperties.Set_PaperSize(pRet: AcPrintPaperSize);
begin
  DefaultInterface.Set_PaperSize(pRet);
end;

function TPrinterProperties.Get_Port: WideString;
begin
    Result := DefaultInterface.Port;
end;

function TPrinterProperties.Get_PrintQuality: AcPrintObjQuality;
begin
    Result := DefaultInterface.PrintQuality;
end;

procedure TPrinterProperties.Set_PrintQuality(pRet: AcPrintObjQuality);
begin
  DefaultInterface.Set_PrintQuality(pRet);
end;

function TPrinterProperties.Get_LeftMargin: Integer;
begin
    Result := DefaultInterface.LeftMargin;
end;

procedure TPrinterProperties.Set_LeftMargin(pRet: Integer);
begin
  DefaultInterface.Set_LeftMargin(pRet);
end;

function TPrinterProperties.Get_RightMargin: Integer;
begin
    Result := DefaultInterface.RightMargin;
end;

procedure TPrinterProperties.Set_RightMargin(pRet: Integer);
begin
  DefaultInterface.Set_RightMargin(pRet);
end;

function TPrinterProperties.Get_TopMargin: Integer;
begin
    Result := DefaultInterface.TopMargin;
end;

procedure TPrinterProperties.Set_TopMargin(pRet: Integer);
begin
  DefaultInterface.Set_TopMargin(pRet);
end;

function TPrinterProperties.Get_BottomMargin: Integer;
begin
    Result := DefaultInterface.BottomMargin;
end;

procedure TPrinterProperties.Set_BottomMargin(pRet: Integer);
begin
  DefaultInterface.Set_BottomMargin(pRet);
end;

function TPrinterProperties.Get_DataOnly: WordBool;
begin
    Result := DefaultInterface.DataOnly;
end;

procedure TPrinterProperties.Set_DataOnly(pRet: WordBool);
begin
  DefaultInterface.Set_DataOnly(pRet);
end;

function TPrinterProperties.Get_ItemsAcross: Integer;
begin
    Result := DefaultInterface.ItemsAcross;
end;

procedure TPrinterProperties.Set_ItemsAcross(pRet: Integer);
begin
  DefaultInterface.Set_ItemsAcross(pRet);
end;

function TPrinterProperties.Get_RowSpacing: Integer;
begin
    Result := DefaultInterface.RowSpacing;
end;

procedure TPrinterProperties.Set_RowSpacing(pRet: Integer);
begin
  DefaultInterface.Set_RowSpacing(pRet);
end;

function TPrinterProperties.Get_ColumnSpacing: Integer;
begin
    Result := DefaultInterface.ColumnSpacing;
end;

procedure TPrinterProperties.Set_ColumnSpacing(pRet: Integer);
begin
  DefaultInterface.Set_ColumnSpacing(pRet);
end;

function TPrinterProperties.Get_DefaultSize: WordBool;
begin
    Result := DefaultInterface.DefaultSize;
end;

procedure TPrinterProperties.Set_DefaultSize(pRet: WordBool);
begin
  DefaultInterface.Set_DefaultSize(pRet);
end;

function TPrinterProperties.Get_ItemSizeWidth: Integer;
begin
    Result := DefaultInterface.ItemSizeWidth;
end;

procedure TPrinterProperties.Set_ItemSizeWidth(pRet: Integer);
begin
  DefaultInterface.Set_ItemSizeWidth(pRet);
end;

function TPrinterProperties.Get_ItemSizeHeight: Integer;
begin
    Result := DefaultInterface.ItemSizeHeight;
end;

procedure TPrinterProperties.Set_ItemSizeHeight(pRet: Integer);
begin
  DefaultInterface.Set_ItemSizeHeight(pRet);
end;

function TPrinterProperties.Get_ItemLayout: AcPrintItemLayout;
begin
    Result := DefaultInterface.ItemLayout;
end;

procedure TPrinterProperties.Set_ItemLayout(pRet: AcPrintItemLayout);
begin
  DefaultInterface.Set_ItemLayout(pRet);
end;

{$ENDIF}

class function CoFormOldV10.Create: _Form2;
begin
  Result := CreateComObject(CLASS_FormOldV10) as _Form2;
end;

class function CoFormOldV10.CreateRemote(const MachineName: string): _Form2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FormOldV10) as _Form2;
end;

class function CoReportOldV10.Create: _Report2;
begin
  Result := CreateComObject(CLASS_ReportOldV10) as _Report2;
end;

class function CoReportOldV10.CreateRemote(const MachineName: string): _Report2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReportOldV10) as _Report2;
end;

class function CoAllFunctions.Create: AllObjects;
begin
  Result := CreateComObject(CLASS_AllFunctions) as AllObjects;
end;

class function CoAllFunctions.CreateRemote(const MachineName: string): AllObjects;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AllFunctions) as AllObjects;
end;

procedure TAllFunctions.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{08F6C822-3CFD-11D1-98BC-006008197D41}';
    IntfIID:   '{DDBD4001-44D5-11D1-98C0-006008197D41}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAllFunctions.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as AllObjects;
  end;
end;

procedure TAllFunctions.ConnectTo(svrIntf: AllObjects);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAllFunctions.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAllFunctions.GetDefaultInterface: AllObjects;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAllFunctions.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAllFunctionsProperties.Create(Self);
{$ENDIF}
end;

destructor TAllFunctions.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAllFunctions.GetServerProperties: TAllFunctionsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAllFunctions.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllFunctions.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllFunctions.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllFunctions.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TAllFunctions.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAllFunctionsProperties.Create(AServer: TAllFunctions);
begin
  inherited Create;
  FServer := AServer;
end;

function TAllFunctionsProperties.GetDefaultInterface: AllObjects;
begin
  Result := FServer.DefaultInterface;
end;

function TAllFunctionsProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAllFunctionsProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAllFunctionsProperties.Get_Item(var_: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[var_];
end;

function TAllFunctionsProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoAdditionalData.Create: _AdditionalData;
begin
  Result := CreateComObject(CLASS_AdditionalData) as _AdditionalData;
end;

class function CoAdditionalData.CreateRemote(const MachineName: string): _AdditionalData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AdditionalData) as _AdditionalData;
end;

procedure TAdditionalData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DBC51761-A8ED-11D3-A0DD-00C04F68712B}';
    IntfIID:   '{DBC51762-A8ED-11D3-A0DD-00C04F68712B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAdditionalData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _AdditionalData;
  end;
end;

procedure TAdditionalData.ConnectTo(svrIntf: _AdditionalData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAdditionalData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAdditionalData.GetDefaultInterface: _AdditionalData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAdditionalData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAdditionalDataProperties.Create(Self);
{$ENDIF}
end;

destructor TAdditionalData.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAdditionalData.GetServerProperties: TAdditionalDataProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAdditionalData.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TAdditionalData.Set_Name(const pRet: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRet;
end;

function TAdditionalData.Get_Item(Index: OleVariant): _AdditionalData;
begin
    Result := DefaultInterface.Item[Index];
end;

function TAdditionalData.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TAdditionalData.Add(const var_: WideString): _AdditionalData;
begin
  Result := DefaultInterface.Add(var_);
end;

function TAdditionalData.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAdditionalDataProperties.Create(AServer: TAdditionalData);
begin
  inherited Create;
  FServer := AServer;
end;

function TAdditionalDataProperties.GetDefaultInterface: _AdditionalData;
begin
  Result := FServer.DefaultInterface;
end;

function TAdditionalDataProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TAdditionalDataProperties.Set_Name(const pRet: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRet;
end;

function TAdditionalDataProperties.Get_Item(Index: OleVariant): _AdditionalData;
begin
    Result := DefaultInterface.Item[Index];
end;

function TAdditionalDataProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoAutoCorrect.Create: _AutoCorrect;
begin
  Result := CreateComObject(CLASS_AutoCorrect) as _AutoCorrect;
end;

class function CoAutoCorrect.CreateRemote(const MachineName: string): _AutoCorrect;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AutoCorrect) as _AutoCorrect;
end;

procedure TAutoCorrect.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4375351E-7052-40DF-B4D3-6095E7F8811B}';
    IntfIID:   '{063A8DE5-E2C5-44EA-A90E-6D42207D25C8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAutoCorrect.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _AutoCorrect;
  end;
end;

procedure TAutoCorrect.ConnectTo(svrIntf: _AutoCorrect);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAutoCorrect.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAutoCorrect.GetDefaultInterface: _AutoCorrect;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAutoCorrect.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAutoCorrectProperties.Create(Self);
{$ENDIF}
end;

destructor TAutoCorrect.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAutoCorrect.GetServerProperties: TAutoCorrectProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TAutoCorrect.Get_DisplayAutoCorrectOptions: WordBool;
begin
    Result := DefaultInterface.DisplayAutoCorrectOptions;
end;

procedure TAutoCorrect.Set_DisplayAutoCorrectOptions(pRet: WordBool);
begin
  DefaultInterface.Set_DisplayAutoCorrectOptions(pRet);
end;

function TAutoCorrect.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAutoCorrectProperties.Create(AServer: TAutoCorrect);
begin
  inherited Create;
  FServer := AServer;
end;

function TAutoCorrectProperties.GetDefaultInterface: _AutoCorrect;
begin
  Result := FServer.DefaultInterface;
end;

function TAutoCorrectProperties.Get_DisplayAutoCorrectOptions: WordBool;
begin
    Result := DefaultInterface.DisplayAutoCorrectOptions;
end;

procedure TAutoCorrectProperties.Set_DisplayAutoCorrectOptions(pRet: WordBool);
begin
  DefaultInterface.Set_DisplayAutoCorrectOptions(pRet);
end;

{$ENDIF}

class function CoDependencyObjects.Create: _DependencyObjects;
begin
  Result := CreateComObject(CLASS_DependencyObjects) as _DependencyObjects;
end;

class function CoDependencyObjects.CreateRemote(const MachineName: string): _DependencyObjects;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DependencyObjects) as _DependencyObjects;
end;

procedure TDependencyObjects.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{1C4367A8-EAEE-4C23-9582-4A229DF2403E}';
    IntfIID:   '{79F41340-18C4-4AA1-86EE-5CDE9D2CE600}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDependencyObjects.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DependencyObjects;
  end;
end;

procedure TDependencyObjects.ConnectTo(svrIntf: _DependencyObjects);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDependencyObjects.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDependencyObjects.GetDefaultInterface: _DependencyObjects;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDependencyObjects.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDependencyObjectsProperties.Create(Self);
{$ENDIF}
end;

destructor TDependencyObjects.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDependencyObjects.GetServerProperties: TDependencyObjectsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDependencyObjects.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TDependencyObjects.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TDependencyObjects.Get_Item(Index: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[Index];
end;

function TDependencyObjects.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TDependencyObjects.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDependencyObjectsProperties.Create(AServer: TDependencyObjects);
begin
  inherited Create;
  FServer := AServer;
end;

function TDependencyObjectsProperties.GetDefaultInterface: _DependencyObjects;
begin
  Result := FServer.DefaultInterface;
end;

function TDependencyObjectsProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TDependencyObjectsProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TDependencyObjectsProperties.Get_Item(Index: OleVariant): AccessObject;
begin
    Result := DefaultInterface.Item[Index];
end;

function TDependencyObjectsProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoDependencyInfo.Create: _DependencyInfo;
begin
  Result := CreateComObject(CLASS_DependencyInfo) as _DependencyInfo;
end;

class function CoDependencyInfo.CreateRemote(const MachineName: string): _DependencyInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DependencyInfo) as _DependencyInfo;
end;

procedure TDependencyInfo.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F8C9DCB3-4063-490E-A73C-3533207CBC26}';
    IntfIID:   '{D05819C6-8859-418B-A82F-18B6CB743C8E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDependencyInfo.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _DependencyInfo;
  end;
end;

procedure TDependencyInfo.ConnectTo(svrIntf: _DependencyInfo);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDependencyInfo.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDependencyInfo.GetDefaultInterface: _DependencyInfo;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDependencyInfo.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDependencyInfoProperties.Create(Self);
{$ENDIF}
end;

destructor TDependencyInfo.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDependencyInfo.GetServerProperties: TDependencyInfoProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDependencyInfo.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TDependencyInfo.Get_Dependants: _DependencyObjects;
begin
    Result := DefaultInterface.Dependants;
end;

function TDependencyInfo.Get_Dependencies: _DependencyObjects;
begin
    Result := DefaultInterface.Dependencies;
end;

function TDependencyInfo.Get_OutOfDateObjects: _DependencyObjects;
begin
    Result := DefaultInterface.OutOfDateObjects;
end;

function TDependencyInfo.Get_InsufficientPermissions: _DependencyObjects;
begin
    Result := DefaultInterface.InsufficientPermissions;
end;

function TDependencyInfo.Get_UnsupportedObjects: _DependencyObjects;
begin
    Result := DefaultInterface.UnsupportedObjects;
end;

function TDependencyInfo.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDependencyInfoProperties.Create(AServer: TDependencyInfo);
begin
  inherited Create;
  FServer := AServer;
end;

function TDependencyInfoProperties.GetDefaultInterface: _DependencyInfo;
begin
  Result := FServer.DefaultInterface;
end;

function TDependencyInfoProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TDependencyInfoProperties.Get_Dependants: _DependencyObjects;
begin
    Result := DefaultInterface.Dependants;
end;

function TDependencyInfoProperties.Get_Dependencies: _DependencyObjects;
begin
    Result := DefaultInterface.Dependencies;
end;

function TDependencyInfoProperties.Get_OutOfDateObjects: _DependencyObjects;
begin
    Result := DefaultInterface.OutOfDateObjects;
end;

function TDependencyInfoProperties.Get_InsufficientPermissions: _DependencyObjects;
begin
    Result := DefaultInterface.InsufficientPermissions;
end;

function TDependencyInfoProperties.Get_UnsupportedObjects: _DependencyObjects;
begin
    Result := DefaultInterface.UnsupportedObjects;
end;

{$ENDIF}

class function CoSmartTags.Create: _SmartTags;
begin
  Result := CreateComObject(CLASS_SmartTags) as _SmartTags;
end;

class function CoSmartTags.CreateRemote(const MachineName: string): _SmartTags;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SmartTags) as _SmartTags;
end;

procedure TSmartTags.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{73778F0A-9743-4DF3-BBFA-941712488FEA}';
    IntfIID:   '{B1F7DE76-AE97-48D9-A4FD-2C172B2BD7A9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSmartTags.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SmartTags;
  end;
end;

procedure TSmartTags.ConnectTo(svrIntf: _SmartTags);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSmartTags.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSmartTags.GetDefaultInterface: _SmartTags;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSmartTags.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSmartTagsProperties.Create(Self);
{$ENDIF}
end;

destructor TSmartTags.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSmartTags.GetServerProperties: TSmartTagsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSmartTags.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TSmartTags.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TSmartTags.Get_Item(Index: OleVariant): _SmartTag;
begin
    Result := DefaultInterface.Item[Index];
end;

function TSmartTags.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TSmartTags.Add(const Name: WideString): _SmartTag;
begin
  Result := DefaultInterface.Add(Name);
end;

function TSmartTags.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSmartTagsProperties.Create(AServer: TSmartTags);
begin
  inherited Create;
  FServer := AServer;
end;

function TSmartTagsProperties.GetDefaultInterface: _SmartTags;
begin
  Result := FServer.DefaultInterface;
end;

function TSmartTagsProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TSmartTagsProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TSmartTagsProperties.Get_Item(Index: OleVariant): _SmartTag;
begin
    Result := DefaultInterface.Item[Index];
end;

function TSmartTagsProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoSmartTagAction.Create: _SmartTagAction;
begin
  Result := CreateComObject(CLASS_SmartTagAction) as _SmartTagAction;
end;

class function CoSmartTagAction.CreateRemote(const MachineName: string): _SmartTagAction;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SmartTagAction) as _SmartTagAction;
end;

procedure TSmartTagAction.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0D944D89-82BC-43DE-9659-699DD3FBCD72}';
    IntfIID:   '{1560BE9F-0718-42BE-BB2B-D6706593AC40}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSmartTagAction.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SmartTagAction;
  end;
end;

procedure TSmartTagAction.ConnectTo(svrIntf: _SmartTagAction);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSmartTagAction.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSmartTagAction.GetDefaultInterface: _SmartTagAction;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSmartTagAction.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSmartTagActionProperties.Create(Self);
{$ENDIF}
end;

destructor TSmartTagAction.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSmartTagAction.GetServerProperties: TSmartTagActionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSmartTagAction.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TSmartTagAction.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TSmartTagAction.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TSmartTagAction.Execute;
begin
  DefaultInterface.Execute;
end;

function TSmartTagAction.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSmartTagActionProperties.Create(AServer: TSmartTagAction);
begin
  inherited Create;
  FServer := AServer;
end;

function TSmartTagActionProperties.GetDefaultInterface: _SmartTagAction;
begin
  Result := FServer.DefaultInterface;
end;

function TSmartTagActionProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TSmartTagActionProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TSmartTagActionProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

{$ENDIF}

class function CoSmartTagActions.Create: _SmartTagActions;
begin
  Result := CreateComObject(CLASS_SmartTagActions) as _SmartTagActions;
end;

class function CoSmartTagActions.CreateRemote(const MachineName: string): _SmartTagActions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SmartTagActions) as _SmartTagActions;
end;

procedure TSmartTagActions.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AA533187-6399-4E6C-B6EC-6FC999E1C855}';
    IntfIID:   '{3836C9EC-E9CB-4817-A738-50B4DD3DDD8D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSmartTagActions.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SmartTagActions;
  end;
end;

procedure TSmartTagActions.ConnectTo(svrIntf: _SmartTagActions);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSmartTagActions.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSmartTagActions.GetDefaultInterface: _SmartTagActions;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSmartTagActions.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSmartTagActionsProperties.Create(Self);
{$ENDIF}
end;

destructor TSmartTagActions.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSmartTagActions.GetServerProperties: TSmartTagActionsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSmartTagActions.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TSmartTagActions.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TSmartTagActions.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TSmartTagActions.Get_Item(Index: OleVariant): _SmartTagAction;
begin
    Result := DefaultInterface.Item[Index];
end;

function TSmartTagActions.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSmartTagActionsProperties.Create(AServer: TSmartTagActions);
begin
  inherited Create;
  FServer := AServer;
end;

function TSmartTagActionsProperties.GetDefaultInterface: _SmartTagActions;
begin
  Result := FServer.DefaultInterface;
end;

function TSmartTagActionsProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TSmartTagActionsProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TSmartTagActionsProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TSmartTagActionsProperties.Get_Item(Index: OleVariant): _SmartTagAction;
begin
    Result := DefaultInterface.Item[Index];
end;

{$ENDIF}

class function CoSmartTagProperty.Create: _SmartTagProperty;
begin
  Result := CreateComObject(CLASS_SmartTagProperty) as _SmartTagProperty;
end;

class function CoSmartTagProperty.CreateRemote(const MachineName: string): _SmartTagProperty;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SmartTagProperty) as _SmartTagProperty;
end;

procedure TSmartTagProperty.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6E03AD86-431E-4879-A572-EF0EBA2FA729}';
    IntfIID:   '{6A3308EA-73DF-436A-A826-41A1F02186C4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSmartTagProperty.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SmartTagProperty;
  end;
end;

procedure TSmartTagProperty.ConnectTo(svrIntf: _SmartTagProperty);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSmartTagProperty.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSmartTagProperty.GetDefaultInterface: _SmartTagProperty;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSmartTagProperty.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSmartTagPropertyProperties.Create(Self);
{$ENDIF}
end;

destructor TSmartTagProperty.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSmartTagProperty.GetServerProperties: TSmartTagPropertyProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSmartTagProperty.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TSmartTagProperty.Set_Name(const pRet: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRet;
end;

function TSmartTagProperty.Get_Value: WideString;
begin
    Result := DefaultInterface.Value;
end;

procedure TSmartTagProperty.Set_Value(const pRet: WideString);
  { Warning: The property Value has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Value := pRet;
end;

procedure TSmartTagProperty.Delete;
begin
  DefaultInterface.Delete;
end;

function TSmartTagProperty.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSmartTagPropertyProperties.Create(AServer: TSmartTagProperty);
begin
  inherited Create;
  FServer := AServer;
end;

function TSmartTagPropertyProperties.GetDefaultInterface: _SmartTagProperty;
begin
  Result := FServer.DefaultInterface;
end;

function TSmartTagPropertyProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TSmartTagPropertyProperties.Set_Name(const pRet: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pRet;
end;

function TSmartTagPropertyProperties.Get_Value: WideString;
begin
    Result := DefaultInterface.Value;
end;

procedure TSmartTagPropertyProperties.Set_Value(const pRet: WideString);
  { Warning: The property Value has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Value := pRet;
end;

{$ENDIF}

class function CoSmartTagProperties.Create: _SmartTagProperties;
begin
  Result := CreateComObject(CLASS_SmartTagProperties) as _SmartTagProperties;
end;

class function CoSmartTagProperties.CreateRemote(const MachineName: string): _SmartTagProperties;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SmartTagProperties) as _SmartTagProperties;
end;

procedure TSmartTagProperties.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4215CC2C-15B5-47A5-9B60-119BD269CB7E}';
    IntfIID:   '{3A6A13FF-1162-461D-899C-768D025119FB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSmartTagProperties.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SmartTagProperties;
  end;
end;

procedure TSmartTagProperties.ConnectTo(svrIntf: _SmartTagProperties);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSmartTagProperties.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSmartTagProperties.GetDefaultInterface: _SmartTagProperties;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSmartTagProperties.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSmartTagPropertiesProperties.Create(Self);
{$ENDIF}
end;

destructor TSmartTagProperties.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSmartTagProperties.GetServerProperties: TSmartTagPropertiesProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSmartTagProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TSmartTagProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TSmartTagProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TSmartTagProperties.Get_Item(Index: OleVariant): _SmartTagProperty;
begin
    Result := DefaultInterface.Item[Index];
end;

function TSmartTagProperties.Add(const Name: WideString; Value: OleVariant): _SmartTagProperty;
begin
  Result := DefaultInterface.Add(Name, Value);
end;

function TSmartTagProperties.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSmartTagPropertiesProperties.Create(AServer: TSmartTagProperties);
begin
  inherited Create;
  FServer := AServer;
end;

function TSmartTagPropertiesProperties.GetDefaultInterface: _SmartTagProperties;
begin
  Result := FServer.DefaultInterface;
end;

function TSmartTagPropertiesProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TSmartTagPropertiesProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TSmartTagPropertiesProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TSmartTagPropertiesProperties.Get_Item(Index: OleVariant): _SmartTagProperty;
begin
    Result := DefaultInterface.Item[Index];
end;

{$ENDIF}

class function CoSmartTag.Create: _SmartTag;
begin
  Result := CreateComObject(CLASS_SmartTag) as _SmartTag;
end;

class function CoSmartTag.CreateRemote(const MachineName: string): _SmartTag;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SmartTag) as _SmartTag;
end;

procedure TSmartTag.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EF1A0B1D-AD6D-48E6-9905-BEE2A5D38DF9}';
    IntfIID:   '{9D2AB5D3-CD72-4A9A-A72E-2B3492CBD0AE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSmartTag.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _SmartTag;
  end;
end;

procedure TSmartTag.ConnectTo(svrIntf: _SmartTag);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSmartTag.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSmartTag.GetDefaultInterface: _SmartTag;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSmartTag.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSmartTagProperties.Create(Self);
{$ENDIF}
end;

destructor TSmartTag.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSmartTag.GetServerProperties: TSmartTagProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSmartTag.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TSmartTag.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TSmartTag.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TSmartTag.Get_Properties: _SmartTagProperties;
begin
    Result := DefaultInterface.Properties;
end;

function TSmartTag.Get_SmartTagActions: _SmartTagActions;
begin
    Result := DefaultInterface.SmartTagActions;
end;

function TSmartTag.Get_XML: WideString;
begin
    Result := DefaultInterface.XML;
end;

function TSmartTag.Get_IsMissing: WordBool;
begin
    Result := DefaultInterface.IsMissing;
end;

procedure TSmartTag.Delete;
begin
  DefaultInterface.Delete;
end;

function TSmartTag.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSmartTagProperties.Create(AServer: TSmartTag);
begin
  inherited Create;
  FServer := AServer;
end;

function TSmartTagProperties.GetDefaultInterface: _SmartTag;
begin
  Result := FServer.DefaultInterface;
end;

function TSmartTagProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TSmartTagProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TSmartTagProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TSmartTagProperties.Get_Properties: _SmartTagProperties;
begin
    Result := DefaultInterface.Properties;
end;

function TSmartTagProperties.Get_SmartTagActions: _SmartTagActions;
begin
    Result := DefaultInterface.SmartTagActions;
end;

function TSmartTagProperties.Get_XML: WideString;
begin
    Result := DefaultInterface.XML;
end;

function TSmartTagProperties.Get_IsMissing: WordBool;
begin
    Result := DefaultInterface.IsMissing;
end;

{$ENDIF}

class function CoAccessForm.Create: _Form3;
begin
  Result := CreateComObject(CLASS_AccessForm) as _Form3;
end;

class function CoAccessForm.CreateRemote(const MachineName: string): _Form3;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AccessForm) as _Form3;
end;

procedure TAccessForm.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7398AAFD-6527-48C7-95B7-BEABACD1CA3F}';
    IntfIID:   '{66B22FB4-F70E-4F03-A00A-F76E9ADBBF10}';
    EventIID:  '{0EA530DD-5B30-4278-BD28-47C4D11619BD}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAccessForm.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _Form3;
  end;
end;

procedure TAccessForm.ConnectTo(svrIntf: _Form3);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TAccessForm.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TAccessForm.GetDefaultInterface: _Form3;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAccessForm.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAccessFormProperties.Create(Self);
{$ENDIF}
end;

destructor TAccessForm.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAccessForm.GetServerProperties: TAccessFormProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TAccessForm.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    2067: if Assigned(FOnLoad) then
         FOnLoad(Self);
    2058: if Assigned(FOnCurrent) then
         FOnCurrent(Self);
    2059: if Assigned(FOnBeforeInsert) then
         FOnBeforeInsert(Self, Smallint((TVarData(Params[0]).VPointer)^) {out Smallint});
    2060: if Assigned(FOnAfterInsert) then
         FOnAfterInsert(Self);
    2061: if Assigned(FOnBeforeUpdate) then
         FOnBeforeUpdate(Self, Smallint((TVarData(Params[0]).VPointer)^) {out Smallint});
    2062: if Assigned(FOnAfterUpdate) then
         FOnAfterUpdate(Self);
    2063: if Assigned(FOnDelete) then
         FOnDelete(Self, Smallint((TVarData(Params[0]).VPointer)^) {out Smallint});
    2064: if Assigned(FOnBeforeDelConfirm) then
         FOnBeforeDelConfirm(Self,
                             Smallint((TVarData(Params[0]).VPointer)^) {out Smallint},
                             Smallint((TVarData(Params[1]).VPointer)^) {out Smallint});
    2065: if Assigned(FOnAfterDelConfirm) then
         FOnAfterDelConfirm(Self, Smallint((TVarData(Params[0]).VPointer)^) {var Smallint});
    2066: if Assigned(FOnOpen) then
         FOnOpen(Self, Smallint((TVarData(Params[0]).VPointer)^) {out Smallint});
    2068: if Assigned(FOnResize) then
         FOnResize(Self);
    2069: if Assigned(FOnUnload) then
         FOnUnload(Self, Smallint((TVarData(Params[0]).VPointer)^) {out Smallint});
    2070: if Assigned(FOnClose) then
         FOnClose(Self);
    2071: if Assigned(FOnActivate) then
         FOnActivate(Self);
    2072: if Assigned(FOnDeactivate) then
         FOnDeactivate(Self);
    2073: if Assigned(FOnGotFocus) then
         FOnGotFocus(Self);
    2074: if Assigned(FOnLostFocus) then
         FOnLostFocus(Self);
    -600: if Assigned(FOnClick) then
         FOnClick(Self);
    -601: if Assigned(FOnDblClick) then
         FOnDblClick(Self, Smallint((TVarData(Params[0]).VPointer)^) {out Smallint});
    -605: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    -606: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    -607: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                    Single((TVarData(Params[2]).VPointer)^) {var Single},
                    Single((TVarData(Params[3]).VPointer)^) {var Single});
    -602: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    -603: if Assigned(FOnKeyPress) then
         FOnKeyPress(Self, Smallint((TVarData(Params[0]).VPointer)^) {var Smallint});
    -604: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                  Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    2083: if Assigned(FOnError) then
         FOnError(Self,
                  Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                  Smallint((TVarData(Params[1]).VPointer)^) {out Smallint});
    2084: if Assigned(FOnTimer) then
         FOnTimer(Self);
    2155: if Assigned(FOnFilter) then
         FOnFilter(Self,
                   Smallint((TVarData(Params[0]).VPointer)^) {out Smallint},
                   Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    2156: if Assigned(FOnApplyFilter) then
         FOnApplyFilter(Self,
                        Smallint((TVarData(Params[0]).VPointer)^) {out Smallint},
                        Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    2205: if Assigned(FOnDirty) then
         FOnDirty(Self, Smallint((TVarData(Params[0]).VPointer)^) {out Smallint});
    2145: if Assigned(FOnUndo) then
         FOnUndo(Self, Smallint((TVarData(Params[0]).VPointer)^) {out Smallint});
    2334: if Assigned(FOnRecordExit) then
         FOnRecordExit(Self, Smallint((TVarData(Params[0]).VPointer)^) {out Smallint});
    2369: if Assigned(FOnBeginBatchEdit) then
         FOnBeginBatchEdit(Self, Smallint((TVarData(Params[0]).VPointer)^) {out Smallint});
    2370: if Assigned(FOnUndoBatchEdit) then
         FOnUndoBatchEdit(Self, Smallint((TVarData(Params[0]).VPointer)^) {out Smallint});
    2383: if Assigned(FOnConnect) then
         FOnConnect(Self);
    2384: if Assigned(FOnDisconnect) then
         FOnDisconnect(Self);
    2385: if Assigned(FOnPivotTableChange) then
         FOnPivotTableChange(Self, Params[0] {Integer});
    2386: if Assigned(FOnQuery) then
         FOnQuery(Self);
    2387: if Assigned(FOnBeforeQuery) then
         FOnBeforeQuery(Self);
    2388: if Assigned(FOnSelectionChange) then
         FOnSelectionChange(Self);
    2389: if Assigned(FOnCommandBeforeExecute) then
         FOnCommandBeforeExecute(Self,
                                 Params[0] {OleVariant},
                                 Params[1] {const IDispatch});
    2390: if Assigned(FOnCommandChecked) then
         FOnCommandChecked(Self,
                           Params[0] {OleVariant},
                           Params[1] {const IDispatch});
    2391: if Assigned(FOnCommandEnabled) then
         FOnCommandEnabled(Self,
                           Params[0] {OleVariant},
                           Params[1] {const IDispatch});
    2392: if Assigned(FOnCommandExecute) then
         FOnCommandExecute(Self, Params[0] {OleVariant});
    2394: if Assigned(FOnDataSetChange) then
         FOnDataSetChange(Self);
    2395: if Assigned(FOnBeforeScreenTip) then
         FOnBeforeScreenTip(Self,
                            Params[0] {const IDispatch},
                            Params[1] {const IDispatch});
    2399: if Assigned(FOnBeforeRender) then
         FOnBeforeRender(Self,
                         Params[0] {const IDispatch},
                         Params[1] {const IDispatch},
                         Params[2] {const IDispatch});
    2397: if Assigned(FOnAfterRender) then
         FOnAfterRender(Self,
                        Params[0] {const IDispatch},
                        Params[1] {const IDispatch});
    2396: if Assigned(FOnAfterFinalRender) then
         FOnAfterFinalRender(Self, Params[0] {const IDispatch});
    2398: if Assigned(FOnAfterLayout) then
         FOnAfterLayout(Self, Params[0] {const IDispatch});
    2401: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {WordBool},
                       Params[1] {Integer});
    2402: if Assigned(FOnViewChange) then
         FOnViewChange(Self, Params[0] {Integer});
    2403: if Assigned(FOnDataChange) then
         FOnDataChange(Self, Params[0] {Integer});
  end; {case DispID}
end;

function TAccessForm.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessForm.Get_accChildCount: Integer;
begin
    Result := DefaultInterface.accChildCount;
end;

function TAccessForm.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessForm.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessForm.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessForm.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessForm.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessForm.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessForm.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessForm.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessForm.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessForm.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessForm.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessForm.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessForm.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessForm.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessForm.Get_FormName: WideString;
begin
    Result := DefaultInterface.FormName;
end;

procedure TAccessForm.Set_FormName(const pRet: WideString);
  { Warning: The property FormName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FormName := pRet;
end;

function TAccessForm.Get_RecordSource: WideString;
begin
    Result := DefaultInterface.RecordSource;
end;

procedure TAccessForm.Set_RecordSource(const pRet: WideString);
  { Warning: The property RecordSource has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RecordSource := pRet;
end;

function TAccessForm.Get_Filter: WideString;
begin
    Result := DefaultInterface.Filter;
end;

procedure TAccessForm.Set_Filter(const pRet: WideString);
  { Warning: The property Filter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Filter := pRet;
end;

function TAccessForm.Get_FilterOn: WordBool;
begin
    Result := DefaultInterface.FilterOn;
end;

procedure TAccessForm.Set_FilterOn(pRet: WordBool);
begin
  DefaultInterface.Set_FilterOn(pRet);
end;

function TAccessForm.Get_OrderBy: WideString;
begin
    Result := DefaultInterface.OrderBy;
end;

procedure TAccessForm.Set_OrderBy(const pRet: WideString);
  { Warning: The property OrderBy has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OrderBy := pRet;
end;

function TAccessForm.Get_OrderByOn: WordBool;
begin
    Result := DefaultInterface.OrderByOn;
end;

procedure TAccessForm.Set_OrderByOn(pRet: WordBool);
begin
  DefaultInterface.Set_OrderByOn(pRet);
end;

function TAccessForm.Get_AllowFilters: WordBool;
begin
    Result := DefaultInterface.AllowFilters;
end;

procedure TAccessForm.Set_AllowFilters(pRet: WordBool);
begin
  DefaultInterface.Set_AllowFilters(pRet);
end;

function TAccessForm.Get_Caption: WideString;
begin
    Result := DefaultInterface.Caption;
end;

procedure TAccessForm.Set_Caption(const pRet: WideString);
  { Warning: The property Caption has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Caption := pRet;
end;

function TAccessForm.Get_DefaultView: Byte;
begin
    Result := DefaultInterface.DefaultView;
end;

procedure TAccessForm.Set_DefaultView(pRet: Byte);
begin
  DefaultInterface.Set_DefaultView(pRet);
end;

function TAccessForm.Get_ViewsAllowed: Byte;
begin
    Result := DefaultInterface.ViewsAllowed;
end;

procedure TAccessForm.Set_ViewsAllowed(pRet: Byte);
begin
  DefaultInterface.Set_ViewsAllowed(pRet);
end;

function TAccessForm.Get_AllowEditing: WordBool;
begin
    Result := DefaultInterface.AllowEditing;
end;

procedure TAccessForm.Set_AllowEditing(pRet: WordBool);
begin
  DefaultInterface.Set_AllowEditing(pRet);
end;

function TAccessForm.Get_DefaultEditing: Smallint;
begin
    Result := DefaultInterface.DefaultEditing;
end;

procedure TAccessForm.Set_DefaultEditing(pRet: Smallint);
begin
  DefaultInterface.Set_DefaultEditing(pRet);
end;

function TAccessForm.Get_AllowEdits: WordBool;
begin
    Result := DefaultInterface.AllowEdits;
end;

procedure TAccessForm.Set_AllowEdits(pRet: WordBool);
begin
  DefaultInterface.Set_AllowEdits(pRet);
end;

function TAccessForm.Get_AllowDeletions: WordBool;
begin
    Result := DefaultInterface.AllowDeletions;
end;

procedure TAccessForm.Set_AllowDeletions(pRet: WordBool);
begin
  DefaultInterface.Set_AllowDeletions(pRet);
end;

function TAccessForm.Get_AllowAdditions: WordBool;
begin
    Result := DefaultInterface.AllowAdditions;
end;

procedure TAccessForm.Set_AllowAdditions(pRet: WordBool);
begin
  DefaultInterface.Set_AllowAdditions(pRet);
end;

function TAccessForm.Get_DataEntry: WordBool;
begin
    Result := DefaultInterface.DataEntry;
end;

procedure TAccessForm.Set_DataEntry(pRet: WordBool);
begin
  DefaultInterface.Set_DataEntry(pRet);
end;

function TAccessForm.Get_AllowUpdating: Byte;
begin
    Result := DefaultInterface.AllowUpdating;
end;

procedure TAccessForm.Set_AllowUpdating(pRet: Byte);
begin
  DefaultInterface.Set_AllowUpdating(pRet);
end;

function TAccessForm.Get_RecordsetType: Byte;
begin
    Result := DefaultInterface.RecordsetType;
end;

procedure TAccessForm.Set_RecordsetType(pRet: Byte);
begin
  DefaultInterface.Set_RecordsetType(pRet);
end;

function TAccessForm.Get_RecordLocks: Byte;
begin
    Result := DefaultInterface.RecordLocks;
end;

procedure TAccessForm.Set_RecordLocks(pRet: Byte);
begin
  DefaultInterface.Set_RecordLocks(pRet);
end;

function TAccessForm.Get_ScrollBars: Byte;
begin
    Result := DefaultInterface.ScrollBars;
end;

procedure TAccessForm.Set_ScrollBars(pRet: Byte);
begin
  DefaultInterface.Set_ScrollBars(pRet);
end;

function TAccessForm.Get_RecordSelectors: WordBool;
begin
    Result := DefaultInterface.RecordSelectors;
end;

procedure TAccessForm.Set_RecordSelectors(pRet: WordBool);
begin
  DefaultInterface.Set_RecordSelectors(pRet);
end;

function TAccessForm.Get_NavigationButtons: WordBool;
begin
    Result := DefaultInterface.NavigationButtons;
end;

procedure TAccessForm.Set_NavigationButtons(pRet: WordBool);
begin
  DefaultInterface.Set_NavigationButtons(pRet);
end;

function TAccessForm.Get_DividingLines: WordBool;
begin
    Result := DefaultInterface.DividingLines;
end;

procedure TAccessForm.Set_DividingLines(pRet: WordBool);
begin
  DefaultInterface.Set_DividingLines(pRet);
end;

function TAccessForm.Get_AutoResize: WordBool;
begin
    Result := DefaultInterface.AutoResize;
end;

procedure TAccessForm.Set_AutoResize(pRet: WordBool);
begin
  DefaultInterface.Set_AutoResize(pRet);
end;

function TAccessForm.Get_AutoCenter: WordBool;
begin
    Result := DefaultInterface.AutoCenter;
end;

procedure TAccessForm.Set_AutoCenter(pRet: WordBool);
begin
  DefaultInterface.Set_AutoCenter(pRet);
end;

function TAccessForm.Get_PopUp: WordBool;
begin
    Result := DefaultInterface.PopUp;
end;

procedure TAccessForm.Set_PopUp(pRet: WordBool);
begin
  DefaultInterface.Set_PopUp(pRet);
end;

function TAccessForm.Get_Modal: WordBool;
begin
    Result := DefaultInterface.Modal;
end;

procedure TAccessForm.Set_Modal(pRet: WordBool);
begin
  DefaultInterface.Set_Modal(pRet);
end;

function TAccessForm.Get_BorderStyle: Byte;
begin
    Result := DefaultInterface.BorderStyle;
end;

procedure TAccessForm.Set_BorderStyle(pRet: Byte);
begin
  DefaultInterface.Set_BorderStyle(pRet);
end;

function TAccessForm.Get_ControlBox: WordBool;
begin
    Result := DefaultInterface.ControlBox;
end;

procedure TAccessForm.Set_ControlBox(pRet: WordBool);
begin
  DefaultInterface.Set_ControlBox(pRet);
end;

function TAccessForm.Get_MinButton: WordBool;
begin
    Result := DefaultInterface.MinButton;
end;

procedure TAccessForm.Set_MinButton(pRet: WordBool);
begin
  DefaultInterface.Set_MinButton(pRet);
end;

function TAccessForm.Get_MaxButton: WordBool;
begin
    Result := DefaultInterface.MaxButton;
end;

procedure TAccessForm.Set_MaxButton(pRet: WordBool);
begin
  DefaultInterface.Set_MaxButton(pRet);
end;

function TAccessForm.Get_MinMaxButtons: Byte;
begin
    Result := DefaultInterface.MinMaxButtons;
end;

procedure TAccessForm.Set_MinMaxButtons(pRet: Byte);
begin
  DefaultInterface.Set_MinMaxButtons(pRet);
end;

function TAccessForm.Get_CloseButton: WordBool;
begin
    Result := DefaultInterface.CloseButton;
end;

procedure TAccessForm.Set_CloseButton(pRet: WordBool);
begin
  DefaultInterface.Set_CloseButton(pRet);
end;

function TAccessForm.Get_WhatsThisButton: WordBool;
begin
    Result := DefaultInterface.WhatsThisButton;
end;

procedure TAccessForm.Set_WhatsThisButton(pRet: WordBool);
begin
  DefaultInterface.Set_WhatsThisButton(pRet);
end;

function TAccessForm.Get_Width: Smallint;
begin
    Result := DefaultInterface.Width;
end;

procedure TAccessForm.Set_Width(pRet: Smallint);
begin
  DefaultInterface.Set_Width(pRet);
end;

function TAccessForm.Get_Picture: WideString;
begin
    Result := DefaultInterface.Picture;
end;

procedure TAccessForm.Set_Picture(const pRet: WideString);
  { Warning: The property Picture has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Picture := pRet;
end;

function TAccessForm.Get_PictureType: Byte;
begin
    Result := DefaultInterface.PictureType;
end;

procedure TAccessForm.Set_PictureType(pRet: Byte);
begin
  DefaultInterface.Set_PictureType(pRet);
end;

function TAccessForm.Get_PictureSizeMode: Byte;
begin
    Result := DefaultInterface.PictureSizeMode;
end;

procedure TAccessForm.Set_PictureSizeMode(pRet: Byte);
begin
  DefaultInterface.Set_PictureSizeMode(pRet);
end;

function TAccessForm.Get_PictureAlignment: Byte;
begin
    Result := DefaultInterface.PictureAlignment;
end;

procedure TAccessForm.Set_PictureAlignment(pRet: Byte);
begin
  DefaultInterface.Set_PictureAlignment(pRet);
end;

function TAccessForm.Get_PictureTiling: WordBool;
begin
    Result := DefaultInterface.PictureTiling;
end;

procedure TAccessForm.Set_PictureTiling(pRet: WordBool);
begin
  DefaultInterface.Set_PictureTiling(pRet);
end;

function TAccessForm.Get_Cycle: Byte;
begin
    Result := DefaultInterface.Cycle;
end;

procedure TAccessForm.Set_Cycle(pRet: Byte);
begin
  DefaultInterface.Set_Cycle(pRet);
end;

function TAccessForm.Get_MenuBar: WideString;
begin
    Result := DefaultInterface.MenuBar;
end;

procedure TAccessForm.Set_MenuBar(const pRet: WideString);
  { Warning: The property MenuBar has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MenuBar := pRet;
end;

function TAccessForm.Get_Toolbar: WideString;
begin
    Result := DefaultInterface.Toolbar;
end;

procedure TAccessForm.Set_Toolbar(const pRet: WideString);
  { Warning: The property Toolbar has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Toolbar := pRet;
end;

function TAccessForm.Get_ShortcutMenu: WordBool;
begin
    Result := DefaultInterface.ShortcutMenu;
end;

procedure TAccessForm.Set_ShortcutMenu(pRet: WordBool);
begin
  DefaultInterface.Set_ShortcutMenu(pRet);
end;

function TAccessForm.Get_ShortcutMenuBar: WideString;
begin
    Result := DefaultInterface.ShortcutMenuBar;
end;

procedure TAccessForm.Set_ShortcutMenuBar(const pRet: WideString);
  { Warning: The property ShortcutMenuBar has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ShortcutMenuBar := pRet;
end;

function TAccessForm.Get_GridX: Smallint;
begin
    Result := DefaultInterface.GridX;
end;

procedure TAccessForm.Set_GridX(pRet: Smallint);
begin
  DefaultInterface.Set_GridX(pRet);
end;

function TAccessForm.Get_GridY: Smallint;
begin
    Result := DefaultInterface.GridY;
end;

procedure TAccessForm.Set_GridY(pRet: Smallint);
begin
  DefaultInterface.Set_GridY(pRet);
end;

function TAccessForm.Get_LayoutForPrint: WordBool;
begin
    Result := DefaultInterface.LayoutForPrint;
end;

procedure TAccessForm.Set_LayoutForPrint(pRet: WordBool);
begin
  DefaultInterface.Set_LayoutForPrint(pRet);
end;

function TAccessForm.Get_FastLaserPrinting: WordBool;
begin
    Result := DefaultInterface.FastLaserPrinting;
end;

procedure TAccessForm.Set_FastLaserPrinting(pRet: WordBool);
begin
  DefaultInterface.Set_FastLaserPrinting(pRet);
end;

function TAccessForm.Get_HelpFile: WideString;
begin
    Result := DefaultInterface.HelpFile;
end;

procedure TAccessForm.Set_HelpFile(const pRet: WideString);
  { Warning: The property HelpFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HelpFile := pRet;
end;

function TAccessForm.Get_HelpContextId: Integer;
begin
    Result := DefaultInterface.HelpContextId;
end;

procedure TAccessForm.Set_HelpContextId(pRet: Integer);
begin
  DefaultInterface.Set_HelpContextId(pRet);
end;

function TAccessForm.Get_RowHeight: Smallint;
begin
    Result := DefaultInterface.RowHeight;
end;

procedure TAccessForm.Set_RowHeight(pRet: Smallint);
begin
  DefaultInterface.Set_RowHeight(pRet);
end;

function TAccessForm.Get_DatasheetFontName: WideString;
begin
    Result := DefaultInterface.DatasheetFontName;
end;

procedure TAccessForm.Set_DatasheetFontName(const pRet: WideString);
  { Warning: The property DatasheetFontName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DatasheetFontName := pRet;
end;

function TAccessForm.Get_DatasheetFontHeight: Smallint;
begin
    Result := DefaultInterface.DatasheetFontHeight;
end;

procedure TAccessForm.Set_DatasheetFontHeight(pRet: Smallint);
begin
  DefaultInterface.Set_DatasheetFontHeight(pRet);
end;

function TAccessForm.Get_DatasheetFontWeight: Smallint;
begin
    Result := DefaultInterface.DatasheetFontWeight;
end;

procedure TAccessForm.Set_DatasheetFontWeight(pRet: Smallint);
begin
  DefaultInterface.Set_DatasheetFontWeight(pRet);
end;

function TAccessForm.Get_DatasheetFontItalic: WordBool;
begin
    Result := DefaultInterface.DatasheetFontItalic;
end;

procedure TAccessForm.Set_DatasheetFontItalic(pRet: WordBool);
begin
  DefaultInterface.Set_DatasheetFontItalic(pRet);
end;

function TAccessForm.Get_DatasheetFontUnderline: WordBool;
begin
    Result := DefaultInterface.DatasheetFontUnderline;
end;

procedure TAccessForm.Set_DatasheetFontUnderline(pRet: WordBool);
begin
  DefaultInterface.Set_DatasheetFontUnderline(pRet);
end;

function TAccessForm.Get_TabularCharSet: Byte;
begin
    Result := DefaultInterface.TabularCharSet;
end;

procedure TAccessForm.Set_TabularCharSet(pRet: Byte);
begin
  DefaultInterface.Set_TabularCharSet(pRet);
end;

function TAccessForm.Get_DatasheetGridlinesBehavior: Byte;
begin
    Result := DefaultInterface.DatasheetGridlinesBehavior;
end;

procedure TAccessForm.Set_DatasheetGridlinesBehavior(pRet: Byte);
begin
  DefaultInterface.Set_DatasheetGridlinesBehavior(pRet);
end;

function TAccessForm.Get_DatasheetGridlinesColor: Integer;
begin
    Result := DefaultInterface.DatasheetGridlinesColor;
end;

procedure TAccessForm.Set_DatasheetGridlinesColor(pRet: Integer);
begin
  DefaultInterface.Set_DatasheetGridlinesColor(pRet);
end;

function TAccessForm.Get_DatasheetCellsEffect: Byte;
begin
    Result := DefaultInterface.DatasheetCellsEffect;
end;

procedure TAccessForm.Set_DatasheetCellsEffect(pRet: Byte);
begin
  DefaultInterface.Set_DatasheetCellsEffect(pRet);
end;

function TAccessForm.Get_DatasheetForeColor: Integer;
begin
    Result := DefaultInterface.DatasheetForeColor;
end;

procedure TAccessForm.Set_DatasheetForeColor(pRet: Integer);
begin
  DefaultInterface.Set_DatasheetForeColor(pRet);
end;

function TAccessForm.Get_ShowGrid: WordBool;
begin
    Result := DefaultInterface.ShowGrid;
end;

procedure TAccessForm.Set_ShowGrid(pRet: WordBool);
begin
  DefaultInterface.Set_ShowGrid(pRet);
end;

function TAccessForm.Get_DatasheetBackColor: Integer;
begin
    Result := DefaultInterface.DatasheetBackColor;
end;

procedure TAccessForm.Set_DatasheetBackColor(pRet: Integer);
begin
  DefaultInterface.Set_DatasheetBackColor(pRet);
end;

function TAccessForm.Get_Hwnd: Integer;
begin
    Result := DefaultInterface.Hwnd;
end;

procedure TAccessForm.Set_Hwnd(pRet: Integer);
begin
  DefaultInterface.Set_Hwnd(pRet);
end;

function TAccessForm.Get_Count: Smallint;
begin
    Result := DefaultInterface.Count;
end;

procedure TAccessForm.Set_Count(pRet: Smallint);
begin
  DefaultInterface.Set_Count(pRet);
end;

function TAccessForm.Get_Page: Integer;
begin
    Result := DefaultInterface.Page;
end;

procedure TAccessForm.Set_Page(pRet: Integer);
begin
  DefaultInterface.Set_Page(pRet);
end;

function TAccessForm.Get_Pages: Smallint;
begin
    Result := DefaultInterface.Pages;
end;

procedure TAccessForm.Set_Pages(pRet: Smallint);
begin
  DefaultInterface.Set_Pages(pRet);
end;

function TAccessForm.Get_LogicalPageWidth: Integer;
begin
    Result := DefaultInterface.LogicalPageWidth;
end;

procedure TAccessForm.Set_LogicalPageWidth(pRet: Integer);
begin
  DefaultInterface.Set_LogicalPageWidth(pRet);
end;

function TAccessForm.Get_LogicalPageHeight: Integer;
begin
    Result := DefaultInterface.LogicalPageHeight;
end;

procedure TAccessForm.Set_LogicalPageHeight(pRet: Integer);
begin
  DefaultInterface.Set_LogicalPageHeight(pRet);
end;

function TAccessForm.Get_ZoomControl: Integer;
begin
    Result := DefaultInterface.ZoomControl;
end;

procedure TAccessForm.Set_ZoomControl(pRet: Integer);
begin
  DefaultInterface.Set_ZoomControl(pRet);
end;

function TAccessForm.Get_Visible: WordBool;
begin
    Result := DefaultInterface.Visible;
end;

procedure TAccessForm.Set_Visible(pRet: WordBool);
begin
  DefaultInterface.Set_Visible(pRet);
end;

function TAccessForm.Get_Painting: WordBool;
begin
    Result := DefaultInterface.Painting;
end;

procedure TAccessForm.Set_Painting(pRet: WordBool);
begin
  DefaultInterface.Set_Painting(pRet);
end;

function TAccessForm.Get_PrtMip: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PrtMip;
end;

procedure TAccessForm.Set_PrtMip(pRet: OleVariant);
begin
  DefaultInterface.Set_PrtMip(pRet);
end;

function TAccessForm.Get_PrtDevMode: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PrtDevMode;
end;

procedure TAccessForm.Set_PrtDevMode(pRet: OleVariant);
begin
  DefaultInterface.Set_PrtDevMode(pRet);
end;

function TAccessForm.Get_PrtDevNames: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PrtDevNames;
end;

procedure TAccessForm.Set_PrtDevNames(pRet: OleVariant);
begin
  DefaultInterface.Set_PrtDevNames(pRet);
end;

function TAccessForm.Get_FrozenColumns: Smallint;
begin
    Result := DefaultInterface.FrozenColumns;
end;

procedure TAccessForm.Set_FrozenColumns(pRet: Smallint);
begin
  DefaultInterface.Set_FrozenColumns(pRet);
end;

function TAccessForm.Get_Bookmark: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Bookmark;
end;

procedure TAccessForm.Set_Bookmark(pRet: OleVariant);
begin
  DefaultInterface.Set_Bookmark(pRet);
end;

function TAccessForm.Get_TabularFamily: Byte;
begin
    Result := DefaultInterface.TabularFamily;
end;

procedure TAccessForm.Set_TabularFamily(pRet: Byte);
begin
  DefaultInterface.Set_TabularFamily(pRet);
end;

function TAccessForm.Get__Name: WideString;
begin
    Result := DefaultInterface._Name;
end;

procedure TAccessForm.Set__Name(const pRet: WideString);
  { Warning: The property _Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant._Name := pRet;
end;

function TAccessForm.Get_PaletteSource: WideString;
begin
    Result := DefaultInterface.PaletteSource;
end;

procedure TAccessForm.Set_PaletteSource(const pRet: WideString);
  { Warning: The property PaletteSource has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PaletteSource := pRet;
end;

function TAccessForm.Get_Tag: WideString;
begin
    Result := DefaultInterface.Tag;
end;

procedure TAccessForm.Set_Tag(const pRet: WideString);
  { Warning: The property Tag has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tag := pRet;
end;

function TAccessForm.Get_PaintPalette: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PaintPalette;
end;

procedure TAccessForm.Set_PaintPalette(pRet: OleVariant);
begin
  DefaultInterface.Set_PaintPalette(pRet);
end;

function TAccessForm.Get_OnMenu: WideString;
begin
    Result := DefaultInterface.OnMenu;
end;

procedure TAccessForm.Set_OnMenu(const pRet: WideString);
  { Warning: The property OnMenu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMenu := pRet;
end;

function TAccessForm.Get_OpenArgs: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OpenArgs;
end;

procedure TAccessForm.Set_OpenArgs(pRet: OleVariant);
begin
  DefaultInterface.Set_OpenArgs(pRet);
end;

function TAccessForm.Get_ConnectSynch: Smallint;
begin
    Result := DefaultInterface.ConnectSynch;
end;

procedure TAccessForm.Set_ConnectSynch(pRet: Smallint);
begin
  DefaultInterface.Set_ConnectSynch(pRet);
end;

function TAccessForm.Get_OnCurrent: WideString;
begin
    Result := DefaultInterface.OnCurrent;
end;

procedure TAccessForm.Set_OnCurrent(const pRet: WideString);
  { Warning: The property OnCurrent has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnCurrent := pRet;
end;

function TAccessForm.Get_OnInsert: WideString;
begin
    Result := DefaultInterface.OnInsert;
end;

procedure TAccessForm.Set_OnInsert(const pRet: WideString);
  { Warning: The property OnInsert has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnInsert := pRet;
end;

function TAccessForm.Get_BeforeInsert: WideString;
begin
    Result := DefaultInterface.BeforeInsert;
end;

procedure TAccessForm.Set_BeforeInsert(const pRet: WideString);
  { Warning: The property BeforeInsert has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeInsert := pRet;
end;

function TAccessForm.Get_AfterInsert: WideString;
begin
    Result := DefaultInterface.AfterInsert;
end;

procedure TAccessForm.Set_AfterInsert(const pRet: WideString);
  { Warning: The property AfterInsert has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterInsert := pRet;
end;

function TAccessForm.Get_BeforeUpdate: WideString;
begin
    Result := DefaultInterface.BeforeUpdate;
end;

procedure TAccessForm.Set_BeforeUpdate(const pRet: WideString);
  { Warning: The property BeforeUpdate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeUpdate := pRet;
end;

function TAccessForm.Get_AfterUpdate: WideString;
begin
    Result := DefaultInterface.AfterUpdate;
end;

procedure TAccessForm.Set_AfterUpdate(const pRet: WideString);
  { Warning: The property AfterUpdate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterUpdate := pRet;
end;

function TAccessForm.Get_OnDirty: WideString;
begin
    Result := DefaultInterface.OnDirty;
end;

procedure TAccessForm.Set_OnDirty(const pRet: WideString);
  { Warning: The property OnDirty has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDirty := pRet;
end;

function TAccessForm.Get_OnDelete: WideString;
begin
    Result := DefaultInterface.OnDelete;
end;

procedure TAccessForm.Set_OnDelete(const pRet: WideString);
  { Warning: The property OnDelete has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDelete := pRet;
end;

function TAccessForm.Get_BeforeDelConfirm: WideString;
begin
    Result := DefaultInterface.BeforeDelConfirm;
end;

procedure TAccessForm.Set_BeforeDelConfirm(const pRet: WideString);
  { Warning: The property BeforeDelConfirm has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeDelConfirm := pRet;
end;

function TAccessForm.Get_AfterDelConfirm: WideString;
begin
    Result := DefaultInterface.AfterDelConfirm;
end;

procedure TAccessForm.Set_AfterDelConfirm(const pRet: WideString);
  { Warning: The property AfterDelConfirm has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterDelConfirm := pRet;
end;

function TAccessForm.Get_OnOpen: WideString;
begin
    Result := DefaultInterface.OnOpen;
end;

procedure TAccessForm.Set_OnOpen(const pRet: WideString);
  { Warning: The property OnOpen has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnOpen := pRet;
end;

function TAccessForm.Get_OnLoad: WideString;
begin
    Result := DefaultInterface.OnLoad;
end;

procedure TAccessForm.Set_OnLoad(const pRet: WideString);
  { Warning: The property OnLoad has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnLoad := pRet;
end;

function TAccessForm.Get_OnResize: WideString;
begin
    Result := DefaultInterface.OnResize;
end;

procedure TAccessForm.Set_OnResize(const pRet: WideString);
  { Warning: The property OnResize has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnResize := pRet;
end;

function TAccessForm.Get_OnUnload: WideString;
begin
    Result := DefaultInterface.OnUnload;
end;

procedure TAccessForm.Set_OnUnload(const pRet: WideString);
  { Warning: The property OnUnload has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnUnload := pRet;
end;

function TAccessForm.Get_OnClose: WideString;
begin
    Result := DefaultInterface.OnClose;
end;

procedure TAccessForm.Set_OnClose(const pRet: WideString);
  { Warning: The property OnClose has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnClose := pRet;
end;

function TAccessForm.Get_OnActivate: WideString;
begin
    Result := DefaultInterface.OnActivate;
end;

procedure TAccessForm.Set_OnActivate(const pRet: WideString);
  { Warning: The property OnActivate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnActivate := pRet;
end;

function TAccessForm.Get_OnDeactivate: WideString;
begin
    Result := DefaultInterface.OnDeactivate;
end;

procedure TAccessForm.Set_OnDeactivate(const pRet: WideString);
  { Warning: The property OnDeactivate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDeactivate := pRet;
end;

function TAccessForm.Get_OnGotFocus: WideString;
begin
    Result := DefaultInterface.OnGotFocus;
end;

procedure TAccessForm.Set_OnGotFocus(const pRet: WideString);
  { Warning: The property OnGotFocus has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnGotFocus := pRet;
end;

function TAccessForm.Get_OnLostFocus: WideString;
begin
    Result := DefaultInterface.OnLostFocus;
end;

procedure TAccessForm.Set_OnLostFocus(const pRet: WideString);
  { Warning: The property OnLostFocus has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnLostFocus := pRet;
end;

function TAccessForm.Get_OnClick: WideString;
begin
    Result := DefaultInterface.OnClick;
end;

procedure TAccessForm.Set_OnClick(const pRet: WideString);
  { Warning: The property OnClick has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnClick := pRet;
end;

function TAccessForm.Get_OnDblClick: WideString;
begin
    Result := DefaultInterface.OnDblClick;
end;

procedure TAccessForm.Set_OnDblClick(const pRet: WideString);
  { Warning: The property OnDblClick has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDblClick := pRet;
end;

function TAccessForm.Get_OnMouseDown: WideString;
begin
    Result := DefaultInterface.OnMouseDown;
end;

procedure TAccessForm.Set_OnMouseDown(const pRet: WideString);
  { Warning: The property OnMouseDown has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseDown := pRet;
end;

function TAccessForm.Get_OnMouseMove: WideString;
begin
    Result := DefaultInterface.OnMouseMove;
end;

procedure TAccessForm.Set_OnMouseMove(const pRet: WideString);
  { Warning: The property OnMouseMove has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseMove := pRet;
end;

function TAccessForm.Get_OnMouseUp: WideString;
begin
    Result := DefaultInterface.OnMouseUp;
end;

procedure TAccessForm.Set_OnMouseUp(const pRet: WideString);
  { Warning: The property OnMouseUp has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseUp := pRet;
end;

function TAccessForm.Get_OnKeyDown: WideString;
begin
    Result := DefaultInterface.OnKeyDown;
end;

procedure TAccessForm.Set_OnKeyDown(const pRet: WideString);
  { Warning: The property OnKeyDown has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyDown := pRet;
end;

function TAccessForm.Get_OnKeyUp: WideString;
begin
    Result := DefaultInterface.OnKeyUp;
end;

procedure TAccessForm.Set_OnKeyUp(const pRet: WideString);
  { Warning: The property OnKeyUp has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyUp := pRet;
end;

function TAccessForm.Get_OnKeyPress: WideString;
begin
    Result := DefaultInterface.OnKeyPress;
end;

procedure TAccessForm.Set_OnKeyPress(const pRet: WideString);
  { Warning: The property OnKeyPress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyPress := pRet;
end;

function TAccessForm.Get_KeyPreview: WordBool;
begin
    Result := DefaultInterface.KeyPreview;
end;

procedure TAccessForm.Set_KeyPreview(pRet: WordBool);
begin
  DefaultInterface.Set_KeyPreview(pRet);
end;

function TAccessForm.Get_OnError: WideString;
begin
    Result := DefaultInterface.OnError;
end;

procedure TAccessForm.Set_OnError(const pRet: WideString);
  { Warning: The property OnError has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnError := pRet;
end;

function TAccessForm.Get_OnFilter: WideString;
begin
    Result := DefaultInterface.OnFilter;
end;

procedure TAccessForm.Set_OnFilter(const pRet: WideString);
  { Warning: The property OnFilter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnFilter := pRet;
end;

function TAccessForm.Get_OnApplyFilter: WideString;
begin
    Result := DefaultInterface.OnApplyFilter;
end;

procedure TAccessForm.Set_OnApplyFilter(const pRet: WideString);
  { Warning: The property OnApplyFilter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnApplyFilter := pRet;
end;

function TAccessForm.Get_OnTimer: WideString;
begin
    Result := DefaultInterface.OnTimer;
end;

procedure TAccessForm.Set_OnTimer(const pRet: WideString);
  { Warning: The property OnTimer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnTimer := pRet;
end;

function TAccessForm.Get_TimerInterval: Integer;
begin
    Result := DefaultInterface.TimerInterval;
end;

procedure TAccessForm.Set_TimerInterval(pRet: Integer);
begin
  DefaultInterface.Set_TimerInterval(pRet);
end;

function TAccessForm.Get_Dirty: WordBool;
begin
    Result := DefaultInterface.Dirty;
end;

procedure TAccessForm.Set_Dirty(pRet: WordBool);
begin
  DefaultInterface.Set_Dirty(pRet);
end;

function TAccessForm.Get_WindowWidth: Smallint;
begin
    Result := DefaultInterface.WindowWidth;
end;

procedure TAccessForm.Set_WindowWidth(pRet: Smallint);
begin
  DefaultInterface.Set_WindowWidth(pRet);
end;

function TAccessForm.Get_WindowHeight: Smallint;
begin
    Result := DefaultInterface.WindowHeight;
end;

procedure TAccessForm.Set_WindowHeight(pRet: Smallint);
begin
  DefaultInterface.Set_WindowHeight(pRet);
end;

function TAccessForm.Get_CurrentView: Smallint;
begin
    Result := DefaultInterface.CurrentView;
end;

procedure TAccessForm.Set_CurrentView(pRet: Smallint);
begin
  DefaultInterface.Set_CurrentView(pRet);
end;

function TAccessForm.Get_CurrentSectionTop: Smallint;
begin
    Result := DefaultInterface.CurrentSectionTop;
end;

procedure TAccessForm.Set_CurrentSectionTop(pRet: Smallint);
begin
  DefaultInterface.Set_CurrentSectionTop(pRet);
end;

function TAccessForm.Get_CurrentSectionLeft: Smallint;
begin
    Result := DefaultInterface.CurrentSectionLeft;
end;

procedure TAccessForm.Set_CurrentSectionLeft(pRet: Smallint);
begin
  DefaultInterface.Set_CurrentSectionLeft(pRet);
end;

function TAccessForm.Get_SelLeft: Integer;
begin
    Result := DefaultInterface.SelLeft;
end;

procedure TAccessForm.Set_SelLeft(pRet: Integer);
begin
  DefaultInterface.Set_SelLeft(pRet);
end;

function TAccessForm.Get_SelTop: Integer;
begin
    Result := DefaultInterface.SelTop;
end;

procedure TAccessForm.Set_SelTop(pRet: Integer);
begin
  DefaultInterface.Set_SelTop(pRet);
end;

function TAccessForm.Get_SelWidth: Integer;
begin
    Result := DefaultInterface.SelWidth;
end;

procedure TAccessForm.Set_SelWidth(pRet: Integer);
begin
  DefaultInterface.Set_SelWidth(pRet);
end;

function TAccessForm.Get_SelHeight: Integer;
begin
    Result := DefaultInterface.SelHeight;
end;

procedure TAccessForm.Set_SelHeight(pRet: Integer);
begin
  DefaultInterface.Set_SelHeight(pRet);
end;

function TAccessForm.Get_CurrentRecord: Integer;
begin
    Result := DefaultInterface.CurrentRecord;
end;

procedure TAccessForm.Set_CurrentRecord(pRet: Integer);
begin
  DefaultInterface.Set_CurrentRecord(pRet);
end;

function TAccessForm.Get_PictureData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PictureData;
end;

procedure TAccessForm.Set_PictureData(pRet: OleVariant);
begin
  DefaultInterface.Set_PictureData(pRet);
end;

function TAccessForm.Get_InsideHeight: Integer;
begin
    Result := DefaultInterface.InsideHeight;
end;

procedure TAccessForm.Set_InsideHeight(pRet: Integer);
begin
  DefaultInterface.Set_InsideHeight(pRet);
end;

function TAccessForm.Get_InsideWidth: Integer;
begin
    Result := DefaultInterface.InsideWidth;
end;

procedure TAccessForm.Set_InsideWidth(pRet: Integer);
begin
  DefaultInterface.Set_InsideWidth(pRet);
end;

function TAccessForm.Get_PicturePalette: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PicturePalette;
end;

procedure TAccessForm.Set_PicturePalette(pRet: OleVariant);
begin
  DefaultInterface.Set_PicturePalette(pRet);
end;

function TAccessForm.Get_HasModule: WordBool;
begin
    Result := DefaultInterface.HasModule;
end;

procedure TAccessForm.Set_HasModule(pRet: WordBool);
begin
  DefaultInterface.Set_HasModule(pRet);
end;

function TAccessForm.Get_acHiddenCurrentPage: Integer;
begin
    Result := DefaultInterface.acHiddenCurrentPage;
end;

procedure TAccessForm.Set_acHiddenCurrentPage(pRet: Integer);
begin
  DefaultInterface.Set_acHiddenCurrentPage(pRet);
end;

function TAccessForm.Get_Orientation: Byte;
begin
    Result := DefaultInterface.Orientation;
end;

procedure TAccessForm.Set_Orientation(pRet: Byte);
begin
  DefaultInterface.Set_Orientation(pRet);
end;

function TAccessForm.Get_AllowDesignChanges: WordBool;
begin
    Result := DefaultInterface.AllowDesignChanges;
end;

procedure TAccessForm.Set_AllowDesignChanges(pRet: WordBool);
begin
  DefaultInterface.Set_AllowDesignChanges(pRet);
end;

function TAccessForm.Get_ServerFilter: WideString;
begin
    Result := DefaultInterface.ServerFilter;
end;

procedure TAccessForm.Set_ServerFilter(const pRet: WideString);
  { Warning: The property ServerFilter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ServerFilter := pRet;
end;

function TAccessForm.Get_ServerFilterByForm: WordBool;
begin
    Result := DefaultInterface.ServerFilterByForm;
end;

procedure TAccessForm.Set_ServerFilterByForm(pRet: WordBool);
begin
  DefaultInterface.Set_ServerFilterByForm(pRet);
end;

function TAccessForm.Get_MaxRecords: Integer;
begin
    Result := DefaultInterface.MaxRecords;
end;

procedure TAccessForm.Set_MaxRecords(pRet: Integer);
begin
  DefaultInterface.Set_MaxRecords(pRet);
end;

function TAccessForm.Get_UniqueTable: WideString;
begin
    Result := DefaultInterface.UniqueTable;
end;

procedure TAccessForm.Set_UniqueTable(const pRet: WideString);
  { Warning: The property UniqueTable has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UniqueTable := pRet;
end;

function TAccessForm.Get_ResyncCommand: WideString;
begin
    Result := DefaultInterface.ResyncCommand;
end;

procedure TAccessForm.Set_ResyncCommand(const pRet: WideString);
  { Warning: The property ResyncCommand has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ResyncCommand := pRet;
end;

function TAccessForm.Get_InputParameters: WideString;
begin
    Result := DefaultInterface.InputParameters;
end;

procedure TAccessForm.Set_InputParameters(const pRet: WideString);
  { Warning: The property InputParameters has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.InputParameters := pRet;
end;

function TAccessForm.Get_MaxRecButton: WordBool;
begin
    Result := DefaultInterface.MaxRecButton;
end;

procedure TAccessForm.Set_MaxRecButton(pRet: WordBool);
begin
  DefaultInterface.Set_MaxRecButton(pRet);
end;

function TAccessForm.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessForm.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessForm.Get_NewRecord: Smallint;
begin
    Result := DefaultInterface.NewRecord;
end;

function TAccessForm.Get_ActiveControl: AccessControl;
begin
    Result := DefaultInterface.ActiveControl;
end;

function TAccessForm.Get_DefaultControl(ControlType: Integer): AccessControl;
begin
    Result := DefaultInterface.DefaultControl[ControlType];
end;

function TAccessForm.Get_Dynaset: IDispatch;
begin
    Result := DefaultInterface.Dynaset;
end;

function TAccessForm.Get_RecordsetClone: IDispatch;
begin
    Result := DefaultInterface.RecordsetClone;
end;

function TAccessForm.Get_Recordset: IDispatch;
begin
    Result := DefaultInterface.Recordset;
end;

procedure TAccessForm._Set_Recordset(const pRet: IDispatch);
  { Warning: The property Recordset has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Recordset := pRet;
end;

function TAccessForm.Get__SectionOld(Index: OleVariant): AccessSection;
begin
    Result := DefaultInterface._SectionOld[Index];
end;

function TAccessForm.Get_Form: AccessForm;
begin
    Result := DefaultInterface.Form;
end;

function TAccessForm.Get_Module: Module;
begin
    Result := DefaultInterface.Module;
end;

function TAccessForm.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessForm.Get_ConnectControl: AccessControl;
begin
    Result := DefaultInterface.ConnectControl;
end;

function TAccessForm.Get_Controls: Controls;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessForm.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TAccessForm.Set_Name(const pbstrName: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pbstrName;
end;

function TAccessForm.Get_SubdatasheetHeight: Smallint;
begin
    Result := DefaultInterface.SubdatasheetHeight;
end;

procedure TAccessForm.Set_SubdatasheetHeight(pRet: Smallint);
begin
  DefaultInterface.Set_SubdatasheetHeight(pRet);
end;

function TAccessForm.Get_SubdatasheetExpanded: WordBool;
begin
    Result := DefaultInterface.SubdatasheetExpanded;
end;

procedure TAccessForm.Set_SubdatasheetExpanded(pRet: WordBool);
begin
  DefaultInterface.Set_SubdatasheetExpanded(pRet);
end;

function TAccessForm.Get_DatasheetBorderLineStyle: Byte;
begin
    Result := DefaultInterface.DatasheetBorderLineStyle;
end;

procedure TAccessForm.Set_DatasheetBorderLineStyle(pRet: Byte);
begin
  DefaultInterface.Set_DatasheetBorderLineStyle(pRet);
end;

function TAccessForm.Get_DatasheetColumnHeaderUnderlineStyle: Byte;
begin
    Result := DefaultInterface.DatasheetColumnHeaderUnderlineStyle;
end;

procedure TAccessForm.Set_DatasheetColumnHeaderUnderlineStyle(pRet: Byte);
begin
  DefaultInterface.Set_DatasheetColumnHeaderUnderlineStyle(pRet);
end;

function TAccessForm.Get_HorizontalDatasheetGridlineStyle: Byte;
begin
    Result := DefaultInterface.HorizontalDatasheetGridlineStyle;
end;

procedure TAccessForm.Set_HorizontalDatasheetGridlineStyle(pRet: Byte);
begin
  DefaultInterface.Set_HorizontalDatasheetGridlineStyle(pRet);
end;

function TAccessForm.Get_VerticalDatasheetGridlineStyle: Byte;
begin
    Result := DefaultInterface.VerticalDatasheetGridlineStyle;
end;

procedure TAccessForm.Set_VerticalDatasheetGridlineStyle(pRet: Byte);
begin
  DefaultInterface.Set_VerticalDatasheetGridlineStyle(pRet);
end;

function TAccessForm.Get_WindowTop: Smallint;
begin
    Result := DefaultInterface.WindowTop;
end;

function TAccessForm.Get_WindowLeft: Smallint;
begin
    Result := DefaultInterface.WindowLeft;
end;

function TAccessForm.Get_OnUndo: WideString;
begin
    Result := DefaultInterface.OnUndo;
end;

procedure TAccessForm.Set_OnUndo(const pRet: WideString);
  { Warning: The property OnUndo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnUndo := pRet;
end;

function TAccessForm.Get_OnRecordExit: WideString;
begin
    Result := DefaultInterface.OnRecordExit;
end;

procedure TAccessForm.Set_OnRecordExit(const pRet: WideString);
  { Warning: The property OnRecordExit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnRecordExit := pRet;
end;

function TAccessForm.Get_PivotTable: IDispatch;
begin
    Result := DefaultInterface.PivotTable;
end;

function TAccessForm.Get_ChartSpace: IDispatch;
begin
    Result := DefaultInterface.ChartSpace;
end;

function TAccessForm.Get_Printer: _Printer;
begin
    Result := DefaultInterface.Printer;
end;

procedure TAccessForm.Set_Printer(const pRet: _Printer);
begin
  DefaultInterface.Set_Printer(pRet);
end;

procedure TAccessForm._Set_Printer(const pRet: _Printer);
  { Warning: The property Printer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Printer := pRet;
end;

function TAccessForm.Get_Moveable: WordBool;
begin
    Result := DefaultInterface.Moveable;
end;

procedure TAccessForm.Set_Moveable(pRet: WordBool);
begin
  DefaultInterface.Set_Moveable(pRet);
end;

function TAccessForm.Get_BeginBatchEdit: WideString;
begin
    Result := DefaultInterface.BeginBatchEdit;
end;

procedure TAccessForm.Set_BeginBatchEdit(const pRet: WideString);
  { Warning: The property BeginBatchEdit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeginBatchEdit := pRet;
end;

function TAccessForm.Get_UndoBatchEdit: WideString;
begin
    Result := DefaultInterface.UndoBatchEdit;
end;

procedure TAccessForm.Set_UndoBatchEdit(const pRet: WideString);
  { Warning: The property UndoBatchEdit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UndoBatchEdit := pRet;
end;

function TAccessForm.Get_BeforeBeginTransaction: WideString;
begin
    Result := DefaultInterface.BeforeBeginTransaction;
end;

procedure TAccessForm.Set_BeforeBeginTransaction(const pRet: WideString);
  { Warning: The property BeforeBeginTransaction has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeBeginTransaction := pRet;
end;

function TAccessForm.Get_AfterBeginTransaction: WideString;
begin
    Result := DefaultInterface.AfterBeginTransaction;
end;

procedure TAccessForm.Set_AfterBeginTransaction(const pRet: WideString);
  { Warning: The property AfterBeginTransaction has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterBeginTransaction := pRet;
end;

function TAccessForm.Get_BeforeCommitTransaction: WideString;
begin
    Result := DefaultInterface.BeforeCommitTransaction;
end;

procedure TAccessForm.Set_BeforeCommitTransaction(const pRet: WideString);
  { Warning: The property BeforeCommitTransaction has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeCommitTransaction := pRet;
end;

function TAccessForm.Get_AfterCommitTransaction: WideString;
begin
    Result := DefaultInterface.AfterCommitTransaction;
end;

procedure TAccessForm.Set_AfterCommitTransaction(const pRet: WideString);
  { Warning: The property AfterCommitTransaction has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterCommitTransaction := pRet;
end;

function TAccessForm.Get_RollbackTransaction: WideString;
begin
    Result := DefaultInterface.RollbackTransaction;
end;

procedure TAccessForm.Set_RollbackTransaction(const pRet: WideString);
  { Warning: The property RollbackTransaction has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RollbackTransaction := pRet;
end;

function TAccessForm.Get_AllowFormView: WordBool;
begin
    Result := DefaultInterface.AllowFormView;
end;

procedure TAccessForm.Set_AllowFormView(pRet: WordBool);
begin
  DefaultInterface.Set_AllowFormView(pRet);
end;

function TAccessForm.Get_AllowDatasheetView: WordBool;
begin
    Result := DefaultInterface.AllowDatasheetView;
end;

procedure TAccessForm.Set_AllowDatasheetView(pRet: WordBool);
begin
  DefaultInterface.Set_AllowDatasheetView(pRet);
end;

function TAccessForm.Get_AllowPivotTableView: WordBool;
begin
    Result := DefaultInterface.AllowPivotTableView;
end;

procedure TAccessForm.Set_AllowPivotTableView(pRet: WordBool);
begin
  DefaultInterface.Set_AllowPivotTableView(pRet);
end;

function TAccessForm.Get_AllowPivotChartView: WordBool;
begin
    Result := DefaultInterface.AllowPivotChartView;
end;

procedure TAccessForm.Set_AllowPivotChartView(pRet: WordBool);
begin
  DefaultInterface.Set_AllowPivotChartView(pRet);
end;

function TAccessForm.Get_OnConnect: WideString;
begin
    Result := DefaultInterface.OnConnect;
end;

procedure TAccessForm.Set_OnConnect(const pRet: WideString);
  { Warning: The property OnConnect has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnConnect := pRet;
end;

function TAccessForm.Get_OnDisconnect: WideString;
begin
    Result := DefaultInterface.OnDisconnect;
end;

procedure TAccessForm.Set_OnDisconnect(const pRet: WideString);
  { Warning: The property OnDisconnect has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDisconnect := pRet;
end;

function TAccessForm.Get_PivotTableChange: WideString;
begin
    Result := DefaultInterface.PivotTableChange;
end;

procedure TAccessForm.Set_PivotTableChange(const pRet: WideString);
  { Warning: The property PivotTableChange has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PivotTableChange := pRet;
end;

function TAccessForm.Get_Query: WideString;
begin
    Result := DefaultInterface.Query;
end;

procedure TAccessForm.Set_Query(const pRet: WideString);
  { Warning: The property Query has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Query := pRet;
end;

function TAccessForm.Get_BeforeQuery: WideString;
begin
    Result := DefaultInterface.BeforeQuery;
end;

procedure TAccessForm.Set_BeforeQuery(const pRet: WideString);
  { Warning: The property BeforeQuery has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeQuery := pRet;
end;

function TAccessForm.Get_SelectionChange: WideString;
begin
    Result := DefaultInterface.SelectionChange;
end;

procedure TAccessForm.Set_SelectionChange(const pRet: WideString);
  { Warning: The property SelectionChange has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SelectionChange := pRet;
end;

function TAccessForm.Get_CommandBeforeExecute: WideString;
begin
    Result := DefaultInterface.CommandBeforeExecute;
end;

procedure TAccessForm.Set_CommandBeforeExecute(const pRet: WideString);
  { Warning: The property CommandBeforeExecute has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandBeforeExecute := pRet;
end;

function TAccessForm.Get_CommandChecked: WideString;
begin
    Result := DefaultInterface.CommandChecked;
end;

procedure TAccessForm.Set_CommandChecked(const pRet: WideString);
  { Warning: The property CommandChecked has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandChecked := pRet;
end;

function TAccessForm.Get_CommandEnabled: WideString;
begin
    Result := DefaultInterface.CommandEnabled;
end;

procedure TAccessForm.Set_CommandEnabled(const pRet: WideString);
  { Warning: The property CommandEnabled has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandEnabled := pRet;
end;

function TAccessForm.Get_CommandExecute: WideString;
begin
    Result := DefaultInterface.CommandExecute;
end;

procedure TAccessForm.Set_CommandExecute(const pRet: WideString);
  { Warning: The property CommandExecute has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandExecute := pRet;
end;

function TAccessForm.Get_DataSetChange: WideString;
begin
    Result := DefaultInterface.DataSetChange;
end;

procedure TAccessForm.Set_DataSetChange(const pRet: WideString);
  { Warning: The property DataSetChange has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataSetChange := pRet;
end;

function TAccessForm.Get_BeforeScreenTip: WideString;
begin
    Result := DefaultInterface.BeforeScreenTip;
end;

procedure TAccessForm.Set_BeforeScreenTip(const pRet: WideString);
  { Warning: The property BeforeScreenTip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeScreenTip := pRet;
end;

function TAccessForm.Get_AfterFinalRender: WideString;
begin
    Result := DefaultInterface.AfterFinalRender;
end;

procedure TAccessForm.Set_AfterFinalRender(const pRet: WideString);
  { Warning: The property AfterFinalRender has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterFinalRender := pRet;
end;

function TAccessForm.Get_AfterRender: WideString;
begin
    Result := DefaultInterface.AfterRender;
end;

procedure TAccessForm.Set_AfterRender(const pRet: WideString);
  { Warning: The property AfterRender has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterRender := pRet;
end;

function TAccessForm.Get_AfterLayout: WideString;
begin
    Result := DefaultInterface.AfterLayout;
end;

procedure TAccessForm.Set_AfterLayout(const pRet: WideString);
  { Warning: The property AfterLayout has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterLayout := pRet;
end;

function TAccessForm.Get_BeforeRender: WideString;
begin
    Result := DefaultInterface.BeforeRender;
end;

procedure TAccessForm.Set_BeforeRender(const pRet: WideString);
  { Warning: The property BeforeRender has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeRender := pRet;
end;

function TAccessForm.Get_MouseWheel: WideString;
begin
    Result := DefaultInterface.MouseWheel;
end;

procedure TAccessForm.Set_MouseWheel(const pRet: WideString);
  { Warning: The property MouseWheel has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MouseWheel := pRet;
end;

function TAccessForm.Get_ViewChange: WideString;
begin
    Result := DefaultInterface.ViewChange;
end;

procedure TAccessForm.Set_ViewChange(const pRet: WideString);
  { Warning: The property ViewChange has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ViewChange := pRet;
end;

function TAccessForm.Get_DataChange: WideString;
begin
    Result := DefaultInterface.DataChange;
end;

procedure TAccessForm.Set_DataChange(const pRet: WideString);
  { Warning: The property DataChange has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataChange := pRet;
end;

function TAccessForm.Get_FetchDefaults: WordBool;
begin
    Result := DefaultInterface.FetchDefaults;
end;

procedure TAccessForm.Set_FetchDefaults(pRet: WordBool);
begin
  DefaultInterface.Set_FetchDefaults(pRet);
end;

function TAccessForm.Get_BatchUpdates: WordBool;
begin
    Result := DefaultInterface.BatchUpdates;
end;

procedure TAccessForm.Set_BatchUpdates(pRet: WordBool);
begin
  DefaultInterface.Set_BatchUpdates(pRet);
end;

function TAccessForm.Get_CommitOnClose: Byte;
begin
    Result := DefaultInterface.CommitOnClose;
end;

procedure TAccessForm.Set_CommitOnClose(pRet: Byte);
begin
  DefaultInterface.Set_CommitOnClose(pRet);
end;

function TAccessForm.Get_CommitOnNavigation: WordBool;
begin
    Result := DefaultInterface.CommitOnNavigation;
end;

procedure TAccessForm.Set_CommitOnNavigation(pRet: WordBool);
begin
  DefaultInterface.Set_CommitOnNavigation(pRet);
end;

function TAccessForm.Get_UseDefaultPrinter: WordBool;
begin
    Result := DefaultInterface.UseDefaultPrinter;
end;

procedure TAccessForm.Set_UseDefaultPrinter(pRet: WordBool);
begin
  DefaultInterface.Set_UseDefaultPrinter(pRet);
end;

function TAccessForm.Get_RecordSourceQualifier: WideString;
begin
    Result := DefaultInterface.RecordSourceQualifier;
end;

procedure TAccessForm.Set_RecordSourceQualifier(const pRet: WideString);
  { Warning: The property RecordSourceQualifier has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RecordSourceQualifier := pRet;
end;

function TAccessForm.Get_FilterOnLoad: WordBool;
begin
    Result := DefaultInterface.FilterOnLoad;
end;

procedure TAccessForm.Set_FilterOnLoad(pRet: WordBool);
begin
  DefaultInterface.Set_FilterOnLoad(pRet);
end;

function TAccessForm.Get_OrderByOnLoad: WordBool;
begin
    Result := DefaultInterface.OrderByOnLoad;
end;

procedure TAccessForm.Set_OrderByOnLoad(pRet: WordBool);
begin
  DefaultInterface.Set_OrderByOnLoad(pRet);
end;

function TAccessForm.Get_SplitFormOrientation: AcSplitFormOrientation;
begin
    Result := DefaultInterface.SplitFormOrientation;
end;

procedure TAccessForm.Set_SplitFormOrientation(pRet: AcSplitFormOrientation);
begin
  DefaultInterface.Set_SplitFormOrientation(pRet);
end;

function TAccessForm.Get_SplitFormDatasheet: AcSplitFormDatasheet;
begin
    Result := DefaultInterface.SplitFormDatasheet;
end;

procedure TAccessForm.Set_SplitFormDatasheet(pRet: AcSplitFormDatasheet);
begin
  DefaultInterface.Set_SplitFormDatasheet(pRet);
end;

function TAccessForm.Get_SplitFormSplitterBar: WordBool;
begin
    Result := DefaultInterface.SplitFormSplitterBar;
end;

procedure TAccessForm.Set_SplitFormSplitterBar(pRet: WordBool);
begin
  DefaultInterface.Set_SplitFormSplitterBar(pRet);
end;

function TAccessForm.Get_SplitFormPrinting: AcSplitFormPrinting;
begin
    Result := DefaultInterface.SplitFormPrinting;
end;

procedure TAccessForm.Set_SplitFormPrinting(pRet: AcSplitFormPrinting);
begin
  DefaultInterface.Set_SplitFormPrinting(pRet);
end;

function TAccessForm.Get_SplitFormSplitterBarSave: WordBool;
begin
    Result := DefaultInterface.SplitFormSplitterBarSave;
end;

procedure TAccessForm.Set_SplitFormSplitterBarSave(pRet: WordBool);
begin
  DefaultInterface.Set_SplitFormSplitterBarSave(pRet);
end;

function TAccessForm.Get_NavigationCaption: WideString;
begin
    Result := DefaultInterface.NavigationCaption;
end;

procedure TAccessForm.Set_NavigationCaption(const pRet: WideString);
  { Warning: The property NavigationCaption has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.NavigationCaption := pRet;
end;

function TAccessForm.Get_OnCurrentMacro: WideString;
begin
    Result := DefaultInterface.OnCurrentMacro;
end;

procedure TAccessForm.Set_OnCurrentMacro(const pRet: WideString);
  { Warning: The property OnCurrentMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnCurrentMacro := pRet;
end;

function TAccessForm.Get_BeforeInsertMacro: WideString;
begin
    Result := DefaultInterface.BeforeInsertMacro;
end;

procedure TAccessForm.Set_BeforeInsertMacro(const pRet: WideString);
  { Warning: The property BeforeInsertMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeInsertMacro := pRet;
end;

function TAccessForm.Get_AfterInsertMacro: WideString;
begin
    Result := DefaultInterface.AfterInsertMacro;
end;

procedure TAccessForm.Set_AfterInsertMacro(const pRet: WideString);
  { Warning: The property AfterInsertMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterInsertMacro := pRet;
end;

function TAccessForm.Get_BeforeUpdateMacro: WideString;
begin
    Result := DefaultInterface.BeforeUpdateMacro;
end;

procedure TAccessForm.Set_BeforeUpdateMacro(const pRet: WideString);
  { Warning: The property BeforeUpdateMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeUpdateMacro := pRet;
end;

function TAccessForm.Get_AfterUpdateMacro: WideString;
begin
    Result := DefaultInterface.AfterUpdateMacro;
end;

procedure TAccessForm.Set_AfterUpdateMacro(const pRet: WideString);
  { Warning: The property AfterUpdateMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterUpdateMacro := pRet;
end;

function TAccessForm.Get_OnDirtyMacro: WideString;
begin
    Result := DefaultInterface.OnDirtyMacro;
end;

procedure TAccessForm.Set_OnDirtyMacro(const pRet: WideString);
  { Warning: The property OnDirtyMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDirtyMacro := pRet;
end;

function TAccessForm.Get_OnDeleteMacro: WideString;
begin
    Result := DefaultInterface.OnDeleteMacro;
end;

procedure TAccessForm.Set_OnDeleteMacro(const pRet: WideString);
  { Warning: The property OnDeleteMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDeleteMacro := pRet;
end;

function TAccessForm.Get_BeforeDelConfirmMacro: WideString;
begin
    Result := DefaultInterface.BeforeDelConfirmMacro;
end;

procedure TAccessForm.Set_BeforeDelConfirmMacro(const pRet: WideString);
  { Warning: The property BeforeDelConfirmMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeDelConfirmMacro := pRet;
end;

function TAccessForm.Get_AfterDelConfirmMacro: WideString;
begin
    Result := DefaultInterface.AfterDelConfirmMacro;
end;

procedure TAccessForm.Set_AfterDelConfirmMacro(const pRet: WideString);
  { Warning: The property AfterDelConfirmMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterDelConfirmMacro := pRet;
end;

function TAccessForm.Get_OnOpenMacro: WideString;
begin
    Result := DefaultInterface.OnOpenMacro;
end;

procedure TAccessForm.Set_OnOpenMacro(const pRet: WideString);
  { Warning: The property OnOpenMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnOpenMacro := pRet;
end;

function TAccessForm.Get_OnLoadMacro: WideString;
begin
    Result := DefaultInterface.OnLoadMacro;
end;

procedure TAccessForm.Set_OnLoadMacro(const pRet: WideString);
  { Warning: The property OnLoadMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnLoadMacro := pRet;
end;

function TAccessForm.Get_OnResizeMacro: WideString;
begin
    Result := DefaultInterface.OnResizeMacro;
end;

procedure TAccessForm.Set_OnResizeMacro(const pRet: WideString);
  { Warning: The property OnResizeMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnResizeMacro := pRet;
end;

function TAccessForm.Get_OnUnloadMacro: WideString;
begin
    Result := DefaultInterface.OnUnloadMacro;
end;

procedure TAccessForm.Set_OnUnloadMacro(const pRet: WideString);
  { Warning: The property OnUnloadMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnUnloadMacro := pRet;
end;

function TAccessForm.Get_OnCloseMacro: WideString;
begin
    Result := DefaultInterface.OnCloseMacro;
end;

procedure TAccessForm.Set_OnCloseMacro(const pRet: WideString);
  { Warning: The property OnCloseMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnCloseMacro := pRet;
end;

function TAccessForm.Get_OnActivateMacro: WideString;
begin
    Result := DefaultInterface.OnActivateMacro;
end;

procedure TAccessForm.Set_OnActivateMacro(const pRet: WideString);
  { Warning: The property OnActivateMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnActivateMacro := pRet;
end;

function TAccessForm.Get_OnDeactivateMacro: WideString;
begin
    Result := DefaultInterface.OnDeactivateMacro;
end;

procedure TAccessForm.Set_OnDeactivateMacro(const pRet: WideString);
  { Warning: The property OnDeactivateMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDeactivateMacro := pRet;
end;

function TAccessForm.Get_OnGotFocusMacro: WideString;
begin
    Result := DefaultInterface.OnGotFocusMacro;
end;

procedure TAccessForm.Set_OnGotFocusMacro(const pRet: WideString);
  { Warning: The property OnGotFocusMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnGotFocusMacro := pRet;
end;

function TAccessForm.Get_OnLostFocusMacro: WideString;
begin
    Result := DefaultInterface.OnLostFocusMacro;
end;

procedure TAccessForm.Set_OnLostFocusMacro(const pRet: WideString);
  { Warning: The property OnLostFocusMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnLostFocusMacro := pRet;
end;

function TAccessForm.Get_OnClickMacro: WideString;
begin
    Result := DefaultInterface.OnClickMacro;
end;

procedure TAccessForm.Set_OnClickMacro(const pRet: WideString);
  { Warning: The property OnClickMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnClickMacro := pRet;
end;

function TAccessForm.Get_OnDblClickMacro: WideString;
begin
    Result := DefaultInterface.OnDblClickMacro;
end;

procedure TAccessForm.Set_OnDblClickMacro(const pRet: WideString);
  { Warning: The property OnDblClickMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDblClickMacro := pRet;
end;

function TAccessForm.Get_OnMouseDownMacro: WideString;
begin
    Result := DefaultInterface.OnMouseDownMacro;
end;

procedure TAccessForm.Set_OnMouseDownMacro(const pRet: WideString);
  { Warning: The property OnMouseDownMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseDownMacro := pRet;
end;

function TAccessForm.Get_OnMouseMoveMacro: WideString;
begin
    Result := DefaultInterface.OnMouseMoveMacro;
end;

procedure TAccessForm.Set_OnMouseMoveMacro(const pRet: WideString);
  { Warning: The property OnMouseMoveMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseMoveMacro := pRet;
end;

function TAccessForm.Get_OnMouseUpMacro: WideString;
begin
    Result := DefaultInterface.OnMouseUpMacro;
end;

procedure TAccessForm.Set_OnMouseUpMacro(const pRet: WideString);
  { Warning: The property OnMouseUpMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseUpMacro := pRet;
end;

function TAccessForm.Get_OnKeyDownMacro: WideString;
begin
    Result := DefaultInterface.OnKeyDownMacro;
end;

procedure TAccessForm.Set_OnKeyDownMacro(const pRet: WideString);
  { Warning: The property OnKeyDownMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyDownMacro := pRet;
end;

function TAccessForm.Get_OnKeyUpMacro: WideString;
begin
    Result := DefaultInterface.OnKeyUpMacro;
end;

procedure TAccessForm.Set_OnKeyUpMacro(const pRet: WideString);
  { Warning: The property OnKeyUpMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyUpMacro := pRet;
end;

function TAccessForm.Get_OnKeyPressMacro: WideString;
begin
    Result := DefaultInterface.OnKeyPressMacro;
end;

procedure TAccessForm.Set_OnKeyPressMacro(const pRet: WideString);
  { Warning: The property OnKeyPressMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyPressMacro := pRet;
end;

function TAccessForm.Get_OnErrorMacro: WideString;
begin
    Result := DefaultInterface.OnErrorMacro;
end;

procedure TAccessForm.Set_OnErrorMacro(const pRet: WideString);
  { Warning: The property OnErrorMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnErrorMacro := pRet;
end;

function TAccessForm.Get_OnFilterMacro: WideString;
begin
    Result := DefaultInterface.OnFilterMacro;
end;

procedure TAccessForm.Set_OnFilterMacro(const pRet: WideString);
  { Warning: The property OnFilterMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnFilterMacro := pRet;
end;

function TAccessForm.Get_OnApplyFilterMacro: WideString;
begin
    Result := DefaultInterface.OnApplyFilterMacro;
end;

procedure TAccessForm.Set_OnApplyFilterMacro(const pRet: WideString);
  { Warning: The property OnApplyFilterMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnApplyFilterMacro := pRet;
end;

function TAccessForm.Get_OnTimerMacro: WideString;
begin
    Result := DefaultInterface.OnTimerMacro;
end;

procedure TAccessForm.Set_OnTimerMacro(const pRet: WideString);
  { Warning: The property OnTimerMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnTimerMacro := pRet;
end;

function TAccessForm.Get_OnUndoMacro: WideString;
begin
    Result := DefaultInterface.OnUndoMacro;
end;

procedure TAccessForm.Set_OnUndoMacro(const pRet: WideString);
  { Warning: The property OnUndoMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnUndoMacro := pRet;
end;

function TAccessForm.Get_OnRecordExitMacro: WideString;
begin
    Result := DefaultInterface.OnRecordExitMacro;
end;

procedure TAccessForm.Set_OnRecordExitMacro(const pRet: WideString);
  { Warning: The property OnRecordExitMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnRecordExitMacro := pRet;
end;

function TAccessForm.Get_BeginBatchEditMacro: WideString;
begin
    Result := DefaultInterface.BeginBatchEditMacro;
end;

procedure TAccessForm.Set_BeginBatchEditMacro(const pRet: WideString);
  { Warning: The property BeginBatchEditMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeginBatchEditMacro := pRet;
end;

function TAccessForm.Get_UndoBatchEditMacro: WideString;
begin
    Result := DefaultInterface.UndoBatchEditMacro;
end;

procedure TAccessForm.Set_UndoBatchEditMacro(const pRet: WideString);
  { Warning: The property UndoBatchEditMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UndoBatchEditMacro := pRet;
end;

function TAccessForm.Get_BeforeBeginTransactionMacro: WideString;
begin
    Result := DefaultInterface.BeforeBeginTransactionMacro;
end;

procedure TAccessForm.Set_BeforeBeginTransactionMacro(const pRet: WideString);
  { Warning: The property BeforeBeginTransactionMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeBeginTransactionMacro := pRet;
end;

function TAccessForm.Get_AfterBeginTransactionMacro: WideString;
begin
    Result := DefaultInterface.AfterBeginTransactionMacro;
end;

procedure TAccessForm.Set_AfterBeginTransactionMacro(const pRet: WideString);
  { Warning: The property AfterBeginTransactionMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterBeginTransactionMacro := pRet;
end;

function TAccessForm.Get_BeforeCommitTransactionMacro: WideString;
begin
    Result := DefaultInterface.BeforeCommitTransactionMacro;
end;

procedure TAccessForm.Set_BeforeCommitTransactionMacro(const pRet: WideString);
  { Warning: The property BeforeCommitTransactionMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeCommitTransactionMacro := pRet;
end;

function TAccessForm.Get_AfterCommitTransactionMacro: WideString;
begin
    Result := DefaultInterface.AfterCommitTransactionMacro;
end;

procedure TAccessForm.Set_AfterCommitTransactionMacro(const pRet: WideString);
  { Warning: The property AfterCommitTransactionMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterCommitTransactionMacro := pRet;
end;

function TAccessForm.Get_RollbackTransactionMacro: WideString;
begin
    Result := DefaultInterface.RollbackTransactionMacro;
end;

procedure TAccessForm.Set_RollbackTransactionMacro(const pRet: WideString);
  { Warning: The property RollbackTransactionMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RollbackTransactionMacro := pRet;
end;

function TAccessForm.Get_OnConnectMacro: WideString;
begin
    Result := DefaultInterface.OnConnectMacro;
end;

procedure TAccessForm.Set_OnConnectMacro(const pRet: WideString);
  { Warning: The property OnConnectMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnConnectMacro := pRet;
end;

function TAccessForm.Get_OnDisconnectMacro: WideString;
begin
    Result := DefaultInterface.OnDisconnectMacro;
end;

procedure TAccessForm.Set_OnDisconnectMacro(const pRet: WideString);
  { Warning: The property OnDisconnectMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDisconnectMacro := pRet;
end;

function TAccessForm.Get_PivotTableChangeMacro: WideString;
begin
    Result := DefaultInterface.PivotTableChangeMacro;
end;

procedure TAccessForm.Set_PivotTableChangeMacro(const pRet: WideString);
  { Warning: The property PivotTableChangeMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PivotTableChangeMacro := pRet;
end;

function TAccessForm.Get_QueryMacro: WideString;
begin
    Result := DefaultInterface.QueryMacro;
end;

procedure TAccessForm.Set_QueryMacro(const pRet: WideString);
  { Warning: The property QueryMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.QueryMacro := pRet;
end;

function TAccessForm.Get_BeforeQueryMacro: WideString;
begin
    Result := DefaultInterface.BeforeQueryMacro;
end;

procedure TAccessForm.Set_BeforeQueryMacro(const pRet: WideString);
  { Warning: The property BeforeQueryMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeQueryMacro := pRet;
end;

function TAccessForm.Get_SelectionChangeMacro: WideString;
begin
    Result := DefaultInterface.SelectionChangeMacro;
end;

procedure TAccessForm.Set_SelectionChangeMacro(const pRet: WideString);
  { Warning: The property SelectionChangeMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SelectionChangeMacro := pRet;
end;

function TAccessForm.Get_CommandBeforeExecuteMacro: WideString;
begin
    Result := DefaultInterface.CommandBeforeExecuteMacro;
end;

procedure TAccessForm.Set_CommandBeforeExecuteMacro(const pRet: WideString);
  { Warning: The property CommandBeforeExecuteMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandBeforeExecuteMacro := pRet;
end;

function TAccessForm.Get_CommandCheckedMacro: WideString;
begin
    Result := DefaultInterface.CommandCheckedMacro;
end;

procedure TAccessForm.Set_CommandCheckedMacro(const pRet: WideString);
  { Warning: The property CommandCheckedMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandCheckedMacro := pRet;
end;

function TAccessForm.Get_CommandEnabledMacro: WideString;
begin
    Result := DefaultInterface.CommandEnabledMacro;
end;

procedure TAccessForm.Set_CommandEnabledMacro(const pRet: WideString);
  { Warning: The property CommandEnabledMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandEnabledMacro := pRet;
end;

function TAccessForm.Get_CommandExecuteMacro: WideString;
begin
    Result := DefaultInterface.CommandExecuteMacro;
end;

procedure TAccessForm.Set_CommandExecuteMacro(const pRet: WideString);
  { Warning: The property CommandExecuteMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandExecuteMacro := pRet;
end;

function TAccessForm.Get_DataSetChangeMacro: WideString;
begin
    Result := DefaultInterface.DataSetChangeMacro;
end;

procedure TAccessForm.Set_DataSetChangeMacro(const pRet: WideString);
  { Warning: The property DataSetChangeMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataSetChangeMacro := pRet;
end;

function TAccessForm.Get_BeforeScreenTipMacro: WideString;
begin
    Result := DefaultInterface.BeforeScreenTipMacro;
end;

procedure TAccessForm.Set_BeforeScreenTipMacro(const pRet: WideString);
  { Warning: The property BeforeScreenTipMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeScreenTipMacro := pRet;
end;

function TAccessForm.Get_AfterFinalRenderMacro: WideString;
begin
    Result := DefaultInterface.AfterFinalRenderMacro;
end;

procedure TAccessForm.Set_AfterFinalRenderMacro(const pRet: WideString);
  { Warning: The property AfterFinalRenderMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterFinalRenderMacro := pRet;
end;

function TAccessForm.Get_AfterRenderMacro: WideString;
begin
    Result := DefaultInterface.AfterRenderMacro;
end;

procedure TAccessForm.Set_AfterRenderMacro(const pRet: WideString);
  { Warning: The property AfterRenderMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterRenderMacro := pRet;
end;

function TAccessForm.Get_AfterLayoutMacro: WideString;
begin
    Result := DefaultInterface.AfterLayoutMacro;
end;

procedure TAccessForm.Set_AfterLayoutMacro(const pRet: WideString);
  { Warning: The property AfterLayoutMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterLayoutMacro := pRet;
end;

function TAccessForm.Get_BeforeRenderMacro: WideString;
begin
    Result := DefaultInterface.BeforeRenderMacro;
end;

procedure TAccessForm.Set_BeforeRenderMacro(const pRet: WideString);
  { Warning: The property BeforeRenderMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeRenderMacro := pRet;
end;

function TAccessForm.Get_MouseWheelMacro: WideString;
begin
    Result := DefaultInterface.MouseWheelMacro;
end;

procedure TAccessForm.Set_MouseWheelMacro(const pRet: WideString);
  { Warning: The property MouseWheelMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MouseWheelMacro := pRet;
end;

function TAccessForm.Get_ViewChangeMacro: WideString;
begin
    Result := DefaultInterface.ViewChangeMacro;
end;

procedure TAccessForm.Set_ViewChangeMacro(const pRet: WideString);
  { Warning: The property ViewChangeMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ViewChangeMacro := pRet;
end;

function TAccessForm.Get_DataChangeMacro: WideString;
begin
    Result := DefaultInterface.DataChangeMacro;
end;

procedure TAccessForm.Set_DataChangeMacro(const pRet: WideString);
  { Warning: The property DataChangeMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataChangeMacro := pRet;
end;

function TAccessForm.Get_AllowLayoutView: WordBool;
begin
    Result := DefaultInterface.AllowLayoutView;
end;

procedure TAccessForm.Set_AllowLayoutView(pRet: WordBool);
begin
  DefaultInterface.Set_AllowLayoutView(pRet);
end;

function TAccessForm.Get_DatasheetAlternateBackColor: Integer;
begin
    Result := DefaultInterface.DatasheetAlternateBackColor;
end;

procedure TAccessForm.Set_DatasheetAlternateBackColor(pRet: Integer);
begin
  DefaultInterface.Set_DatasheetAlternateBackColor(pRet);
end;

function TAccessForm.Get_DisplayOnSharePointSite: Byte;
begin
    Result := DefaultInterface.DisplayOnSharePointSite;
end;

procedure TAccessForm.Set_DisplayOnSharePointSite(pRet: Byte);
begin
  DefaultInterface.Set_DisplayOnSharePointSite(pRet);
end;

function TAccessForm.Get_SplitFormSize: Integer;
begin
    Result := DefaultInterface.SplitFormSize;
end;

procedure TAccessForm.Set_SplitFormSize(pRet: Integer);
begin
  DefaultInterface.Set_SplitFormSize(pRet);
end;

function TAccessForm.Get_Section(Index: OleVariant): _Section;
begin
    Result := DefaultInterface.Section[Index];
end;

function TAccessForm.Get_RibbonName: WideString;
begin
    Result := DefaultInterface.RibbonName;
end;

procedure TAccessForm.Set_RibbonName(const pRet: WideString);
  { Warning: The property RibbonName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RibbonName := pRet;
end;

function TAccessForm.Get_FitToScreen: WordBool;
begin
    Result := DefaultInterface.FitToScreen;
end;

procedure TAccessForm.Set_FitToScreen(pRet: WordBool);
begin
  DefaultInterface.Set_FitToScreen(pRet);
end;

procedure TAccessForm.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAccessForm.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAccessForm.accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                                  out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAccessForm.accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                                  out pcyHeight: Integer; varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAccessForm.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAccessForm.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAccessForm.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAccessForm.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAccessForm.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAccessForm.Undo;
begin
  DefaultInterface.Undo;
end;

procedure TAccessForm.Recalc;
begin
  DefaultInterface.Recalc;
end;

procedure TAccessForm.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAccessForm.Refresh;
begin
  DefaultInterface.Refresh;
end;

procedure TAccessForm.Repaint;
begin
  DefaultInterface.Repaint;
end;

procedure TAccessForm.GoToPage(PageNumber: Integer; Right: Integer; Down: Integer);
begin
  DefaultInterface.GoToPage(PageNumber, Right, Down);
end;

procedure TAccessForm.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

function TAccessForm._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessForm.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessForm.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessForm.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessForm.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAccessFormProperties.Create(AServer: TAccessForm);
begin
  inherited Create;
  FServer := AServer;
end;

function TAccessFormProperties.GetDefaultInterface: _Form3;
begin
  Result := FServer.DefaultInterface;
end;

function TAccessFormProperties.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessFormProperties.Get_accChildCount: Integer;
begin
    Result := DefaultInterface.accChildCount;
end;

function TAccessFormProperties.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessFormProperties.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessFormProperties.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessFormProperties.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessFormProperties.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessFormProperties.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessFormProperties.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessFormProperties.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessFormProperties.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessFormProperties.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessFormProperties.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessFormProperties.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessFormProperties.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessFormProperties.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessFormProperties.Get_FormName: WideString;
begin
    Result := DefaultInterface.FormName;
end;

procedure TAccessFormProperties.Set_FormName(const pRet: WideString);
  { Warning: The property FormName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FormName := pRet;
end;

function TAccessFormProperties.Get_RecordSource: WideString;
begin
    Result := DefaultInterface.RecordSource;
end;

procedure TAccessFormProperties.Set_RecordSource(const pRet: WideString);
  { Warning: The property RecordSource has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RecordSource := pRet;
end;

function TAccessFormProperties.Get_Filter: WideString;
begin
    Result := DefaultInterface.Filter;
end;

procedure TAccessFormProperties.Set_Filter(const pRet: WideString);
  { Warning: The property Filter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Filter := pRet;
end;

function TAccessFormProperties.Get_FilterOn: WordBool;
begin
    Result := DefaultInterface.FilterOn;
end;

procedure TAccessFormProperties.Set_FilterOn(pRet: WordBool);
begin
  DefaultInterface.Set_FilterOn(pRet);
end;

function TAccessFormProperties.Get_OrderBy: WideString;
begin
    Result := DefaultInterface.OrderBy;
end;

procedure TAccessFormProperties.Set_OrderBy(const pRet: WideString);
  { Warning: The property OrderBy has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OrderBy := pRet;
end;

function TAccessFormProperties.Get_OrderByOn: WordBool;
begin
    Result := DefaultInterface.OrderByOn;
end;

procedure TAccessFormProperties.Set_OrderByOn(pRet: WordBool);
begin
  DefaultInterface.Set_OrderByOn(pRet);
end;

function TAccessFormProperties.Get_AllowFilters: WordBool;
begin
    Result := DefaultInterface.AllowFilters;
end;

procedure TAccessFormProperties.Set_AllowFilters(pRet: WordBool);
begin
  DefaultInterface.Set_AllowFilters(pRet);
end;

function TAccessFormProperties.Get_Caption: WideString;
begin
    Result := DefaultInterface.Caption;
end;

procedure TAccessFormProperties.Set_Caption(const pRet: WideString);
  { Warning: The property Caption has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Caption := pRet;
end;

function TAccessFormProperties.Get_DefaultView: Byte;
begin
    Result := DefaultInterface.DefaultView;
end;

procedure TAccessFormProperties.Set_DefaultView(pRet: Byte);
begin
  DefaultInterface.Set_DefaultView(pRet);
end;

function TAccessFormProperties.Get_ViewsAllowed: Byte;
begin
    Result := DefaultInterface.ViewsAllowed;
end;

procedure TAccessFormProperties.Set_ViewsAllowed(pRet: Byte);
begin
  DefaultInterface.Set_ViewsAllowed(pRet);
end;

function TAccessFormProperties.Get_AllowEditing: WordBool;
begin
    Result := DefaultInterface.AllowEditing;
end;

procedure TAccessFormProperties.Set_AllowEditing(pRet: WordBool);
begin
  DefaultInterface.Set_AllowEditing(pRet);
end;

function TAccessFormProperties.Get_DefaultEditing: Smallint;
begin
    Result := DefaultInterface.DefaultEditing;
end;

procedure TAccessFormProperties.Set_DefaultEditing(pRet: Smallint);
begin
  DefaultInterface.Set_DefaultEditing(pRet);
end;

function TAccessFormProperties.Get_AllowEdits: WordBool;
begin
    Result := DefaultInterface.AllowEdits;
end;

procedure TAccessFormProperties.Set_AllowEdits(pRet: WordBool);
begin
  DefaultInterface.Set_AllowEdits(pRet);
end;

function TAccessFormProperties.Get_AllowDeletions: WordBool;
begin
    Result := DefaultInterface.AllowDeletions;
end;

procedure TAccessFormProperties.Set_AllowDeletions(pRet: WordBool);
begin
  DefaultInterface.Set_AllowDeletions(pRet);
end;

function TAccessFormProperties.Get_AllowAdditions: WordBool;
begin
    Result := DefaultInterface.AllowAdditions;
end;

procedure TAccessFormProperties.Set_AllowAdditions(pRet: WordBool);
begin
  DefaultInterface.Set_AllowAdditions(pRet);
end;

function TAccessFormProperties.Get_DataEntry: WordBool;
begin
    Result := DefaultInterface.DataEntry;
end;

procedure TAccessFormProperties.Set_DataEntry(pRet: WordBool);
begin
  DefaultInterface.Set_DataEntry(pRet);
end;

function TAccessFormProperties.Get_AllowUpdating: Byte;
begin
    Result := DefaultInterface.AllowUpdating;
end;

procedure TAccessFormProperties.Set_AllowUpdating(pRet: Byte);
begin
  DefaultInterface.Set_AllowUpdating(pRet);
end;

function TAccessFormProperties.Get_RecordsetType: Byte;
begin
    Result := DefaultInterface.RecordsetType;
end;

procedure TAccessFormProperties.Set_RecordsetType(pRet: Byte);
begin
  DefaultInterface.Set_RecordsetType(pRet);
end;

function TAccessFormProperties.Get_RecordLocks: Byte;
begin
    Result := DefaultInterface.RecordLocks;
end;

procedure TAccessFormProperties.Set_RecordLocks(pRet: Byte);
begin
  DefaultInterface.Set_RecordLocks(pRet);
end;

function TAccessFormProperties.Get_ScrollBars: Byte;
begin
    Result := DefaultInterface.ScrollBars;
end;

procedure TAccessFormProperties.Set_ScrollBars(pRet: Byte);
begin
  DefaultInterface.Set_ScrollBars(pRet);
end;

function TAccessFormProperties.Get_RecordSelectors: WordBool;
begin
    Result := DefaultInterface.RecordSelectors;
end;

procedure TAccessFormProperties.Set_RecordSelectors(pRet: WordBool);
begin
  DefaultInterface.Set_RecordSelectors(pRet);
end;

function TAccessFormProperties.Get_NavigationButtons: WordBool;
begin
    Result := DefaultInterface.NavigationButtons;
end;

procedure TAccessFormProperties.Set_NavigationButtons(pRet: WordBool);
begin
  DefaultInterface.Set_NavigationButtons(pRet);
end;

function TAccessFormProperties.Get_DividingLines: WordBool;
begin
    Result := DefaultInterface.DividingLines;
end;

procedure TAccessFormProperties.Set_DividingLines(pRet: WordBool);
begin
  DefaultInterface.Set_DividingLines(pRet);
end;

function TAccessFormProperties.Get_AutoResize: WordBool;
begin
    Result := DefaultInterface.AutoResize;
end;

procedure TAccessFormProperties.Set_AutoResize(pRet: WordBool);
begin
  DefaultInterface.Set_AutoResize(pRet);
end;

function TAccessFormProperties.Get_AutoCenter: WordBool;
begin
    Result := DefaultInterface.AutoCenter;
end;

procedure TAccessFormProperties.Set_AutoCenter(pRet: WordBool);
begin
  DefaultInterface.Set_AutoCenter(pRet);
end;

function TAccessFormProperties.Get_PopUp: WordBool;
begin
    Result := DefaultInterface.PopUp;
end;

procedure TAccessFormProperties.Set_PopUp(pRet: WordBool);
begin
  DefaultInterface.Set_PopUp(pRet);
end;

function TAccessFormProperties.Get_Modal: WordBool;
begin
    Result := DefaultInterface.Modal;
end;

procedure TAccessFormProperties.Set_Modal(pRet: WordBool);
begin
  DefaultInterface.Set_Modal(pRet);
end;

function TAccessFormProperties.Get_BorderStyle: Byte;
begin
    Result := DefaultInterface.BorderStyle;
end;

procedure TAccessFormProperties.Set_BorderStyle(pRet: Byte);
begin
  DefaultInterface.Set_BorderStyle(pRet);
end;

function TAccessFormProperties.Get_ControlBox: WordBool;
begin
    Result := DefaultInterface.ControlBox;
end;

procedure TAccessFormProperties.Set_ControlBox(pRet: WordBool);
begin
  DefaultInterface.Set_ControlBox(pRet);
end;

function TAccessFormProperties.Get_MinButton: WordBool;
begin
    Result := DefaultInterface.MinButton;
end;

procedure TAccessFormProperties.Set_MinButton(pRet: WordBool);
begin
  DefaultInterface.Set_MinButton(pRet);
end;

function TAccessFormProperties.Get_MaxButton: WordBool;
begin
    Result := DefaultInterface.MaxButton;
end;

procedure TAccessFormProperties.Set_MaxButton(pRet: WordBool);
begin
  DefaultInterface.Set_MaxButton(pRet);
end;

function TAccessFormProperties.Get_MinMaxButtons: Byte;
begin
    Result := DefaultInterface.MinMaxButtons;
end;

procedure TAccessFormProperties.Set_MinMaxButtons(pRet: Byte);
begin
  DefaultInterface.Set_MinMaxButtons(pRet);
end;

function TAccessFormProperties.Get_CloseButton: WordBool;
begin
    Result := DefaultInterface.CloseButton;
end;

procedure TAccessFormProperties.Set_CloseButton(pRet: WordBool);
begin
  DefaultInterface.Set_CloseButton(pRet);
end;

function TAccessFormProperties.Get_WhatsThisButton: WordBool;
begin
    Result := DefaultInterface.WhatsThisButton;
end;

procedure TAccessFormProperties.Set_WhatsThisButton(pRet: WordBool);
begin
  DefaultInterface.Set_WhatsThisButton(pRet);
end;

function TAccessFormProperties.Get_Width: Smallint;
begin
    Result := DefaultInterface.Width;
end;

procedure TAccessFormProperties.Set_Width(pRet: Smallint);
begin
  DefaultInterface.Set_Width(pRet);
end;

function TAccessFormProperties.Get_Picture: WideString;
begin
    Result := DefaultInterface.Picture;
end;

procedure TAccessFormProperties.Set_Picture(const pRet: WideString);
  { Warning: The property Picture has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Picture := pRet;
end;

function TAccessFormProperties.Get_PictureType: Byte;
begin
    Result := DefaultInterface.PictureType;
end;

procedure TAccessFormProperties.Set_PictureType(pRet: Byte);
begin
  DefaultInterface.Set_PictureType(pRet);
end;

function TAccessFormProperties.Get_PictureSizeMode: Byte;
begin
    Result := DefaultInterface.PictureSizeMode;
end;

procedure TAccessFormProperties.Set_PictureSizeMode(pRet: Byte);
begin
  DefaultInterface.Set_PictureSizeMode(pRet);
end;

function TAccessFormProperties.Get_PictureAlignment: Byte;
begin
    Result := DefaultInterface.PictureAlignment;
end;

procedure TAccessFormProperties.Set_PictureAlignment(pRet: Byte);
begin
  DefaultInterface.Set_PictureAlignment(pRet);
end;

function TAccessFormProperties.Get_PictureTiling: WordBool;
begin
    Result := DefaultInterface.PictureTiling;
end;

procedure TAccessFormProperties.Set_PictureTiling(pRet: WordBool);
begin
  DefaultInterface.Set_PictureTiling(pRet);
end;

function TAccessFormProperties.Get_Cycle: Byte;
begin
    Result := DefaultInterface.Cycle;
end;

procedure TAccessFormProperties.Set_Cycle(pRet: Byte);
begin
  DefaultInterface.Set_Cycle(pRet);
end;

function TAccessFormProperties.Get_MenuBar: WideString;
begin
    Result := DefaultInterface.MenuBar;
end;

procedure TAccessFormProperties.Set_MenuBar(const pRet: WideString);
  { Warning: The property MenuBar has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MenuBar := pRet;
end;

function TAccessFormProperties.Get_Toolbar: WideString;
begin
    Result := DefaultInterface.Toolbar;
end;

procedure TAccessFormProperties.Set_Toolbar(const pRet: WideString);
  { Warning: The property Toolbar has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Toolbar := pRet;
end;

function TAccessFormProperties.Get_ShortcutMenu: WordBool;
begin
    Result := DefaultInterface.ShortcutMenu;
end;

procedure TAccessFormProperties.Set_ShortcutMenu(pRet: WordBool);
begin
  DefaultInterface.Set_ShortcutMenu(pRet);
end;

function TAccessFormProperties.Get_ShortcutMenuBar: WideString;
begin
    Result := DefaultInterface.ShortcutMenuBar;
end;

procedure TAccessFormProperties.Set_ShortcutMenuBar(const pRet: WideString);
  { Warning: The property ShortcutMenuBar has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ShortcutMenuBar := pRet;
end;

function TAccessFormProperties.Get_GridX: Smallint;
begin
    Result := DefaultInterface.GridX;
end;

procedure TAccessFormProperties.Set_GridX(pRet: Smallint);
begin
  DefaultInterface.Set_GridX(pRet);
end;

function TAccessFormProperties.Get_GridY: Smallint;
begin
    Result := DefaultInterface.GridY;
end;

procedure TAccessFormProperties.Set_GridY(pRet: Smallint);
begin
  DefaultInterface.Set_GridY(pRet);
end;

function TAccessFormProperties.Get_LayoutForPrint: WordBool;
begin
    Result := DefaultInterface.LayoutForPrint;
end;

procedure TAccessFormProperties.Set_LayoutForPrint(pRet: WordBool);
begin
  DefaultInterface.Set_LayoutForPrint(pRet);
end;

function TAccessFormProperties.Get_FastLaserPrinting: WordBool;
begin
    Result := DefaultInterface.FastLaserPrinting;
end;

procedure TAccessFormProperties.Set_FastLaserPrinting(pRet: WordBool);
begin
  DefaultInterface.Set_FastLaserPrinting(pRet);
end;

function TAccessFormProperties.Get_HelpFile: WideString;
begin
    Result := DefaultInterface.HelpFile;
end;

procedure TAccessFormProperties.Set_HelpFile(const pRet: WideString);
  { Warning: The property HelpFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HelpFile := pRet;
end;

function TAccessFormProperties.Get_HelpContextId: Integer;
begin
    Result := DefaultInterface.HelpContextId;
end;

procedure TAccessFormProperties.Set_HelpContextId(pRet: Integer);
begin
  DefaultInterface.Set_HelpContextId(pRet);
end;

function TAccessFormProperties.Get_RowHeight: Smallint;
begin
    Result := DefaultInterface.RowHeight;
end;

procedure TAccessFormProperties.Set_RowHeight(pRet: Smallint);
begin
  DefaultInterface.Set_RowHeight(pRet);
end;

function TAccessFormProperties.Get_DatasheetFontName: WideString;
begin
    Result := DefaultInterface.DatasheetFontName;
end;

procedure TAccessFormProperties.Set_DatasheetFontName(const pRet: WideString);
  { Warning: The property DatasheetFontName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DatasheetFontName := pRet;
end;

function TAccessFormProperties.Get_DatasheetFontHeight: Smallint;
begin
    Result := DefaultInterface.DatasheetFontHeight;
end;

procedure TAccessFormProperties.Set_DatasheetFontHeight(pRet: Smallint);
begin
  DefaultInterface.Set_DatasheetFontHeight(pRet);
end;

function TAccessFormProperties.Get_DatasheetFontWeight: Smallint;
begin
    Result := DefaultInterface.DatasheetFontWeight;
end;

procedure TAccessFormProperties.Set_DatasheetFontWeight(pRet: Smallint);
begin
  DefaultInterface.Set_DatasheetFontWeight(pRet);
end;

function TAccessFormProperties.Get_DatasheetFontItalic: WordBool;
begin
    Result := DefaultInterface.DatasheetFontItalic;
end;

procedure TAccessFormProperties.Set_DatasheetFontItalic(pRet: WordBool);
begin
  DefaultInterface.Set_DatasheetFontItalic(pRet);
end;

function TAccessFormProperties.Get_DatasheetFontUnderline: WordBool;
begin
    Result := DefaultInterface.DatasheetFontUnderline;
end;

procedure TAccessFormProperties.Set_DatasheetFontUnderline(pRet: WordBool);
begin
  DefaultInterface.Set_DatasheetFontUnderline(pRet);
end;

function TAccessFormProperties.Get_TabularCharSet: Byte;
begin
    Result := DefaultInterface.TabularCharSet;
end;

procedure TAccessFormProperties.Set_TabularCharSet(pRet: Byte);
begin
  DefaultInterface.Set_TabularCharSet(pRet);
end;

function TAccessFormProperties.Get_DatasheetGridlinesBehavior: Byte;
begin
    Result := DefaultInterface.DatasheetGridlinesBehavior;
end;

procedure TAccessFormProperties.Set_DatasheetGridlinesBehavior(pRet: Byte);
begin
  DefaultInterface.Set_DatasheetGridlinesBehavior(pRet);
end;

function TAccessFormProperties.Get_DatasheetGridlinesColor: Integer;
begin
    Result := DefaultInterface.DatasheetGridlinesColor;
end;

procedure TAccessFormProperties.Set_DatasheetGridlinesColor(pRet: Integer);
begin
  DefaultInterface.Set_DatasheetGridlinesColor(pRet);
end;

function TAccessFormProperties.Get_DatasheetCellsEffect: Byte;
begin
    Result := DefaultInterface.DatasheetCellsEffect;
end;

procedure TAccessFormProperties.Set_DatasheetCellsEffect(pRet: Byte);
begin
  DefaultInterface.Set_DatasheetCellsEffect(pRet);
end;

function TAccessFormProperties.Get_DatasheetForeColor: Integer;
begin
    Result := DefaultInterface.DatasheetForeColor;
end;

procedure TAccessFormProperties.Set_DatasheetForeColor(pRet: Integer);
begin
  DefaultInterface.Set_DatasheetForeColor(pRet);
end;

function TAccessFormProperties.Get_ShowGrid: WordBool;
begin
    Result := DefaultInterface.ShowGrid;
end;

procedure TAccessFormProperties.Set_ShowGrid(pRet: WordBool);
begin
  DefaultInterface.Set_ShowGrid(pRet);
end;

function TAccessFormProperties.Get_DatasheetBackColor: Integer;
begin
    Result := DefaultInterface.DatasheetBackColor;
end;

procedure TAccessFormProperties.Set_DatasheetBackColor(pRet: Integer);
begin
  DefaultInterface.Set_DatasheetBackColor(pRet);
end;

function TAccessFormProperties.Get_Hwnd: Integer;
begin
    Result := DefaultInterface.Hwnd;
end;

procedure TAccessFormProperties.Set_Hwnd(pRet: Integer);
begin
  DefaultInterface.Set_Hwnd(pRet);
end;

function TAccessFormProperties.Get_Count: Smallint;
begin
    Result := DefaultInterface.Count;
end;

procedure TAccessFormProperties.Set_Count(pRet: Smallint);
begin
  DefaultInterface.Set_Count(pRet);
end;

function TAccessFormProperties.Get_Page: Integer;
begin
    Result := DefaultInterface.Page;
end;

procedure TAccessFormProperties.Set_Page(pRet: Integer);
begin
  DefaultInterface.Set_Page(pRet);
end;

function TAccessFormProperties.Get_Pages: Smallint;
begin
    Result := DefaultInterface.Pages;
end;

procedure TAccessFormProperties.Set_Pages(pRet: Smallint);
begin
  DefaultInterface.Set_Pages(pRet);
end;

function TAccessFormProperties.Get_LogicalPageWidth: Integer;
begin
    Result := DefaultInterface.LogicalPageWidth;
end;

procedure TAccessFormProperties.Set_LogicalPageWidth(pRet: Integer);
begin
  DefaultInterface.Set_LogicalPageWidth(pRet);
end;

function TAccessFormProperties.Get_LogicalPageHeight: Integer;
begin
    Result := DefaultInterface.LogicalPageHeight;
end;

procedure TAccessFormProperties.Set_LogicalPageHeight(pRet: Integer);
begin
  DefaultInterface.Set_LogicalPageHeight(pRet);
end;

function TAccessFormProperties.Get_ZoomControl: Integer;
begin
    Result := DefaultInterface.ZoomControl;
end;

procedure TAccessFormProperties.Set_ZoomControl(pRet: Integer);
begin
  DefaultInterface.Set_ZoomControl(pRet);
end;

function TAccessFormProperties.Get_Visible: WordBool;
begin
    Result := DefaultInterface.Visible;
end;

procedure TAccessFormProperties.Set_Visible(pRet: WordBool);
begin
  DefaultInterface.Set_Visible(pRet);
end;

function TAccessFormProperties.Get_Painting: WordBool;
begin
    Result := DefaultInterface.Painting;
end;

procedure TAccessFormProperties.Set_Painting(pRet: WordBool);
begin
  DefaultInterface.Set_Painting(pRet);
end;

function TAccessFormProperties.Get_PrtMip: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PrtMip;
end;

procedure TAccessFormProperties.Set_PrtMip(pRet: OleVariant);
begin
  DefaultInterface.Set_PrtMip(pRet);
end;

function TAccessFormProperties.Get_PrtDevMode: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PrtDevMode;
end;

procedure TAccessFormProperties.Set_PrtDevMode(pRet: OleVariant);
begin
  DefaultInterface.Set_PrtDevMode(pRet);
end;

function TAccessFormProperties.Get_PrtDevNames: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PrtDevNames;
end;

procedure TAccessFormProperties.Set_PrtDevNames(pRet: OleVariant);
begin
  DefaultInterface.Set_PrtDevNames(pRet);
end;

function TAccessFormProperties.Get_FrozenColumns: Smallint;
begin
    Result := DefaultInterface.FrozenColumns;
end;

procedure TAccessFormProperties.Set_FrozenColumns(pRet: Smallint);
begin
  DefaultInterface.Set_FrozenColumns(pRet);
end;

function TAccessFormProperties.Get_Bookmark: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Bookmark;
end;

procedure TAccessFormProperties.Set_Bookmark(pRet: OleVariant);
begin
  DefaultInterface.Set_Bookmark(pRet);
end;

function TAccessFormProperties.Get_TabularFamily: Byte;
begin
    Result := DefaultInterface.TabularFamily;
end;

procedure TAccessFormProperties.Set_TabularFamily(pRet: Byte);
begin
  DefaultInterface.Set_TabularFamily(pRet);
end;

function TAccessFormProperties.Get__Name: WideString;
begin
    Result := DefaultInterface._Name;
end;

procedure TAccessFormProperties.Set__Name(const pRet: WideString);
  { Warning: The property _Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant._Name := pRet;
end;

function TAccessFormProperties.Get_PaletteSource: WideString;
begin
    Result := DefaultInterface.PaletteSource;
end;

procedure TAccessFormProperties.Set_PaletteSource(const pRet: WideString);
  { Warning: The property PaletteSource has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PaletteSource := pRet;
end;

function TAccessFormProperties.Get_Tag: WideString;
begin
    Result := DefaultInterface.Tag;
end;

procedure TAccessFormProperties.Set_Tag(const pRet: WideString);
  { Warning: The property Tag has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tag := pRet;
end;

function TAccessFormProperties.Get_PaintPalette: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PaintPalette;
end;

procedure TAccessFormProperties.Set_PaintPalette(pRet: OleVariant);
begin
  DefaultInterface.Set_PaintPalette(pRet);
end;

function TAccessFormProperties.Get_OnMenu: WideString;
begin
    Result := DefaultInterface.OnMenu;
end;

procedure TAccessFormProperties.Set_OnMenu(const pRet: WideString);
  { Warning: The property OnMenu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMenu := pRet;
end;

function TAccessFormProperties.Get_OpenArgs: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OpenArgs;
end;

procedure TAccessFormProperties.Set_OpenArgs(pRet: OleVariant);
begin
  DefaultInterface.Set_OpenArgs(pRet);
end;

function TAccessFormProperties.Get_ConnectSynch: Smallint;
begin
    Result := DefaultInterface.ConnectSynch;
end;

procedure TAccessFormProperties.Set_ConnectSynch(pRet: Smallint);
begin
  DefaultInterface.Set_ConnectSynch(pRet);
end;

function TAccessFormProperties.Get_OnCurrent: WideString;
begin
    Result := DefaultInterface.OnCurrent;
end;

procedure TAccessFormProperties.Set_OnCurrent(const pRet: WideString);
  { Warning: The property OnCurrent has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnCurrent := pRet;
end;

function TAccessFormProperties.Get_OnInsert: WideString;
begin
    Result := DefaultInterface.OnInsert;
end;

procedure TAccessFormProperties.Set_OnInsert(const pRet: WideString);
  { Warning: The property OnInsert has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnInsert := pRet;
end;

function TAccessFormProperties.Get_BeforeInsert: WideString;
begin
    Result := DefaultInterface.BeforeInsert;
end;

procedure TAccessFormProperties.Set_BeforeInsert(const pRet: WideString);
  { Warning: The property BeforeInsert has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeInsert := pRet;
end;

function TAccessFormProperties.Get_AfterInsert: WideString;
begin
    Result := DefaultInterface.AfterInsert;
end;

procedure TAccessFormProperties.Set_AfterInsert(const pRet: WideString);
  { Warning: The property AfterInsert has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterInsert := pRet;
end;

function TAccessFormProperties.Get_BeforeUpdate: WideString;
begin
    Result := DefaultInterface.BeforeUpdate;
end;

procedure TAccessFormProperties.Set_BeforeUpdate(const pRet: WideString);
  { Warning: The property BeforeUpdate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeUpdate := pRet;
end;

function TAccessFormProperties.Get_AfterUpdate: WideString;
begin
    Result := DefaultInterface.AfterUpdate;
end;

procedure TAccessFormProperties.Set_AfterUpdate(const pRet: WideString);
  { Warning: The property AfterUpdate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterUpdate := pRet;
end;

function TAccessFormProperties.Get_OnDirty: WideString;
begin
    Result := DefaultInterface.OnDirty;
end;

procedure TAccessFormProperties.Set_OnDirty(const pRet: WideString);
  { Warning: The property OnDirty has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDirty := pRet;
end;

function TAccessFormProperties.Get_OnDelete: WideString;
begin
    Result := DefaultInterface.OnDelete;
end;

procedure TAccessFormProperties.Set_OnDelete(const pRet: WideString);
  { Warning: The property OnDelete has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDelete := pRet;
end;

function TAccessFormProperties.Get_BeforeDelConfirm: WideString;
begin
    Result := DefaultInterface.BeforeDelConfirm;
end;

procedure TAccessFormProperties.Set_BeforeDelConfirm(const pRet: WideString);
  { Warning: The property BeforeDelConfirm has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeDelConfirm := pRet;
end;

function TAccessFormProperties.Get_AfterDelConfirm: WideString;
begin
    Result := DefaultInterface.AfterDelConfirm;
end;

procedure TAccessFormProperties.Set_AfterDelConfirm(const pRet: WideString);
  { Warning: The property AfterDelConfirm has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterDelConfirm := pRet;
end;

function TAccessFormProperties.Get_OnOpen: WideString;
begin
    Result := DefaultInterface.OnOpen;
end;

procedure TAccessFormProperties.Set_OnOpen(const pRet: WideString);
  { Warning: The property OnOpen has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnOpen := pRet;
end;

function TAccessFormProperties.Get_OnLoad: WideString;
begin
    Result := DefaultInterface.OnLoad;
end;

procedure TAccessFormProperties.Set_OnLoad(const pRet: WideString);
  { Warning: The property OnLoad has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnLoad := pRet;
end;

function TAccessFormProperties.Get_OnResize: WideString;
begin
    Result := DefaultInterface.OnResize;
end;

procedure TAccessFormProperties.Set_OnResize(const pRet: WideString);
  { Warning: The property OnResize has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnResize := pRet;
end;

function TAccessFormProperties.Get_OnUnload: WideString;
begin
    Result := DefaultInterface.OnUnload;
end;

procedure TAccessFormProperties.Set_OnUnload(const pRet: WideString);
  { Warning: The property OnUnload has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnUnload := pRet;
end;

function TAccessFormProperties.Get_OnClose: WideString;
begin
    Result := DefaultInterface.OnClose;
end;

procedure TAccessFormProperties.Set_OnClose(const pRet: WideString);
  { Warning: The property OnClose has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnClose := pRet;
end;

function TAccessFormProperties.Get_OnActivate: WideString;
begin
    Result := DefaultInterface.OnActivate;
end;

procedure TAccessFormProperties.Set_OnActivate(const pRet: WideString);
  { Warning: The property OnActivate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnActivate := pRet;
end;

function TAccessFormProperties.Get_OnDeactivate: WideString;
begin
    Result := DefaultInterface.OnDeactivate;
end;

procedure TAccessFormProperties.Set_OnDeactivate(const pRet: WideString);
  { Warning: The property OnDeactivate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDeactivate := pRet;
end;

function TAccessFormProperties.Get_OnGotFocus: WideString;
begin
    Result := DefaultInterface.OnGotFocus;
end;

procedure TAccessFormProperties.Set_OnGotFocus(const pRet: WideString);
  { Warning: The property OnGotFocus has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnGotFocus := pRet;
end;

function TAccessFormProperties.Get_OnLostFocus: WideString;
begin
    Result := DefaultInterface.OnLostFocus;
end;

procedure TAccessFormProperties.Set_OnLostFocus(const pRet: WideString);
  { Warning: The property OnLostFocus has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnLostFocus := pRet;
end;

function TAccessFormProperties.Get_OnClick: WideString;
begin
    Result := DefaultInterface.OnClick;
end;

procedure TAccessFormProperties.Set_OnClick(const pRet: WideString);
  { Warning: The property OnClick has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnClick := pRet;
end;

function TAccessFormProperties.Get_OnDblClick: WideString;
begin
    Result := DefaultInterface.OnDblClick;
end;

procedure TAccessFormProperties.Set_OnDblClick(const pRet: WideString);
  { Warning: The property OnDblClick has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDblClick := pRet;
end;

function TAccessFormProperties.Get_OnMouseDown: WideString;
begin
    Result := DefaultInterface.OnMouseDown;
end;

procedure TAccessFormProperties.Set_OnMouseDown(const pRet: WideString);
  { Warning: The property OnMouseDown has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseDown := pRet;
end;

function TAccessFormProperties.Get_OnMouseMove: WideString;
begin
    Result := DefaultInterface.OnMouseMove;
end;

procedure TAccessFormProperties.Set_OnMouseMove(const pRet: WideString);
  { Warning: The property OnMouseMove has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseMove := pRet;
end;

function TAccessFormProperties.Get_OnMouseUp: WideString;
begin
    Result := DefaultInterface.OnMouseUp;
end;

procedure TAccessFormProperties.Set_OnMouseUp(const pRet: WideString);
  { Warning: The property OnMouseUp has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseUp := pRet;
end;

function TAccessFormProperties.Get_OnKeyDown: WideString;
begin
    Result := DefaultInterface.OnKeyDown;
end;

procedure TAccessFormProperties.Set_OnKeyDown(const pRet: WideString);
  { Warning: The property OnKeyDown has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyDown := pRet;
end;

function TAccessFormProperties.Get_OnKeyUp: WideString;
begin
    Result := DefaultInterface.OnKeyUp;
end;

procedure TAccessFormProperties.Set_OnKeyUp(const pRet: WideString);
  { Warning: The property OnKeyUp has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyUp := pRet;
end;

function TAccessFormProperties.Get_OnKeyPress: WideString;
begin
    Result := DefaultInterface.OnKeyPress;
end;

procedure TAccessFormProperties.Set_OnKeyPress(const pRet: WideString);
  { Warning: The property OnKeyPress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyPress := pRet;
end;

function TAccessFormProperties.Get_KeyPreview: WordBool;
begin
    Result := DefaultInterface.KeyPreview;
end;

procedure TAccessFormProperties.Set_KeyPreview(pRet: WordBool);
begin
  DefaultInterface.Set_KeyPreview(pRet);
end;

function TAccessFormProperties.Get_OnError: WideString;
begin
    Result := DefaultInterface.OnError;
end;

procedure TAccessFormProperties.Set_OnError(const pRet: WideString);
  { Warning: The property OnError has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnError := pRet;
end;

function TAccessFormProperties.Get_OnFilter: WideString;
begin
    Result := DefaultInterface.OnFilter;
end;

procedure TAccessFormProperties.Set_OnFilter(const pRet: WideString);
  { Warning: The property OnFilter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnFilter := pRet;
end;

function TAccessFormProperties.Get_OnApplyFilter: WideString;
begin
    Result := DefaultInterface.OnApplyFilter;
end;

procedure TAccessFormProperties.Set_OnApplyFilter(const pRet: WideString);
  { Warning: The property OnApplyFilter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnApplyFilter := pRet;
end;

function TAccessFormProperties.Get_OnTimer: WideString;
begin
    Result := DefaultInterface.OnTimer;
end;

procedure TAccessFormProperties.Set_OnTimer(const pRet: WideString);
  { Warning: The property OnTimer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnTimer := pRet;
end;

function TAccessFormProperties.Get_TimerInterval: Integer;
begin
    Result := DefaultInterface.TimerInterval;
end;

procedure TAccessFormProperties.Set_TimerInterval(pRet: Integer);
begin
  DefaultInterface.Set_TimerInterval(pRet);
end;

function TAccessFormProperties.Get_Dirty: WordBool;
begin
    Result := DefaultInterface.Dirty;
end;

procedure TAccessFormProperties.Set_Dirty(pRet: WordBool);
begin
  DefaultInterface.Set_Dirty(pRet);
end;

function TAccessFormProperties.Get_WindowWidth: Smallint;
begin
    Result := DefaultInterface.WindowWidth;
end;

procedure TAccessFormProperties.Set_WindowWidth(pRet: Smallint);
begin
  DefaultInterface.Set_WindowWidth(pRet);
end;

function TAccessFormProperties.Get_WindowHeight: Smallint;
begin
    Result := DefaultInterface.WindowHeight;
end;

procedure TAccessFormProperties.Set_WindowHeight(pRet: Smallint);
begin
  DefaultInterface.Set_WindowHeight(pRet);
end;

function TAccessFormProperties.Get_CurrentView: Smallint;
begin
    Result := DefaultInterface.CurrentView;
end;

procedure TAccessFormProperties.Set_CurrentView(pRet: Smallint);
begin
  DefaultInterface.Set_CurrentView(pRet);
end;

function TAccessFormProperties.Get_CurrentSectionTop: Smallint;
begin
    Result := DefaultInterface.CurrentSectionTop;
end;

procedure TAccessFormProperties.Set_CurrentSectionTop(pRet: Smallint);
begin
  DefaultInterface.Set_CurrentSectionTop(pRet);
end;

function TAccessFormProperties.Get_CurrentSectionLeft: Smallint;
begin
    Result := DefaultInterface.CurrentSectionLeft;
end;

procedure TAccessFormProperties.Set_CurrentSectionLeft(pRet: Smallint);
begin
  DefaultInterface.Set_CurrentSectionLeft(pRet);
end;

function TAccessFormProperties.Get_SelLeft: Integer;
begin
    Result := DefaultInterface.SelLeft;
end;

procedure TAccessFormProperties.Set_SelLeft(pRet: Integer);
begin
  DefaultInterface.Set_SelLeft(pRet);
end;

function TAccessFormProperties.Get_SelTop: Integer;
begin
    Result := DefaultInterface.SelTop;
end;

procedure TAccessFormProperties.Set_SelTop(pRet: Integer);
begin
  DefaultInterface.Set_SelTop(pRet);
end;

function TAccessFormProperties.Get_SelWidth: Integer;
begin
    Result := DefaultInterface.SelWidth;
end;

procedure TAccessFormProperties.Set_SelWidth(pRet: Integer);
begin
  DefaultInterface.Set_SelWidth(pRet);
end;

function TAccessFormProperties.Get_SelHeight: Integer;
begin
    Result := DefaultInterface.SelHeight;
end;

procedure TAccessFormProperties.Set_SelHeight(pRet: Integer);
begin
  DefaultInterface.Set_SelHeight(pRet);
end;

function TAccessFormProperties.Get_CurrentRecord: Integer;
begin
    Result := DefaultInterface.CurrentRecord;
end;

procedure TAccessFormProperties.Set_CurrentRecord(pRet: Integer);
begin
  DefaultInterface.Set_CurrentRecord(pRet);
end;

function TAccessFormProperties.Get_PictureData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PictureData;
end;

procedure TAccessFormProperties.Set_PictureData(pRet: OleVariant);
begin
  DefaultInterface.Set_PictureData(pRet);
end;

function TAccessFormProperties.Get_InsideHeight: Integer;
begin
    Result := DefaultInterface.InsideHeight;
end;

procedure TAccessFormProperties.Set_InsideHeight(pRet: Integer);
begin
  DefaultInterface.Set_InsideHeight(pRet);
end;

function TAccessFormProperties.Get_InsideWidth: Integer;
begin
    Result := DefaultInterface.InsideWidth;
end;

procedure TAccessFormProperties.Set_InsideWidth(pRet: Integer);
begin
  DefaultInterface.Set_InsideWidth(pRet);
end;

function TAccessFormProperties.Get_PicturePalette: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PicturePalette;
end;

procedure TAccessFormProperties.Set_PicturePalette(pRet: OleVariant);
begin
  DefaultInterface.Set_PicturePalette(pRet);
end;

function TAccessFormProperties.Get_HasModule: WordBool;
begin
    Result := DefaultInterface.HasModule;
end;

procedure TAccessFormProperties.Set_HasModule(pRet: WordBool);
begin
  DefaultInterface.Set_HasModule(pRet);
end;

function TAccessFormProperties.Get_acHiddenCurrentPage: Integer;
begin
    Result := DefaultInterface.acHiddenCurrentPage;
end;

procedure TAccessFormProperties.Set_acHiddenCurrentPage(pRet: Integer);
begin
  DefaultInterface.Set_acHiddenCurrentPage(pRet);
end;

function TAccessFormProperties.Get_Orientation: Byte;
begin
    Result := DefaultInterface.Orientation;
end;

procedure TAccessFormProperties.Set_Orientation(pRet: Byte);
begin
  DefaultInterface.Set_Orientation(pRet);
end;

function TAccessFormProperties.Get_AllowDesignChanges: WordBool;
begin
    Result := DefaultInterface.AllowDesignChanges;
end;

procedure TAccessFormProperties.Set_AllowDesignChanges(pRet: WordBool);
begin
  DefaultInterface.Set_AllowDesignChanges(pRet);
end;

function TAccessFormProperties.Get_ServerFilter: WideString;
begin
    Result := DefaultInterface.ServerFilter;
end;

procedure TAccessFormProperties.Set_ServerFilter(const pRet: WideString);
  { Warning: The property ServerFilter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ServerFilter := pRet;
end;

function TAccessFormProperties.Get_ServerFilterByForm: WordBool;
begin
    Result := DefaultInterface.ServerFilterByForm;
end;

procedure TAccessFormProperties.Set_ServerFilterByForm(pRet: WordBool);
begin
  DefaultInterface.Set_ServerFilterByForm(pRet);
end;

function TAccessFormProperties.Get_MaxRecords: Integer;
begin
    Result := DefaultInterface.MaxRecords;
end;

procedure TAccessFormProperties.Set_MaxRecords(pRet: Integer);
begin
  DefaultInterface.Set_MaxRecords(pRet);
end;

function TAccessFormProperties.Get_UniqueTable: WideString;
begin
    Result := DefaultInterface.UniqueTable;
end;

procedure TAccessFormProperties.Set_UniqueTable(const pRet: WideString);
  { Warning: The property UniqueTable has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UniqueTable := pRet;
end;

function TAccessFormProperties.Get_ResyncCommand: WideString;
begin
    Result := DefaultInterface.ResyncCommand;
end;

procedure TAccessFormProperties.Set_ResyncCommand(const pRet: WideString);
  { Warning: The property ResyncCommand has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ResyncCommand := pRet;
end;

function TAccessFormProperties.Get_InputParameters: WideString;
begin
    Result := DefaultInterface.InputParameters;
end;

procedure TAccessFormProperties.Set_InputParameters(const pRet: WideString);
  { Warning: The property InputParameters has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.InputParameters := pRet;
end;

function TAccessFormProperties.Get_MaxRecButton: WordBool;
begin
    Result := DefaultInterface.MaxRecButton;
end;

procedure TAccessFormProperties.Set_MaxRecButton(pRet: WordBool);
begin
  DefaultInterface.Set_MaxRecButton(pRet);
end;

function TAccessFormProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessFormProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessFormProperties.Get_NewRecord: Smallint;
begin
    Result := DefaultInterface.NewRecord;
end;

function TAccessFormProperties.Get_ActiveControl: AccessControl;
begin
    Result := DefaultInterface.ActiveControl;
end;

function TAccessFormProperties.Get_DefaultControl(ControlType: Integer): AccessControl;
begin
    Result := DefaultInterface.DefaultControl[ControlType];
end;

function TAccessFormProperties.Get_Dynaset: IDispatch;
begin
    Result := DefaultInterface.Dynaset;
end;

function TAccessFormProperties.Get_RecordsetClone: IDispatch;
begin
    Result := DefaultInterface.RecordsetClone;
end;

function TAccessFormProperties.Get_Recordset: IDispatch;
begin
    Result := DefaultInterface.Recordset;
end;

procedure TAccessFormProperties._Set_Recordset(const pRet: IDispatch);
  { Warning: The property Recordset has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Recordset := pRet;
end;

function TAccessFormProperties.Get__SectionOld(Index: OleVariant): AccessSection;
begin
    Result := DefaultInterface._SectionOld[Index];
end;

function TAccessFormProperties.Get_Form: AccessForm;
begin
    Result := DefaultInterface.Form;
end;

function TAccessFormProperties.Get_Module: Module;
begin
    Result := DefaultInterface.Module;
end;

function TAccessFormProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessFormProperties.Get_ConnectControl: AccessControl;
begin
    Result := DefaultInterface.ConnectControl;
end;

function TAccessFormProperties.Get_Controls: Controls;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessFormProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TAccessFormProperties.Set_Name(const pbstrName: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pbstrName;
end;

function TAccessFormProperties.Get_SubdatasheetHeight: Smallint;
begin
    Result := DefaultInterface.SubdatasheetHeight;
end;

procedure TAccessFormProperties.Set_SubdatasheetHeight(pRet: Smallint);
begin
  DefaultInterface.Set_SubdatasheetHeight(pRet);
end;

function TAccessFormProperties.Get_SubdatasheetExpanded: WordBool;
begin
    Result := DefaultInterface.SubdatasheetExpanded;
end;

procedure TAccessFormProperties.Set_SubdatasheetExpanded(pRet: WordBool);
begin
  DefaultInterface.Set_SubdatasheetExpanded(pRet);
end;

function TAccessFormProperties.Get_DatasheetBorderLineStyle: Byte;
begin
    Result := DefaultInterface.DatasheetBorderLineStyle;
end;

procedure TAccessFormProperties.Set_DatasheetBorderLineStyle(pRet: Byte);
begin
  DefaultInterface.Set_DatasheetBorderLineStyle(pRet);
end;

function TAccessFormProperties.Get_DatasheetColumnHeaderUnderlineStyle: Byte;
begin
    Result := DefaultInterface.DatasheetColumnHeaderUnderlineStyle;
end;

procedure TAccessFormProperties.Set_DatasheetColumnHeaderUnderlineStyle(pRet: Byte);
begin
  DefaultInterface.Set_DatasheetColumnHeaderUnderlineStyle(pRet);
end;

function TAccessFormProperties.Get_HorizontalDatasheetGridlineStyle: Byte;
begin
    Result := DefaultInterface.HorizontalDatasheetGridlineStyle;
end;

procedure TAccessFormProperties.Set_HorizontalDatasheetGridlineStyle(pRet: Byte);
begin
  DefaultInterface.Set_HorizontalDatasheetGridlineStyle(pRet);
end;

function TAccessFormProperties.Get_VerticalDatasheetGridlineStyle: Byte;
begin
    Result := DefaultInterface.VerticalDatasheetGridlineStyle;
end;

procedure TAccessFormProperties.Set_VerticalDatasheetGridlineStyle(pRet: Byte);
begin
  DefaultInterface.Set_VerticalDatasheetGridlineStyle(pRet);
end;

function TAccessFormProperties.Get_WindowTop: Smallint;
begin
    Result := DefaultInterface.WindowTop;
end;

function TAccessFormProperties.Get_WindowLeft: Smallint;
begin
    Result := DefaultInterface.WindowLeft;
end;

function TAccessFormProperties.Get_OnUndo: WideString;
begin
    Result := DefaultInterface.OnUndo;
end;

procedure TAccessFormProperties.Set_OnUndo(const pRet: WideString);
  { Warning: The property OnUndo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnUndo := pRet;
end;

function TAccessFormProperties.Get_OnRecordExit: WideString;
begin
    Result := DefaultInterface.OnRecordExit;
end;

procedure TAccessFormProperties.Set_OnRecordExit(const pRet: WideString);
  { Warning: The property OnRecordExit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnRecordExit := pRet;
end;

function TAccessFormProperties.Get_PivotTable: IDispatch;
begin
    Result := DefaultInterface.PivotTable;
end;

function TAccessFormProperties.Get_ChartSpace: IDispatch;
begin
    Result := DefaultInterface.ChartSpace;
end;

function TAccessFormProperties.Get_Printer: _Printer;
begin
    Result := DefaultInterface.Printer;
end;

procedure TAccessFormProperties.Set_Printer(const pRet: _Printer);
begin
  DefaultInterface.Set_Printer(pRet);
end;

procedure TAccessFormProperties._Set_Printer(const pRet: _Printer);
  { Warning: The property Printer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Printer := pRet;
end;

function TAccessFormProperties.Get_Moveable: WordBool;
begin
    Result := DefaultInterface.Moveable;
end;

procedure TAccessFormProperties.Set_Moveable(pRet: WordBool);
begin
  DefaultInterface.Set_Moveable(pRet);
end;

function TAccessFormProperties.Get_BeginBatchEdit: WideString;
begin
    Result := DefaultInterface.BeginBatchEdit;
end;

procedure TAccessFormProperties.Set_BeginBatchEdit(const pRet: WideString);
  { Warning: The property BeginBatchEdit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeginBatchEdit := pRet;
end;

function TAccessFormProperties.Get_UndoBatchEdit: WideString;
begin
    Result := DefaultInterface.UndoBatchEdit;
end;

procedure TAccessFormProperties.Set_UndoBatchEdit(const pRet: WideString);
  { Warning: The property UndoBatchEdit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UndoBatchEdit := pRet;
end;

function TAccessFormProperties.Get_BeforeBeginTransaction: WideString;
begin
    Result := DefaultInterface.BeforeBeginTransaction;
end;

procedure TAccessFormProperties.Set_BeforeBeginTransaction(const pRet: WideString);
  { Warning: The property BeforeBeginTransaction has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeBeginTransaction := pRet;
end;

function TAccessFormProperties.Get_AfterBeginTransaction: WideString;
begin
    Result := DefaultInterface.AfterBeginTransaction;
end;

procedure TAccessFormProperties.Set_AfterBeginTransaction(const pRet: WideString);
  { Warning: The property AfterBeginTransaction has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterBeginTransaction := pRet;
end;

function TAccessFormProperties.Get_BeforeCommitTransaction: WideString;
begin
    Result := DefaultInterface.BeforeCommitTransaction;
end;

procedure TAccessFormProperties.Set_BeforeCommitTransaction(const pRet: WideString);
  { Warning: The property BeforeCommitTransaction has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeCommitTransaction := pRet;
end;

function TAccessFormProperties.Get_AfterCommitTransaction: WideString;
begin
    Result := DefaultInterface.AfterCommitTransaction;
end;

procedure TAccessFormProperties.Set_AfterCommitTransaction(const pRet: WideString);
  { Warning: The property AfterCommitTransaction has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterCommitTransaction := pRet;
end;

function TAccessFormProperties.Get_RollbackTransaction: WideString;
begin
    Result := DefaultInterface.RollbackTransaction;
end;

procedure TAccessFormProperties.Set_RollbackTransaction(const pRet: WideString);
  { Warning: The property RollbackTransaction has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RollbackTransaction := pRet;
end;

function TAccessFormProperties.Get_AllowFormView: WordBool;
begin
    Result := DefaultInterface.AllowFormView;
end;

procedure TAccessFormProperties.Set_AllowFormView(pRet: WordBool);
begin
  DefaultInterface.Set_AllowFormView(pRet);
end;

function TAccessFormProperties.Get_AllowDatasheetView: WordBool;
begin
    Result := DefaultInterface.AllowDatasheetView;
end;

procedure TAccessFormProperties.Set_AllowDatasheetView(pRet: WordBool);
begin
  DefaultInterface.Set_AllowDatasheetView(pRet);
end;

function TAccessFormProperties.Get_AllowPivotTableView: WordBool;
begin
    Result := DefaultInterface.AllowPivotTableView;
end;

procedure TAccessFormProperties.Set_AllowPivotTableView(pRet: WordBool);
begin
  DefaultInterface.Set_AllowPivotTableView(pRet);
end;

function TAccessFormProperties.Get_AllowPivotChartView: WordBool;
begin
    Result := DefaultInterface.AllowPivotChartView;
end;

procedure TAccessFormProperties.Set_AllowPivotChartView(pRet: WordBool);
begin
  DefaultInterface.Set_AllowPivotChartView(pRet);
end;

function TAccessFormProperties.Get_OnConnect: WideString;
begin
    Result := DefaultInterface.OnConnect;
end;

procedure TAccessFormProperties.Set_OnConnect(const pRet: WideString);
  { Warning: The property OnConnect has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnConnect := pRet;
end;

function TAccessFormProperties.Get_OnDisconnect: WideString;
begin
    Result := DefaultInterface.OnDisconnect;
end;

procedure TAccessFormProperties.Set_OnDisconnect(const pRet: WideString);
  { Warning: The property OnDisconnect has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDisconnect := pRet;
end;

function TAccessFormProperties.Get_PivotTableChange: WideString;
begin
    Result := DefaultInterface.PivotTableChange;
end;

procedure TAccessFormProperties.Set_PivotTableChange(const pRet: WideString);
  { Warning: The property PivotTableChange has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PivotTableChange := pRet;
end;

function TAccessFormProperties.Get_Query: WideString;
begin
    Result := DefaultInterface.Query;
end;

procedure TAccessFormProperties.Set_Query(const pRet: WideString);
  { Warning: The property Query has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Query := pRet;
end;

function TAccessFormProperties.Get_BeforeQuery: WideString;
begin
    Result := DefaultInterface.BeforeQuery;
end;

procedure TAccessFormProperties.Set_BeforeQuery(const pRet: WideString);
  { Warning: The property BeforeQuery has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeQuery := pRet;
end;

function TAccessFormProperties.Get_SelectionChange: WideString;
begin
    Result := DefaultInterface.SelectionChange;
end;

procedure TAccessFormProperties.Set_SelectionChange(const pRet: WideString);
  { Warning: The property SelectionChange has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SelectionChange := pRet;
end;

function TAccessFormProperties.Get_CommandBeforeExecute: WideString;
begin
    Result := DefaultInterface.CommandBeforeExecute;
end;

procedure TAccessFormProperties.Set_CommandBeforeExecute(const pRet: WideString);
  { Warning: The property CommandBeforeExecute has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandBeforeExecute := pRet;
end;

function TAccessFormProperties.Get_CommandChecked: WideString;
begin
    Result := DefaultInterface.CommandChecked;
end;

procedure TAccessFormProperties.Set_CommandChecked(const pRet: WideString);
  { Warning: The property CommandChecked has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandChecked := pRet;
end;

function TAccessFormProperties.Get_CommandEnabled: WideString;
begin
    Result := DefaultInterface.CommandEnabled;
end;

procedure TAccessFormProperties.Set_CommandEnabled(const pRet: WideString);
  { Warning: The property CommandEnabled has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandEnabled := pRet;
end;

function TAccessFormProperties.Get_CommandExecute: WideString;
begin
    Result := DefaultInterface.CommandExecute;
end;

procedure TAccessFormProperties.Set_CommandExecute(const pRet: WideString);
  { Warning: The property CommandExecute has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandExecute := pRet;
end;

function TAccessFormProperties.Get_DataSetChange: WideString;
begin
    Result := DefaultInterface.DataSetChange;
end;

procedure TAccessFormProperties.Set_DataSetChange(const pRet: WideString);
  { Warning: The property DataSetChange has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataSetChange := pRet;
end;

function TAccessFormProperties.Get_BeforeScreenTip: WideString;
begin
    Result := DefaultInterface.BeforeScreenTip;
end;

procedure TAccessFormProperties.Set_BeforeScreenTip(const pRet: WideString);
  { Warning: The property BeforeScreenTip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeScreenTip := pRet;
end;

function TAccessFormProperties.Get_AfterFinalRender: WideString;
begin
    Result := DefaultInterface.AfterFinalRender;
end;

procedure TAccessFormProperties.Set_AfterFinalRender(const pRet: WideString);
  { Warning: The property AfterFinalRender has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterFinalRender := pRet;
end;

function TAccessFormProperties.Get_AfterRender: WideString;
begin
    Result := DefaultInterface.AfterRender;
end;

procedure TAccessFormProperties.Set_AfterRender(const pRet: WideString);
  { Warning: The property AfterRender has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterRender := pRet;
end;

function TAccessFormProperties.Get_AfterLayout: WideString;
begin
    Result := DefaultInterface.AfterLayout;
end;

procedure TAccessFormProperties.Set_AfterLayout(const pRet: WideString);
  { Warning: The property AfterLayout has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterLayout := pRet;
end;

function TAccessFormProperties.Get_BeforeRender: WideString;
begin
    Result := DefaultInterface.BeforeRender;
end;

procedure TAccessFormProperties.Set_BeforeRender(const pRet: WideString);
  { Warning: The property BeforeRender has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeRender := pRet;
end;

function TAccessFormProperties.Get_MouseWheel: WideString;
begin
    Result := DefaultInterface.MouseWheel;
end;

procedure TAccessFormProperties.Set_MouseWheel(const pRet: WideString);
  { Warning: The property MouseWheel has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MouseWheel := pRet;
end;

function TAccessFormProperties.Get_ViewChange: WideString;
begin
    Result := DefaultInterface.ViewChange;
end;

procedure TAccessFormProperties.Set_ViewChange(const pRet: WideString);
  { Warning: The property ViewChange has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ViewChange := pRet;
end;

function TAccessFormProperties.Get_DataChange: WideString;
begin
    Result := DefaultInterface.DataChange;
end;

procedure TAccessFormProperties.Set_DataChange(const pRet: WideString);
  { Warning: The property DataChange has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataChange := pRet;
end;

function TAccessFormProperties.Get_FetchDefaults: WordBool;
begin
    Result := DefaultInterface.FetchDefaults;
end;

procedure TAccessFormProperties.Set_FetchDefaults(pRet: WordBool);
begin
  DefaultInterface.Set_FetchDefaults(pRet);
end;

function TAccessFormProperties.Get_BatchUpdates: WordBool;
begin
    Result := DefaultInterface.BatchUpdates;
end;

procedure TAccessFormProperties.Set_BatchUpdates(pRet: WordBool);
begin
  DefaultInterface.Set_BatchUpdates(pRet);
end;

function TAccessFormProperties.Get_CommitOnClose: Byte;
begin
    Result := DefaultInterface.CommitOnClose;
end;

procedure TAccessFormProperties.Set_CommitOnClose(pRet: Byte);
begin
  DefaultInterface.Set_CommitOnClose(pRet);
end;

function TAccessFormProperties.Get_CommitOnNavigation: WordBool;
begin
    Result := DefaultInterface.CommitOnNavigation;
end;

procedure TAccessFormProperties.Set_CommitOnNavigation(pRet: WordBool);
begin
  DefaultInterface.Set_CommitOnNavigation(pRet);
end;

function TAccessFormProperties.Get_UseDefaultPrinter: WordBool;
begin
    Result := DefaultInterface.UseDefaultPrinter;
end;

procedure TAccessFormProperties.Set_UseDefaultPrinter(pRet: WordBool);
begin
  DefaultInterface.Set_UseDefaultPrinter(pRet);
end;

function TAccessFormProperties.Get_RecordSourceQualifier: WideString;
begin
    Result := DefaultInterface.RecordSourceQualifier;
end;

procedure TAccessFormProperties.Set_RecordSourceQualifier(const pRet: WideString);
  { Warning: The property RecordSourceQualifier has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RecordSourceQualifier := pRet;
end;

function TAccessFormProperties.Get_FilterOnLoad: WordBool;
begin
    Result := DefaultInterface.FilterOnLoad;
end;

procedure TAccessFormProperties.Set_FilterOnLoad(pRet: WordBool);
begin
  DefaultInterface.Set_FilterOnLoad(pRet);
end;

function TAccessFormProperties.Get_OrderByOnLoad: WordBool;
begin
    Result := DefaultInterface.OrderByOnLoad;
end;

procedure TAccessFormProperties.Set_OrderByOnLoad(pRet: WordBool);
begin
  DefaultInterface.Set_OrderByOnLoad(pRet);
end;

function TAccessFormProperties.Get_SplitFormOrientation: AcSplitFormOrientation;
begin
    Result := DefaultInterface.SplitFormOrientation;
end;

procedure TAccessFormProperties.Set_SplitFormOrientation(pRet: AcSplitFormOrientation);
begin
  DefaultInterface.Set_SplitFormOrientation(pRet);
end;

function TAccessFormProperties.Get_SplitFormDatasheet: AcSplitFormDatasheet;
begin
    Result := DefaultInterface.SplitFormDatasheet;
end;

procedure TAccessFormProperties.Set_SplitFormDatasheet(pRet: AcSplitFormDatasheet);
begin
  DefaultInterface.Set_SplitFormDatasheet(pRet);
end;

function TAccessFormProperties.Get_SplitFormSplitterBar: WordBool;
begin
    Result := DefaultInterface.SplitFormSplitterBar;
end;

procedure TAccessFormProperties.Set_SplitFormSplitterBar(pRet: WordBool);
begin
  DefaultInterface.Set_SplitFormSplitterBar(pRet);
end;

function TAccessFormProperties.Get_SplitFormPrinting: AcSplitFormPrinting;
begin
    Result := DefaultInterface.SplitFormPrinting;
end;

procedure TAccessFormProperties.Set_SplitFormPrinting(pRet: AcSplitFormPrinting);
begin
  DefaultInterface.Set_SplitFormPrinting(pRet);
end;

function TAccessFormProperties.Get_SplitFormSplitterBarSave: WordBool;
begin
    Result := DefaultInterface.SplitFormSplitterBarSave;
end;

procedure TAccessFormProperties.Set_SplitFormSplitterBarSave(pRet: WordBool);
begin
  DefaultInterface.Set_SplitFormSplitterBarSave(pRet);
end;

function TAccessFormProperties.Get_NavigationCaption: WideString;
begin
    Result := DefaultInterface.NavigationCaption;
end;

procedure TAccessFormProperties.Set_NavigationCaption(const pRet: WideString);
  { Warning: The property NavigationCaption has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.NavigationCaption := pRet;
end;

function TAccessFormProperties.Get_OnCurrentMacro: WideString;
begin
    Result := DefaultInterface.OnCurrentMacro;
end;

procedure TAccessFormProperties.Set_OnCurrentMacro(const pRet: WideString);
  { Warning: The property OnCurrentMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnCurrentMacro := pRet;
end;

function TAccessFormProperties.Get_BeforeInsertMacro: WideString;
begin
    Result := DefaultInterface.BeforeInsertMacro;
end;

procedure TAccessFormProperties.Set_BeforeInsertMacro(const pRet: WideString);
  { Warning: The property BeforeInsertMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeInsertMacro := pRet;
end;

function TAccessFormProperties.Get_AfterInsertMacro: WideString;
begin
    Result := DefaultInterface.AfterInsertMacro;
end;

procedure TAccessFormProperties.Set_AfterInsertMacro(const pRet: WideString);
  { Warning: The property AfterInsertMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterInsertMacro := pRet;
end;

function TAccessFormProperties.Get_BeforeUpdateMacro: WideString;
begin
    Result := DefaultInterface.BeforeUpdateMacro;
end;

procedure TAccessFormProperties.Set_BeforeUpdateMacro(const pRet: WideString);
  { Warning: The property BeforeUpdateMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeUpdateMacro := pRet;
end;

function TAccessFormProperties.Get_AfterUpdateMacro: WideString;
begin
    Result := DefaultInterface.AfterUpdateMacro;
end;

procedure TAccessFormProperties.Set_AfterUpdateMacro(const pRet: WideString);
  { Warning: The property AfterUpdateMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterUpdateMacro := pRet;
end;

function TAccessFormProperties.Get_OnDirtyMacro: WideString;
begin
    Result := DefaultInterface.OnDirtyMacro;
end;

procedure TAccessFormProperties.Set_OnDirtyMacro(const pRet: WideString);
  { Warning: The property OnDirtyMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDirtyMacro := pRet;
end;

function TAccessFormProperties.Get_OnDeleteMacro: WideString;
begin
    Result := DefaultInterface.OnDeleteMacro;
end;

procedure TAccessFormProperties.Set_OnDeleteMacro(const pRet: WideString);
  { Warning: The property OnDeleteMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDeleteMacro := pRet;
end;

function TAccessFormProperties.Get_BeforeDelConfirmMacro: WideString;
begin
    Result := DefaultInterface.BeforeDelConfirmMacro;
end;

procedure TAccessFormProperties.Set_BeforeDelConfirmMacro(const pRet: WideString);
  { Warning: The property BeforeDelConfirmMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeDelConfirmMacro := pRet;
end;

function TAccessFormProperties.Get_AfterDelConfirmMacro: WideString;
begin
    Result := DefaultInterface.AfterDelConfirmMacro;
end;

procedure TAccessFormProperties.Set_AfterDelConfirmMacro(const pRet: WideString);
  { Warning: The property AfterDelConfirmMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterDelConfirmMacro := pRet;
end;

function TAccessFormProperties.Get_OnOpenMacro: WideString;
begin
    Result := DefaultInterface.OnOpenMacro;
end;

procedure TAccessFormProperties.Set_OnOpenMacro(const pRet: WideString);
  { Warning: The property OnOpenMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnOpenMacro := pRet;
end;

function TAccessFormProperties.Get_OnLoadMacro: WideString;
begin
    Result := DefaultInterface.OnLoadMacro;
end;

procedure TAccessFormProperties.Set_OnLoadMacro(const pRet: WideString);
  { Warning: The property OnLoadMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnLoadMacro := pRet;
end;

function TAccessFormProperties.Get_OnResizeMacro: WideString;
begin
    Result := DefaultInterface.OnResizeMacro;
end;

procedure TAccessFormProperties.Set_OnResizeMacro(const pRet: WideString);
  { Warning: The property OnResizeMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnResizeMacro := pRet;
end;

function TAccessFormProperties.Get_OnUnloadMacro: WideString;
begin
    Result := DefaultInterface.OnUnloadMacro;
end;

procedure TAccessFormProperties.Set_OnUnloadMacro(const pRet: WideString);
  { Warning: The property OnUnloadMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnUnloadMacro := pRet;
end;

function TAccessFormProperties.Get_OnCloseMacro: WideString;
begin
    Result := DefaultInterface.OnCloseMacro;
end;

procedure TAccessFormProperties.Set_OnCloseMacro(const pRet: WideString);
  { Warning: The property OnCloseMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnCloseMacro := pRet;
end;

function TAccessFormProperties.Get_OnActivateMacro: WideString;
begin
    Result := DefaultInterface.OnActivateMacro;
end;

procedure TAccessFormProperties.Set_OnActivateMacro(const pRet: WideString);
  { Warning: The property OnActivateMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnActivateMacro := pRet;
end;

function TAccessFormProperties.Get_OnDeactivateMacro: WideString;
begin
    Result := DefaultInterface.OnDeactivateMacro;
end;

procedure TAccessFormProperties.Set_OnDeactivateMacro(const pRet: WideString);
  { Warning: The property OnDeactivateMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDeactivateMacro := pRet;
end;

function TAccessFormProperties.Get_OnGotFocusMacro: WideString;
begin
    Result := DefaultInterface.OnGotFocusMacro;
end;

procedure TAccessFormProperties.Set_OnGotFocusMacro(const pRet: WideString);
  { Warning: The property OnGotFocusMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnGotFocusMacro := pRet;
end;

function TAccessFormProperties.Get_OnLostFocusMacro: WideString;
begin
    Result := DefaultInterface.OnLostFocusMacro;
end;

procedure TAccessFormProperties.Set_OnLostFocusMacro(const pRet: WideString);
  { Warning: The property OnLostFocusMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnLostFocusMacro := pRet;
end;

function TAccessFormProperties.Get_OnClickMacro: WideString;
begin
    Result := DefaultInterface.OnClickMacro;
end;

procedure TAccessFormProperties.Set_OnClickMacro(const pRet: WideString);
  { Warning: The property OnClickMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnClickMacro := pRet;
end;

function TAccessFormProperties.Get_OnDblClickMacro: WideString;
begin
    Result := DefaultInterface.OnDblClickMacro;
end;

procedure TAccessFormProperties.Set_OnDblClickMacro(const pRet: WideString);
  { Warning: The property OnDblClickMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDblClickMacro := pRet;
end;

function TAccessFormProperties.Get_OnMouseDownMacro: WideString;
begin
    Result := DefaultInterface.OnMouseDownMacro;
end;

procedure TAccessFormProperties.Set_OnMouseDownMacro(const pRet: WideString);
  { Warning: The property OnMouseDownMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseDownMacro := pRet;
end;

function TAccessFormProperties.Get_OnMouseMoveMacro: WideString;
begin
    Result := DefaultInterface.OnMouseMoveMacro;
end;

procedure TAccessFormProperties.Set_OnMouseMoveMacro(const pRet: WideString);
  { Warning: The property OnMouseMoveMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseMoveMacro := pRet;
end;

function TAccessFormProperties.Get_OnMouseUpMacro: WideString;
begin
    Result := DefaultInterface.OnMouseUpMacro;
end;

procedure TAccessFormProperties.Set_OnMouseUpMacro(const pRet: WideString);
  { Warning: The property OnMouseUpMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseUpMacro := pRet;
end;

function TAccessFormProperties.Get_OnKeyDownMacro: WideString;
begin
    Result := DefaultInterface.OnKeyDownMacro;
end;

procedure TAccessFormProperties.Set_OnKeyDownMacro(const pRet: WideString);
  { Warning: The property OnKeyDownMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyDownMacro := pRet;
end;

function TAccessFormProperties.Get_OnKeyUpMacro: WideString;
begin
    Result := DefaultInterface.OnKeyUpMacro;
end;

procedure TAccessFormProperties.Set_OnKeyUpMacro(const pRet: WideString);
  { Warning: The property OnKeyUpMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyUpMacro := pRet;
end;

function TAccessFormProperties.Get_OnKeyPressMacro: WideString;
begin
    Result := DefaultInterface.OnKeyPressMacro;
end;

procedure TAccessFormProperties.Set_OnKeyPressMacro(const pRet: WideString);
  { Warning: The property OnKeyPressMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyPressMacro := pRet;
end;

function TAccessFormProperties.Get_OnErrorMacro: WideString;
begin
    Result := DefaultInterface.OnErrorMacro;
end;

procedure TAccessFormProperties.Set_OnErrorMacro(const pRet: WideString);
  { Warning: The property OnErrorMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnErrorMacro := pRet;
end;

function TAccessFormProperties.Get_OnFilterMacro: WideString;
begin
    Result := DefaultInterface.OnFilterMacro;
end;

procedure TAccessFormProperties.Set_OnFilterMacro(const pRet: WideString);
  { Warning: The property OnFilterMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnFilterMacro := pRet;
end;

function TAccessFormProperties.Get_OnApplyFilterMacro: WideString;
begin
    Result := DefaultInterface.OnApplyFilterMacro;
end;

procedure TAccessFormProperties.Set_OnApplyFilterMacro(const pRet: WideString);
  { Warning: The property OnApplyFilterMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnApplyFilterMacro := pRet;
end;

function TAccessFormProperties.Get_OnTimerMacro: WideString;
begin
    Result := DefaultInterface.OnTimerMacro;
end;

procedure TAccessFormProperties.Set_OnTimerMacro(const pRet: WideString);
  { Warning: The property OnTimerMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnTimerMacro := pRet;
end;

function TAccessFormProperties.Get_OnUndoMacro: WideString;
begin
    Result := DefaultInterface.OnUndoMacro;
end;

procedure TAccessFormProperties.Set_OnUndoMacro(const pRet: WideString);
  { Warning: The property OnUndoMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnUndoMacro := pRet;
end;

function TAccessFormProperties.Get_OnRecordExitMacro: WideString;
begin
    Result := DefaultInterface.OnRecordExitMacro;
end;

procedure TAccessFormProperties.Set_OnRecordExitMacro(const pRet: WideString);
  { Warning: The property OnRecordExitMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnRecordExitMacro := pRet;
end;

function TAccessFormProperties.Get_BeginBatchEditMacro: WideString;
begin
    Result := DefaultInterface.BeginBatchEditMacro;
end;

procedure TAccessFormProperties.Set_BeginBatchEditMacro(const pRet: WideString);
  { Warning: The property BeginBatchEditMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeginBatchEditMacro := pRet;
end;

function TAccessFormProperties.Get_UndoBatchEditMacro: WideString;
begin
    Result := DefaultInterface.UndoBatchEditMacro;
end;

procedure TAccessFormProperties.Set_UndoBatchEditMacro(const pRet: WideString);
  { Warning: The property UndoBatchEditMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UndoBatchEditMacro := pRet;
end;

function TAccessFormProperties.Get_BeforeBeginTransactionMacro: WideString;
begin
    Result := DefaultInterface.BeforeBeginTransactionMacro;
end;

procedure TAccessFormProperties.Set_BeforeBeginTransactionMacro(const pRet: WideString);
  { Warning: The property BeforeBeginTransactionMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeBeginTransactionMacro := pRet;
end;

function TAccessFormProperties.Get_AfterBeginTransactionMacro: WideString;
begin
    Result := DefaultInterface.AfterBeginTransactionMacro;
end;

procedure TAccessFormProperties.Set_AfterBeginTransactionMacro(const pRet: WideString);
  { Warning: The property AfterBeginTransactionMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterBeginTransactionMacro := pRet;
end;

function TAccessFormProperties.Get_BeforeCommitTransactionMacro: WideString;
begin
    Result := DefaultInterface.BeforeCommitTransactionMacro;
end;

procedure TAccessFormProperties.Set_BeforeCommitTransactionMacro(const pRet: WideString);
  { Warning: The property BeforeCommitTransactionMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeCommitTransactionMacro := pRet;
end;

function TAccessFormProperties.Get_AfterCommitTransactionMacro: WideString;
begin
    Result := DefaultInterface.AfterCommitTransactionMacro;
end;

procedure TAccessFormProperties.Set_AfterCommitTransactionMacro(const pRet: WideString);
  { Warning: The property AfterCommitTransactionMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterCommitTransactionMacro := pRet;
end;

function TAccessFormProperties.Get_RollbackTransactionMacro: WideString;
begin
    Result := DefaultInterface.RollbackTransactionMacro;
end;

procedure TAccessFormProperties.Set_RollbackTransactionMacro(const pRet: WideString);
  { Warning: The property RollbackTransactionMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RollbackTransactionMacro := pRet;
end;

function TAccessFormProperties.Get_OnConnectMacro: WideString;
begin
    Result := DefaultInterface.OnConnectMacro;
end;

procedure TAccessFormProperties.Set_OnConnectMacro(const pRet: WideString);
  { Warning: The property OnConnectMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnConnectMacro := pRet;
end;

function TAccessFormProperties.Get_OnDisconnectMacro: WideString;
begin
    Result := DefaultInterface.OnDisconnectMacro;
end;

procedure TAccessFormProperties.Set_OnDisconnectMacro(const pRet: WideString);
  { Warning: The property OnDisconnectMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDisconnectMacro := pRet;
end;

function TAccessFormProperties.Get_PivotTableChangeMacro: WideString;
begin
    Result := DefaultInterface.PivotTableChangeMacro;
end;

procedure TAccessFormProperties.Set_PivotTableChangeMacro(const pRet: WideString);
  { Warning: The property PivotTableChangeMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PivotTableChangeMacro := pRet;
end;

function TAccessFormProperties.Get_QueryMacro: WideString;
begin
    Result := DefaultInterface.QueryMacro;
end;

procedure TAccessFormProperties.Set_QueryMacro(const pRet: WideString);
  { Warning: The property QueryMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.QueryMacro := pRet;
end;

function TAccessFormProperties.Get_BeforeQueryMacro: WideString;
begin
    Result := DefaultInterface.BeforeQueryMacro;
end;

procedure TAccessFormProperties.Set_BeforeQueryMacro(const pRet: WideString);
  { Warning: The property BeforeQueryMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeQueryMacro := pRet;
end;

function TAccessFormProperties.Get_SelectionChangeMacro: WideString;
begin
    Result := DefaultInterface.SelectionChangeMacro;
end;

procedure TAccessFormProperties.Set_SelectionChangeMacro(const pRet: WideString);
  { Warning: The property SelectionChangeMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SelectionChangeMacro := pRet;
end;

function TAccessFormProperties.Get_CommandBeforeExecuteMacro: WideString;
begin
    Result := DefaultInterface.CommandBeforeExecuteMacro;
end;

procedure TAccessFormProperties.Set_CommandBeforeExecuteMacro(const pRet: WideString);
  { Warning: The property CommandBeforeExecuteMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandBeforeExecuteMacro := pRet;
end;

function TAccessFormProperties.Get_CommandCheckedMacro: WideString;
begin
    Result := DefaultInterface.CommandCheckedMacro;
end;

procedure TAccessFormProperties.Set_CommandCheckedMacro(const pRet: WideString);
  { Warning: The property CommandCheckedMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandCheckedMacro := pRet;
end;

function TAccessFormProperties.Get_CommandEnabledMacro: WideString;
begin
    Result := DefaultInterface.CommandEnabledMacro;
end;

procedure TAccessFormProperties.Set_CommandEnabledMacro(const pRet: WideString);
  { Warning: The property CommandEnabledMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandEnabledMacro := pRet;
end;

function TAccessFormProperties.Get_CommandExecuteMacro: WideString;
begin
    Result := DefaultInterface.CommandExecuteMacro;
end;

procedure TAccessFormProperties.Set_CommandExecuteMacro(const pRet: WideString);
  { Warning: The property CommandExecuteMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CommandExecuteMacro := pRet;
end;

function TAccessFormProperties.Get_DataSetChangeMacro: WideString;
begin
    Result := DefaultInterface.DataSetChangeMacro;
end;

procedure TAccessFormProperties.Set_DataSetChangeMacro(const pRet: WideString);
  { Warning: The property DataSetChangeMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataSetChangeMacro := pRet;
end;

function TAccessFormProperties.Get_BeforeScreenTipMacro: WideString;
begin
    Result := DefaultInterface.BeforeScreenTipMacro;
end;

procedure TAccessFormProperties.Set_BeforeScreenTipMacro(const pRet: WideString);
  { Warning: The property BeforeScreenTipMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeScreenTipMacro := pRet;
end;

function TAccessFormProperties.Get_AfterFinalRenderMacro: WideString;
begin
    Result := DefaultInterface.AfterFinalRenderMacro;
end;

procedure TAccessFormProperties.Set_AfterFinalRenderMacro(const pRet: WideString);
  { Warning: The property AfterFinalRenderMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterFinalRenderMacro := pRet;
end;

function TAccessFormProperties.Get_AfterRenderMacro: WideString;
begin
    Result := DefaultInterface.AfterRenderMacro;
end;

procedure TAccessFormProperties.Set_AfterRenderMacro(const pRet: WideString);
  { Warning: The property AfterRenderMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterRenderMacro := pRet;
end;

function TAccessFormProperties.Get_AfterLayoutMacro: WideString;
begin
    Result := DefaultInterface.AfterLayoutMacro;
end;

procedure TAccessFormProperties.Set_AfterLayoutMacro(const pRet: WideString);
  { Warning: The property AfterLayoutMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AfterLayoutMacro := pRet;
end;

function TAccessFormProperties.Get_BeforeRenderMacro: WideString;
begin
    Result := DefaultInterface.BeforeRenderMacro;
end;

procedure TAccessFormProperties.Set_BeforeRenderMacro(const pRet: WideString);
  { Warning: The property BeforeRenderMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BeforeRenderMacro := pRet;
end;

function TAccessFormProperties.Get_MouseWheelMacro: WideString;
begin
    Result := DefaultInterface.MouseWheelMacro;
end;

procedure TAccessFormProperties.Set_MouseWheelMacro(const pRet: WideString);
  { Warning: The property MouseWheelMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MouseWheelMacro := pRet;
end;

function TAccessFormProperties.Get_ViewChangeMacro: WideString;
begin
    Result := DefaultInterface.ViewChangeMacro;
end;

procedure TAccessFormProperties.Set_ViewChangeMacro(const pRet: WideString);
  { Warning: The property ViewChangeMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ViewChangeMacro := pRet;
end;

function TAccessFormProperties.Get_DataChangeMacro: WideString;
begin
    Result := DefaultInterface.DataChangeMacro;
end;

procedure TAccessFormProperties.Set_DataChangeMacro(const pRet: WideString);
  { Warning: The property DataChangeMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DataChangeMacro := pRet;
end;

function TAccessFormProperties.Get_AllowLayoutView: WordBool;
begin
    Result := DefaultInterface.AllowLayoutView;
end;

procedure TAccessFormProperties.Set_AllowLayoutView(pRet: WordBool);
begin
  DefaultInterface.Set_AllowLayoutView(pRet);
end;

function TAccessFormProperties.Get_DatasheetAlternateBackColor: Integer;
begin
    Result := DefaultInterface.DatasheetAlternateBackColor;
end;

procedure TAccessFormProperties.Set_DatasheetAlternateBackColor(pRet: Integer);
begin
  DefaultInterface.Set_DatasheetAlternateBackColor(pRet);
end;

function TAccessFormProperties.Get_DisplayOnSharePointSite: Byte;
begin
    Result := DefaultInterface.DisplayOnSharePointSite;
end;

procedure TAccessFormProperties.Set_DisplayOnSharePointSite(pRet: Byte);
begin
  DefaultInterface.Set_DisplayOnSharePointSite(pRet);
end;

function TAccessFormProperties.Get_SplitFormSize: Integer;
begin
    Result := DefaultInterface.SplitFormSize;
end;

procedure TAccessFormProperties.Set_SplitFormSize(pRet: Integer);
begin
  DefaultInterface.Set_SplitFormSize(pRet);
end;

function TAccessFormProperties.Get_Section(Index: OleVariant): _Section;
begin
    Result := DefaultInterface.Section[Index];
end;

function TAccessFormProperties.Get_RibbonName: WideString;
begin
    Result := DefaultInterface.RibbonName;
end;

procedure TAccessFormProperties.Set_RibbonName(const pRet: WideString);
  { Warning: The property RibbonName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RibbonName := pRet;
end;

function TAccessFormProperties.Get_FitToScreen: WordBool;
begin
    Result := DefaultInterface.FitToScreen;
end;

procedure TAccessFormProperties.Set_FitToScreen(pRet: WordBool);
begin
  DefaultInterface.Set_FitToScreen(pRet);
end;

{$ENDIF}

class function CoAccessReport.Create: _Report3;
begin
  Result := CreateComObject(CLASS_AccessReport) as _Report3;
end;

class function CoAccessReport.CreateRemote(const MachineName: string): _Report3;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AccessReport) as _Report3;
end;

procedure TAccessReport.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FF240263-AF0A-432D-A544-A721E75738F8}';
    IntfIID:   '{B0E35B78-55B0-47FB-8951-CA616F25CEAF}';
    EventIID:  '{D7281A87-4B30-41C5-AB7B-FABF9A35442A}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAccessReport.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _Report3;
  end;
end;

procedure TAccessReport.ConnectTo(svrIntf: _Report3);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TAccessReport.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TAccessReport.GetDefaultInterface: _Report3;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAccessReport.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAccessReportProperties.Create(Self);
{$ENDIF}
end;

destructor TAccessReport.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAccessReport.GetServerProperties: TAccessReportProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TAccessReport.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    2066: if Assigned(FOnOpen) then
         FOnOpen(Self, Smallint((TVarData(Params[0]).VPointer)^) {out Smallint});
    2070: if Assigned(FOnClose) then
         FOnClose(Self);
    2071: if Assigned(FOnActivate) then
         FOnActivate(Self);
    2072: if Assigned(FOnDeactivate) then
         FOnDeactivate(Self);
    2083: if Assigned(FOnError) then
         FOnError(Self,
                  Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                  Smallint((TVarData(Params[1]).VPointer)^) {out Smallint});
    2161: if Assigned(FOnNoData) then
         FOnNoData(Self, Smallint((TVarData(Params[0]).VPointer)^) {out Smallint});
    2162: if Assigned(FOnPage) then
         FOnPage(Self);
    2058: if Assigned(FOnCurrent) then
         FOnCurrent(Self);
    2067: if Assigned(FOnLoad) then
         FOnLoad(Self);
    2068: if Assigned(FOnResize) then
         FOnResize(Self);
    2069: if Assigned(FOnUnload) then
         FOnUnload(Self, Smallint((TVarData(Params[0]).VPointer)^) {out Smallint});
    2073: if Assigned(FOnGotFocus) then
         FOnGotFocus(Self);
    2074: if Assigned(FOnLostFocus) then
         FOnLostFocus(Self);
    -600: if Assigned(FOnClick) then
         FOnClick(Self);
    -601: if Assigned(FOnDblClick) then
         FOnDblClick(Self, Smallint((TVarData(Params[0]).VPointer)^) {out Smallint});
    -605: if Assigned(FOnMouseDown) then
         FOnMouseDown(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    -606: if Assigned(FOnMouseMove) then
         FOnMouseMove(Self,
                      Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                      Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                      Single((TVarData(Params[2]).VPointer)^) {var Single},
                      Single((TVarData(Params[3]).VPointer)^) {var Single});
    -607: if Assigned(FOnMouseUp) then
         FOnMouseUp(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint},
                    Single((TVarData(Params[2]).VPointer)^) {var Single},
                    Single((TVarData(Params[3]).VPointer)^) {var Single});
    -602: if Assigned(FOnKeyDown) then
         FOnKeyDown(Self,
                    Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                    Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    -603: if Assigned(FOnKeyPress) then
         FOnKeyPress(Self, Smallint((TVarData(Params[0]).VPointer)^) {var Smallint});
    -604: if Assigned(FOnKeyUp) then
         FOnKeyUp(Self,
                  Smallint((TVarData(Params[0]).VPointer)^) {var Smallint},
                  Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    2084: if Assigned(FOnTimer) then
         FOnTimer(Self);
    2155: if Assigned(FOnFilter) then
         FOnFilter(Self,
                   Smallint((TVarData(Params[0]).VPointer)^) {out Smallint},
                   Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    2156: if Assigned(FOnApplyFilter) then
         FOnApplyFilter(Self,
                        Smallint((TVarData(Params[0]).VPointer)^) {out Smallint},
                        Smallint((TVarData(Params[1]).VPointer)^) {var Smallint});
    2401: if Assigned(FOnMouseWheel) then
         FOnMouseWheel(Self,
                       Params[0] {WordBool},
                       Params[1] {Integer});
  end; {case DispID}
end;

function TAccessReport.Get_FormName: WideString;
begin
    Result := DefaultInterface.FormName;
end;

procedure TAccessReport.Set_FormName(const pRet: WideString);
  { Warning: The property FormName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FormName := pRet;
end;

function TAccessReport.Get_RecordSource: WideString;
begin
    Result := DefaultInterface.RecordSource;
end;

procedure TAccessReport.Set_RecordSource(const pRet: WideString);
  { Warning: The property RecordSource has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RecordSource := pRet;
end;

function TAccessReport.Get_Filter: WideString;
begin
    Result := DefaultInterface.Filter;
end;

procedure TAccessReport.Set_Filter(const pRet: WideString);
  { Warning: The property Filter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Filter := pRet;
end;

function TAccessReport.Get_FilterOn: WordBool;
begin
    Result := DefaultInterface.FilterOn;
end;

procedure TAccessReport.Set_FilterOn(pRet: WordBool);
begin
  DefaultInterface.Set_FilterOn(pRet);
end;

function TAccessReport.Get_OrderBy: WideString;
begin
    Result := DefaultInterface.OrderBy;
end;

procedure TAccessReport.Set_OrderBy(const pRet: WideString);
  { Warning: The property OrderBy has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OrderBy := pRet;
end;

function TAccessReport.Get_OrderByOn: WordBool;
begin
    Result := DefaultInterface.OrderByOn;
end;

procedure TAccessReport.Set_OrderByOn(pRet: WordBool);
begin
  DefaultInterface.Set_OrderByOn(pRet);
end;

function TAccessReport.Get_ServerFilter: WideString;
begin
    Result := DefaultInterface.ServerFilter;
end;

procedure TAccessReport.Set_ServerFilter(const pRet: WideString);
  { Warning: The property ServerFilter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ServerFilter := pRet;
end;

function TAccessReport.Get_Caption: WideString;
begin
    Result := DefaultInterface.Caption;
end;

procedure TAccessReport.Set_Caption(const pRet: WideString);
  { Warning: The property Caption has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Caption := pRet;
end;

function TAccessReport.Get_RecordLocks: Byte;
begin
    Result := DefaultInterface.RecordLocks;
end;

procedure TAccessReport.Set_RecordLocks(pRet: Byte);
begin
  DefaultInterface.Set_RecordLocks(pRet);
end;

function TAccessReport.Get_PageHeader: Byte;
begin
    Result := DefaultInterface.PageHeader;
end;

procedure TAccessReport.Set_PageHeader(pRet: Byte);
begin
  DefaultInterface.Set_PageHeader(pRet);
end;

function TAccessReport.Get_PageFooter: Byte;
begin
    Result := DefaultInterface.PageFooter;
end;

procedure TAccessReport.Set_PageFooter(pRet: Byte);
begin
  DefaultInterface.Set_PageFooter(pRet);
end;

function TAccessReport.Get_DateGrouping: Byte;
begin
    Result := DefaultInterface.DateGrouping;
end;

procedure TAccessReport.Set_DateGrouping(pRet: Byte);
begin
  DefaultInterface.Set_DateGrouping(pRet);
end;

function TAccessReport.Get_GrpKeepTogether: Byte;
begin
    Result := DefaultInterface.GrpKeepTogether;
end;

procedure TAccessReport.Set_GrpKeepTogether(pRet: Byte);
begin
  DefaultInterface.Set_GrpKeepTogether(pRet);
end;

function TAccessReport.Get_MinButton: WordBool;
begin
    Result := DefaultInterface.MinButton;
end;

procedure TAccessReport.Set_MinButton(pRet: WordBool);
begin
  DefaultInterface.Set_MinButton(pRet);
end;

function TAccessReport.Get_MaxButton: WordBool;
begin
    Result := DefaultInterface.MaxButton;
end;

procedure TAccessReport.Set_MaxButton(pRet: WordBool);
begin
  DefaultInterface.Set_MaxButton(pRet);
end;

function TAccessReport.Get_Width: Smallint;
begin
    Result := DefaultInterface.Width;
end;

procedure TAccessReport.Set_Width(pRet: Smallint);
begin
  DefaultInterface.Set_Width(pRet);
end;

function TAccessReport.Get_Picture: WideString;
begin
    Result := DefaultInterface.Picture;
end;

procedure TAccessReport.Set_Picture(const pRet: WideString);
  { Warning: The property Picture has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Picture := pRet;
end;

function TAccessReport.Get_PictureType: Byte;
begin
    Result := DefaultInterface.PictureType;
end;

procedure TAccessReport.Set_PictureType(pRet: Byte);
begin
  DefaultInterface.Set_PictureType(pRet);
end;

function TAccessReport.Get_PictureSizeMode: Byte;
begin
    Result := DefaultInterface.PictureSizeMode;
end;

procedure TAccessReport.Set_PictureSizeMode(pRet: Byte);
begin
  DefaultInterface.Set_PictureSizeMode(pRet);
end;

function TAccessReport.Get_PictureAlignment: Byte;
begin
    Result := DefaultInterface.PictureAlignment;
end;

procedure TAccessReport.Set_PictureAlignment(pRet: Byte);
begin
  DefaultInterface.Set_PictureAlignment(pRet);
end;

function TAccessReport.Get_PictureTiling: WordBool;
begin
    Result := DefaultInterface.PictureTiling;
end;

procedure TAccessReport.Set_PictureTiling(pRet: WordBool);
begin
  DefaultInterface.Set_PictureTiling(pRet);
end;

function TAccessReport.Get_PicturePages: Byte;
begin
    Result := DefaultInterface.PicturePages;
end;

procedure TAccessReport.Set_PicturePages(pRet: Byte);
begin
  DefaultInterface.Set_PicturePages(pRet);
end;

function TAccessReport.Get_MenuBar: WideString;
begin
    Result := DefaultInterface.MenuBar;
end;

procedure TAccessReport.Set_MenuBar(const pRet: WideString);
  { Warning: The property MenuBar has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MenuBar := pRet;
end;

function TAccessReport.Get_Toolbar: WideString;
begin
    Result := DefaultInterface.Toolbar;
end;

procedure TAccessReport.Set_Toolbar(const pRet: WideString);
  { Warning: The property Toolbar has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Toolbar := pRet;
end;

function TAccessReport.Get_ShortcutMenuBar: WideString;
begin
    Result := DefaultInterface.ShortcutMenuBar;
end;

procedure TAccessReport.Set_ShortcutMenuBar(const pRet: WideString);
  { Warning: The property ShortcutMenuBar has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ShortcutMenuBar := pRet;
end;

function TAccessReport.Get_GridX: Smallint;
begin
    Result := DefaultInterface.GridX;
end;

procedure TAccessReport.Set_GridX(pRet: Smallint);
begin
  DefaultInterface.Set_GridX(pRet);
end;

function TAccessReport.Get_GridY: Smallint;
begin
    Result := DefaultInterface.GridY;
end;

procedure TAccessReport.Set_GridY(pRet: Smallint);
begin
  DefaultInterface.Set_GridY(pRet);
end;

function TAccessReport.Get_LayoutForPrint: WordBool;
begin
    Result := DefaultInterface.LayoutForPrint;
end;

procedure TAccessReport.Set_LayoutForPrint(pRet: WordBool);
begin
  DefaultInterface.Set_LayoutForPrint(pRet);
end;

function TAccessReport.Get_FastLaserPrinting: WordBool;
begin
    Result := DefaultInterface.FastLaserPrinting;
end;

procedure TAccessReport.Set_FastLaserPrinting(pRet: WordBool);
begin
  DefaultInterface.Set_FastLaserPrinting(pRet);
end;

function TAccessReport.Get_HelpFile: WideString;
begin
    Result := DefaultInterface.HelpFile;
end;

procedure TAccessReport.Set_HelpFile(const pRet: WideString);
  { Warning: The property HelpFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HelpFile := pRet;
end;

function TAccessReport.Get_HelpContextId: Integer;
begin
    Result := DefaultInterface.HelpContextId;
end;

procedure TAccessReport.Set_HelpContextId(pRet: Integer);
begin
  DefaultInterface.Set_HelpContextId(pRet);
end;

function TAccessReport.Get_Hwnd: Integer;
begin
    Result := DefaultInterface.Hwnd;
end;

procedure TAccessReport.Set_Hwnd(pRet: Integer);
begin
  DefaultInterface.Set_Hwnd(pRet);
end;

function TAccessReport.Get_Count: Smallint;
begin
    Result := DefaultInterface.Count;
end;

procedure TAccessReport.Set_Count(pRet: Smallint);
begin
  DefaultInterface.Set_Count(pRet);
end;

function TAccessReport.Get_Page: Integer;
begin
    Result := DefaultInterface.Page;
end;

procedure TAccessReport.Set_Page(pRet: Integer);
begin
  DefaultInterface.Set_Page(pRet);
end;

function TAccessReport.Get_Pages: Smallint;
begin
    Result := DefaultInterface.Pages;
end;

procedure TAccessReport.Set_Pages(pRet: Smallint);
begin
  DefaultInterface.Set_Pages(pRet);
end;

function TAccessReport.Get_LogicalPageWidth: Integer;
begin
    Result := DefaultInterface.LogicalPageWidth;
end;

procedure TAccessReport.Set_LogicalPageWidth(pRet: Integer);
begin
  DefaultInterface.Set_LogicalPageWidth(pRet);
end;

function TAccessReport.Get_LogicalPageHeight: Integer;
begin
    Result := DefaultInterface.LogicalPageHeight;
end;

procedure TAccessReport.Set_LogicalPageHeight(pRet: Integer);
begin
  DefaultInterface.Set_LogicalPageHeight(pRet);
end;

function TAccessReport.Get_ZoomControl: Integer;
begin
    Result := DefaultInterface.ZoomControl;
end;

procedure TAccessReport.Set_ZoomControl(pRet: Integer);
begin
  DefaultInterface.Set_ZoomControl(pRet);
end;

function TAccessReport.Get_HasData: Integer;
begin
    Result := DefaultInterface.HasData;
end;

procedure TAccessReport.Set_HasData(pRet: Integer);
begin
  DefaultInterface.Set_HasData(pRet);
end;

function TAccessReport.Get_Left: Integer;
begin
    Result := DefaultInterface.Left;
end;

procedure TAccessReport.Set_Left(pRet: Integer);
begin
  DefaultInterface.Set_Left(pRet);
end;

function TAccessReport.Get_Top: Integer;
begin
    Result := DefaultInterface.Top;
end;

procedure TAccessReport.Set_Top(pRet: Integer);
begin
  DefaultInterface.Set_Top(pRet);
end;

function TAccessReport.Get_Height: Integer;
begin
    Result := DefaultInterface.Height;
end;

procedure TAccessReport.Set_Height(pRet: Integer);
begin
  DefaultInterface.Set_Height(pRet);
end;

function TAccessReport.Get_PrintSection: WordBool;
begin
    Result := DefaultInterface.PrintSection;
end;

procedure TAccessReport.Set_PrintSection(pRet: WordBool);
begin
  DefaultInterface.Set_PrintSection(pRet);
end;

function TAccessReport.Get_NextRecord: WordBool;
begin
    Result := DefaultInterface.NextRecord;
end;

procedure TAccessReport.Set_NextRecord(pRet: WordBool);
begin
  DefaultInterface.Set_NextRecord(pRet);
end;

function TAccessReport.Get_MoveLayout: WordBool;
begin
    Result := DefaultInterface.MoveLayout;
end;

procedure TAccessReport.Set_MoveLayout(pRet: WordBool);
begin
  DefaultInterface.Set_MoveLayout(pRet);
end;

function TAccessReport.Get_FormatCount: Smallint;
begin
    Result := DefaultInterface.FormatCount;
end;

procedure TAccessReport.Set_FormatCount(pRet: Smallint);
begin
  DefaultInterface.Set_FormatCount(pRet);
end;

function TAccessReport.Get_PrintCount: Smallint;
begin
    Result := DefaultInterface.PrintCount;
end;

procedure TAccessReport.Set_PrintCount(pRet: Smallint);
begin
  DefaultInterface.Set_PrintCount(pRet);
end;

function TAccessReport.Get_Visible: WordBool;
begin
    Result := DefaultInterface.Visible;
end;

procedure TAccessReport.Set_Visible(pRet: WordBool);
begin
  DefaultInterface.Set_Visible(pRet);
end;

function TAccessReport.Get_Painting: WordBool;
begin
    Result := DefaultInterface.Painting;
end;

procedure TAccessReport.Set_Painting(pRet: WordBool);
begin
  DefaultInterface.Set_Painting(pRet);
end;

function TAccessReport.Get_PrtMip: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PrtMip;
end;

procedure TAccessReport.Set_PrtMip(pRet: OleVariant);
begin
  DefaultInterface.Set_PrtMip(pRet);
end;

function TAccessReport.Get_PrtDevMode: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PrtDevMode;
end;

procedure TAccessReport.Set_PrtDevMode(pRet: OleVariant);
begin
  DefaultInterface.Set_PrtDevMode(pRet);
end;

function TAccessReport.Get_PrtDevNames: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PrtDevNames;
end;

procedure TAccessReport.Set_PrtDevNames(pRet: OleVariant);
begin
  DefaultInterface.Set_PrtDevNames(pRet);
end;

function TAccessReport.Get_ForeColor: Integer;
begin
    Result := DefaultInterface.ForeColor;
end;

procedure TAccessReport.Set_ForeColor(pRet: Integer);
begin
  DefaultInterface.Set_ForeColor(pRet);
end;

function TAccessReport.Get_CurrentX: Single;
begin
    Result := DefaultInterface.CurrentX;
end;

procedure TAccessReport.Set_CurrentX(pRet: Single);
begin
  DefaultInterface.Set_CurrentX(pRet);
end;

function TAccessReport.Get_CurrentY: Single;
begin
    Result := DefaultInterface.CurrentY;
end;

procedure TAccessReport.Set_CurrentY(pRet: Single);
begin
  DefaultInterface.Set_CurrentY(pRet);
end;

function TAccessReport.Get_ScaleHeight: Single;
begin
    Result := DefaultInterface.ScaleHeight;
end;

procedure TAccessReport.Set_ScaleHeight(pRet: Single);
begin
  DefaultInterface.Set_ScaleHeight(pRet);
end;

function TAccessReport.Get_ScaleLeft: Single;
begin
    Result := DefaultInterface.ScaleLeft;
end;

procedure TAccessReport.Set_ScaleLeft(pRet: Single);
begin
  DefaultInterface.Set_ScaleLeft(pRet);
end;

function TAccessReport.Get_ScaleMode: Smallint;
begin
    Result := DefaultInterface.ScaleMode;
end;

procedure TAccessReport.Set_ScaleMode(pRet: Smallint);
begin
  DefaultInterface.Set_ScaleMode(pRet);
end;

function TAccessReport.Get_ScaleTop: Single;
begin
    Result := DefaultInterface.ScaleTop;
end;

procedure TAccessReport.Set_ScaleTop(pRet: Single);
begin
  DefaultInterface.Set_ScaleTop(pRet);
end;

function TAccessReport.Get_ScaleWidth: Single;
begin
    Result := DefaultInterface.ScaleWidth;
end;

procedure TAccessReport.Set_ScaleWidth(pRet: Single);
begin
  DefaultInterface.Set_ScaleWidth(pRet);
end;

function TAccessReport.Get_FontBold: Smallint;
begin
    Result := DefaultInterface.FontBold;
end;

procedure TAccessReport.Set_FontBold(pRet: Smallint);
begin
  DefaultInterface.Set_FontBold(pRet);
end;

function TAccessReport.Get_FontItalic: Smallint;
begin
    Result := DefaultInterface.FontItalic;
end;

procedure TAccessReport.Set_FontItalic(pRet: Smallint);
begin
  DefaultInterface.Set_FontItalic(pRet);
end;

function TAccessReport.Get_FontName: WideString;
begin
    Result := DefaultInterface.FontName;
end;

procedure TAccessReport.Set_FontName(const pRet: WideString);
  { Warning: The property FontName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FontName := pRet;
end;

function TAccessReport.Get_FontSize: Smallint;
begin
    Result := DefaultInterface.FontSize;
end;

procedure TAccessReport.Set_FontSize(pRet: Smallint);
begin
  DefaultInterface.Set_FontSize(pRet);
end;

function TAccessReport.Get_FontUnderline: Smallint;
begin
    Result := DefaultInterface.FontUnderline;
end;

procedure TAccessReport.Set_FontUnderline(pRet: Smallint);
begin
  DefaultInterface.Set_FontUnderline(pRet);
end;

function TAccessReport.Get_DrawMode: Smallint;
begin
    Result := DefaultInterface.DrawMode;
end;

procedure TAccessReport.Set_DrawMode(pRet: Smallint);
begin
  DefaultInterface.Set_DrawMode(pRet);
end;

function TAccessReport.Get_DrawStyle: Smallint;
begin
    Result := DefaultInterface.DrawStyle;
end;

procedure TAccessReport.Set_DrawStyle(pRet: Smallint);
begin
  DefaultInterface.Set_DrawStyle(pRet);
end;

function TAccessReport.Get_DrawWidth: Smallint;
begin
    Result := DefaultInterface.DrawWidth;
end;

procedure TAccessReport.Set_DrawWidth(pRet: Smallint);
begin
  DefaultInterface.Set_DrawWidth(pRet);
end;

function TAccessReport.Get_FillColor: Integer;
begin
    Result := DefaultInterface.FillColor;
end;

procedure TAccessReport.Set_FillColor(pRet: Integer);
begin
  DefaultInterface.Set_FillColor(pRet);
end;

function TAccessReport.Get_FillStyle: Smallint;
begin
    Result := DefaultInterface.FillStyle;
end;

procedure TAccessReport.Set_FillStyle(pRet: Smallint);
begin
  DefaultInterface.Set_FillStyle(pRet);
end;

function TAccessReport.Get__Name: WideString;
begin
    Result := DefaultInterface._Name;
end;

procedure TAccessReport.Set__Name(const pRet: WideString);
  { Warning: The property _Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant._Name := pRet;
end;

function TAccessReport.Get_PaletteSource: WideString;
begin
    Result := DefaultInterface.PaletteSource;
end;

procedure TAccessReport.Set_PaletteSource(const pRet: WideString);
  { Warning: The property PaletteSource has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PaletteSource := pRet;
end;

function TAccessReport.Get_Tag: WideString;
begin
    Result := DefaultInterface.Tag;
end;

procedure TAccessReport.Set_Tag(const pRet: WideString);
  { Warning: The property Tag has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tag := pRet;
end;

function TAccessReport.Get_PaintPalette: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PaintPalette;
end;

procedure TAccessReport.Set_PaintPalette(pRet: OleVariant);
begin
  DefaultInterface.Set_PaintPalette(pRet);
end;

function TAccessReport.Get_OnMenu: WideString;
begin
    Result := DefaultInterface.OnMenu;
end;

procedure TAccessReport.Set_OnMenu(const pRet: WideString);
  { Warning: The property OnMenu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMenu := pRet;
end;

function TAccessReport.Get_OnOpen: WideString;
begin
    Result := DefaultInterface.OnOpen;
end;

procedure TAccessReport.Set_OnOpen(const pRet: WideString);
  { Warning: The property OnOpen has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnOpen := pRet;
end;

function TAccessReport.Get_OnClose: WideString;
begin
    Result := DefaultInterface.OnClose;
end;

procedure TAccessReport.Set_OnClose(const pRet: WideString);
  { Warning: The property OnClose has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnClose := pRet;
end;

function TAccessReport.Get_OnActivate: WideString;
begin
    Result := DefaultInterface.OnActivate;
end;

procedure TAccessReport.Set_OnActivate(const pRet: WideString);
  { Warning: The property OnActivate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnActivate := pRet;
end;

function TAccessReport.Get_OnDeactivate: WideString;
begin
    Result := DefaultInterface.OnDeactivate;
end;

procedure TAccessReport.Set_OnDeactivate(const pRet: WideString);
  { Warning: The property OnDeactivate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDeactivate := pRet;
end;

function TAccessReport.Get_OnNoData: WideString;
begin
    Result := DefaultInterface.OnNoData;
end;

procedure TAccessReport.Set_OnNoData(const pRet: WideString);
  { Warning: The property OnNoData has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnNoData := pRet;
end;

function TAccessReport.Get_OnPage: WideString;
begin
    Result := DefaultInterface.OnPage;
end;

procedure TAccessReport.Set_OnPage(const pRet: WideString);
  { Warning: The property OnPage has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnPage := pRet;
end;

function TAccessReport.Get_OnError: WideString;
begin
    Result := DefaultInterface.OnError;
end;

procedure TAccessReport.Set_OnError(const pRet: WideString);
  { Warning: The property OnError has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnError := pRet;
end;

function TAccessReport.Get_Dirty: WordBool;
begin
    Result := DefaultInterface.Dirty;
end;

procedure TAccessReport.Set_Dirty(pRet: WordBool);
begin
  DefaultInterface.Set_Dirty(pRet);
end;

function TAccessReport.Get_CurrentRecord: Integer;
begin
    Result := DefaultInterface.CurrentRecord;
end;

procedure TAccessReport.Set_CurrentRecord(pRet: Integer);
begin
  DefaultInterface.Set_CurrentRecord(pRet);
end;

function TAccessReport.Get_PictureData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PictureData;
end;

procedure TAccessReport.Set_PictureData(pRet: OleVariant);
begin
  DefaultInterface.Set_PictureData(pRet);
end;

function TAccessReport.Get_PicturePalette: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PicturePalette;
end;

procedure TAccessReport.Set_PicturePalette(pRet: OleVariant);
begin
  DefaultInterface.Set_PicturePalette(pRet);
end;

function TAccessReport.Get_HasModule: WordBool;
begin
    Result := DefaultInterface.HasModule;
end;

procedure TAccessReport.Set_HasModule(pRet: WordBool);
begin
  DefaultInterface.Set_HasModule(pRet);
end;

function TAccessReport.Get_acHiddenCurrentPage: Integer;
begin
    Result := DefaultInterface.acHiddenCurrentPage;
end;

procedure TAccessReport.Set_acHiddenCurrentPage(pRet: Integer);
begin
  DefaultInterface.Set_acHiddenCurrentPage(pRet);
end;

function TAccessReport.Get_Orientation: Byte;
begin
    Result := DefaultInterface.Orientation;
end;

procedure TAccessReport.Set_Orientation(pRet: Byte);
begin
  DefaultInterface.Set_Orientation(pRet);
end;

function TAccessReport.Get_InputParameters: WideString;
begin
    Result := DefaultInterface.InputParameters;
end;

procedure TAccessReport.Set_InputParameters(const pRet: WideString);
  { Warning: The property InputParameters has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.InputParameters := pRet;
end;

function TAccessReport.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessReport.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessReport.Get_ActiveControl: AccessControl;
begin
    Result := DefaultInterface.ActiveControl;
end;

function TAccessReport.Get_DefaultControl(ControlType: Integer): AccessControl;
begin
    Result := DefaultInterface.DefaultControl[ControlType];
end;

function TAccessReport.Get__SectionOld(Index: OleVariant): AccessSection;
begin
    Result := DefaultInterface._SectionOld[Index];
end;

function TAccessReport.Get_GroupLevel(Index: Integer): AccessGroupLevel;
begin
    Result := DefaultInterface.GroupLevel[Index];
end;

function TAccessReport.Get_Report: AccessReport;
begin
    Result := DefaultInterface.Report;
end;

function TAccessReport.Get_Module: Module;
begin
    Result := DefaultInterface.Module;
end;

function TAccessReport.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessReport.Get_Controls: Controls;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessReport.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TAccessReport.Set_Name(const pbstrName: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pbstrName;
end;

function TAccessReport.Get_AutoResize: WordBool;
begin
    Result := DefaultInterface.AutoResize;
end;

procedure TAccessReport.Set_AutoResize(pRet: WordBool);
begin
  DefaultInterface.Set_AutoResize(pRet);
end;

function TAccessReport.Get_AutoCenter: WordBool;
begin
    Result := DefaultInterface.AutoCenter;
end;

procedure TAccessReport.Set_AutoCenter(pRet: WordBool);
begin
  DefaultInterface.Set_AutoCenter(pRet);
end;

function TAccessReport.Get_PopUp: WordBool;
begin
    Result := DefaultInterface.PopUp;
end;

procedure TAccessReport.Set_PopUp(pRet: WordBool);
begin
  DefaultInterface.Set_PopUp(pRet);
end;

function TAccessReport.Get_Modal: WordBool;
begin
    Result := DefaultInterface.Modal;
end;

procedure TAccessReport.Set_Modal(pRet: WordBool);
begin
  DefaultInterface.Set_Modal(pRet);
end;

function TAccessReport.Get_BorderStyle: Byte;
begin
    Result := DefaultInterface.BorderStyle;
end;

procedure TAccessReport.Set_BorderStyle(pRet: Byte);
begin
  DefaultInterface.Set_BorderStyle(pRet);
end;

function TAccessReport.Get_ControlBox: WordBool;
begin
    Result := DefaultInterface.ControlBox;
end;

procedure TAccessReport.Set_ControlBox(pRet: WordBool);
begin
  DefaultInterface.Set_ControlBox(pRet);
end;

function TAccessReport.Get_MinMaxButtons: Byte;
begin
    Result := DefaultInterface.MinMaxButtons;
end;

procedure TAccessReport.Set_MinMaxButtons(pRet: Byte);
begin
  DefaultInterface.Set_MinMaxButtons(pRet);
end;

function TAccessReport.Get_CloseButton: WordBool;
begin
    Result := DefaultInterface.CloseButton;
end;

procedure TAccessReport.Set_CloseButton(pRet: WordBool);
begin
  DefaultInterface.Set_CloseButton(pRet);
end;

function TAccessReport.Get_WindowWidth: Smallint;
begin
    Result := DefaultInterface.WindowWidth;
end;

procedure TAccessReport.Set_WindowWidth(pRet: Smallint);
begin
  DefaultInterface.Set_WindowWidth(pRet);
end;

function TAccessReport.Get_WindowHeight: Smallint;
begin
    Result := DefaultInterface.WindowHeight;
end;

procedure TAccessReport.Set_WindowHeight(pRet: Smallint);
begin
  DefaultInterface.Set_WindowHeight(pRet);
end;

function TAccessReport.Get_WindowTop: Smallint;
begin
    Result := DefaultInterface.WindowTop;
end;

function TAccessReport.Get_WindowLeft: Smallint;
begin
    Result := DefaultInterface.WindowLeft;
end;

function TAccessReport.Get_OpenArgs: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OpenArgs;
end;

procedure TAccessReport.Set_OpenArgs(pRet: OleVariant);
begin
  DefaultInterface.Set_OpenArgs(pRet);
end;

function TAccessReport.Get_Printer: _Printer;
begin
    Result := DefaultInterface.Printer;
end;

procedure TAccessReport.Set_Printer(const pRet: _Printer);
begin
  DefaultInterface.Set_Printer(pRet);
end;

procedure TAccessReport._Set_Printer(const pRet: _Printer);
  { Warning: The property Printer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Printer := pRet;
end;

function TAccessReport.Get_Moveable: WordBool;
begin
    Result := DefaultInterface.Moveable;
end;

procedure TAccessReport.Set_Moveable(pRet: WordBool);
begin
  DefaultInterface.Set_Moveable(pRet);
end;

function TAccessReport.Get_UseDefaultPrinter: WordBool;
begin
    Result := DefaultInterface.UseDefaultPrinter;
end;

procedure TAccessReport.Set_UseDefaultPrinter(pRet: WordBool);
begin
  DefaultInterface.Set_UseDefaultPrinter(pRet);
end;

function TAccessReport.Get_Recordset: IDispatch;
begin
    Result := DefaultInterface.Recordset;
end;

procedure TAccessReport._Set_Recordset(const pRet: IDispatch);
  { Warning: The property Recordset has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Recordset := pRet;
end;

function TAccessReport.Get_RecordSourceQualifier: WideString;
begin
    Result := DefaultInterface.RecordSourceQualifier;
end;

procedure TAccessReport.Set_RecordSourceQualifier(const pRet: WideString);
  { Warning: The property RecordSourceQualifier has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RecordSourceQualifier := pRet;
end;

function TAccessReport.Get_Shape: WideString;
begin
    Result := DefaultInterface.Shape;
end;

function TAccessReport.Get_FilterOnLoad: WordBool;
begin
    Result := DefaultInterface.FilterOnLoad;
end;

procedure TAccessReport.Set_FilterOnLoad(pRet: WordBool);
begin
  DefaultInterface.Set_FilterOnLoad(pRet);
end;

function TAccessReport.Get_OrderByOnLoad: WordBool;
begin
    Result := DefaultInterface.OrderByOnLoad;
end;

procedure TAccessReport.Set_OrderByOnLoad(pRet: WordBool);
begin
  DefaultInterface.Set_OrderByOnLoad(pRet);
end;

function TAccessReport.Get_DefaultView: Byte;
begin
    Result := DefaultInterface.DefaultView;
end;

procedure TAccessReport.Set_DefaultView(pRet: Byte);
begin
  DefaultInterface.Set_DefaultView(pRet);
end;

function TAccessReport.Get_AllowReportView: WordBool;
begin
    Result := DefaultInterface.AllowReportView;
end;

procedure TAccessReport.Set_AllowReportView(pRet: WordBool);
begin
  DefaultInterface.Set_AllowReportView(pRet);
end;

function TAccessReport.Get_ScrollBars: Byte;
begin
    Result := DefaultInterface.ScrollBars;
end;

procedure TAccessReport.Set_ScrollBars(pRet: Byte);
begin
  DefaultInterface.Set_ScrollBars(pRet);
end;

function TAccessReport.Get_Cycle: Byte;
begin
    Result := DefaultInterface.Cycle;
end;

procedure TAccessReport.Set_Cycle(pRet: Byte);
begin
  DefaultInterface.Set_Cycle(pRet);
end;

function TAccessReport.Get_AllowDesignChanges: WordBool;
begin
    Result := DefaultInterface.AllowDesignChanges;
end;

procedure TAccessReport.Set_AllowDesignChanges(pRet: WordBool);
begin
  DefaultInterface.Set_AllowDesignChanges(pRet);
end;

function TAccessReport.Get_OnCurrent: WideString;
begin
    Result := DefaultInterface.OnCurrent;
end;

procedure TAccessReport.Set_OnCurrent(const pRet: WideString);
  { Warning: The property OnCurrent has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnCurrent := pRet;
end;

function TAccessReport.Get_KeyPreview: WordBool;
begin
    Result := DefaultInterface.KeyPreview;
end;

procedure TAccessReport.Set_KeyPreview(pRet: WordBool);
begin
  DefaultInterface.Set_KeyPreview(pRet);
end;

function TAccessReport.Get_TimerInterval: Integer;
begin
    Result := DefaultInterface.TimerInterval;
end;

procedure TAccessReport.Set_TimerInterval(pRet: Integer);
begin
  DefaultInterface.Set_TimerInterval(pRet);
end;

function TAccessReport.Get_CurrentView: Smallint;
begin
    Result := DefaultInterface.CurrentView;
end;

procedure TAccessReport.Set_CurrentView(pRet: Smallint);
begin
  DefaultInterface.Set_CurrentView(pRet);
end;

function TAccessReport.Get_OnOpenMacro: WideString;
begin
    Result := DefaultInterface.OnOpenMacro;
end;

procedure TAccessReport.Set_OnOpenMacro(const pRet: WideString);
  { Warning: The property OnOpenMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnOpenMacro := pRet;
end;

function TAccessReport.Get_OnCloseMacro: WideString;
begin
    Result := DefaultInterface.OnCloseMacro;
end;

procedure TAccessReport.Set_OnCloseMacro(const pRet: WideString);
  { Warning: The property OnCloseMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnCloseMacro := pRet;
end;

function TAccessReport.Get_OnActivateMacro: WideString;
begin
    Result := DefaultInterface.OnActivateMacro;
end;

procedure TAccessReport.Set_OnActivateMacro(const pRet: WideString);
  { Warning: The property OnActivateMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnActivateMacro := pRet;
end;

function TAccessReport.Get_OnDeactivateMacro: WideString;
begin
    Result := DefaultInterface.OnDeactivateMacro;
end;

procedure TAccessReport.Set_OnDeactivateMacro(const pRet: WideString);
  { Warning: The property OnDeactivateMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDeactivateMacro := pRet;
end;

function TAccessReport.Get_OnNoDataMacro: WideString;
begin
    Result := DefaultInterface.OnNoDataMacro;
end;

procedure TAccessReport.Set_OnNoDataMacro(const pRet: WideString);
  { Warning: The property OnNoDataMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnNoDataMacro := pRet;
end;

function TAccessReport.Get_OnPageMacro: WideString;
begin
    Result := DefaultInterface.OnPageMacro;
end;

procedure TAccessReport.Set_OnPageMacro(const pRet: WideString);
  { Warning: The property OnPageMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnPageMacro := pRet;
end;

function TAccessReport.Get_OnErrorMacro: WideString;
begin
    Result := DefaultInterface.OnErrorMacro;
end;

procedure TAccessReport.Set_OnErrorMacro(const pRet: WideString);
  { Warning: The property OnErrorMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnErrorMacro := pRet;
end;

function TAccessReport.Get_OnCurrentMacro: WideString;
begin
    Result := DefaultInterface.OnCurrentMacro;
end;

procedure TAccessReport.Set_OnCurrentMacro(const pRet: WideString);
  { Warning: The property OnCurrentMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnCurrentMacro := pRet;
end;

function TAccessReport.Get_OnLoadMacro: WideString;
begin
    Result := DefaultInterface.OnLoadMacro;
end;

procedure TAccessReport.Set_OnLoadMacro(const pRet: WideString);
  { Warning: The property OnLoadMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnLoadMacro := pRet;
end;

function TAccessReport.Get_OnResizeMacro: WideString;
begin
    Result := DefaultInterface.OnResizeMacro;
end;

procedure TAccessReport.Set_OnResizeMacro(const pRet: WideString);
  { Warning: The property OnResizeMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnResizeMacro := pRet;
end;

function TAccessReport.Get_OnUnloadMacro: WideString;
begin
    Result := DefaultInterface.OnUnloadMacro;
end;

procedure TAccessReport.Set_OnUnloadMacro(const pRet: WideString);
  { Warning: The property OnUnloadMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnUnloadMacro := pRet;
end;

function TAccessReport.Get_OnGotFocusMacro: WideString;
begin
    Result := DefaultInterface.OnGotFocusMacro;
end;

procedure TAccessReport.Set_OnGotFocusMacro(const pRet: WideString);
  { Warning: The property OnGotFocusMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnGotFocusMacro := pRet;
end;

function TAccessReport.Get_OnLostFocusMacro: WideString;
begin
    Result := DefaultInterface.OnLostFocusMacro;
end;

procedure TAccessReport.Set_OnLostFocusMacro(const pRet: WideString);
  { Warning: The property OnLostFocusMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnLostFocusMacro := pRet;
end;

function TAccessReport.Get_OnClickMacro: WideString;
begin
    Result := DefaultInterface.OnClickMacro;
end;

procedure TAccessReport.Set_OnClickMacro(const pRet: WideString);
  { Warning: The property OnClickMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnClickMacro := pRet;
end;

function TAccessReport.Get_OnDblClickMacro: WideString;
begin
    Result := DefaultInterface.OnDblClickMacro;
end;

procedure TAccessReport.Set_OnDblClickMacro(const pRet: WideString);
  { Warning: The property OnDblClickMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDblClickMacro := pRet;
end;

function TAccessReport.Get_OnMouseDownMacro: WideString;
begin
    Result := DefaultInterface.OnMouseDownMacro;
end;

procedure TAccessReport.Set_OnMouseDownMacro(const pRet: WideString);
  { Warning: The property OnMouseDownMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseDownMacro := pRet;
end;

function TAccessReport.Get_OnMouseMoveMacro: WideString;
begin
    Result := DefaultInterface.OnMouseMoveMacro;
end;

procedure TAccessReport.Set_OnMouseMoveMacro(const pRet: WideString);
  { Warning: The property OnMouseMoveMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseMoveMacro := pRet;
end;

function TAccessReport.Get_OnMouseUpMacro: WideString;
begin
    Result := DefaultInterface.OnMouseUpMacro;
end;

procedure TAccessReport.Set_OnMouseUpMacro(const pRet: WideString);
  { Warning: The property OnMouseUpMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseUpMacro := pRet;
end;

function TAccessReport.Get_OnKeyDownMacro: WideString;
begin
    Result := DefaultInterface.OnKeyDownMacro;
end;

procedure TAccessReport.Set_OnKeyDownMacro(const pRet: WideString);
  { Warning: The property OnKeyDownMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyDownMacro := pRet;
end;

function TAccessReport.Get_OnKeyUpMacro: WideString;
begin
    Result := DefaultInterface.OnKeyUpMacro;
end;

procedure TAccessReport.Set_OnKeyUpMacro(const pRet: WideString);
  { Warning: The property OnKeyUpMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyUpMacro := pRet;
end;

function TAccessReport.Get_OnKeyPressMacro: WideString;
begin
    Result := DefaultInterface.OnKeyPressMacro;
end;

procedure TAccessReport.Set_OnKeyPressMacro(const pRet: WideString);
  { Warning: The property OnKeyPressMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyPressMacro := pRet;
end;

function TAccessReport.Get_OnFilterMacro: WideString;
begin
    Result := DefaultInterface.OnFilterMacro;
end;

procedure TAccessReport.Set_OnFilterMacro(const pRet: WideString);
  { Warning: The property OnFilterMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnFilterMacro := pRet;
end;

function TAccessReport.Get_OnApplyFilterMacro: WideString;
begin
    Result := DefaultInterface.OnApplyFilterMacro;
end;

procedure TAccessReport.Set_OnApplyFilterMacro(const pRet: WideString);
  { Warning: The property OnApplyFilterMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnApplyFilterMacro := pRet;
end;

function TAccessReport.Get_OnTimerMacro: WideString;
begin
    Result := DefaultInterface.OnTimerMacro;
end;

procedure TAccessReport.Set_OnTimerMacro(const pRet: WideString);
  { Warning: The property OnTimerMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnTimerMacro := pRet;
end;

function TAccessReport.Get_MouseWheelMacro: WideString;
begin
    Result := DefaultInterface.MouseWheelMacro;
end;

procedure TAccessReport.Set_MouseWheelMacro(const pRet: WideString);
  { Warning: The property MouseWheelMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MouseWheelMacro := pRet;
end;

function TAccessReport.Get_ShowPageMargins: WordBool;
begin
    Result := DefaultInterface.ShowPageMargins;
end;

procedure TAccessReport.Set_ShowPageMargins(pRet: WordBool);
begin
  DefaultInterface.Set_ShowPageMargins(pRet);
end;

function TAccessReport.Get_FitToPage: WordBool;
begin
    Result := DefaultInterface.FitToPage;
end;

procedure TAccessReport.Set_FitToPage(pRet: WordBool);
begin
  DefaultInterface.Set_FitToPage(pRet);
end;

function TAccessReport.Get_AllowLayoutView: WordBool;
begin
    Result := DefaultInterface.AllowLayoutView;
end;

procedure TAccessReport.Set_AllowLayoutView(pRet: WordBool);
begin
  DefaultInterface.Set_AllowLayoutView(pRet);
end;

function TAccessReport.Get_OnLoad: WideString;
begin
    Result := DefaultInterface.OnLoad;
end;

procedure TAccessReport.Set_OnLoad(const pRet: WideString);
  { Warning: The property OnLoad has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnLoad := pRet;
end;

function TAccessReport.Get_OnResize: WideString;
begin
    Result := DefaultInterface.OnResize;
end;

procedure TAccessReport.Set_OnResize(const pRet: WideString);
  { Warning: The property OnResize has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnResize := pRet;
end;

function TAccessReport.Get_OnUnload: WideString;
begin
    Result := DefaultInterface.OnUnload;
end;

procedure TAccessReport.Set_OnUnload(const pRet: WideString);
  { Warning: The property OnUnload has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnUnload := pRet;
end;

function TAccessReport.Get_OnGotFocus: WideString;
begin
    Result := DefaultInterface.OnGotFocus;
end;

procedure TAccessReport.Set_OnGotFocus(const pRet: WideString);
  { Warning: The property OnGotFocus has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnGotFocus := pRet;
end;

function TAccessReport.Get_OnLostFocus: WideString;
begin
    Result := DefaultInterface.OnLostFocus;
end;

procedure TAccessReport.Set_OnLostFocus(const pRet: WideString);
  { Warning: The property OnLostFocus has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnLostFocus := pRet;
end;

function TAccessReport.Get_OnClick: WideString;
begin
    Result := DefaultInterface.OnClick;
end;

procedure TAccessReport.Set_OnClick(const pRet: WideString);
  { Warning: The property OnClick has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnClick := pRet;
end;

function TAccessReport.Get_OnDblClick: WideString;
begin
    Result := DefaultInterface.OnDblClick;
end;

procedure TAccessReport.Set_OnDblClick(const pRet: WideString);
  { Warning: The property OnDblClick has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDblClick := pRet;
end;

function TAccessReport.Get_OnMouseDown: WideString;
begin
    Result := DefaultInterface.OnMouseDown;
end;

procedure TAccessReport.Set_OnMouseDown(const pRet: WideString);
  { Warning: The property OnMouseDown has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseDown := pRet;
end;

function TAccessReport.Get_OnMouseMove: WideString;
begin
    Result := DefaultInterface.OnMouseMove;
end;

procedure TAccessReport.Set_OnMouseMove(const pRet: WideString);
  { Warning: The property OnMouseMove has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseMove := pRet;
end;

function TAccessReport.Get_OnMouseUp: WideString;
begin
    Result := DefaultInterface.OnMouseUp;
end;

procedure TAccessReport.Set_OnMouseUp(const pRet: WideString);
  { Warning: The property OnMouseUp has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseUp := pRet;
end;

function TAccessReport.Get_OnKeyDown: WideString;
begin
    Result := DefaultInterface.OnKeyDown;
end;

procedure TAccessReport.Set_OnKeyDown(const pRet: WideString);
  { Warning: The property OnKeyDown has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyDown := pRet;
end;

function TAccessReport.Get_OnKeyUp: WideString;
begin
    Result := DefaultInterface.OnKeyUp;
end;

procedure TAccessReport.Set_OnKeyUp(const pRet: WideString);
  { Warning: The property OnKeyUp has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyUp := pRet;
end;

function TAccessReport.Get_OnKeyPress: WideString;
begin
    Result := DefaultInterface.OnKeyPress;
end;

procedure TAccessReport.Set_OnKeyPress(const pRet: WideString);
  { Warning: The property OnKeyPress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyPress := pRet;
end;

function TAccessReport.Get_OnFilter: WideString;
begin
    Result := DefaultInterface.OnFilter;
end;

procedure TAccessReport.Set_OnFilter(const pRet: WideString);
  { Warning: The property OnFilter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnFilter := pRet;
end;

function TAccessReport.Get_OnApplyFilter: WideString;
begin
    Result := DefaultInterface.OnApplyFilter;
end;

procedure TAccessReport.Set_OnApplyFilter(const pRet: WideString);
  { Warning: The property OnApplyFilter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnApplyFilter := pRet;
end;

function TAccessReport.Get_OnTimer: WideString;
begin
    Result := DefaultInterface.OnTimer;
end;

procedure TAccessReport.Set_OnTimer(const pRet: WideString);
  { Warning: The property OnTimer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnTimer := pRet;
end;

function TAccessReport.Get_MouseWheel: WideString;
begin
    Result := DefaultInterface.MouseWheel;
end;

procedure TAccessReport.Set_MouseWheel(const pRet: WideString);
  { Warning: The property MouseWheel has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MouseWheel := pRet;
end;

function TAccessReport.Get_DisplayOnSharePointSite: Byte;
begin
    Result := DefaultInterface.DisplayOnSharePointSite;
end;

procedure TAccessReport.Set_DisplayOnSharePointSite(pRet: Byte);
begin
  DefaultInterface.Set_DisplayOnSharePointSite(pRet);
end;

function TAccessReport.Get_Section(Index: OleVariant): _Section;
begin
    Result := DefaultInterface.Section[Index];
end;

function TAccessReport.Get_RibbonName: WideString;
begin
    Result := DefaultInterface.RibbonName;
end;

procedure TAccessReport.Set_RibbonName(const pRet: WideString);
  { Warning: The property RibbonName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RibbonName := pRet;
end;

procedure TAccessReport.Circle(flags: Smallint; X: Single; Y: Single; radius: Single; 
                               color: Integer; start: Single; end_: Single; aspect: Single);
begin
  DefaultInterface.Circle(flags, X, Y, radius, color, start, end_, aspect);
end;

procedure TAccessReport.Line(flags: Smallint; x1: Single; y1: Single; x2: Single; y2: Single; 
                             color: Integer);
begin
  DefaultInterface.Line(flags, x1, y1, x2, y2, color);
end;

procedure TAccessReport.PSet(flags: Smallint; X: Single; Y: Single; color: Integer);
begin
  DefaultInterface.PSet(flags, X, Y, color);
end;

procedure TAccessReport.Scale(flags: Smallint; x1: Single; y1: Single; x2: Single; y2: Single);
begin
  DefaultInterface.Scale(flags, x1, y1, x2, y2);
end;

function TAccessReport.TextWidth(const Expr: WideString): Single;
begin
  Result := DefaultInterface.TextWidth(Expr);
end;

function TAccessReport.TextHeight(const Expr: WideString): Single;
begin
  Result := DefaultInterface.TextHeight(Expr);
end;

procedure TAccessReport.Print(const Expr: WideString);
begin
  DefaultInterface.Print(Expr);
end;

function TAccessReport._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessReport.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessReport.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessReport.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessReport.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                             Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

procedure TAccessReport.Requery;
begin
  DefaultInterface.Requery;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAccessReportProperties.Create(AServer: TAccessReport);
begin
  inherited Create;
  FServer := AServer;
end;

function TAccessReportProperties.GetDefaultInterface: _Report3;
begin
  Result := FServer.DefaultInterface;
end;

function TAccessReportProperties.Get_FormName: WideString;
begin
    Result := DefaultInterface.FormName;
end;

procedure TAccessReportProperties.Set_FormName(const pRet: WideString);
  { Warning: The property FormName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FormName := pRet;
end;

function TAccessReportProperties.Get_RecordSource: WideString;
begin
    Result := DefaultInterface.RecordSource;
end;

procedure TAccessReportProperties.Set_RecordSource(const pRet: WideString);
  { Warning: The property RecordSource has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RecordSource := pRet;
end;

function TAccessReportProperties.Get_Filter: WideString;
begin
    Result := DefaultInterface.Filter;
end;

procedure TAccessReportProperties.Set_Filter(const pRet: WideString);
  { Warning: The property Filter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Filter := pRet;
end;

function TAccessReportProperties.Get_FilterOn: WordBool;
begin
    Result := DefaultInterface.FilterOn;
end;

procedure TAccessReportProperties.Set_FilterOn(pRet: WordBool);
begin
  DefaultInterface.Set_FilterOn(pRet);
end;

function TAccessReportProperties.Get_OrderBy: WideString;
begin
    Result := DefaultInterface.OrderBy;
end;

procedure TAccessReportProperties.Set_OrderBy(const pRet: WideString);
  { Warning: The property OrderBy has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OrderBy := pRet;
end;

function TAccessReportProperties.Get_OrderByOn: WordBool;
begin
    Result := DefaultInterface.OrderByOn;
end;

procedure TAccessReportProperties.Set_OrderByOn(pRet: WordBool);
begin
  DefaultInterface.Set_OrderByOn(pRet);
end;

function TAccessReportProperties.Get_ServerFilter: WideString;
begin
    Result := DefaultInterface.ServerFilter;
end;

procedure TAccessReportProperties.Set_ServerFilter(const pRet: WideString);
  { Warning: The property ServerFilter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ServerFilter := pRet;
end;

function TAccessReportProperties.Get_Caption: WideString;
begin
    Result := DefaultInterface.Caption;
end;

procedure TAccessReportProperties.Set_Caption(const pRet: WideString);
  { Warning: The property Caption has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Caption := pRet;
end;

function TAccessReportProperties.Get_RecordLocks: Byte;
begin
    Result := DefaultInterface.RecordLocks;
end;

procedure TAccessReportProperties.Set_RecordLocks(pRet: Byte);
begin
  DefaultInterface.Set_RecordLocks(pRet);
end;

function TAccessReportProperties.Get_PageHeader: Byte;
begin
    Result := DefaultInterface.PageHeader;
end;

procedure TAccessReportProperties.Set_PageHeader(pRet: Byte);
begin
  DefaultInterface.Set_PageHeader(pRet);
end;

function TAccessReportProperties.Get_PageFooter: Byte;
begin
    Result := DefaultInterface.PageFooter;
end;

procedure TAccessReportProperties.Set_PageFooter(pRet: Byte);
begin
  DefaultInterface.Set_PageFooter(pRet);
end;

function TAccessReportProperties.Get_DateGrouping: Byte;
begin
    Result := DefaultInterface.DateGrouping;
end;

procedure TAccessReportProperties.Set_DateGrouping(pRet: Byte);
begin
  DefaultInterface.Set_DateGrouping(pRet);
end;

function TAccessReportProperties.Get_GrpKeepTogether: Byte;
begin
    Result := DefaultInterface.GrpKeepTogether;
end;

procedure TAccessReportProperties.Set_GrpKeepTogether(pRet: Byte);
begin
  DefaultInterface.Set_GrpKeepTogether(pRet);
end;

function TAccessReportProperties.Get_MinButton: WordBool;
begin
    Result := DefaultInterface.MinButton;
end;

procedure TAccessReportProperties.Set_MinButton(pRet: WordBool);
begin
  DefaultInterface.Set_MinButton(pRet);
end;

function TAccessReportProperties.Get_MaxButton: WordBool;
begin
    Result := DefaultInterface.MaxButton;
end;

procedure TAccessReportProperties.Set_MaxButton(pRet: WordBool);
begin
  DefaultInterface.Set_MaxButton(pRet);
end;

function TAccessReportProperties.Get_Width: Smallint;
begin
    Result := DefaultInterface.Width;
end;

procedure TAccessReportProperties.Set_Width(pRet: Smallint);
begin
  DefaultInterface.Set_Width(pRet);
end;

function TAccessReportProperties.Get_Picture: WideString;
begin
    Result := DefaultInterface.Picture;
end;

procedure TAccessReportProperties.Set_Picture(const pRet: WideString);
  { Warning: The property Picture has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Picture := pRet;
end;

function TAccessReportProperties.Get_PictureType: Byte;
begin
    Result := DefaultInterface.PictureType;
end;

procedure TAccessReportProperties.Set_PictureType(pRet: Byte);
begin
  DefaultInterface.Set_PictureType(pRet);
end;

function TAccessReportProperties.Get_PictureSizeMode: Byte;
begin
    Result := DefaultInterface.PictureSizeMode;
end;

procedure TAccessReportProperties.Set_PictureSizeMode(pRet: Byte);
begin
  DefaultInterface.Set_PictureSizeMode(pRet);
end;

function TAccessReportProperties.Get_PictureAlignment: Byte;
begin
    Result := DefaultInterface.PictureAlignment;
end;

procedure TAccessReportProperties.Set_PictureAlignment(pRet: Byte);
begin
  DefaultInterface.Set_PictureAlignment(pRet);
end;

function TAccessReportProperties.Get_PictureTiling: WordBool;
begin
    Result := DefaultInterface.PictureTiling;
end;

procedure TAccessReportProperties.Set_PictureTiling(pRet: WordBool);
begin
  DefaultInterface.Set_PictureTiling(pRet);
end;

function TAccessReportProperties.Get_PicturePages: Byte;
begin
    Result := DefaultInterface.PicturePages;
end;

procedure TAccessReportProperties.Set_PicturePages(pRet: Byte);
begin
  DefaultInterface.Set_PicturePages(pRet);
end;

function TAccessReportProperties.Get_MenuBar: WideString;
begin
    Result := DefaultInterface.MenuBar;
end;

procedure TAccessReportProperties.Set_MenuBar(const pRet: WideString);
  { Warning: The property MenuBar has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MenuBar := pRet;
end;

function TAccessReportProperties.Get_Toolbar: WideString;
begin
    Result := DefaultInterface.Toolbar;
end;

procedure TAccessReportProperties.Set_Toolbar(const pRet: WideString);
  { Warning: The property Toolbar has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Toolbar := pRet;
end;

function TAccessReportProperties.Get_ShortcutMenuBar: WideString;
begin
    Result := DefaultInterface.ShortcutMenuBar;
end;

procedure TAccessReportProperties.Set_ShortcutMenuBar(const pRet: WideString);
  { Warning: The property ShortcutMenuBar has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ShortcutMenuBar := pRet;
end;

function TAccessReportProperties.Get_GridX: Smallint;
begin
    Result := DefaultInterface.GridX;
end;

procedure TAccessReportProperties.Set_GridX(pRet: Smallint);
begin
  DefaultInterface.Set_GridX(pRet);
end;

function TAccessReportProperties.Get_GridY: Smallint;
begin
    Result := DefaultInterface.GridY;
end;

procedure TAccessReportProperties.Set_GridY(pRet: Smallint);
begin
  DefaultInterface.Set_GridY(pRet);
end;

function TAccessReportProperties.Get_LayoutForPrint: WordBool;
begin
    Result := DefaultInterface.LayoutForPrint;
end;

procedure TAccessReportProperties.Set_LayoutForPrint(pRet: WordBool);
begin
  DefaultInterface.Set_LayoutForPrint(pRet);
end;

function TAccessReportProperties.Get_FastLaserPrinting: WordBool;
begin
    Result := DefaultInterface.FastLaserPrinting;
end;

procedure TAccessReportProperties.Set_FastLaserPrinting(pRet: WordBool);
begin
  DefaultInterface.Set_FastLaserPrinting(pRet);
end;

function TAccessReportProperties.Get_HelpFile: WideString;
begin
    Result := DefaultInterface.HelpFile;
end;

procedure TAccessReportProperties.Set_HelpFile(const pRet: WideString);
  { Warning: The property HelpFile has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HelpFile := pRet;
end;

function TAccessReportProperties.Get_HelpContextId: Integer;
begin
    Result := DefaultInterface.HelpContextId;
end;

procedure TAccessReportProperties.Set_HelpContextId(pRet: Integer);
begin
  DefaultInterface.Set_HelpContextId(pRet);
end;

function TAccessReportProperties.Get_Hwnd: Integer;
begin
    Result := DefaultInterface.Hwnd;
end;

procedure TAccessReportProperties.Set_Hwnd(pRet: Integer);
begin
  DefaultInterface.Set_Hwnd(pRet);
end;

function TAccessReportProperties.Get_Count: Smallint;
begin
    Result := DefaultInterface.Count;
end;

procedure TAccessReportProperties.Set_Count(pRet: Smallint);
begin
  DefaultInterface.Set_Count(pRet);
end;

function TAccessReportProperties.Get_Page: Integer;
begin
    Result := DefaultInterface.Page;
end;

procedure TAccessReportProperties.Set_Page(pRet: Integer);
begin
  DefaultInterface.Set_Page(pRet);
end;

function TAccessReportProperties.Get_Pages: Smallint;
begin
    Result := DefaultInterface.Pages;
end;

procedure TAccessReportProperties.Set_Pages(pRet: Smallint);
begin
  DefaultInterface.Set_Pages(pRet);
end;

function TAccessReportProperties.Get_LogicalPageWidth: Integer;
begin
    Result := DefaultInterface.LogicalPageWidth;
end;

procedure TAccessReportProperties.Set_LogicalPageWidth(pRet: Integer);
begin
  DefaultInterface.Set_LogicalPageWidth(pRet);
end;

function TAccessReportProperties.Get_LogicalPageHeight: Integer;
begin
    Result := DefaultInterface.LogicalPageHeight;
end;

procedure TAccessReportProperties.Set_LogicalPageHeight(pRet: Integer);
begin
  DefaultInterface.Set_LogicalPageHeight(pRet);
end;

function TAccessReportProperties.Get_ZoomControl: Integer;
begin
    Result := DefaultInterface.ZoomControl;
end;

procedure TAccessReportProperties.Set_ZoomControl(pRet: Integer);
begin
  DefaultInterface.Set_ZoomControl(pRet);
end;

function TAccessReportProperties.Get_HasData: Integer;
begin
    Result := DefaultInterface.HasData;
end;

procedure TAccessReportProperties.Set_HasData(pRet: Integer);
begin
  DefaultInterface.Set_HasData(pRet);
end;

function TAccessReportProperties.Get_Left: Integer;
begin
    Result := DefaultInterface.Left;
end;

procedure TAccessReportProperties.Set_Left(pRet: Integer);
begin
  DefaultInterface.Set_Left(pRet);
end;

function TAccessReportProperties.Get_Top: Integer;
begin
    Result := DefaultInterface.Top;
end;

procedure TAccessReportProperties.Set_Top(pRet: Integer);
begin
  DefaultInterface.Set_Top(pRet);
end;

function TAccessReportProperties.Get_Height: Integer;
begin
    Result := DefaultInterface.Height;
end;

procedure TAccessReportProperties.Set_Height(pRet: Integer);
begin
  DefaultInterface.Set_Height(pRet);
end;

function TAccessReportProperties.Get_PrintSection: WordBool;
begin
    Result := DefaultInterface.PrintSection;
end;

procedure TAccessReportProperties.Set_PrintSection(pRet: WordBool);
begin
  DefaultInterface.Set_PrintSection(pRet);
end;

function TAccessReportProperties.Get_NextRecord: WordBool;
begin
    Result := DefaultInterface.NextRecord;
end;

procedure TAccessReportProperties.Set_NextRecord(pRet: WordBool);
begin
  DefaultInterface.Set_NextRecord(pRet);
end;

function TAccessReportProperties.Get_MoveLayout: WordBool;
begin
    Result := DefaultInterface.MoveLayout;
end;

procedure TAccessReportProperties.Set_MoveLayout(pRet: WordBool);
begin
  DefaultInterface.Set_MoveLayout(pRet);
end;

function TAccessReportProperties.Get_FormatCount: Smallint;
begin
    Result := DefaultInterface.FormatCount;
end;

procedure TAccessReportProperties.Set_FormatCount(pRet: Smallint);
begin
  DefaultInterface.Set_FormatCount(pRet);
end;

function TAccessReportProperties.Get_PrintCount: Smallint;
begin
    Result := DefaultInterface.PrintCount;
end;

procedure TAccessReportProperties.Set_PrintCount(pRet: Smallint);
begin
  DefaultInterface.Set_PrintCount(pRet);
end;

function TAccessReportProperties.Get_Visible: WordBool;
begin
    Result := DefaultInterface.Visible;
end;

procedure TAccessReportProperties.Set_Visible(pRet: WordBool);
begin
  DefaultInterface.Set_Visible(pRet);
end;

function TAccessReportProperties.Get_Painting: WordBool;
begin
    Result := DefaultInterface.Painting;
end;

procedure TAccessReportProperties.Set_Painting(pRet: WordBool);
begin
  DefaultInterface.Set_Painting(pRet);
end;

function TAccessReportProperties.Get_PrtMip: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PrtMip;
end;

procedure TAccessReportProperties.Set_PrtMip(pRet: OleVariant);
begin
  DefaultInterface.Set_PrtMip(pRet);
end;

function TAccessReportProperties.Get_PrtDevMode: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PrtDevMode;
end;

procedure TAccessReportProperties.Set_PrtDevMode(pRet: OleVariant);
begin
  DefaultInterface.Set_PrtDevMode(pRet);
end;

function TAccessReportProperties.Get_PrtDevNames: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PrtDevNames;
end;

procedure TAccessReportProperties.Set_PrtDevNames(pRet: OleVariant);
begin
  DefaultInterface.Set_PrtDevNames(pRet);
end;

function TAccessReportProperties.Get_ForeColor: Integer;
begin
    Result := DefaultInterface.ForeColor;
end;

procedure TAccessReportProperties.Set_ForeColor(pRet: Integer);
begin
  DefaultInterface.Set_ForeColor(pRet);
end;

function TAccessReportProperties.Get_CurrentX: Single;
begin
    Result := DefaultInterface.CurrentX;
end;

procedure TAccessReportProperties.Set_CurrentX(pRet: Single);
begin
  DefaultInterface.Set_CurrentX(pRet);
end;

function TAccessReportProperties.Get_CurrentY: Single;
begin
    Result := DefaultInterface.CurrentY;
end;

procedure TAccessReportProperties.Set_CurrentY(pRet: Single);
begin
  DefaultInterface.Set_CurrentY(pRet);
end;

function TAccessReportProperties.Get_ScaleHeight: Single;
begin
    Result := DefaultInterface.ScaleHeight;
end;

procedure TAccessReportProperties.Set_ScaleHeight(pRet: Single);
begin
  DefaultInterface.Set_ScaleHeight(pRet);
end;

function TAccessReportProperties.Get_ScaleLeft: Single;
begin
    Result := DefaultInterface.ScaleLeft;
end;

procedure TAccessReportProperties.Set_ScaleLeft(pRet: Single);
begin
  DefaultInterface.Set_ScaleLeft(pRet);
end;

function TAccessReportProperties.Get_ScaleMode: Smallint;
begin
    Result := DefaultInterface.ScaleMode;
end;

procedure TAccessReportProperties.Set_ScaleMode(pRet: Smallint);
begin
  DefaultInterface.Set_ScaleMode(pRet);
end;

function TAccessReportProperties.Get_ScaleTop: Single;
begin
    Result := DefaultInterface.ScaleTop;
end;

procedure TAccessReportProperties.Set_ScaleTop(pRet: Single);
begin
  DefaultInterface.Set_ScaleTop(pRet);
end;

function TAccessReportProperties.Get_ScaleWidth: Single;
begin
    Result := DefaultInterface.ScaleWidth;
end;

procedure TAccessReportProperties.Set_ScaleWidth(pRet: Single);
begin
  DefaultInterface.Set_ScaleWidth(pRet);
end;

function TAccessReportProperties.Get_FontBold: Smallint;
begin
    Result := DefaultInterface.FontBold;
end;

procedure TAccessReportProperties.Set_FontBold(pRet: Smallint);
begin
  DefaultInterface.Set_FontBold(pRet);
end;

function TAccessReportProperties.Get_FontItalic: Smallint;
begin
    Result := DefaultInterface.FontItalic;
end;

procedure TAccessReportProperties.Set_FontItalic(pRet: Smallint);
begin
  DefaultInterface.Set_FontItalic(pRet);
end;

function TAccessReportProperties.Get_FontName: WideString;
begin
    Result := DefaultInterface.FontName;
end;

procedure TAccessReportProperties.Set_FontName(const pRet: WideString);
  { Warning: The property FontName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FontName := pRet;
end;

function TAccessReportProperties.Get_FontSize: Smallint;
begin
    Result := DefaultInterface.FontSize;
end;

procedure TAccessReportProperties.Set_FontSize(pRet: Smallint);
begin
  DefaultInterface.Set_FontSize(pRet);
end;

function TAccessReportProperties.Get_FontUnderline: Smallint;
begin
    Result := DefaultInterface.FontUnderline;
end;

procedure TAccessReportProperties.Set_FontUnderline(pRet: Smallint);
begin
  DefaultInterface.Set_FontUnderline(pRet);
end;

function TAccessReportProperties.Get_DrawMode: Smallint;
begin
    Result := DefaultInterface.DrawMode;
end;

procedure TAccessReportProperties.Set_DrawMode(pRet: Smallint);
begin
  DefaultInterface.Set_DrawMode(pRet);
end;

function TAccessReportProperties.Get_DrawStyle: Smallint;
begin
    Result := DefaultInterface.DrawStyle;
end;

procedure TAccessReportProperties.Set_DrawStyle(pRet: Smallint);
begin
  DefaultInterface.Set_DrawStyle(pRet);
end;

function TAccessReportProperties.Get_DrawWidth: Smallint;
begin
    Result := DefaultInterface.DrawWidth;
end;

procedure TAccessReportProperties.Set_DrawWidth(pRet: Smallint);
begin
  DefaultInterface.Set_DrawWidth(pRet);
end;

function TAccessReportProperties.Get_FillColor: Integer;
begin
    Result := DefaultInterface.FillColor;
end;

procedure TAccessReportProperties.Set_FillColor(pRet: Integer);
begin
  DefaultInterface.Set_FillColor(pRet);
end;

function TAccessReportProperties.Get_FillStyle: Smallint;
begin
    Result := DefaultInterface.FillStyle;
end;

procedure TAccessReportProperties.Set_FillStyle(pRet: Smallint);
begin
  DefaultInterface.Set_FillStyle(pRet);
end;

function TAccessReportProperties.Get__Name: WideString;
begin
    Result := DefaultInterface._Name;
end;

procedure TAccessReportProperties.Set__Name(const pRet: WideString);
  { Warning: The property _Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant._Name := pRet;
end;

function TAccessReportProperties.Get_PaletteSource: WideString;
begin
    Result := DefaultInterface.PaletteSource;
end;

procedure TAccessReportProperties.Set_PaletteSource(const pRet: WideString);
  { Warning: The property PaletteSource has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PaletteSource := pRet;
end;

function TAccessReportProperties.Get_Tag: WideString;
begin
    Result := DefaultInterface.Tag;
end;

procedure TAccessReportProperties.Set_Tag(const pRet: WideString);
  { Warning: The property Tag has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tag := pRet;
end;

function TAccessReportProperties.Get_PaintPalette: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PaintPalette;
end;

procedure TAccessReportProperties.Set_PaintPalette(pRet: OleVariant);
begin
  DefaultInterface.Set_PaintPalette(pRet);
end;

function TAccessReportProperties.Get_OnMenu: WideString;
begin
    Result := DefaultInterface.OnMenu;
end;

procedure TAccessReportProperties.Set_OnMenu(const pRet: WideString);
  { Warning: The property OnMenu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMenu := pRet;
end;

function TAccessReportProperties.Get_OnOpen: WideString;
begin
    Result := DefaultInterface.OnOpen;
end;

procedure TAccessReportProperties.Set_OnOpen(const pRet: WideString);
  { Warning: The property OnOpen has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnOpen := pRet;
end;

function TAccessReportProperties.Get_OnClose: WideString;
begin
    Result := DefaultInterface.OnClose;
end;

procedure TAccessReportProperties.Set_OnClose(const pRet: WideString);
  { Warning: The property OnClose has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnClose := pRet;
end;

function TAccessReportProperties.Get_OnActivate: WideString;
begin
    Result := DefaultInterface.OnActivate;
end;

procedure TAccessReportProperties.Set_OnActivate(const pRet: WideString);
  { Warning: The property OnActivate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnActivate := pRet;
end;

function TAccessReportProperties.Get_OnDeactivate: WideString;
begin
    Result := DefaultInterface.OnDeactivate;
end;

procedure TAccessReportProperties.Set_OnDeactivate(const pRet: WideString);
  { Warning: The property OnDeactivate has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDeactivate := pRet;
end;

function TAccessReportProperties.Get_OnNoData: WideString;
begin
    Result := DefaultInterface.OnNoData;
end;

procedure TAccessReportProperties.Set_OnNoData(const pRet: WideString);
  { Warning: The property OnNoData has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnNoData := pRet;
end;

function TAccessReportProperties.Get_OnPage: WideString;
begin
    Result := DefaultInterface.OnPage;
end;

procedure TAccessReportProperties.Set_OnPage(const pRet: WideString);
  { Warning: The property OnPage has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnPage := pRet;
end;

function TAccessReportProperties.Get_OnError: WideString;
begin
    Result := DefaultInterface.OnError;
end;

procedure TAccessReportProperties.Set_OnError(const pRet: WideString);
  { Warning: The property OnError has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnError := pRet;
end;

function TAccessReportProperties.Get_Dirty: WordBool;
begin
    Result := DefaultInterface.Dirty;
end;

procedure TAccessReportProperties.Set_Dirty(pRet: WordBool);
begin
  DefaultInterface.Set_Dirty(pRet);
end;

function TAccessReportProperties.Get_CurrentRecord: Integer;
begin
    Result := DefaultInterface.CurrentRecord;
end;

procedure TAccessReportProperties.Set_CurrentRecord(pRet: Integer);
begin
  DefaultInterface.Set_CurrentRecord(pRet);
end;

function TAccessReportProperties.Get_PictureData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PictureData;
end;

procedure TAccessReportProperties.Set_PictureData(pRet: OleVariant);
begin
  DefaultInterface.Set_PictureData(pRet);
end;

function TAccessReportProperties.Get_PicturePalette: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PicturePalette;
end;

procedure TAccessReportProperties.Set_PicturePalette(pRet: OleVariant);
begin
  DefaultInterface.Set_PicturePalette(pRet);
end;

function TAccessReportProperties.Get_HasModule: WordBool;
begin
    Result := DefaultInterface.HasModule;
end;

procedure TAccessReportProperties.Set_HasModule(pRet: WordBool);
begin
  DefaultInterface.Set_HasModule(pRet);
end;

function TAccessReportProperties.Get_acHiddenCurrentPage: Integer;
begin
    Result := DefaultInterface.acHiddenCurrentPage;
end;

procedure TAccessReportProperties.Set_acHiddenCurrentPage(pRet: Integer);
begin
  DefaultInterface.Set_acHiddenCurrentPage(pRet);
end;

function TAccessReportProperties.Get_Orientation: Byte;
begin
    Result := DefaultInterface.Orientation;
end;

procedure TAccessReportProperties.Set_Orientation(pRet: Byte);
begin
  DefaultInterface.Set_Orientation(pRet);
end;

function TAccessReportProperties.Get_InputParameters: WideString;
begin
    Result := DefaultInterface.InputParameters;
end;

procedure TAccessReportProperties.Set_InputParameters(const pRet: WideString);
  { Warning: The property InputParameters has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.InputParameters := pRet;
end;

function TAccessReportProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessReportProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessReportProperties.Get_ActiveControl: AccessControl;
begin
    Result := DefaultInterface.ActiveControl;
end;

function TAccessReportProperties.Get_DefaultControl(ControlType: Integer): AccessControl;
begin
    Result := DefaultInterface.DefaultControl[ControlType];
end;

function TAccessReportProperties.Get__SectionOld(Index: OleVariant): AccessSection;
begin
    Result := DefaultInterface._SectionOld[Index];
end;

function TAccessReportProperties.Get_GroupLevel(Index: Integer): AccessGroupLevel;
begin
    Result := DefaultInterface.GroupLevel[Index];
end;

function TAccessReportProperties.Get_Report: AccessReport;
begin
    Result := DefaultInterface.Report;
end;

function TAccessReportProperties.Get_Module: Module;
begin
    Result := DefaultInterface.Module;
end;

function TAccessReportProperties.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessReportProperties.Get_Controls: Controls;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessReportProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TAccessReportProperties.Set_Name(const pbstrName: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := pbstrName;
end;

function TAccessReportProperties.Get_AutoResize: WordBool;
begin
    Result := DefaultInterface.AutoResize;
end;

procedure TAccessReportProperties.Set_AutoResize(pRet: WordBool);
begin
  DefaultInterface.Set_AutoResize(pRet);
end;

function TAccessReportProperties.Get_AutoCenter: WordBool;
begin
    Result := DefaultInterface.AutoCenter;
end;

procedure TAccessReportProperties.Set_AutoCenter(pRet: WordBool);
begin
  DefaultInterface.Set_AutoCenter(pRet);
end;

function TAccessReportProperties.Get_PopUp: WordBool;
begin
    Result := DefaultInterface.PopUp;
end;

procedure TAccessReportProperties.Set_PopUp(pRet: WordBool);
begin
  DefaultInterface.Set_PopUp(pRet);
end;

function TAccessReportProperties.Get_Modal: WordBool;
begin
    Result := DefaultInterface.Modal;
end;

procedure TAccessReportProperties.Set_Modal(pRet: WordBool);
begin
  DefaultInterface.Set_Modal(pRet);
end;

function TAccessReportProperties.Get_BorderStyle: Byte;
begin
    Result := DefaultInterface.BorderStyle;
end;

procedure TAccessReportProperties.Set_BorderStyle(pRet: Byte);
begin
  DefaultInterface.Set_BorderStyle(pRet);
end;

function TAccessReportProperties.Get_ControlBox: WordBool;
begin
    Result := DefaultInterface.ControlBox;
end;

procedure TAccessReportProperties.Set_ControlBox(pRet: WordBool);
begin
  DefaultInterface.Set_ControlBox(pRet);
end;

function TAccessReportProperties.Get_MinMaxButtons: Byte;
begin
    Result := DefaultInterface.MinMaxButtons;
end;

procedure TAccessReportProperties.Set_MinMaxButtons(pRet: Byte);
begin
  DefaultInterface.Set_MinMaxButtons(pRet);
end;

function TAccessReportProperties.Get_CloseButton: WordBool;
begin
    Result := DefaultInterface.CloseButton;
end;

procedure TAccessReportProperties.Set_CloseButton(pRet: WordBool);
begin
  DefaultInterface.Set_CloseButton(pRet);
end;

function TAccessReportProperties.Get_WindowWidth: Smallint;
begin
    Result := DefaultInterface.WindowWidth;
end;

procedure TAccessReportProperties.Set_WindowWidth(pRet: Smallint);
begin
  DefaultInterface.Set_WindowWidth(pRet);
end;

function TAccessReportProperties.Get_WindowHeight: Smallint;
begin
    Result := DefaultInterface.WindowHeight;
end;

procedure TAccessReportProperties.Set_WindowHeight(pRet: Smallint);
begin
  DefaultInterface.Set_WindowHeight(pRet);
end;

function TAccessReportProperties.Get_WindowTop: Smallint;
begin
    Result := DefaultInterface.WindowTop;
end;

function TAccessReportProperties.Get_WindowLeft: Smallint;
begin
    Result := DefaultInterface.WindowLeft;
end;

function TAccessReportProperties.Get_OpenArgs: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OpenArgs;
end;

procedure TAccessReportProperties.Set_OpenArgs(pRet: OleVariant);
begin
  DefaultInterface.Set_OpenArgs(pRet);
end;

function TAccessReportProperties.Get_Printer: _Printer;
begin
    Result := DefaultInterface.Printer;
end;

procedure TAccessReportProperties.Set_Printer(const pRet: _Printer);
begin
  DefaultInterface.Set_Printer(pRet);
end;

procedure TAccessReportProperties._Set_Printer(const pRet: _Printer);
  { Warning: The property Printer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Printer := pRet;
end;

function TAccessReportProperties.Get_Moveable: WordBool;
begin
    Result := DefaultInterface.Moveable;
end;

procedure TAccessReportProperties.Set_Moveable(pRet: WordBool);
begin
  DefaultInterface.Set_Moveable(pRet);
end;

function TAccessReportProperties.Get_UseDefaultPrinter: WordBool;
begin
    Result := DefaultInterface.UseDefaultPrinter;
end;

procedure TAccessReportProperties.Set_UseDefaultPrinter(pRet: WordBool);
begin
  DefaultInterface.Set_UseDefaultPrinter(pRet);
end;

function TAccessReportProperties.Get_Recordset: IDispatch;
begin
    Result := DefaultInterface.Recordset;
end;

procedure TAccessReportProperties._Set_Recordset(const pRet: IDispatch);
  { Warning: The property Recordset has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Recordset := pRet;
end;

function TAccessReportProperties.Get_RecordSourceQualifier: WideString;
begin
    Result := DefaultInterface.RecordSourceQualifier;
end;

procedure TAccessReportProperties.Set_RecordSourceQualifier(const pRet: WideString);
  { Warning: The property RecordSourceQualifier has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RecordSourceQualifier := pRet;
end;

function TAccessReportProperties.Get_Shape: WideString;
begin
    Result := DefaultInterface.Shape;
end;

function TAccessReportProperties.Get_FilterOnLoad: WordBool;
begin
    Result := DefaultInterface.FilterOnLoad;
end;

procedure TAccessReportProperties.Set_FilterOnLoad(pRet: WordBool);
begin
  DefaultInterface.Set_FilterOnLoad(pRet);
end;

function TAccessReportProperties.Get_OrderByOnLoad: WordBool;
begin
    Result := DefaultInterface.OrderByOnLoad;
end;

procedure TAccessReportProperties.Set_OrderByOnLoad(pRet: WordBool);
begin
  DefaultInterface.Set_OrderByOnLoad(pRet);
end;

function TAccessReportProperties.Get_DefaultView: Byte;
begin
    Result := DefaultInterface.DefaultView;
end;

procedure TAccessReportProperties.Set_DefaultView(pRet: Byte);
begin
  DefaultInterface.Set_DefaultView(pRet);
end;

function TAccessReportProperties.Get_AllowReportView: WordBool;
begin
    Result := DefaultInterface.AllowReportView;
end;

procedure TAccessReportProperties.Set_AllowReportView(pRet: WordBool);
begin
  DefaultInterface.Set_AllowReportView(pRet);
end;

function TAccessReportProperties.Get_ScrollBars: Byte;
begin
    Result := DefaultInterface.ScrollBars;
end;

procedure TAccessReportProperties.Set_ScrollBars(pRet: Byte);
begin
  DefaultInterface.Set_ScrollBars(pRet);
end;

function TAccessReportProperties.Get_Cycle: Byte;
begin
    Result := DefaultInterface.Cycle;
end;

procedure TAccessReportProperties.Set_Cycle(pRet: Byte);
begin
  DefaultInterface.Set_Cycle(pRet);
end;

function TAccessReportProperties.Get_AllowDesignChanges: WordBool;
begin
    Result := DefaultInterface.AllowDesignChanges;
end;

procedure TAccessReportProperties.Set_AllowDesignChanges(pRet: WordBool);
begin
  DefaultInterface.Set_AllowDesignChanges(pRet);
end;

function TAccessReportProperties.Get_OnCurrent: WideString;
begin
    Result := DefaultInterface.OnCurrent;
end;

procedure TAccessReportProperties.Set_OnCurrent(const pRet: WideString);
  { Warning: The property OnCurrent has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnCurrent := pRet;
end;

function TAccessReportProperties.Get_KeyPreview: WordBool;
begin
    Result := DefaultInterface.KeyPreview;
end;

procedure TAccessReportProperties.Set_KeyPreview(pRet: WordBool);
begin
  DefaultInterface.Set_KeyPreview(pRet);
end;

function TAccessReportProperties.Get_TimerInterval: Integer;
begin
    Result := DefaultInterface.TimerInterval;
end;

procedure TAccessReportProperties.Set_TimerInterval(pRet: Integer);
begin
  DefaultInterface.Set_TimerInterval(pRet);
end;

function TAccessReportProperties.Get_CurrentView: Smallint;
begin
    Result := DefaultInterface.CurrentView;
end;

procedure TAccessReportProperties.Set_CurrentView(pRet: Smallint);
begin
  DefaultInterface.Set_CurrentView(pRet);
end;

function TAccessReportProperties.Get_OnOpenMacro: WideString;
begin
    Result := DefaultInterface.OnOpenMacro;
end;

procedure TAccessReportProperties.Set_OnOpenMacro(const pRet: WideString);
  { Warning: The property OnOpenMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnOpenMacro := pRet;
end;

function TAccessReportProperties.Get_OnCloseMacro: WideString;
begin
    Result := DefaultInterface.OnCloseMacro;
end;

procedure TAccessReportProperties.Set_OnCloseMacro(const pRet: WideString);
  { Warning: The property OnCloseMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnCloseMacro := pRet;
end;

function TAccessReportProperties.Get_OnActivateMacro: WideString;
begin
    Result := DefaultInterface.OnActivateMacro;
end;

procedure TAccessReportProperties.Set_OnActivateMacro(const pRet: WideString);
  { Warning: The property OnActivateMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnActivateMacro := pRet;
end;

function TAccessReportProperties.Get_OnDeactivateMacro: WideString;
begin
    Result := DefaultInterface.OnDeactivateMacro;
end;

procedure TAccessReportProperties.Set_OnDeactivateMacro(const pRet: WideString);
  { Warning: The property OnDeactivateMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDeactivateMacro := pRet;
end;

function TAccessReportProperties.Get_OnNoDataMacro: WideString;
begin
    Result := DefaultInterface.OnNoDataMacro;
end;

procedure TAccessReportProperties.Set_OnNoDataMacro(const pRet: WideString);
  { Warning: The property OnNoDataMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnNoDataMacro := pRet;
end;

function TAccessReportProperties.Get_OnPageMacro: WideString;
begin
    Result := DefaultInterface.OnPageMacro;
end;

procedure TAccessReportProperties.Set_OnPageMacro(const pRet: WideString);
  { Warning: The property OnPageMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnPageMacro := pRet;
end;

function TAccessReportProperties.Get_OnErrorMacro: WideString;
begin
    Result := DefaultInterface.OnErrorMacro;
end;

procedure TAccessReportProperties.Set_OnErrorMacro(const pRet: WideString);
  { Warning: The property OnErrorMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnErrorMacro := pRet;
end;

function TAccessReportProperties.Get_OnCurrentMacro: WideString;
begin
    Result := DefaultInterface.OnCurrentMacro;
end;

procedure TAccessReportProperties.Set_OnCurrentMacro(const pRet: WideString);
  { Warning: The property OnCurrentMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnCurrentMacro := pRet;
end;

function TAccessReportProperties.Get_OnLoadMacro: WideString;
begin
    Result := DefaultInterface.OnLoadMacro;
end;

procedure TAccessReportProperties.Set_OnLoadMacro(const pRet: WideString);
  { Warning: The property OnLoadMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnLoadMacro := pRet;
end;

function TAccessReportProperties.Get_OnResizeMacro: WideString;
begin
    Result := DefaultInterface.OnResizeMacro;
end;

procedure TAccessReportProperties.Set_OnResizeMacro(const pRet: WideString);
  { Warning: The property OnResizeMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnResizeMacro := pRet;
end;

function TAccessReportProperties.Get_OnUnloadMacro: WideString;
begin
    Result := DefaultInterface.OnUnloadMacro;
end;

procedure TAccessReportProperties.Set_OnUnloadMacro(const pRet: WideString);
  { Warning: The property OnUnloadMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnUnloadMacro := pRet;
end;

function TAccessReportProperties.Get_OnGotFocusMacro: WideString;
begin
    Result := DefaultInterface.OnGotFocusMacro;
end;

procedure TAccessReportProperties.Set_OnGotFocusMacro(const pRet: WideString);
  { Warning: The property OnGotFocusMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnGotFocusMacro := pRet;
end;

function TAccessReportProperties.Get_OnLostFocusMacro: WideString;
begin
    Result := DefaultInterface.OnLostFocusMacro;
end;

procedure TAccessReportProperties.Set_OnLostFocusMacro(const pRet: WideString);
  { Warning: The property OnLostFocusMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnLostFocusMacro := pRet;
end;

function TAccessReportProperties.Get_OnClickMacro: WideString;
begin
    Result := DefaultInterface.OnClickMacro;
end;

procedure TAccessReportProperties.Set_OnClickMacro(const pRet: WideString);
  { Warning: The property OnClickMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnClickMacro := pRet;
end;

function TAccessReportProperties.Get_OnDblClickMacro: WideString;
begin
    Result := DefaultInterface.OnDblClickMacro;
end;

procedure TAccessReportProperties.Set_OnDblClickMacro(const pRet: WideString);
  { Warning: The property OnDblClickMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDblClickMacro := pRet;
end;

function TAccessReportProperties.Get_OnMouseDownMacro: WideString;
begin
    Result := DefaultInterface.OnMouseDownMacro;
end;

procedure TAccessReportProperties.Set_OnMouseDownMacro(const pRet: WideString);
  { Warning: The property OnMouseDownMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseDownMacro := pRet;
end;

function TAccessReportProperties.Get_OnMouseMoveMacro: WideString;
begin
    Result := DefaultInterface.OnMouseMoveMacro;
end;

procedure TAccessReportProperties.Set_OnMouseMoveMacro(const pRet: WideString);
  { Warning: The property OnMouseMoveMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseMoveMacro := pRet;
end;

function TAccessReportProperties.Get_OnMouseUpMacro: WideString;
begin
    Result := DefaultInterface.OnMouseUpMacro;
end;

procedure TAccessReportProperties.Set_OnMouseUpMacro(const pRet: WideString);
  { Warning: The property OnMouseUpMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseUpMacro := pRet;
end;

function TAccessReportProperties.Get_OnKeyDownMacro: WideString;
begin
    Result := DefaultInterface.OnKeyDownMacro;
end;

procedure TAccessReportProperties.Set_OnKeyDownMacro(const pRet: WideString);
  { Warning: The property OnKeyDownMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyDownMacro := pRet;
end;

function TAccessReportProperties.Get_OnKeyUpMacro: WideString;
begin
    Result := DefaultInterface.OnKeyUpMacro;
end;

procedure TAccessReportProperties.Set_OnKeyUpMacro(const pRet: WideString);
  { Warning: The property OnKeyUpMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyUpMacro := pRet;
end;

function TAccessReportProperties.Get_OnKeyPressMacro: WideString;
begin
    Result := DefaultInterface.OnKeyPressMacro;
end;

procedure TAccessReportProperties.Set_OnKeyPressMacro(const pRet: WideString);
  { Warning: The property OnKeyPressMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyPressMacro := pRet;
end;

function TAccessReportProperties.Get_OnFilterMacro: WideString;
begin
    Result := DefaultInterface.OnFilterMacro;
end;

procedure TAccessReportProperties.Set_OnFilterMacro(const pRet: WideString);
  { Warning: The property OnFilterMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnFilterMacro := pRet;
end;

function TAccessReportProperties.Get_OnApplyFilterMacro: WideString;
begin
    Result := DefaultInterface.OnApplyFilterMacro;
end;

procedure TAccessReportProperties.Set_OnApplyFilterMacro(const pRet: WideString);
  { Warning: The property OnApplyFilterMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnApplyFilterMacro := pRet;
end;

function TAccessReportProperties.Get_OnTimerMacro: WideString;
begin
    Result := DefaultInterface.OnTimerMacro;
end;

procedure TAccessReportProperties.Set_OnTimerMacro(const pRet: WideString);
  { Warning: The property OnTimerMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnTimerMacro := pRet;
end;

function TAccessReportProperties.Get_MouseWheelMacro: WideString;
begin
    Result := DefaultInterface.MouseWheelMacro;
end;

procedure TAccessReportProperties.Set_MouseWheelMacro(const pRet: WideString);
  { Warning: The property MouseWheelMacro has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MouseWheelMacro := pRet;
end;

function TAccessReportProperties.Get_ShowPageMargins: WordBool;
begin
    Result := DefaultInterface.ShowPageMargins;
end;

procedure TAccessReportProperties.Set_ShowPageMargins(pRet: WordBool);
begin
  DefaultInterface.Set_ShowPageMargins(pRet);
end;

function TAccessReportProperties.Get_FitToPage: WordBool;
begin
    Result := DefaultInterface.FitToPage;
end;

procedure TAccessReportProperties.Set_FitToPage(pRet: WordBool);
begin
  DefaultInterface.Set_FitToPage(pRet);
end;

function TAccessReportProperties.Get_AllowLayoutView: WordBool;
begin
    Result := DefaultInterface.AllowLayoutView;
end;

procedure TAccessReportProperties.Set_AllowLayoutView(pRet: WordBool);
begin
  DefaultInterface.Set_AllowLayoutView(pRet);
end;

function TAccessReportProperties.Get_OnLoad: WideString;
begin
    Result := DefaultInterface.OnLoad;
end;

procedure TAccessReportProperties.Set_OnLoad(const pRet: WideString);
  { Warning: The property OnLoad has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnLoad := pRet;
end;

function TAccessReportProperties.Get_OnResize: WideString;
begin
    Result := DefaultInterface.OnResize;
end;

procedure TAccessReportProperties.Set_OnResize(const pRet: WideString);
  { Warning: The property OnResize has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnResize := pRet;
end;

function TAccessReportProperties.Get_OnUnload: WideString;
begin
    Result := DefaultInterface.OnUnload;
end;

procedure TAccessReportProperties.Set_OnUnload(const pRet: WideString);
  { Warning: The property OnUnload has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnUnload := pRet;
end;

function TAccessReportProperties.Get_OnGotFocus: WideString;
begin
    Result := DefaultInterface.OnGotFocus;
end;

procedure TAccessReportProperties.Set_OnGotFocus(const pRet: WideString);
  { Warning: The property OnGotFocus has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnGotFocus := pRet;
end;

function TAccessReportProperties.Get_OnLostFocus: WideString;
begin
    Result := DefaultInterface.OnLostFocus;
end;

procedure TAccessReportProperties.Set_OnLostFocus(const pRet: WideString);
  { Warning: The property OnLostFocus has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnLostFocus := pRet;
end;

function TAccessReportProperties.Get_OnClick: WideString;
begin
    Result := DefaultInterface.OnClick;
end;

procedure TAccessReportProperties.Set_OnClick(const pRet: WideString);
  { Warning: The property OnClick has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnClick := pRet;
end;

function TAccessReportProperties.Get_OnDblClick: WideString;
begin
    Result := DefaultInterface.OnDblClick;
end;

procedure TAccessReportProperties.Set_OnDblClick(const pRet: WideString);
  { Warning: The property OnDblClick has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnDblClick := pRet;
end;

function TAccessReportProperties.Get_OnMouseDown: WideString;
begin
    Result := DefaultInterface.OnMouseDown;
end;

procedure TAccessReportProperties.Set_OnMouseDown(const pRet: WideString);
  { Warning: The property OnMouseDown has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseDown := pRet;
end;

function TAccessReportProperties.Get_OnMouseMove: WideString;
begin
    Result := DefaultInterface.OnMouseMove;
end;

procedure TAccessReportProperties.Set_OnMouseMove(const pRet: WideString);
  { Warning: The property OnMouseMove has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseMove := pRet;
end;

function TAccessReportProperties.Get_OnMouseUp: WideString;
begin
    Result := DefaultInterface.OnMouseUp;
end;

procedure TAccessReportProperties.Set_OnMouseUp(const pRet: WideString);
  { Warning: The property OnMouseUp has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnMouseUp := pRet;
end;

function TAccessReportProperties.Get_OnKeyDown: WideString;
begin
    Result := DefaultInterface.OnKeyDown;
end;

procedure TAccessReportProperties.Set_OnKeyDown(const pRet: WideString);
  { Warning: The property OnKeyDown has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyDown := pRet;
end;

function TAccessReportProperties.Get_OnKeyUp: WideString;
begin
    Result := DefaultInterface.OnKeyUp;
end;

procedure TAccessReportProperties.Set_OnKeyUp(const pRet: WideString);
  { Warning: The property OnKeyUp has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyUp := pRet;
end;

function TAccessReportProperties.Get_OnKeyPress: WideString;
begin
    Result := DefaultInterface.OnKeyPress;
end;

procedure TAccessReportProperties.Set_OnKeyPress(const pRet: WideString);
  { Warning: The property OnKeyPress has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnKeyPress := pRet;
end;

function TAccessReportProperties.Get_OnFilter: WideString;
begin
    Result := DefaultInterface.OnFilter;
end;

procedure TAccessReportProperties.Set_OnFilter(const pRet: WideString);
  { Warning: The property OnFilter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnFilter := pRet;
end;

function TAccessReportProperties.Get_OnApplyFilter: WideString;
begin
    Result := DefaultInterface.OnApplyFilter;
end;

procedure TAccessReportProperties.Set_OnApplyFilter(const pRet: WideString);
  { Warning: The property OnApplyFilter has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnApplyFilter := pRet;
end;

function TAccessReportProperties.Get_OnTimer: WideString;
begin
    Result := DefaultInterface.OnTimer;
end;

procedure TAccessReportProperties.Set_OnTimer(const pRet: WideString);
  { Warning: The property OnTimer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnTimer := pRet;
end;

function TAccessReportProperties.Get_MouseWheel: WideString;
begin
    Result := DefaultInterface.MouseWheel;
end;

procedure TAccessReportProperties.Set_MouseWheel(const pRet: WideString);
  { Warning: The property MouseWheel has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MouseWheel := pRet;
end;

function TAccessReportProperties.Get_DisplayOnSharePointSite: Byte;
begin
    Result := DefaultInterface.DisplayOnSharePointSite;
end;

procedure TAccessReportProperties.Set_DisplayOnSharePointSite(pRet: Byte);
begin
  DefaultInterface.Set_DisplayOnSharePointSite(pRet);
end;

function TAccessReportProperties.Get_Section(Index: OleVariant): _Section;
begin
    Result := DefaultInterface.Section[Index];
end;

function TAccessReportProperties.Get_RibbonName: WideString;
begin
    Result := DefaultInterface.RibbonName;
end;

procedure TAccessReportProperties.Set_RibbonName(const pRet: WideString);
  { Warning: The property RibbonName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RibbonName := pRet;
end;

{$ENDIF}

procedure TAttachment.InitControlData;
const
  CEventDispIDs: array [0..8] of DWORD = (
    $0000080D, $0000080E, $000007E3, $0000081B, $0000089D, $0000081D,
    $00000819, $0000081A, $000009B3);
  CControlData: TControlData2 = (
    ClassID: '{3B06E979-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{3B06E981-E47C-11CD-8701-00AA003F0F07}';
    EventCount: 9;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnBeforeUpdate) - Cardinal(Self);
end;

procedure TAttachment.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _Attachment;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAttachment.GetControlInterface: _Attachment;
begin
  CreateControl;
  Result := FIntf;
end;

function TAttachment.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAttachment.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAttachment.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAttachment.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAttachment.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAttachment.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAttachment.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAttachment.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAttachment.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAttachment.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAttachment.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAttachment.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAttachment.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAttachment.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAttachment.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAttachment.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAttachment.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAttachment.Get_OldValue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldValue;
end;

function TAttachment.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAttachment.Get_Controls: Children;
begin
    Result := DefaultInterface.Controls;
end;

function TAttachment.Get_Hyperlink: _Hyperlink;
begin
    Result := DefaultInterface.Hyperlink;
end;

function TAttachment.Get_FileName(var_: OleVariant): WideString;
begin
    Result := DefaultInterface.FileName[var_];
end;

function TAttachment.Get_FileType(var_: OleVariant): WideString;
begin
    Result := DefaultInterface.FileType[var_];
end;

function TAttachment.Get_FileURL(var_: OleVariant): WideString;
begin
    Result := DefaultInterface.FileURL[var_];
end;

function TAttachment.Get_FileData(var_: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.FileData[var_];
end;

function TAttachment.Get_PictureDisp(var_: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PictureDisp[var_];
end;

procedure TAttachment.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAttachment.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAttachment.accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                                  out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAttachment.accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                                  out pcyHeight: Integer; varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAttachment.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAttachment.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAttachment.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAttachment.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAttachment.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAttachment.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

procedure TAttachment.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAttachment.Goto_;
begin
  DefaultInterface.Goto_;
end;

procedure TAttachment.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

function TAttachment._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAttachment.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAttachment.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAttachment.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAttachment.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

procedure TAttachment.Forward;
begin
  DefaultInterface.Forward;
end;

procedure TAttachment.Back;
begin
  DefaultInterface.Back;
end;

function TAttachment.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

class function CoMacroError.Create: _MacroError;
begin
  Result := CreateComObject(CLASS_MacroError) as _MacroError;
end;

class function CoMacroError.CreateRemote(const MachineName: string): _MacroError;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MacroError) as _MacroError;
end;

procedure TMacroError.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3F1B1773-65CB-4DB9-9FC6-ACED47DB285A}';
    IntfIID:   '{22585BA1-7BD1-40AF-8095-E688176CDEB0}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMacroError.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _MacroError;
  end;
end;

procedure TMacroError.ConnectTo(svrIntf: _MacroError);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMacroError.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMacroError.GetDefaultInterface: _MacroError;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMacroError.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMacroErrorProperties.Create(Self);
{$ENDIF}
end;

destructor TMacroError.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMacroError.GetServerProperties: TMacroErrorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMacroError.Get_Condition: WideString;
begin
    Result := DefaultInterface.Condition;
end;

function TMacroError.Get_ActionName: WideString;
begin
    Result := DefaultInterface.ActionName;
end;

function TMacroError.Get_Arguments: WideString;
begin
    Result := DefaultInterface.Arguments;
end;

function TMacroError.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

function TMacroError.Get_Number: Integer;
begin
    Result := DefaultInterface.Number;
end;

function TMacroError.Get_MacroName: WideString;
begin
    Result := DefaultInterface.MacroName;
end;

function TMacroError.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMacroErrorProperties.Create(AServer: TMacroError);
begin
  inherited Create;
  FServer := AServer;
end;

function TMacroErrorProperties.GetDefaultInterface: _MacroError;
begin
  Result := FServer.DefaultInterface;
end;

function TMacroErrorProperties.Get_Condition: WideString;
begin
    Result := DefaultInterface.Condition;
end;

function TMacroErrorProperties.Get_ActionName: WideString;
begin
    Result := DefaultInterface.ActionName;
end;

function TMacroErrorProperties.Get_Arguments: WideString;
begin
    Result := DefaultInterface.Arguments;
end;

function TMacroErrorProperties.Get_Description: WideString;
begin
    Result := DefaultInterface.Description;
end;

function TMacroErrorProperties.Get_Number: Integer;
begin
    Result := DefaultInterface.Number;
end;

function TMacroErrorProperties.Get_MacroName: WideString;
begin
    Result := DefaultInterface.MacroName;
end;

{$ENDIF}

class function CoTempVar.Create: _TempVar;
begin
  Result := CreateComObject(CLASS_TempVar) as _TempVar;
end;

class function CoTempVar.CreateRemote(const MachineName: string): _TempVar;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TempVar) as _TempVar;
end;

procedure TTempVar.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{12DCE806-EA8A-46AA-88DF-C4486EDB78E3}';
    IntfIID:   '{FB74F43A-9732-4552-B1C2-269ABF082492}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTempVar.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _TempVar;
  end;
end;

procedure TTempVar.ConnectTo(svrIntf: _TempVar);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTempVar.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTempVar.GetDefaultInterface: _TempVar;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTempVar.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTempVarProperties.Create(Self);
{$ENDIF}
end;

destructor TTempVar.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTempVar.GetServerProperties: TTempVarProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTempVar.Get__Value: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant._Value;
end;

procedure TTempVar.Set__Value(pRet: OleVariant);
begin
  DefaultInterface.Set__Value(pRet);
end;

function TTempVar.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TTempVar.Get_Value: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Value;
end;

procedure TTempVar.Set_Value(pRet: OleVariant);
begin
  DefaultInterface.Set_Value(pRet);
end;

function TTempVar.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTempVarProperties.Create(AServer: TTempVar);
begin
  inherited Create;
  FServer := AServer;
end;

function TTempVarProperties.GetDefaultInterface: _TempVar;
begin
  Result := FServer.DefaultInterface;
end;

function TTempVarProperties.Get__Value: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant._Value;
end;

procedure TTempVarProperties.Set__Value(pRet: OleVariant);
begin
  DefaultInterface.Set__Value(pRet);
end;

function TTempVarProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

function TTempVarProperties.Get_Value: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Value;
end;

procedure TTempVarProperties.Set_Value(pRet: OleVariant);
begin
  DefaultInterface.Set_Value(pRet);
end;

{$ENDIF}

class function CoTempVars.Create: _TempVars;
begin
  Result := CreateComObject(CLASS_TempVars) as _TempVars;
end;

class function CoTempVars.CreateRemote(const MachineName: string): _TempVars;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TempVars) as _TempVars;
end;

procedure TTempVars.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6D40D9DE-2821-44A8-BAF3-8011E362CF59}';
    IntfIID:   '{9E3F602F-BA36-4865-B3CD-F2EB008F62DE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTempVars.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _TempVars;
  end;
end;

procedure TTempVars.ConnectTo(svrIntf: _TempVars);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTempVars.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTempVars.GetDefaultInterface: _TempVars;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTempVars.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTempVarsProperties.Create(Self);
{$ENDIF}
end;

destructor TTempVars.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTempVars.GetServerProperties: TTempVarsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTempVars.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TTempVars.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TTempVars.Get_Item(Index: OleVariant): TempVar;
begin
    Result := DefaultInterface.Item[Index];
end;

function TTempVars.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

procedure TTempVars.Add(const Name: WideString; Value: OleVariant);
begin
  DefaultInterface.Add(Name, Value);
end;

procedure TTempVars.Remove(var_: OleVariant);
begin
  DefaultInterface.Remove(var_);
end;

procedure TTempVars.RemoveAll;
begin
  DefaultInterface.RemoveAll;
end;

function TTempVars.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTempVarsProperties.Create(AServer: TTempVars);
begin
  inherited Create;
  FServer := AServer;
end;

function TTempVarsProperties.GetDefaultInterface: _TempVars;
begin
  Result := FServer.DefaultInterface;
end;

function TTempVarsProperties.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TTempVarsProperties.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TTempVarsProperties.Get_Item(Index: OleVariant): TempVar;
begin
    Result := DefaultInterface.Item[Index];
end;

function TTempVarsProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

procedure TAccessCommandButton.InitControlData;
const
  CEventDispIDs: array [0..3] of DWORD = (
    $000007E3, $0000081B, $00000819, $0000081A);
  CControlData: TControlData2 = (
    ClassID: '{3B06E94F-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{2E70526B-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 4;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnEnter) - Cardinal(Self);
end;

procedure TAccessCommandButton.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _CommandButton;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessCommandButton.GetControlInterface: _CommandButton;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessCommandButton.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessCommandButton.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessCommandButton.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessCommandButton.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessCommandButton.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessCommandButton.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessCommandButton.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessCommandButton.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessCommandButton.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessCommandButton.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessCommandButton.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessCommandButton.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessCommandButton.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessCommandButton.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessCommandButton.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessCommandButton.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessCommandButton.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessCommandButton.Get_OldValue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldValue;
end;

function TAccessCommandButton.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessCommandButton.Get_Controls: Children;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessCommandButton.Get_Hyperlink: _Hyperlink;
begin
    Result := DefaultInterface.Hyperlink;
end;

function TAccessCommandButton.Get_PictureData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PictureData;
end;

procedure TAccessCommandButton.Set_PictureData(pRet: OleVariant);
begin
  DefaultInterface.Set_PictureData(pRet);
end;

function TAccessCommandButton.Get_ObjectPalette: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ObjectPalette;
end;

procedure TAccessCommandButton.Set_ObjectPalette(pRet: OleVariant);
begin
  DefaultInterface.Set_ObjectPalette(pRet);
end;

procedure TAccessCommandButton.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAccessCommandButton.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAccessCommandButton.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                           out pcxWidth: Integer; out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAccessCommandButton.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                           out pcxWidth: Integer; out pcyHeight: Integer; 
                                           varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAccessCommandButton.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAccessCommandButton.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAccessCommandButton.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAccessCommandButton.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAccessCommandButton.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAccessCommandButton.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

procedure TAccessCommandButton.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAccessCommandButton.Goto_;
begin
  DefaultInterface.Goto_;
end;

procedure TAccessCommandButton.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

function TAccessCommandButton._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessCommandButton.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessCommandButton.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessCommandButton.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessCommandButton.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                                    Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessCommandButton.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessBoundObjectFrame.InitControlData;
const
  CEventDispIDs: array [0..6] of DWORD = (
    $0000081C, $0000080D, $0000080E, $000007E3, $0000081B, $00000819,
    $0000081A);
  CControlData: TControlData2 = (
    ClassID: '{3B06E957-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{2E70526C-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 7;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnUpdated) - Cardinal(Self);
end;

procedure TAccessBoundObjectFrame.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _BoundObjectFrame;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessBoundObjectFrame.GetControlInterface: _BoundObjectFrame;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessBoundObjectFrame.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessBoundObjectFrame.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessBoundObjectFrame.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessBoundObjectFrame.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessBoundObjectFrame.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessBoundObjectFrame.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessBoundObjectFrame.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessBoundObjectFrame.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessBoundObjectFrame.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessBoundObjectFrame.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessBoundObjectFrame.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessBoundObjectFrame.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessBoundObjectFrame.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessBoundObjectFrame.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessBoundObjectFrame.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessBoundObjectFrame.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessBoundObjectFrame.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessBoundObjectFrame.Get_OldValue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldValue;
end;

function TAccessBoundObjectFrame.Get_Object_: IDispatch;
begin
    Result := DefaultInterface.Object_;
end;

function TAccessBoundObjectFrame.Get_ObjectVerbs(Index: Integer): WideString;
begin
    Result := DefaultInterface.ObjectVerbs[Index];
end;

function TAccessBoundObjectFrame.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessBoundObjectFrame.Get_Controls: Children;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessBoundObjectFrame.Get_Value: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Value;
end;

procedure TAccessBoundObjectFrame.Set_Value(pRet: OleVariant);
begin
  DefaultInterface.Set_Value(pRet);
end;

function TAccessBoundObjectFrame.Get_ObjectPalette: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ObjectPalette;
end;

procedure TAccessBoundObjectFrame.Set_ObjectPalette(pRet: OleVariant);
begin
  DefaultInterface.Set_ObjectPalette(pRet);
end;

procedure TAccessBoundObjectFrame.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAccessBoundObjectFrame.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAccessBoundObjectFrame.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                              out pcxWidth: Integer; out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAccessBoundObjectFrame.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                              out pcxWidth: Integer; out pcyHeight: Integer; 
                                              varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAccessBoundObjectFrame.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAccessBoundObjectFrame.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAccessBoundObjectFrame.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAccessBoundObjectFrame.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAccessBoundObjectFrame.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAccessBoundObjectFrame.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

procedure TAccessBoundObjectFrame.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAccessBoundObjectFrame.Goto_;
begin
  DefaultInterface.Goto_;
end;

procedure TAccessBoundObjectFrame.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

function TAccessBoundObjectFrame._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessBoundObjectFrame.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessBoundObjectFrame.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessBoundObjectFrame.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessBoundObjectFrame.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                                       Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessBoundObjectFrame.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessObjectFrame.InitControlData;
const
  CEventDispIDs: array [0..4] of DWORD = (
    $0000081C, $000007E3, $0000081B, $00000819, $0000081A);
  CControlData: TControlData2 = (
    ClassID: '{3B06E95D-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{2E70526D-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 5;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnUpdated) - Cardinal(Self);
end;

procedure TAccessObjectFrame.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _ObjectFrame;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessObjectFrame.GetControlInterface: _ObjectFrame;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessObjectFrame.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessObjectFrame.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessObjectFrame.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessObjectFrame.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessObjectFrame.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessObjectFrame.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessObjectFrame.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessObjectFrame.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessObjectFrame.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessObjectFrame.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessObjectFrame.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessObjectFrame.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessObjectFrame.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessObjectFrame.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessObjectFrame.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessObjectFrame.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessObjectFrame.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessObjectFrame.Get_OldValue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldValue;
end;

function TAccessObjectFrame.Get_Object_: IDispatch;
begin
    Result := DefaultInterface.Object_;
end;

function TAccessObjectFrame.Get_ObjectVerbs(Index: Integer): WideString;
begin
    Result := DefaultInterface.ObjectVerbs[Index];
end;

function TAccessObjectFrame.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessObjectFrame.Get_Controls: Children;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessObjectFrame.Get_OleData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OleData;
end;

procedure TAccessObjectFrame.Set_OleData(pRet: OleVariant);
begin
  DefaultInterface.Set_OleData(pRet);
end;

function TAccessObjectFrame.Get_ObjectPalette: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ObjectPalette;
end;

procedure TAccessObjectFrame.Set_ObjectPalette(pRet: OleVariant);
begin
  DefaultInterface.Set_ObjectPalette(pRet);
end;

procedure TAccessObjectFrame.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAccessObjectFrame.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAccessObjectFrame.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                         out pcxWidth: Integer; out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAccessObjectFrame.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                         out pcxWidth: Integer; out pcyHeight: Integer; 
                                         varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAccessObjectFrame.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAccessObjectFrame.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAccessObjectFrame.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAccessObjectFrame.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAccessObjectFrame.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAccessObjectFrame.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

procedure TAccessObjectFrame.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAccessObjectFrame.Goto_;
begin
  DefaultInterface.Goto_;
end;

procedure TAccessObjectFrame.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

function TAccessObjectFrame._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessObjectFrame.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessObjectFrame.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessObjectFrame.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessObjectFrame.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                                  Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessObjectFrame.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessCustomControl.InitControlData;
const
  CEventDispIDs: array [0..4] of DWORD = (
    $0000081C, $000007E3, $0000081B, $00000819, $0000081A);
  CControlData: TControlData2 = (
    ClassID: '{3B06E967-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{2E70526E-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 5;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnUpdated) - Cardinal(Self);
end;

procedure TAccessCustomControl.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _CustomControl;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessCustomControl.GetControlInterface: _CustomControl;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessCustomControl.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessCustomControl.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessCustomControl.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessCustomControl.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessCustomControl.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessCustomControl.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessCustomControl.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessCustomControl.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessCustomControl.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessCustomControl.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessCustomControl.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessCustomControl.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessCustomControl.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessCustomControl.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessCustomControl.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessCustomControl.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessCustomControl.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessCustomControl.Get_OldValue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldValue;
end;

function TAccessCustomControl.Get_Object_: IDispatch;
begin
    Result := DefaultInterface.Object_;
end;

function TAccessCustomControl.Get_ObjectVerbs(Index: Integer): WideString;
begin
    Result := DefaultInterface.ObjectVerbs[Index];
end;

function TAccessCustomControl.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessCustomControl.Get_Controls: Children;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessCustomControl.Get_Value: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Value;
end;

procedure TAccessCustomControl.Set_Value(pRet: OleVariant);
begin
  DefaultInterface.Set_Value(pRet);
end;

function TAccessCustomControl.Get_OleData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OleData;
end;

procedure TAccessCustomControl.Set_OleData(pRet: OleVariant);
begin
  DefaultInterface.Set_OleData(pRet);
end;

function TAccessCustomControl.Get_ObjectPalette: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ObjectPalette;
end;

procedure TAccessCustomControl.Set_ObjectPalette(pRet: OleVariant);
begin
  DefaultInterface.Set_ObjectPalette(pRet);
end;

procedure TAccessCustomControl.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAccessCustomControl.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAccessCustomControl.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                           out pcxWidth: Integer; out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAccessCustomControl.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                           out pcxWidth: Integer; out pcyHeight: Integer; 
                                           varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAccessCustomControl.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAccessCustomControl.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAccessCustomControl.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAccessCustomControl.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAccessCustomControl.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAccessCustomControl.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

procedure TAccessCustomControl.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAccessCustomControl.Goto_;
begin
  DefaultInterface.Goto_;
end;

procedure TAccessCustomControl.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

function TAccessCustomControl._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessCustomControl.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessCustomControl.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessCustomControl.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessCustomControl.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                                    Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessCustomControl.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessCheckBox.InitControlData;
const
  CEventDispIDs: array [0..5] of DWORD = (
    $0000080D, $0000080E, $000007E3, $0000081B, $00000819, $0000081A);
  CControlData: TControlData2 = (
    ClassID: '{3B06E953-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{2E70526A-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 6;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnBeforeUpdate) - Cardinal(Self);
end;

procedure TAccessCheckBox.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _Checkbox;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessCheckBox.GetControlInterface: _Checkbox;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessCheckBox.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessCheckBox.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessCheckBox.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessCheckBox.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessCheckBox.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessCheckBox.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessCheckBox.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessCheckBox.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessCheckBox.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessCheckBox.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessCheckBox.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessCheckBox.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessCheckBox.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessCheckBox.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessCheckBox.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessCheckBox.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessCheckBox.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessCheckBox.Get_OldValue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldValue;
end;

function TAccessCheckBox.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessCheckBox.Get_Controls: Children;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessCheckBox.Get_Value: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Value;
end;

procedure TAccessCheckBox.Set_Value(pRet: OleVariant);
begin
  DefaultInterface.Set_Value(pRet);
end;

procedure TAccessCheckBox.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAccessCheckBox.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAccessCheckBox.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                      out pcxWidth: Integer; out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAccessCheckBox.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                      out pcxWidth: Integer; out pcyHeight: Integer; 
                                      varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAccessCheckBox.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAccessCheckBox.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAccessCheckBox.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAccessCheckBox.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAccessCheckBox.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAccessCheckBox.Undo;
begin
  DefaultInterface.Undo;
end;

procedure TAccessCheckBox.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

procedure TAccessCheckBox.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAccessCheckBox.Goto_;
begin
  DefaultInterface.Goto_;
end;

procedure TAccessCheckBox.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

function TAccessCheckBox._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessCheckBox.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessCheckBox.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessCheckBox.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessCheckBox.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                               Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessCheckBox.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessOptionButton.InitControlData;
const
  CEventDispIDs: array [0..5] of DWORD = (
    $0000080D, $0000080E, $000007E3, $0000081B, $00000819, $0000081A);
  CControlData: TControlData2 = (
    ClassID: '{3B06E951-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{2E705268-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 6;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnBeforeUpdate) - Cardinal(Self);
end;

procedure TAccessOptionButton.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _OptionButton;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessOptionButton.GetControlInterface: _OptionButton;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessOptionButton.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessOptionButton.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessOptionButton.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessOptionButton.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessOptionButton.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessOptionButton.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessOptionButton.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessOptionButton.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessOptionButton.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessOptionButton.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessOptionButton.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessOptionButton.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessOptionButton.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessOptionButton.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessOptionButton.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessOptionButton.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessOptionButton.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessOptionButton.Get_OldValue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldValue;
end;

function TAccessOptionButton.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessOptionButton.Get_Controls: Children;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessOptionButton.Get_Value: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Value;
end;

procedure TAccessOptionButton.Set_Value(pRet: OleVariant);
begin
  DefaultInterface.Set_Value(pRet);
end;

procedure TAccessOptionButton.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAccessOptionButton.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAccessOptionButton.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                          out pcxWidth: Integer; out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAccessOptionButton.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                          out pcxWidth: Integer; out pcyHeight: Integer; 
                                          varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAccessOptionButton.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAccessOptionButton.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAccessOptionButton.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAccessOptionButton.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAccessOptionButton.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAccessOptionButton.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

procedure TAccessOptionButton.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAccessOptionButton.Goto_;
begin
  DefaultInterface.Goto_;
end;

procedure TAccessOptionButton.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

function TAccessOptionButton._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessOptionButton.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessOptionButton.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessOptionButton.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessOptionButton.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                                   Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessOptionButton.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessToggleButton.InitControlData;
const
  CEventDispIDs: array [0..5] of DWORD = (
    $0000080D, $0000080E, $000007E3, $0000081B, $00000819, $0000081A);
  CControlData: TControlData2 = (
    ClassID: '{3B06E961-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{2E705266-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 6;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnBeforeUpdate) - Cardinal(Self);
end;

procedure TAccessToggleButton.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _ToggleButton;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessToggleButton.GetControlInterface: _ToggleButton;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessToggleButton.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessToggleButton.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessToggleButton.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessToggleButton.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessToggleButton.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessToggleButton.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessToggleButton.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessToggleButton.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessToggleButton.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessToggleButton.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessToggleButton.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessToggleButton.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessToggleButton.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessToggleButton.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessToggleButton.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessToggleButton.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessToggleButton.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessToggleButton.Get_OldValue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldValue;
end;

function TAccessToggleButton.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessToggleButton.Get_Controls: Children;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessToggleButton.Get_Value: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Value;
end;

procedure TAccessToggleButton.Set_Value(pRet: OleVariant);
begin
  DefaultInterface.Set_Value(pRet);
end;

function TAccessToggleButton.Get_PictureData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PictureData;
end;

procedure TAccessToggleButton.Set_PictureData(pRet: OleVariant);
begin
  DefaultInterface.Set_PictureData(pRet);
end;

function TAccessToggleButton.Get_ObjectPalette: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ObjectPalette;
end;

procedure TAccessToggleButton.Set_ObjectPalette(pRet: OleVariant);
begin
  DefaultInterface.Set_ObjectPalette(pRet);
end;

procedure TAccessToggleButton.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAccessToggleButton.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAccessToggleButton.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                          out pcxWidth: Integer; out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAccessToggleButton.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                          out pcxWidth: Integer; out pcyHeight: Integer; 
                                          varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAccessToggleButton.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAccessToggleButton.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAccessToggleButton.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAccessToggleButton.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAccessToggleButton.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAccessToggleButton.Undo;
begin
  DefaultInterface.Undo;
end;

procedure TAccessToggleButton.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

procedure TAccessToggleButton.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAccessToggleButton.Goto_;
begin
  DefaultInterface.Goto_;
end;

procedure TAccessToggleButton.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

function TAccessToggleButton._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessToggleButton.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessToggleButton.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessToggleButton.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessToggleButton.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                                   Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessToggleButton.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessRectangle.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID: '{3B06E949-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{2E705271-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 0;
    EventDispIDs: nil;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
end;

procedure TAccessRectangle.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _Rectangle;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessRectangle.GetControlInterface: _Rectangle;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessRectangle.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessRectangle.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessRectangle.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

procedure TAccessRectangle.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

function TAccessRectangle._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessRectangle.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessRectangle.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessRectangle.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessRectangle.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                                Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessRectangle.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessImage.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID: '{3B06E94D-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{2E705272-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 0;
    EventDispIDs: nil;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
end;

procedure TAccessImage.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _Image;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessImage.GetControlInterface: _Image;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessImage.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessImage.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessImage.Get_OldValue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldValue;
end;

function TAccessImage.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessImage.Get_Controls: Children;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessImage.Get_Hyperlink: _Hyperlink;
begin
    Result := DefaultInterface.Hyperlink;
end;

function TAccessImage.Get_PictureData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PictureData;
end;

procedure TAccessImage.Set_PictureData(pRet: OleVariant);
begin
  DefaultInterface.Set_PictureData(pRet);
end;

function TAccessImage.Get_ObjectPalette: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ObjectPalette;
end;

procedure TAccessImage.Set_ObjectPalette(pRet: OleVariant);
begin
  DefaultInterface.Set_ObjectPalette(pRet);
end;

procedure TAccessImage.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

procedure TAccessImage.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAccessImage.Goto_;
begin
  DefaultInterface.Goto_;
end;

procedure TAccessImage.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

function TAccessImage._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessImage.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessImage.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessImage.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessImage.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessImage.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessListBox.InitControlData;
const
  CEventDispIDs: array [0..5] of DWORD = (
    $0000080D, $0000080E, $000007E3, $0000081B, $00000819, $0000081A);
  CControlData: TControlData2 = (
    ClassID: '{3B06E959-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{2E705273-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 6;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnBeforeUpdate) - Cardinal(Self);
end;

procedure TAccessListBox.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _ListBox;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessListBox.GetControlInterface: _ListBox;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessListBox.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessListBox.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessListBox.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessListBox.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessListBox.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessListBox.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessListBox.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessListBox.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessListBox.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessListBox.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessListBox.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessListBox.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessListBox.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessListBox.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessListBox.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessListBox.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessListBox.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessListBox.Get_Column(Index: Integer; Row: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Column[Index, Row];
end;

function TAccessListBox.Get_Selected(lRow: Integer): Integer;
begin
    Result := DefaultInterface.Selected[lRow];
end;

procedure TAccessListBox.Set_Selected(lRow: Integer; pRet: Integer);
begin
  DefaultInterface.Selected[lRow] := pRet;
end;

function TAccessListBox.Get_OldValue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldValue;
end;

function TAccessListBox.Get_ItemData(Index: Integer): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ItemData[Index];
end;

function TAccessListBox.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessListBox.Get_Controls: Children;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessListBox.Get_ItemsSelected: _ItemsSelected;
begin
    Result := DefaultInterface.ItemsSelected;
end;

function TAccessListBox.Get_Hyperlink: _Hyperlink;
begin
    Result := DefaultInterface.Hyperlink;
end;

function TAccessListBox.Get_Value: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Value;
end;

procedure TAccessListBox.Set_Value(pRet: OleVariant);
begin
  DefaultInterface.Set_Value(pRet);
end;

function TAccessListBox.Get_Recordset: IDispatch;
begin
    Result := DefaultInterface.Recordset;
end;

procedure TAccessListBox._Set_Recordset(const pRet: IDispatch);
  { Warning: The property Recordset has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Recordset := pRet;
end;

function TAccessListBox.Get_SmartTags: _SmartTags;
begin
    Result := DefaultInterface.SmartTags;
end;

procedure TAccessListBox.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAccessListBox.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAccessListBox.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                     out pcxWidth: Integer; out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAccessListBox.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                     out pcxWidth: Integer; out pcyHeight: Integer; 
                                     varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAccessListBox.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAccessListBox.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAccessListBox.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAccessListBox.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAccessListBox.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAccessListBox.Undo;
begin
  DefaultInterface.Undo;
end;

procedure TAccessListBox.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

procedure TAccessListBox.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAccessListBox.Goto_;
begin
  DefaultInterface.Goto_;
end;

procedure TAccessListBox.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

function TAccessListBox._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessListBox.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessListBox.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessListBox.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessListBox.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                              Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

procedure TAccessListBox.AddItem(const Item: WideString);
begin
  DefaultInterface.AddItem(Item, EmptyParam);
end;

procedure TAccessListBox.AddItem(const Item: WideString; Index: OleVariant);
begin
  DefaultInterface.AddItem(Item, Index);
end;

procedure TAccessListBox.RemoveItem(Index: OleVariant);
begin
  DefaultInterface.RemoveItem(Index);
end;

function TAccessListBox.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessOptionGroup.InitControlData;
const
  CEventDispIDs: array [0..3] of DWORD = (
    $0000080D, $0000080E, $000007E3, $0000081B);
  CControlData: TControlData2 = (
    ClassID: '{3B06E955-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{2E705274-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 4;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnBeforeUpdate) - Cardinal(Self);
end;

procedure TAccessOptionGroup.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _OptionGroup;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessOptionGroup.GetControlInterface: _OptionGroup;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessOptionGroup.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessOptionGroup.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessOptionGroup.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessOptionGroup.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessOptionGroup.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessOptionGroup.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessOptionGroup.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessOptionGroup.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessOptionGroup.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessOptionGroup.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessOptionGroup.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessOptionGroup.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessOptionGroup.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessOptionGroup.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessOptionGroup.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessOptionGroup.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessOptionGroup.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessOptionGroup.Get_OldValue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldValue;
end;

function TAccessOptionGroup.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessOptionGroup.Get_Controls: Children;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessOptionGroup.Get_Value: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Value;
end;

procedure TAccessOptionGroup.Set_Value(pRet: OleVariant);
begin
  DefaultInterface.Set_Value(pRet);
end;

procedure TAccessOptionGroup.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAccessOptionGroup.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAccessOptionGroup.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                         out pcxWidth: Integer; out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAccessOptionGroup.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                         out pcxWidth: Integer; out pcyHeight: Integer; 
                                         varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAccessOptionGroup.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAccessOptionGroup.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAccessOptionGroup.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAccessOptionGroup.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAccessOptionGroup.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAccessOptionGroup.Undo;
begin
  DefaultInterface.Undo;
end;

procedure TAccessOptionGroup.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

procedure TAccessOptionGroup.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAccessOptionGroup.Goto_;
begin
  DefaultInterface.Goto_;
end;

procedure TAccessOptionGroup.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

function TAccessOptionGroup._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessOptionGroup.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessOptionGroup.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessOptionGroup.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessOptionGroup.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                                  Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessOptionGroup.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessTextBox.InitControlData;
const
  CEventDispIDs: array [0..8] of DWORD = (
    $0000080D, $0000080E, $0000081D, $000007E3, $0000081B, $00000819,
    $0000081A, $0000089D, $00000860);
  CControlData: TControlData2 = (
    ClassID: '{3B06E945-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{2E705275-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 9;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnBeforeUpdate) - Cardinal(Self);
end;

procedure TAccessTextBox.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _Textbox;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessTextBox.GetControlInterface: _Textbox;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessTextBox.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessTextBox.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessTextBox.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessTextBox.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessTextBox.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessTextBox.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessTextBox.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessTextBox.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessTextBox.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessTextBox.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessTextBox.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessTextBox.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessTextBox.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessTextBox.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessTextBox.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessTextBox.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessTextBox.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessTextBox.Get_OldValue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldValue;
end;

function TAccessTextBox.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessTextBox.Get_Controls: Children;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessTextBox.Get_Hyperlink: _Hyperlink;
begin
    Result := DefaultInterface.Hyperlink;
end;

function TAccessTextBox.Get_FormatConditions: FormatConditions;
begin
    Result := DefaultInterface.FormatConditions;
end;

function TAccessTextBox.Get_Value: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Value;
end;

procedure TAccessTextBox.Set_Value(pRet: OleVariant);
begin
  DefaultInterface.Set_Value(pRet);
end;

function TAccessTextBox.Get_SmartTags: _SmartTags;
begin
    Result := DefaultInterface.SmartTags;
end;

procedure TAccessTextBox.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAccessTextBox.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAccessTextBox.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                     out pcxWidth: Integer; out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAccessTextBox.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                     out pcxWidth: Integer; out pcyHeight: Integer; 
                                     varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAccessTextBox.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAccessTextBox.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAccessTextBox.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAccessTextBox.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAccessTextBox.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAccessTextBox.Undo;
begin
  DefaultInterface.Undo;
end;

procedure TAccessTextBox.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

procedure TAccessTextBox.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAccessTextBox.Goto_;
begin
  DefaultInterface.Goto_;
end;

procedure TAccessTextBox.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

function TAccessTextBox._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessTextBox.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessTextBox.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessTextBox.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessTextBox.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                              Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessTextBox.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessComboBox.InitControlData;
const
  CEventDispIDs: array [0..9] of DWORD = (
    $0000080D, $0000080E, $0000081D, $0000081E, $000007E3, $0000081B,
    $00000819, $0000081A, $0000089D, $00000860);
  CControlData: TControlData2 = (
    ClassID: '{3B06E95B-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{2E705276-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 10;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnBeforeUpdate) - Cardinal(Self);
end;

procedure TAccessComboBox.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _Combobox;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessComboBox.GetControlInterface: _Combobox;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessComboBox.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessComboBox.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessComboBox.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessComboBox.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessComboBox.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessComboBox.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessComboBox.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessComboBox.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessComboBox.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessComboBox.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessComboBox.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessComboBox.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessComboBox.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessComboBox.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessComboBox.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessComboBox.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessComboBox.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessComboBox.Get_Column(Index: Integer; Row: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Column[Index, Row];
end;

function TAccessComboBox.Get_OldValue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldValue;
end;

function TAccessComboBox.Get_ItemData(Index: Integer): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.ItemData[Index];
end;

function TAccessComboBox.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessComboBox.Get_Controls: Children;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessComboBox.Get_Hyperlink: _Hyperlink;
begin
    Result := DefaultInterface.Hyperlink;
end;

function TAccessComboBox.Get_FormatConditions: FormatConditions;
begin
    Result := DefaultInterface.FormatConditions;
end;

function TAccessComboBox.Get_Value: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Value;
end;

procedure TAccessComboBox.Set_Value(pRet: OleVariant);
begin
  DefaultInterface.Set_Value(pRet);
end;

function TAccessComboBox.Get_Recordset: IDispatch;
begin
    Result := DefaultInterface.Recordset;
end;

procedure TAccessComboBox._Set_Recordset(const pRet: IDispatch);
  { Warning: The property Recordset has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Recordset := pRet;
end;

function TAccessComboBox.Get_SmartTags: _SmartTags;
begin
    Result := DefaultInterface.SmartTags;
end;

function TAccessComboBox.Get_Selected(lRow: Integer): Integer;
begin
    Result := DefaultInterface.Selected[lRow];
end;

procedure TAccessComboBox.Set_Selected(lRow: Integer; pRet: Integer);
begin
  DefaultInterface.Selected[lRow] := pRet;
end;

function TAccessComboBox.Get_ItemsSelected: _ItemsSelected;
begin
    Result := DefaultInterface.ItemsSelected;
end;

procedure TAccessComboBox.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAccessComboBox.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAccessComboBox.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                      out pcxWidth: Integer; out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAccessComboBox.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                      out pcxWidth: Integer; out pcyHeight: Integer; 
                                      varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAccessComboBox.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAccessComboBox.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAccessComboBox.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAccessComboBox.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAccessComboBox.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAccessComboBox.Undo;
begin
  DefaultInterface.Undo;
end;

procedure TAccessComboBox.Dropdown;
begin
  DefaultInterface.Dropdown;
end;

procedure TAccessComboBox.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

procedure TAccessComboBox.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAccessComboBox.Goto_;
begin
  DefaultInterface.Goto_;
end;

procedure TAccessComboBox.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

function TAccessComboBox._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessComboBox.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessComboBox.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessComboBox.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessComboBox.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                               Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

procedure TAccessComboBox.AddItem(const Item: WideString);
begin
  DefaultInterface.AddItem(Item, EmptyParam);
end;

procedure TAccessComboBox.AddItem(const Item: WideString; Index: OleVariant);
begin
  DefaultInterface.AddItem(Item, Index);
end;

procedure TAccessComboBox.RemoveItem(Index: OleVariant);
begin
  DefaultInterface.RemoveItem(Index);
end;

function TAccessComboBox.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessSubForm.InitControlData;
const
  CEventDispIDs: array [0..1] of DWORD = (
    $000007E3, $0000081B);
  CControlData: TControlData2 = (
    ClassID: '{3B06E963-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{2E705277-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 2;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnEnter) - Cardinal(Self);
end;

procedure TAccessSubForm.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _SubForm;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessSubForm.GetControlInterface: _SubForm;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessSubForm.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessSubForm.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessSubForm.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessSubForm.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessSubForm.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessSubForm.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessSubForm.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessSubForm.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessSubForm.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessSubForm.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessSubForm.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessSubForm.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessSubForm.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessSubForm.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessSubForm.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessSubForm.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessSubForm.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessSubForm.Get_Form: AccessForm;
begin
    Result := DefaultInterface.Form;
end;

function TAccessSubForm.Get_Report: AccessReport;
begin
    Result := DefaultInterface.Report;
end;

function TAccessSubForm.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessSubForm.Get_Controls: Controls;
begin
    Result := DefaultInterface.Controls;
end;

procedure TAccessSubForm.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAccessSubForm.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAccessSubForm.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                     out pcxWidth: Integer; out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAccessSubForm.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                     out pcxWidth: Integer; out pcyHeight: Integer; 
                                     varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAccessSubForm.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAccessSubForm.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAccessSubForm.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAccessSubForm.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAccessSubForm.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAccessSubForm.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

function TAccessSubForm._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessSubForm.Goto_;
begin
  DefaultInterface.Goto_;
end;

procedure TAccessSubForm.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

procedure TAccessSubForm.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAccessSubForm.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessSubForm.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessSubForm.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessSubForm.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                              Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessSubForm.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessLine.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID: '{3B06E94B-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '';
    EventCount: 0;
    EventDispIDs: nil;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
end;

procedure TAccessLine.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _Line;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessLine.GetControlInterface: _Line;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessLine.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessLine.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessLine.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

procedure TAccessLine.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

function TAccessLine._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessLine.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessLine.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessLine.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessLine.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessLine.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessPageBreak.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID: '{3B06E95F-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '';
    EventCount: 0;
    EventDispIDs: nil;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
end;

procedure TAccessPageBreak.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _PageBreak;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessPageBreak.GetControlInterface: _PageBreak;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessPageBreak.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessPageBreak.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessPageBreak.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

procedure TAccessPageBreak.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

function TAccessPageBreak._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessPageBreak.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessPageBreak.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessPageBreak.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessPageBreak.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                                Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessPageBreak.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessSection.InitControlData;
const
  CEventDispIDs: array [0..0] of DWORD = (
    $000009B6);
  CControlData: TControlData2 = (
    ClassID: '{BC9E4355-F037-11CD-8701-00AA003F0F07}';
    EventIID: '{2E70527B-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 1;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnPaint) - Cardinal(Self);
end;

procedure TAccessSection.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _Section;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessSection.GetControlInterface: _Section;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessSection.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessSection.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessSection.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessSection.Get_Controls: Children;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessSection.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessSection.SetTabOrder;
begin
  DefaultInterface.SetTabOrder;
end;

procedure TAccessTabControl.InitControlData;
const
  CEventDispIDs: array [0..0] of DWORD = (
    $0000081D);
  CControlData: TControlData2 = (
    ClassID: '{3B06E970-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{2E705281-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 1;
    EventDispIDs: @CEventDispIDs;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := Cardinal(@@FOnChange) - Cardinal(Self);
end;

procedure TAccessTabControl.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _TabControl;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessTabControl.GetControlInterface: _TabControl;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessTabControl.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessTabControl.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessTabControl.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessTabControl.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessTabControl.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessTabControl.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessTabControl.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessTabControl.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessTabControl.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessTabControl.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessTabControl.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessTabControl.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessTabControl.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessTabControl.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessTabControl.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessTabControl.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessTabControl.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessTabControl.Get_OldValue: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.OldValue;
end;

function TAccessTabControl.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessTabControl.Get_Pages: Pages;
begin
    Result := DefaultInterface.Pages;
end;

function TAccessTabControl.Get_Value: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.Value;
end;

procedure TAccessTabControl.Set_Value(pRet: OleVariant);
begin
  DefaultInterface.Set_Value(pRet);
end;

procedure TAccessTabControl.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAccessTabControl.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAccessTabControl.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                        out pcxWidth: Integer; out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAccessTabControl.accLocation(out pxLeft: Integer; out pyTop: Integer; 
                                        out pcxWidth: Integer; out pcyHeight: Integer; 
                                        varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAccessTabControl.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAccessTabControl.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAccessTabControl.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAccessTabControl.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAccessTabControl.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAccessTabControl.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

function TAccessTabControl._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessTabControl.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessTabControl.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessTabControl.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessTabControl.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; 
                                 Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessTabControl.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessPage.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID: '{3B06E973-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{2E705282-92D1-43CC-A57B-ED48BCCC711D}';
    EventCount: 0;
    EventDispIDs: nil;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
end;

procedure TAccessPage.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _Page;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessPage.GetControlInterface: _Page;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessPage.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessPage.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessPage.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessPage.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessPage.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessPage.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessPage.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessPage.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessPage.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessPage.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessPage.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessPage.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessPage.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessPage.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessPage.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessPage.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessPage.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessPage.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessPage.Get_Controls: Children;
begin
    Result := DefaultInterface.Controls;
end;

function TAccessPage.Get_PictureData: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.PictureData;
end;

procedure TAccessPage.Set_PictureData(pRet: OleVariant);
begin
  DefaultInterface.Set_PictureData(pRet);
end;

procedure TAccessPage.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAccessPage.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAccessPage.accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                                  out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAccessPage.accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                                  out pcyHeight: Integer; varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAccessPage.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAccessPage.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAccessPage.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAccessPage.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAccessPage.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAccessPage.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

function TAccessPage._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessPage.Requery;
begin
  DefaultInterface.Requery;
end;

procedure TAccessPage.Goto_;
begin
  DefaultInterface.Goto_;
end;

procedure TAccessPage.SetFocus;
begin
  DefaultInterface.SetFocus;
end;

procedure TAccessPage.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessPage.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessPage.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessPage.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessPage.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure TAccessPage.SetTabOrder;
begin
  DefaultInterface.SetTabOrder;
end;

procedure TAccessLabel.InitControlData;
const
  CControlData: TControlData2 = (
    ClassID: '{3B06E947-E47C-11CD-8701-00AA003F0F07}';
    EventIID: '{3B06E982-E47C-11CD-8701-00AA003F0F07}';
    EventCount: 0;
    EventDispIDs: nil;
    LicenseKey: nil (*HR:$80040154*);
    Flags: $00000000;
    Version: 401);
begin
  ControlData := @CControlData;
end;

procedure TAccessLabel.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as _Label;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TAccessLabel.GetControlInterface: _Label;
begin
  CreateControl;
  Result := FIntf;
end;

function TAccessLabel.Get_accParent: IDispatch;
begin
    Result := DefaultInterface.accParent;
end;

function TAccessLabel.Get_accChild(varChild: OleVariant): IDispatch;
begin
    Result := DefaultInterface.accChild[varChild];
end;

function TAccessLabel.Get_accName(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accName[varChild];
end;

function TAccessLabel.Get_accValue(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accValue[varChild];
end;

function TAccessLabel.Get_accDescription(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDescription[varChild];
end;

function TAccessLabel.Get_accRole(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accRole[varChild];
end;

function TAccessLabel.Get_accState(varChild: OleVariant): OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accState[varChild];
end;

function TAccessLabel.Get_accHelp(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accHelp[varChild];
end;

function TAccessLabel.Get_accHelpTopic(out pszHelpFile: WideString; varChild: OleVariant): Integer;
begin
    Result := DefaultInterface.accHelpTopic[pszHelpFile, varChild];
end;

function TAccessLabel.Get_accKeyboardShortcut(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accKeyboardShortcut[varChild];
end;

function TAccessLabel.Get_accFocus: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accFocus;
end;

function TAccessLabel.Get_accSelection: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.accSelection;
end;

function TAccessLabel.Get_accDefaultAction(varChild: OleVariant): WideString;
begin
    Result := DefaultInterface.accDefaultAction[varChild];
end;

procedure TAccessLabel.Set_accName(varChild: OleVariant; const pszName: WideString);
  { Warning: The property accName has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accName := pszName;
end;

procedure TAccessLabel.Set_accValue(varChild: OleVariant; const pszValue: WideString);
  { Warning: The property accValue has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.accValue := pszValue;
end;

function TAccessLabel.Get_Application: AccessApplication;
begin
    Result := DefaultInterface.Application;
end;

function TAccessLabel.Get_Parent: IDispatch;
begin
    Result := DefaultInterface.Parent;
end;

function TAccessLabel.Get_Properties: Properties;
begin
    Result := DefaultInterface.Properties;
end;

function TAccessLabel.Get_Hyperlink: _Hyperlink;
begin
    Result := DefaultInterface.Hyperlink;
end;

function TAccessLabel.Get_SmartTags: _SmartTags;
begin
    Result := DefaultInterface.SmartTags;
end;

procedure TAccessLabel.accSelect(flagsSelect: Integer);
begin
  DefaultInterface.accSelect(flagsSelect, EmptyParam);
end;

procedure TAccessLabel.accSelect(flagsSelect: Integer; varChild: OleVariant);
begin
  DefaultInterface.accSelect(flagsSelect, varChild);
end;

procedure TAccessLabel.accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                                   out pcyHeight: Integer);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, EmptyParam);
end;

procedure TAccessLabel.accLocation(out pxLeft: Integer; out pyTop: Integer; out pcxWidth: Integer; 
                                   out pcyHeight: Integer; varChild: OleVariant);
begin
  DefaultInterface.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
end;

function TAccessLabel.accNavigate(navDir: Integer): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, EmptyParam);
end;

function TAccessLabel.accNavigate(navDir: Integer; varStart: OleVariant): OleVariant;
begin
  Result := DefaultInterface.accNavigate(navDir, varStart);
end;

function TAccessLabel.accHitTest(xLeft: Integer; yTop: Integer): OleVariant;
begin
  Result := DefaultInterface.accHitTest(xLeft, yTop);
end;

procedure TAccessLabel.accDoDefaultAction;
begin
  DefaultInterface.accDoDefaultAction(EmptyParam);
end;

procedure TAccessLabel.accDoDefaultAction(varChild: OleVariant);
begin
  DefaultInterface.accDoDefaultAction(varChild);
end;

procedure TAccessLabel.SizeToFit;
begin
  DefaultInterface.SizeToFit;
end;

function TAccessLabel._Evaluate(const bstrExpr: WideString; var ppsa: PSafeArray): OleVariant;
begin
  Result := DefaultInterface._Evaluate(bstrExpr, ppsa);
end;

procedure TAccessLabel.Move(Left: OleVariant);
begin
  DefaultInterface.Move(Left, EmptyParam, EmptyParam, EmptyParam);
end;

procedure TAccessLabel.Move(Left: OleVariant; Top: OleVariant);
begin
  DefaultInterface.Move(Left, Top, EmptyParam, EmptyParam);
end;

procedure TAccessLabel.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, EmptyParam);
end;

procedure TAccessLabel.Move(Left: OleVariant; Top: OleVariant; Width: OleVariant; Height: OleVariant);
begin
  DefaultInterface.Move(Left, Top, Width, Height);
end;

function TAccessLabel.IsMemberSafe(dispid: Integer): WordBool;
begin
  Result := DefaultInterface.IsMemberSafe(dispid);
end;

procedure Register;
begin
  RegisterComponents(dtlOcxPage, [TAccessControl, TAccessGroupLevel, TAttachment, TAccessCommandButton, 
    TAccessBoundObjectFrame, TAccessObjectFrame, TAccessCustomControl, TAccessCheckBox, TAccessOptionButton, 
    TAccessToggleButton, TAccessRectangle, TAccessImage, TAccessListBox, TAccessOptionGroup, 
    TAccessTextBox, TAccessComboBox, TAccessSubForm, TAccessLine, TAccessPageBreak, 
    TAccessSection, TAccessTabControl, TAccessPage, TAccessLabel]);
  RegisterComponents(dtlServerPage, [TFormatCondition, TAccessHyperlink, TAccessReferences, TAllForms, 
    TAllReports, TAllMacros, TAllModules, TAllTables, TAllQueries, 
    TAllViews, TAllStoredProcedures, TAllDatabaseDiagrams, TCurrentProject, TCurrentData, 
    TCodeProject, TCodeData, TPrinter, TAllFunctions, TAdditionalData, 
    TAutoCorrect, TDependencyObjects, TDependencyInfo, TSmartTags, TSmartTagAction, 
    TSmartTagActions, TSmartTagProperty, TSmartTagProperties, TSmartTag, TAccessForm, 
    TAccessReport, TMacroError, TTempVar, TTempVars]);
end;

end.
