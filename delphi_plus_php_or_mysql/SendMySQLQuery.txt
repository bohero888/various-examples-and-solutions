procedure TLogWindow.SendMySQLQuery(sMess: String);
var
	MySQL: PMYSQL;
	myResult: PMYSQL_RES;
        Field: PMYSQL_FIELD;
        FieldCount: Longword;
        Lengths: PMYSQL_LENGTHS;
	Row: PMYSQL_ROW;
	Buffer, Line, MyPass, MyUser, MyHost, MyQuery, MyDatabase, sHiddenPass: String;
	MyTime, MyPort, a, i, Width: Integer;

const
        Spaces = '                                                                                                                                                                                                ';
        Equals = '=========================================';
        Dashes = '-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' + '-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';

	procedure Fail(Msg: string = '');
	begin
		if Msg = '' then Msg := Format('%d - %s', [mysql_errno(MySQL), mysql_error(MySQL)]);
		Application.MessageBox(PChar(Msg),'Fatal Error',MB_OK+MB_ICONERROR+MB_DEFBUTTON1);
		LogWindow.AddLogInfo(Msg);
                Application.ProcessMessages;
                HaltNow := True;
	end;

begin
        HaltNow := False;
	MyHost := MainForm.MySQLHost.Text;
	MyPort := StrToIntDef(MainForm.MySQLPort.Text, MYSQL_PORT);
	MyUser := MainForm.MySQLUser.Text;
	MyPass := MainForm.MySQLPass.Text;
	MyTime := StrToIntDef(MainForm.MySQLTime.Text, 30);
        MyDatabase := MainForm.MySQLDatabase.Text;
	MyQuery := sMess;

        //SetLength(sHiddenPass, Length(MyPass));
        for a := 0 to Length(MyPass) do sHiddenPass := sHiddenPass + '*';

        if MyHost = '' then
	begin
		Application.MessageBox('Adres serwera MySQL nie mo¿e byæ ci¹giem pustym! SprawdŸ konfiguracjê...','B³¹d!',MB_OK+MB_ICONWARNING+MB_DEFBUTTON1);
		exit;
	end;

        if MyPort = 0 then
	begin
		Application.MessageBox('B³êdny port! SprawdŸ konfiguracjê...','B³¹d!',MB_OK+MB_ICONWARNING+MB_DEFBUTTON1);
		exit;
	end;

        if MyUser = '' then
	begin
		Application.MessageBox('Login nie mo¿e byæ ci¹giem pustym! SprawdŸ konfiguracjê...','B³¹d!',MB_OK+MB_ICONWARNING+MB_DEFBUTTON1);
		exit;
	end;

        if MyPass = '' then
	begin
		Application.MessageBox('Has³o nie mo¿e byæ ci¹giem pustym! SprawdŸ konfiguracjê...','B³¹d!',MB_OK+MB_ICONWARNING+MB_DEFBUTTON1);
		exit;
	end;

        if MyDatabase = '' then
	begin
		Application.MessageBox('Nazwa bazy danych nie mo¿e byæ ci¹giem pustym! SprawdŸ konfiguracjê...','B³¹d!',MB_OK+MB_ICONWARNING+MB_DEFBUTTON1);
		exit;
	end;

        if MyQuery = '' then
	begin
		Application.MessageBox('Kwerenda MySQL nie mo¿e byæ ci¹giem pustym! SprawdŸ konfiguracjê...','B³¹d!',MB_OK+MB_ICONWARNING+MB_DEFBUTTON1);
		exit;
	end;

        if MyTime = 0 then
	begin
		Application.MessageBox('B³êdny czas timeout! SprawdŸ konfiguracjê...','B³¹d!',MB_OK+MB_ICONWARNING+MB_DEFBUTTON1);
		exit;
	end;

        lsLog.Clear;

        MySQL := mysql_init(nil);
	if MySQL = nil then Fail('B³¹d utworzenia obiektu PMYSQL! Czy libMySQL.dll jest zainstalowane w systemie?');
	try
		if mysql_options(MySQL, MYSQL_OPT_CONNECT_TIMEOUT, @MyTime) <> 0 then Fail;

                if HaltNow then exit;

                LogWindow.AddLogInfo('Login: "' + MyUser + '". Has³o: "' + sHiddenPass + '"');
                LogWindow.AddLogInfo('£¹czenie z serwerem MySQL "' + MyHost + '"...');

		if mysql_real_connect(MySQL, pChar(MyHost), pChar(MyUser), pChar(MyPass), nil, MyPort, nil, Integer(False)) = nil then Fail;

                if HaltNow then exit;

		if mysql_get_host_info(MySQL) <> '' then LogWindow.AddLogInfo('Po³¹czony.');

                if HaltNow then exit;

		LogWindow.AddLogInfo('£¹czenie z baz¹ danych "' + MyDatabase + '"...');
		if mysql_select_db(MySQL, PChar(MyDatabase)) <> 0 then Fail();

                if HaltNow then exit;

		LogWindow.AddLogInfo('Wysy³anie kwerendy MySQL:');
                LogWindow.AddLogInfo(MyQuery);
		if mysql_query(MySQL, pChar(MyQuery)) <> 0 then Fail;

                if HaltNow then exit;

                LogWindow.AddLogInfo(Equals);

                myResult := mysql_use_result(MySQL);
                if myResult = nil then Fail;

                Line := '';
                Width := 0;

                Field := mysql_fetch_field(myResult);
                while Field <> nil do
                begin
                        if Line <> '' then
                        begin
                                AppendStr(Line, ' ');
                                Inc(Width);
                        end;

                        AppendStr(Line, Copy(Field.Name + Spaces, 1, Field.Length));
                        Inc(Width, Field.Length);

                        Field := mysql_fetch_field(myResult);
                end;

                LogWindow.AddLogInfo(Line);
                LogWindow.AddLogInfo(Copy(Dashes, 1, Width));

                FieldCount := mysql_num_fields(myResult);

                Row := mysql_fetch_row(myResult);
                while Row <> nil do
                begin
                        Line := '';
                        Lengths := mysql_fetch_lengths(myResult);

                        if Lengths = nil then Fail;

                        for I := 0 to FieldCount - 1 do
                        begin
                                if Line <> '' then AppendStr(Line, ' ');

                                SetString(Buffer, Row[I], Lengths[I]);
                                AppendStr(Line, copy(Buffer + Spaces, 1, mysql_fetch_field_direct(myResult, I).Length));
                        end;

                        LogWindow.AddLogInfo(Line);
                        Row := mysql_fetch_row(myResult);
                end;

                if mysql_eof(myResult) = 0 then Fail;

                LogWindow.AddLogInfo(Equals);

		LogWindow.AddLogInfo('Roz³¹czanie i zamykanie po³¹czenia...');
	finally
		mysql_close(MySQL);
	end;
end;